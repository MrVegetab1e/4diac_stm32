
f429_tcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034a4  08018bf8  08018bf8  00028bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c09c  0801c09c  0002c09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c0a4  0801c0a4  0002c0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c0a8  0801c0a8  0002c0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  0801c0ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
  8 .bss          00020b6c  20000084  20000084  00030084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20020bf0  20020bf0  00030084  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004bd5b  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008a6d  00000000  00000000  0007be0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002820  00000000  00000000  00084880  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000025f0  00000000  00000000  000870a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00019fbd  00000000  00000000  00089690  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c590  00000000  00000000  000a364d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000afbdd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ab08  00000000  00000000  000afc5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018be0 	.word	0x08018be0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08018be0 	.word	0x08018be0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200000a0 	.word	0x200000a0
 8000604:	200000f4 	.word	0x200000f4

08000608 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <vApplicationGetTimerTaskMemory+0x2c>)
 8000618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <vApplicationGetTimerTaskMemory+0x30>)
 800061e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000626:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	200002f4 	.word	0x200002f4
 8000638:	20000348 	.word	0x20000348

0800063c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0);
 8000644:	bf00      	nop
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <__io_putchar+0x2c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f9      	beq.n	8000646 <__io_putchar+0xa>
    USART1->DR = (uint8_t) ch;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <__io_putchar+0x2c>)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	605a      	str	r2, [r3, #4]
    return ch;
 800065a:	687b      	ldr	r3, [r7, #4]
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40011000 	.word	0x40011000

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fd1f 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f829 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f929 	bl	80008d0 <MX_GPIO_Init>
  MX_CRC_Init();
 800067e:	f000 f895 	bl	80007ac <MX_CRC_Init>
  MX_I2C2_Init();
 8000682:	f000 f8a7 	bl	80007d4 <MX_I2C2_Init>
  MX_RNG_Init();
 8000686:	f000 f8e5 	bl	8000854 <MX_RNG_Init>
  MX_USART1_UART_Init();
 800068a:	f000 f8f7 	bl	800087c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PCF8574_Init();
 800068e:	f000 fc83 	bl	8000f98 <PCF8574_Init>
  printf("ETH test\r\n");
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <main+0x54>)
 8000694:	f017 fb7a 	bl	8017d8c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <main+0x58>)
 800069a:	1d3c      	adds	r4, r7, #4
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fe04 	bl	80052bc <osThreadCreate>
 80006b4:	4602      	mov	r2, r0
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <main+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ba:	f004 fde8 	bl	800528e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	e7fe      	b.n	80006be <main+0x52>
 80006c0:	08018bf8 	.word	0x08018bf8
 80006c4:	08018c10 	.word	0x08018c10
 80006c8:	20019fe4 	.word	0x20019fe4

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f017 fada 	bl	8017c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <SystemClock_Config+0xd8>)
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <SystemClock_Config+0xd8>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xd8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <SystemClock_Config+0xdc>)
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xdc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000740:	23b4      	movs	r3, #180	; 0xb4
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f003 f879 	bl	8003848 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800075c:	f000 f980 	bl	8000a60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000760:	f003 f822 	bl	80037a8 <HAL_PWREx_EnableOverDrive>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800076a:	f000 f979 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2105      	movs	r1, #5
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fad3 	bl	8003d38 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000798:	f000 f962 	bl	8000a60 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_CRC_Init+0x20>)
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <MX_CRC_Init+0x24>)
 80007b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_CRC_Init+0x20>)
 80007b8:	f000 fdc0 	bl	800133c <HAL_CRC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007c2:	f000 f94d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20019fec 	.word	0x20019fec
 80007d0:	40023000 	.word	0x40023000

080007d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_I2C2_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_I2C2_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_I2C2_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <MX_I2C2_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_I2C2_Init+0x74>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_I2C2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_I2C2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_I2C2_Init+0x74>)
 8000812:	f001 ff9d 	bl	8002750 <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f920 	bl	8000a60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_I2C2_Init+0x74>)
 8000824:	f002 ff45 	bl	80036b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800082e:	f000 f917 	bl	8000a60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_I2C2_Init+0x74>)
 8000836:	f002 ff78 	bl	800372a <HAL_I2CEx_ConfigDigitalFilter>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f90e 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20019ff4 	.word	0x20019ff4
 800084c:	40005800 	.word	0x40005800
 8000850:	000186a0 	.word	0x000186a0

08000854 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_RNG_Init+0x20>)
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <MX_RNG_Init+0x24>)
 800085c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_RNG_Init+0x20>)
 8000860:	f003 fc6c 	bl	800413c <HAL_RNG_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800086a:	f000 f8f9 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2001a08c 	.word	0x2001a08c
 8000878:	50060800 	.word	0x50060800

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f003 ff1a 	bl	80046ec <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f8cf 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2001a048 	.word	0x2001a048
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4a39      	ldr	r2, [pc, #228]	; (80009d0 <MX_GPIO_Init+0x100>)
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <MX_GPIO_Init+0x100>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_GPIO_Init+0x100>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4a32      	ldr	r2, [pc, #200]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000908:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_GPIO_Init+0x100>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4a2b      	ldr	r2, [pc, #172]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4a24      	ldr	r2, [pc, #144]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x100>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <MX_GPIO_Init+0x100>)
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_GPIO_Init+0x100>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_GPIO_Init+0x100>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2120      	movs	r1, #32
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <MX_GPIO_Init+0x104>)
 8000978:	f001 feb6 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4815      	ldr	r0, [pc, #84]	; (80009d8 <MX_GPIO_Init+0x108>)
 8000982:	f001 feb1 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2102      	movs	r1, #2
 800098a:	4813      	ldr	r0, [pc, #76]	; (80009d8 <MX_GPIO_Init+0x108>)
 800098c:	f001 feac 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000990:	2320      	movs	r3, #32
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000998:	2301      	movs	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480b      	ldr	r0, [pc, #44]	; (80009d4 <MX_GPIO_Init+0x104>)
 80009a8:	f001 fcf4 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ac:	2303      	movs	r3, #3
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0x108>)
 80009c4:	f001 fce6 	bl	8002394 <HAL_GPIO_Init>

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009e4:	f004 f880 	bl	8004ae8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  osDelay(3000);
 80009e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ec:	f004 fcb2 	bl	8005354 <osDelay>
  osThreadDef(TCPServer, tcpecho_thread, osPriorityNormal, 0, 2048);
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <StartDefaultTask+0x54>)
 80009f2:	f107 040c 	add.w	r4, r7, #12
 80009f6:	461d      	mov	r5, r3
 80009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TCPTaskHandle = osThreadCreate(osThread(TCPServer), NULL);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 fc56 	bl	80052bc <osThreadCreate>
 8000a10:	4602      	mov	r2, r0
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <StartDefaultTask+0x58>)
 8000a14:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a16:	2101      	movs	r1, #1
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <StartDefaultTask+0x5c>)
 8000a1a:	f001 fe7e 	bl	800271a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <StartDefaultTask+0x5c>)
 8000a22:	f001 fe7a 	bl	800271a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2a:	f004 fc93 	bl	8005354 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a2e:	e7f2      	b.n	8000a16 <StartDefaultTask+0x3a>
 8000a30:	08018c38 	.word	0x08018c38
 8000a34:	20019fe8 	.word	0x20019fe8
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 fb53 	bl	80010f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010000 	.word	0x40010000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <Error_Handler+0x6>

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <HAL_MspInit+0x54>)
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_MspInit+0x54>)
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x54>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_MspInit+0x54>)
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_MspInit+0x54>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_MspInit+0x54>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	f06f 0001 	mvn.w	r0, #1
 8000aae:	f000 fc1b 	bl	80012e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_CRC_MspInit+0x3c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10d      	bne.n	8000aee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_CRC_MspInit+0x40>)
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_CRC_MspInit+0x40>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_CRC_MspInit+0x40>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023000 	.word	0x40023000
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_I2C_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b42:	2330      	movs	r3, #48	; 0x30
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b52:	2304      	movs	r3, #4
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <HAL_I2C_MspInit+0x8c>)
 8000b5e:	f001 fc19 	bl	8002394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40005800 	.word	0x40005800
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021c00 	.word	0x40021c00

08000b94 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_RNG_MspInit+0x3c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10d      	bne.n	8000bc2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_RNG_MspInit+0x40>)
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_RNG_MspInit+0x40>)
 8000bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_RNG_MspInit+0x40>)
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	50060800 	.word	0x50060800
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12c      	bne.n	8000c54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c44:	2307      	movs	r3, #7
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c50:	f001 fba0 	bl	8002394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	2019      	movs	r0, #25
 8000c7e:	f000 fb33 	bl	80012e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c82:	2019      	movs	r0, #25
 8000c84:	f000 fb4c 	bl	8001320 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <HAL_InitTick+0xa4>)
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_InitTick+0xa4>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6453      	str	r3, [r2, #68]	; 0x44
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_InitTick+0xa4>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fa12 	bl	80040d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cb4:	f003 f9fc 	bl	80040b0 <HAL_RCC_GetPCLK2Freq>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_InitTick+0xac>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <HAL_InitTick+0xb0>)
 8000cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_InitTick+0xac>)
 8000cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_InitTick+0xac>)
 8000cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_InitTick+0xac>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_InitTick+0xac>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <HAL_InitTick+0xac>)
 8000cee:	f003 fa4f 	bl	8004190 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d104      	bne.n	8000d02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_InitTick+0xac>)
 8000cfa:	f003 faa3 	bl	8004244 <HAL_TIM_Base_Start_IT>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	2001a09c 	.word	0x2001a09c
 8000d18:	40010000 	.word	0x40010000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d4e:	f003 fae9 	bl	8004324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2001a09c 	.word	0x2001a09c

08000d5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <ETH_IRQHandler+0x10>)
 8000d62:	f000 feed 	bl	8001b40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2001ba0c 	.word	0x2001ba0c

08000d70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d82:	68bc      	ldr	r4, [r7, #8]
 8000d84:	1c63      	adds	r3, r4, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	f3af 8000 	nop.w
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf0      	blt.n	8000d82 <_read+0x12>
	}

return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	371c      	adds	r7, #28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd90      	pop	{r4, r7, pc}

08000daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e009      	b.n	8000dd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc39 	bl	800063c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf1      	blt.n	8000dbc <_write+0x12>
	}
	return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x50>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x16>
		heap_end = &end;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <_sbrk+0x50>)
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <_sbrk+0x54>)
 8000df8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <_sbrk+0x50>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <_sbrk+0x50>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	466a      	mov	r2, sp
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d905      	bls.n	8000e1a <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <_sbrk+0x58>)
 8000e10:	220c      	movs	r2, #12
 8000e12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e18:	e006      	b.n	8000e28 <_sbrk+0x44>
	}

	heap_end += incr;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <_sbrk+0x50>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <_sbrk+0x50>)
 8000e24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000748 	.word	0x20000748
 8000e38:	20020bf0 	.word	0x20020bf0
 8000e3c:	20020be8 	.word	0x20020be8

08000e40 <_close>:

int _close(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e68:	605a      	str	r2, [r3, #4]
	return 0;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_isatty>:

int _isatty(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
	return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
void tcpecho_thread(void const * argument)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f007 fd25 	bl	8008928 <netconn_new_with_proto_and_callback>
 8000ede:	61f8      	str	r0, [r7, #28]

  if (conn!=NULL)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d051      	beq.n	8000f8a <tcpecho_thread+0xbe>
  {
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	2100      	movs	r1, #0
 8000eea:	69f8      	ldr	r0, [r7, #28]
 8000eec:	f007 fdbc 	bl	8008a68 <netconn_bind>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	76fb      	strb	r3, [r7, #27]

    if (err == ERR_OK)
 8000ef4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d13f      	bne.n	8000f7c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000efc:	21ff      	movs	r1, #255	; 0xff
 8000efe:	69f8      	ldr	r0, [r7, #28]
 8000f00:	f007 fdea 	bl	8008ad8 <netconn_listen_with_backlog>

      while (1)
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	69f8      	ldr	r0, [r7, #28]
 8000f0c:	f007 fe10 	bl	8008b30 <netconn_accept>
 8000f10:	4603      	mov	r3, r0
 8000f12:	76bb      	strb	r3, [r7, #26]

        /* Process the new connection. */
        if (accept_err == ERR_OK)
 8000f14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f3      	bne.n	8000f04 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK)
 8000f1c:	e01b      	b.n	8000f56 <tcpecho_thread+0x8a>
          {
            do
            {
              netbuf_data(buf, &data, &len);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	f107 020a 	add.w	r2, r7, #10
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f009 fcc9 	bl	800a8c0 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	68f9      	ldr	r1, [r7, #12]
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f007 ffbe 	bl	8008ebc <netconn_write_partly>

            }
            while (netbuf_next(buf) >= 0);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f009 fd06 	bl	800a954 <netbuf_next>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dae7      	bge.n	8000f1e <tcpecho_thread+0x52>

            netbuf_delete(buf);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 fc95 	bl	800a880 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 ff34 	bl	8008dcc <netconn_recv>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0d9      	beq.n	8000f1e <tcpecho_thread+0x52>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f008 f84d 	bl	800900c <netconn_close>
          netconn_delete(newconn);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 fd51 	bl	8008a1c <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000f7a:	e7c3      	b.n	8000f04 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fd4c 	bl	8008a1c <netconn_delete>
			printf(" can not bind TCP netconn\r\n");
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <tcpecho_thread+0xc8>)
 8000f86:	f016 ff01 	bl	8017d8c <puts>

    }
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	08018c54 	.word	0x08018c54

08000f98 <PCF8574_Init>:
 *      Author: vegetab1e
 */

#include "pcf8574.h"
/*初始化PCF8574*/
uint8_t PCF8574_Init(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af04      	add	r7, sp, #16
  uint8_t temp=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0xf0;
 8000fa2:	23f0      	movs	r3, #240	; 0xf0
 8000fa4:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Write(&hi2c2,PCF8574_ADDR,255,I2C_MEMADD_SIZE_8BIT,&data,1,0xff);
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	22ff      	movs	r2, #255	; 0xff
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <PCF8574_Init+0x58>)
 8000fba:	f001 fd01 	bl	80029c0 <HAL_I2C_Mem_Write>
  if(HAL_OK == HAL_I2C_Mem_Read(&hi2c2,PCF8574_ADDR|0x01,255,I2C_MEMADD_SIZE_8BIT,&temp,1,0xff)){
 8000fbe:	23ff      	movs	r3, #255	; 0xff
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	22ff      	movs	r2, #255	; 0xff
 8000fce:	2141      	movs	r1, #65	; 0x41
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <PCF8574_Init+0x58>)
 8000fd2:	f001 fdef 	bl	8002bb4 <HAL_I2C_Mem_Read>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d104      	bne.n	8000fe6 <PCF8574_Init+0x4e>
	printf("TEMP = %x!\r\n",temp);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <PCF8574_Init+0x5c>)
 8000fe2:	f016 fe5f 	bl	8017ca4 <iprintf>
  }
  return temp;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20019ff4 	.word	0x20019ff4
 8000ff4:	08018c70 	.word	0x08018c70

08000ff8 <PCF8574_ReadOneByte>:

/*读取PCF8574的8位IO值；返回读到的数据*/
uint8_t PCF8574_ReadOneByte(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af04      	add	r7, sp, #16
  uint8_t temp=0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c2,PCF8574_ADDR|0x01,255,I2C_MEMADD_SIZE_8BIT,&temp,1,0xff);
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	2141      	movs	r1, #65	; 0x41
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <PCF8574_ReadOneByte+0x2c>)
 8001016:	f001 fdcd 	bl	8002bb4 <HAL_I2C_Mem_Read>
  return temp;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20019ff4 	.word	0x20019ff4

08001028 <PCF8574_WriteOneByte>:

/*向PCF8574写入8位IO值；DataToWrite为要写入的数据*/
void PCF8574_WriteOneByte(uint8_t DataToWrite){
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c2,PCF8574_ADDR,255,I2C_MEMADD_SIZE_8BIT,&DataToWrite,1,0xff);
 8001032:	23ff      	movs	r3, #255	; 0xff
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <PCF8574_WriteOneByte+0x2c>)
 8001046:	f001 fcbb 	bl	80029c0 <HAL_I2C_Mem_Write>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20019ff4 	.word	0x20019ff4

08001058 <PCF8574_WriteBit>:

/*设置PCF8574某个IO的高低电平*/
//bit:要设置的IO编号，0~7
//sta:IO的状态，0或1
void PCF8574_WriteBit(uint8_t bit,uint8_t sta){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
  uint8_t data;
  data=PCF8574_ReadOneByte(); //先读出原来的数据
 8001068:	f7ff ffc6 	bl	8000ff8 <PCF8574_ReadOneByte>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  if(sta==0)
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <PCF8574_WriteBit+0x38>
	data&=~(1<<bit);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2201      	movs	r2, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	b25b      	sxtb	r3, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	b25a      	sxtb	r2, r3
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	4013      	ands	r3, r2
 800108a:	b25b      	sxtb	r3, r3
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e009      	b.n	80010a4 <PCF8574_WriteBit+0x4c>
  else
	data|=1<<bit;
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2201      	movs	r2, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	b25a      	sxtb	r2, r3
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4313      	orrs	r3, r2
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
  PCF8574_WriteOneByte(data); //写入新的数据
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffbe 	bl	8001028 <PCF8574_WriteOneByte>
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f8f8 	bl	80012d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fdc0 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fcbe 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	2001a0e4 	.word	0x2001a0e4

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2001a0e4 	.word	0x2001a0e4

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_Delay+0x40>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad2      	subs	r2, r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3f7      	bcc.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	4909      	ldr	r1, [pc, #36]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	f002 021f 	and.w	r2, r2, #31
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	490d      	ldr	r1, [pc, #52]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	4909      	ldr	r1, [pc, #36]	; (800126c <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	2201      	movs	r2, #1
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	401a      	ands	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b6:	2101      	movs	r1, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	1e59      	subs	r1, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff4e 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fa:	f7ff ff63 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 80012fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f7ff ffb3 	bl	8001270 <NVIC_EncodePriority>
 800130a:	4602      	mov	r2, r0
 800130c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff82 	bl	800121c <__NVIC_SetPriority>
}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff56 	bl	80011e0 <__NVIC_EnableIRQ>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	795b      	ldrb	r3, [r3, #5]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d105      	bne.n	8001364 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fbae 	bl	8000ac0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001384:	4baa      	ldr	r3, [pc, #680]	; (8001630 <HAL_ETH_Init+0x2bc>)
 8001386:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e185      	b.n	80016a6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f003 fbda 	bl	8004b68 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	4a9e      	ldr	r2, [pc, #632]	; (8001634 <HAL_ETH_Init+0x2c0>)
 80013ba:	4b9e      	ldr	r3, [pc, #632]	; (8001634 <HAL_ETH_Init+0x2c0>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c2:	6453      	str	r3, [r2, #68]	; 0x44
 80013c4:	4b9b      	ldr	r3, [pc, #620]	; (8001634 <HAL_ETH_Init+0x2c0>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013d0:	4a99      	ldr	r2, [pc, #612]	; (8001638 <HAL_ETH_Init+0x2c4>)
 80013d2:	4b99      	ldr	r3, [pc, #612]	; (8001638 <HAL_ETH_Init+0x2c4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013da:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013dc:	4996      	ldr	r1, [pc, #600]	; (8001638 <HAL_ETH_Init+0x2c4>)
 80013de:	4b96      	ldr	r3, [pc, #600]	; (8001638 <HAL_ETH_Init+0x2c4>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001400:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001402:	f7ff fe8d 	bl	8001120 <HAL_GetTick>
 8001406:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001408:	e011      	b.n	800142e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800140a:	f7ff fe89 	bl	8001120 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001418:	d909      	bls.n	800142e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e13b      	b.n	80016a6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e4      	bne.n	800140a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f023 031c 	bic.w	r3, r3, #28
 800144e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001450:	f002 fe0e 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8001454:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4a78      	ldr	r2, [pc, #480]	; (800163c <HAL_ETH_Init+0x2c8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d908      	bls.n	8001470 <HAL_ETH_Init+0xfc>
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4a77      	ldr	r2, [pc, #476]	; (8001640 <HAL_ETH_Init+0x2cc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d804      	bhi.n	8001470 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e027      	b.n	80014c0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	4a73      	ldr	r2, [pc, #460]	; (8001640 <HAL_ETH_Init+0x2cc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d908      	bls.n	800148a <HAL_ETH_Init+0x116>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	4a72      	ldr	r2, [pc, #456]	; (8001644 <HAL_ETH_Init+0x2d0>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d804      	bhi.n	800148a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f043 030c 	orr.w	r3, r3, #12
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	e01a      	b.n	80014c0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4a6d      	ldr	r2, [pc, #436]	; (8001644 <HAL_ETH_Init+0x2d0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d903      	bls.n	800149a <HAL_ETH_Init+0x126>
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4a6c      	ldr	r2, [pc, #432]	; (8001648 <HAL_ETH_Init+0x2d4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d911      	bls.n	80014be <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <HAL_ETH_Init+0x2d4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d908      	bls.n	80014b4 <HAL_ETH_Init+0x140>
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_ETH_Init+0x2d8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d804      	bhi.n	80014b4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e005      	b.n	80014c0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e000      	b.n	80014c0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014be:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fc19 	bl	8001d06 <HAL_ETH_WritePHYRegister>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014de:	6939      	ldr	r1, [r7, #16]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fca5 	bl	8001e30 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0d9      	b.n	80016a6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014f2:	20ff      	movs	r0, #255	; 0xff
 80014f4:	f7ff fe20 	bl	8001138 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a7 	beq.w	8001650 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001502:	f7ff fe0d 	bl	8001120 <HAL_GetTick>
 8001506:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	461a      	mov	r2, r3
 800150e:	2101      	movs	r1, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb90 	bl	8001c36 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001516:	f7ff fe03 	bl	8001120 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d90f      	bls.n	8001548 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800152c:	6939      	ldr	r1, [r7, #16]
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fc7e 	bl	8001e30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0ae      	b.n	80016a6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0da      	beq.n	8001508 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001552:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001556:	2100      	movs	r1, #0
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fbd4 	bl	8001d06 <HAL_ETH_WritePHYRegister>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fc60 	bl	8001e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001578:	2301      	movs	r3, #1
 800157a:	e094      	b.n	80016a6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff fdd0 	bl	8001120 <HAL_GetTick>
 8001580:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	461a      	mov	r2, r3
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fb53 	bl	8001c36 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001590:	f7ff fdc6 	bl	8001120 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d90f      	bls.n	80015c2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fc41 	bl	8001e30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e071      	b.n	80016a6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0da      	beq.n	8001582 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	461a      	mov	r2, r3
 80015d2:	2110      	movs	r1, #16
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fb2e 	bl	8001c36 <HAL_ETH_ReadPHYRegister>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00b      	beq.n	80015f8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fc22 	bl	8001e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015f4:	2301      	movs	r3, #1
 80015f6:	e056      	b.n	80016a6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	e002      	b.n	8001612 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	e037      	b.n	8001694 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e032      	b.n	8001694 <HAL_ETH_Init+0x320>
 800162e:	bf00      	nop
 8001630:	03938700 	.word	0x03938700
 8001634:	40023800 	.word	0x40023800
 8001638:	40013800 	.word	0x40013800
 800163c:	01312cff 	.word	0x01312cff
 8001640:	02160ebf 	.word	0x02160ebf
 8001644:	039386ff 	.word	0x039386ff
 8001648:	05f5e0ff 	.word	0x05f5e0ff
 800164c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001660:	4313      	orrs	r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	2100      	movs	r1, #0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fb4c 	bl	8001d06 <HAL_ETH_WritePHYRegister>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fbd8 	bl	8001e30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e00c      	b.n	80016a6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800168c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001690:	f7ff fd52 	bl	8001138 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fbca 	bl	8001e30 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop

080016b0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ETH_DMATxDescListInit+0x20>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e052      	b.n	8001776 <HAL_ETH_DMATxDescListInit+0xc6>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e030      	b.n	800174e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	4413      	add	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016fc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	461a      	mov	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	429a      	cmp	r2, r3
 800172e:	d908      	bls.n	8001742 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	015b      	lsls	r3, r3, #5
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	461a      	mov	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	e002      	b.n	8001748 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d3ca      	bcc.n	80016ec <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	3310      	adds	r3, #16
 8001762:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001782:	b480      	push	{r7}
 8001784:	b087      	sub	sp, #28
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_ETH_DMARxDescListInit+0x20>
 800179e:	2302      	movs	r3, #2
 80017a0:	e056      	b.n	8001850 <HAL_ETH_DMARxDescListInit+0xce>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2202      	movs	r2, #2
 80017ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e034      	b.n	8001828 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ce:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017d6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	429a      	cmp	r2, r3
 8001808:	d908      	bls.n	800181c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	015b      	lsls	r3, r3, #5
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	461a      	mov	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	e002      	b.n	8001822 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3c6      	bcc.n	80017be <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	330c      	adds	r3, #12
 800183c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_ETH_TransmitFrame+0x24>
 800187c:	2302      	movs	r3, #2
 800187e:	e0cd      	b.n	8001a1c <HAL_ETH_TransmitFrame+0x1c0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0b8      	b.n	8001a1c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da09      	bge.n	80018c8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2212      	movs	r2, #18
 80018b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0a9      	b.n	8001a1c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d915      	bls.n	80018fe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4a54      	ldr	r2, [pc, #336]	; (8001a28 <HAL_ETH_TransmitFrame+0x1cc>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0a9b      	lsrs	r3, r3, #10
 80018dc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <HAL_ETH_TransmitFrame+0x1cc>)
 80018e2:	fba3 1302 	umull	r1, r3, r3, r2
 80018e6:	0a9b      	lsrs	r3, r3, #10
 80018e8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e001      	b.n	8001902 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d11c      	bne.n	8001942 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001916:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001922:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001932:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001940:	e04b      	b.n	80019da <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	e044      	b.n	80019d2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001956:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d107      	bne.n	800196e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800196c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001976:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d116      	bne.n	80019b0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001990:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4a25      	ldr	r2, [pc, #148]	; (8001a2c <HAL_ETH_TransmitFrame+0x1d0>)
 8001996:	fb02 f203 	mul.w	r2, r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4413      	add	r3, r2
 800199e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019a2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ae:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019be:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	3301      	adds	r3, #1
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3b6      	bcc.n	8001948 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e2:	3314      	adds	r3, #20
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00d      	beq.n	8001a0a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	3314      	adds	r3, #20
 80019f8:	2204      	movs	r2, #4
 80019fa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a04:	3304      	adds	r3, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	ac02b00b 	.word	0xac02b00b
 8001a2c:	fffffa0c 	.word	0xfffffa0c

08001a30 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e074      	b.n	8001b34 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a5a:	e05a      	b.n	8001b12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d10d      	bne.n	8001a8e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8c:	e041      	b.n	8001b12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ab2:	e02e      	b.n	8001b12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d103      	bne.n	8001ad6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ae2:	1f1a      	subs	r2, r3, #4
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e010      	b.n	8001b34 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db02      	blt.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d99c      	bls.n	8001a5c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b50:	3314      	adds	r3, #20
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d112      	bne.n	8001b82 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f003 f8d1 	bl	8004d04 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	3314      	adds	r3, #20
 8001b6c:	2240      	movs	r2, #64	; 0x40
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b80:	e01b      	b.n	8001bba <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	3314      	adds	r3, #20
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d111      	bne.n	8001bba <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f839 	bl	8001c0e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba4:	3314      	adds	r3, #20
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bc8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bde:	d112      	bne.n	8001c06 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f81e 	bl	8001c22 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bee:	3314      	adds	r3, #20
 8001bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bf4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b82      	cmp	r3, #130	; 0x82
 8001c56:	d101      	bne.n	8001c5c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e050      	b.n	8001cfe <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2282      	movs	r2, #130	; 0x82
 8001c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 031c 	and.w	r3, r3, #28
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8a1b      	ldrh	r3, [r3, #16]
 8001c78:	02db      	lsls	r3, r3, #11
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f023 0302 	bic.w	r3, r3, #2
 8001c96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca8:	f7ff fa3a 	bl	8001120 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cae:	e015      	b.n	8001cdc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cb0:	f7ff fa36 	bl	8001120 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbe:	d309      	bcc.n	8001cd4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e014      	b.n	8001cfe <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1e4      	bne.n	8001cb0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b42      	cmp	r3, #66	; 0x42
 8001d26:	d101      	bne.n	8001d2c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e04e      	b.n	8001dca <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2242      	movs	r2, #66	; 0x42
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 031c 	and.w	r3, r3, #28
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8a1b      	ldrh	r3, [r3, #16]
 8001d48:	02db      	lsls	r3, r3, #11
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	b292      	uxth	r2, r2
 8001d78:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d82:	f7ff f9cd 	bl	8001120 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d88:	e015      	b.n	8001db6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d8a:	f7ff f9c9 	bl	8001120 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d309      	bcc.n	8001dae <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e00d      	b.n	8001dca <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e4      	bne.n	8001d8a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ETH_Start+0x16>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e01f      	b.n	8001e28 <HAL_ETH_Start+0x56>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fa19 	bl	8002230 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fa33 	bl	800226a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fa7d 	bl	8002304 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fa4a 	bl	80022a4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa5f 	bl	80022d4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0b0      	sub	sp, #192	; 0xc0
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e4c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e54:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e7c:	e001      	b.n	8001e82 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e86:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e9c:	2340      	movs	r3, #64	; 0x40
 8001e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f08:	4bab      	ldr	r3, [pc, #684]	; (80021b8 <ETH_MACDMAConfig+0x388>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f14:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f18:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f1c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f22:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f26:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f2a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f30:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f34:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f38:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f3c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f40:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f44:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f58:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff f8e7 	bl	8001138 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f72:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f7a:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f7c:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8001f7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f80:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8001f82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f86:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8001f88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f8c:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8001f8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f92:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8001f94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f98:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8001f9a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8001f9e:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fa0:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff f8c3 	bl	8001138 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fba:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fc4:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fce:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fde:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fec:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ff2:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ff4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ff8:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ffe:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002004:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002006:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800200a:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800200c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800201e:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff f884 	bl	8001138 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002038:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002042:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002046:	430a      	orrs	r2, r1
 8002048:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002054:	2001      	movs	r0, #1
 8002056:	f7ff f86f 	bl	8001138 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002062:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206c:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002072:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002076:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002088:	2304      	movs	r3, #4
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800208c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209c:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800209e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b8:	3318      	adds	r3, #24
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c4:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <ETH_MACDMAConfig+0x38c>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020cc:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020ce:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020d0:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020d2:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020d4:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020d6:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020d8:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020da:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020dc:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020de:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020e0:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020e2:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020e4:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020e8:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020ec:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002100:	3318      	adds	r3, #24
 8002102:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002106:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002110:	3318      	adds	r3, #24
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff f80d 	bl	8001138 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002126:	3318      	adds	r3, #24
 8002128:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800212c:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002136:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800213a:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 800213c:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800213e:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8002140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002142:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002146:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002148:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 800214a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800214c:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800214e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002156:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002166:	2001      	movs	r0, #1
 8002168:	f7fe ffe6 	bl	8001138 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002178:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10f      	bne.n	80021a2 <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218e:	331c      	adds	r3, #28
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800219e:	331c      	adds	r3, #28
 80021a0:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	461a      	mov	r2, r3
 80021a8:	2100      	movs	r1, #0
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f808 	bl	80021c0 <ETH_MACAddressConfig>
}
 80021b0:	bf00      	nop
 80021b2:	37c0      	adds	r7, #192	; 0xc0
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	ff20810f 	.word	0xff20810f
 80021bc:	f8de3f23 	.word	0xf8de3f23

080021c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3305      	adds	r3, #5
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3204      	adds	r2, #4
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <ETH_MACAddressConfig+0x68>)
 80021e2:	4413      	add	r3, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3303      	adds	r3, #3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	061a      	lsls	r2, r3, #24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3302      	adds	r3, #2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3301      	adds	r3, #1
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	4313      	orrs	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <ETH_MACAddressConfig+0x6c>)
 8002212:	4413      	add	r3, r2
 8002214:	461a      	mov	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6013      	str	r3, [r2, #0]
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40028040 	.word	0x40028040
 800222c:	40028044 	.word	0x40028044

08002230 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002254:	2001      	movs	r0, #1
 8002256:	f000 f87f 	bl	8002358 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f042 0204 	orr.w	r2, r2, #4
 8002284:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 f862 	bl	8002358 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b8:	3318      	adds	r3, #24
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022c0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80022c4:	3318      	adds	r3, #24
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e8:	3318      	adds	r3, #24
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f043 0202 	orr.w	r2, r3, #2
 80022f0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80022f4:	3318      	adds	r3, #24
 80022f6:	601a      	str	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231c:	3318      	adds	r3, #24
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002324:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002328:	3318      	adds	r3, #24
 800232a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	3318      	adds	r3, #24
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800233a:	2001      	movs	r0, #1
 800233c:	f000 f80c 	bl	8002358 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234a:	3318      	adds	r3, #24
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <ETH_Delay+0x34>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <ETH_Delay+0x38>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002374:	bf00      	nop
  } 
  while (Delay --);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	60fa      	str	r2, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f9      	bne.n	8002374 <ETH_Delay+0x1c>
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	20000000 	.word	0x20000000
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e177      	b.n	80026a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b0:	2201      	movs	r2, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	f040 8166 	bne.w	800269a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d005      	beq.n	80023e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d130      	bne.n	8002448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d017      	beq.n	8002484 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d123      	bne.n	80024d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	08da      	lsrs	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3208      	adds	r2, #8
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80c0 	beq.w	800269a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_GPIO_Init+0x320>)
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_GPIO_Init+0x320>)
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002528:	6453      	str	r3, [r2, #68]	; 0x44
 800252a:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <HAL_GPIO_Init+0x320>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002536:	4a60      	ldr	r2, [pc, #384]	; (80026b8 <HAL_GPIO_Init+0x324>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a57      	ldr	r2, [pc, #348]	; (80026bc <HAL_GPIO_Init+0x328>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d037      	beq.n	80025d2 <HAL_GPIO_Init+0x23e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a56      	ldr	r2, [pc, #344]	; (80026c0 <HAL_GPIO_Init+0x32c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d031      	beq.n	80025ce <HAL_GPIO_Init+0x23a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a55      	ldr	r2, [pc, #340]	; (80026c4 <HAL_GPIO_Init+0x330>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_GPIO_Init+0x236>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a54      	ldr	r2, [pc, #336]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x232>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a53      	ldr	r2, [pc, #332]	; (80026cc <HAL_GPIO_Init+0x338>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x22e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_GPIO_Init+0x33c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x22a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a51      	ldr	r2, [pc, #324]	; (80026d4 <HAL_GPIO_Init+0x340>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x226>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a50      	ldr	r2, [pc, #320]	; (80026d8 <HAL_GPIO_Init+0x344>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x222>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4f      	ldr	r2, [pc, #316]	; (80026dc <HAL_GPIO_Init+0x348>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x21e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4e      	ldr	r2, [pc, #312]	; (80026e0 <HAL_GPIO_Init+0x34c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x21a>
 80025aa:	2309      	movs	r3, #9
 80025ac:	e012      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ae:	230a      	movs	r3, #10
 80025b0:	e010      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025b2:	2308      	movs	r3, #8
 80025b4:	e00e      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025b6:	2307      	movs	r3, #7
 80025b8:	e00c      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00a      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025be:	2305      	movs	r3, #5
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x240>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e4:	4934      	ldr	r1, [pc, #208]	; (80026b8 <HAL_GPIO_Init+0x324>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f2:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <HAL_GPIO_Init+0x350>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002616:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_GPIO_Init+0x350>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800261c:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_GPIO_Init+0x350>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002640:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_GPIO_Init+0x350>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <HAL_GPIO_Init+0x350>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_GPIO_Init+0x350>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_GPIO_Init+0x350>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002694:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <HAL_GPIO_Init+0x350>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f ae84 	bls.w	80023b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	3724      	adds	r7, #36	; 0x24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40013800 	.word	0x40013800
 80026bc:	40020000 	.word	0x40020000
 80026c0:	40020400 	.word	0x40020400
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020c00 	.word	0x40020c00
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40021400 	.word	0x40021400
 80026d4:	40021800 	.word	0x40021800
 80026d8:	40021c00 	.word	0x40021c00
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40022400 	.word	0x40022400
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800272c:	887a      	ldrh	r2, [r7, #2]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	041a      	lsls	r2, r3, #16
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43d9      	mvns	r1, r3
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	400b      	ands	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e11f      	b.n	80029a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe f9c4 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b4:	f001 fc68 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 80027b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a7b      	ldr	r2, [pc, #492]	; (80029ac <HAL_I2C_Init+0x25c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d807      	bhi.n	80027d4 <HAL_I2C_Init+0x84>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a7a      	ldr	r2, [pc, #488]	; (80029b0 <HAL_I2C_Init+0x260>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e006      	b.n	80027e2 <HAL_I2C_Init+0x92>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a77      	ldr	r2, [pc, #476]	; (80029b4 <HAL_I2C_Init+0x264>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0db      	b.n	80029a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a72      	ldr	r2, [pc, #456]	; (80029b8 <HAL_I2C_Init+0x268>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	6852      	ldr	r2, [r2, #4]
 8002800:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4863      	ldr	r0, [pc, #396]	; (80029ac <HAL_I2C_Init+0x25c>)
 800281e:	4283      	cmp	r3, r0
 8002820:	d802      	bhi.n	8002828 <HAL_I2C_Init+0xd8>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	e009      	b.n	800283c <HAL_I2C_Init+0xec>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800282e:	fb00 f303 	mul.w	r3, r0, r3
 8002832:	4862      	ldr	r0, [pc, #392]	; (80029bc <HAL_I2C_Init+0x26c>)
 8002834:	fba0 0303 	umull	r0, r3, r0, r3
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	3301      	adds	r3, #1
 800283c:	430b      	orrs	r3, r1
 800283e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800284e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4955      	ldr	r1, [pc, #340]	; (80029ac <HAL_I2C_Init+0x25c>)
 8002858:	428b      	cmp	r3, r1
 800285a:	d80d      	bhi.n	8002878 <HAL_I2C_Init+0x128>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e59      	subs	r1, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fbb1 f3f3 	udiv	r3, r1, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b04      	cmp	r3, #4
 8002872:	bf38      	it	cc
 8002874:	2304      	movcc	r3, #4
 8002876:	e04f      	b.n	8002918 <HAL_I2C_Init+0x1c8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_I2C_Init+0x154>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e5c      	subs	r4, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Init+0x17a>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e5c      	subs	r4, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb4 f3f3 	udiv	r3, r4, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x182>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_I2C_Init+0x1c8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_I2C_Init+0x1a8>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e5c      	subs	r4, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Init+0x1c8>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e5c      	subs	r4, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb4 f3f3 	udiv	r3, r4, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002918:	4313      	orrs	r3, r2
 800291a:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	69d0      	ldr	r0, [r2, #28]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a12      	ldr	r2, [r2, #32]
 8002932:	4302      	orrs	r2, r0
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	6908      	ldr	r0, [r1, #16]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68c9      	ldr	r1, [r1, #12]
 8002952:	4301      	orrs	r1, r0
 8002954:	430b      	orrs	r3, r1
 8002956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6950      	ldr	r0, [r2, #20]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6992      	ldr	r2, [r2, #24]
 800296e:	4302      	orrs	r2, r0
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	000186a0 	.word	0x000186a0
 80029b0:	001e847f 	.word	0x001e847f
 80029b4:	003d08ff 	.word	0x003d08ff
 80029b8:	431bde83 	.word	0x431bde83
 80029bc:	10624dd3 	.word	0x10624dd3

080029c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7fe fba1 	bl	8001120 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	f040 80d9 	bne.w	8002ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2319      	movs	r3, #25
 80029f4:	2201      	movs	r2, #1
 80029f6:	496d      	ldr	r1, [pc, #436]	; (8002bac <HAL_I2C_Mem_Write+0x1ec>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fc7d 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0cc      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Mem_Write+0x56>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0c5      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a4d      	ldr	r2, [pc, #308]	; (8002bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7e:	88f8      	ldrh	r0, [r7, #6]
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fab6 	bl	8003000 <I2C_RequestMemoryWrite>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d052      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e081      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fcfe 	bl	80034a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d107      	bne.n	8002ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d11b      	bne.n	8002b40 <HAL_I2C_Mem_Write+0x180>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d017      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1aa      	bne.n	8002a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fcea 	bl	8003526 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e016      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	00100002 	.word	0x00100002
 8002bb0:	ffff0000 	.word	0xffff0000

08002bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bce:	f7fe faa7 	bl	8001120 <HAL_GetTick>
 8002bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	f040 8208 	bne.w	8002ff2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	497b      	ldr	r1, [pc, #492]	; (8002dd8 <HAL_I2C_Mem_Read+0x224>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fb83 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e1fb      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Mem_Read+0x56>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e1f4      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d007      	beq.n	8002c30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2222      	movs	r2, #34	; 0x22
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <HAL_I2C_Mem_Read+0x228>)
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c72:	88f8      	ldrh	r0, [r7, #6]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	8979      	ldrh	r1, [r7, #10]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4603      	mov	r3, r0
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fa50 	bl	8003128 <I2C_RequestMemoryRead>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1b0      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d113      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e184      	b.n	8002fcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d11b      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e164      	b.n	8002fcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d11b      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	e144      	b.n	8002fcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d58:	e138      	b.n	8002fcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	f200 80f1 	bhi.w	8002f46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d123      	bne.n	8002db4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fc19 	bl	80035a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e139      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	6912      	ldr	r2, [r2, #16]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db2:	e10b      	b.n	8002fcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d14e      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <HAL_I2C_Mem_Read+0x22c>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa96 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e10e      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
 8002dd6:	bf00      	nop
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000
 8002de0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	6912      	ldr	r2, [r2, #16]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	6912      	ldr	r2, [r2, #16]
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e58:	e0b8      	b.n	8002fcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2200      	movs	r2, #0
 8002e62:	4966      	ldr	r1, [pc, #408]	; (8002ffc <HAL_I2C_Mem_Read+0x448>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa47 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0bf      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	6912      	ldr	r2, [r2, #16]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	494f      	ldr	r1, [pc, #316]	; (8002ffc <HAL_I2C_Mem_Read+0x448>)
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fa19 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e091      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	6912      	ldr	r2, [r2, #16]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	6912      	ldr	r2, [r2, #16]
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f44:	e042      	b.n	8002fcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fb2c 	bl	80035a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e04c      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	6912      	ldr	r2, [r2, #16]
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d118      	bne.n	8002fcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	6912      	ldr	r2, [r2, #16]
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f aec2 	bne.w	8002d5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3728      	adds	r7, #40	; 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010004 	.word	0x00010004

08003000 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003028:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	2200      	movs	r2, #0
 8003032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f95e 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003050:	d103      	bne.n	800305a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e05e      	b.n	800311c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	897a      	ldrh	r2, [r7, #10]
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800306a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	492c      	ldr	r1, [pc, #176]	; (8003124 <I2C_RequestMemoryWrite+0x124>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f997 	bl	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e04c      	b.n	800311c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	6a39      	ldr	r1, [r7, #32]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fa01 	bl	80034a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d107      	bne.n	80030c0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e02b      	b.n	800311c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	893a      	ldrh	r2, [r7, #8]
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	611a      	str	r2, [r3, #16]
 80030d4:	e021      	b.n	800311a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	893a      	ldrh	r2, [r7, #8]
 80030dc:	0a12      	lsrs	r2, r2, #8
 80030de:	b292      	uxth	r2, r2
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	6a39      	ldr	r1, [r7, #32]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f9db 	bl	80034a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d107      	bne.n	800310c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e005      	b.n	800311c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	893a      	ldrh	r2, [r7, #8]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	00010002 	.word	0x00010002

08003128 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	4608      	mov	r0, r1
 8003132:	4611      	mov	r1, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4603      	mov	r3, r0
 8003138:	817b      	strh	r3, [r7, #10]
 800313a:	460b      	mov	r3, r1
 800313c:	813b      	strh	r3, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003150:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003160:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	2200      	movs	r2, #0
 800316a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f8c2 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003188:	d103      	bne.n	8003192 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0a9      	b.n	80032ea <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	897a      	ldrh	r2, [r7, #10]
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	4952      	ldr	r1, [pc, #328]	; (80032f4 <I2C_RequestMemoryRead+0x1cc>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f8fb 	bl	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e097      	b.n	80032ea <I2C_RequestMemoryRead+0x1c2>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	6a39      	ldr	r1, [r7, #32]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f965 	bl	80034a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d107      	bne.n	80031f8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e076      	b.n	80032ea <I2C_RequestMemoryRead+0x1c2>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	893a      	ldrh	r2, [r7, #8]
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	611a      	str	r2, [r3, #16]
 800320c:	e021      	b.n	8003252 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	893a      	ldrh	r2, [r7, #8]
 8003214:	0a12      	lsrs	r2, r2, #8
 8003216:	b292      	uxth	r2, r2
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321e:	6a39      	ldr	r1, [r7, #32]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f93f 	bl	80034a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	2b04      	cmp	r3, #4
 8003232:	d107      	bne.n	8003244 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003242:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e050      	b.n	80032ea <I2C_RequestMemoryRead+0x1c2>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	893a      	ldrh	r2, [r7, #8]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f924 	bl	80034a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e035      	b.n	80032ea <I2C_RequestMemoryRead+0x1c2>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	2200      	movs	r2, #0
 8003296:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f82c 	bl	80032f8 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryRead+0x19a>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b4:	d103      	bne.n	80032be <I2C_RequestMemoryRead+0x196>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e013      	b.n	80032ea <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	897a      	ldrh	r2, [r7, #10]
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	4907      	ldr	r1, [pc, #28]	; (80032f4 <I2C_RequestMemoryRead+0x1cc>)
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f864 	bl	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <I2C_RequestMemoryRead+0x1c0>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <I2C_RequestMemoryRead+0x1c2>
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	00010002 	.word	0x00010002

080032f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003308:	e025      	b.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003310:	d021      	beq.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fd ff05 	bl	8001120 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d802      	bhi.n	8003328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d116      	bne.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f043 0220 	orr.w	r2, r3, #32
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e023      	b.n	800339e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10d      	bne.n	800337c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	e00c      	b.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	429a      	cmp	r2, r3
 800339a:	d0b6      	beq.n	800330a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b4:	e051      	b.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c4:	d123      	bne.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f043 0204 	orr.w	r2, r3, #4
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e046      	b.n	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003414:	d021      	beq.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fd fe83 	bl	8001120 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	1ad2      	subs	r2, r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	d802      	bhi.n	800342c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e020      	b.n	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10c      	bne.n	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4013      	ands	r3, r2
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	bf14      	ite	ne
 8003476:	2301      	movne	r3, #1
 8003478:	2300      	moveq	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e00b      	b.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	43da      	mvns	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf14      	ite	ne
 8003490:	2301      	movne	r3, #1
 8003492:	2300      	moveq	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d18d      	bne.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b0:	e02d      	b.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f8ce 	bl	8003654 <I2C_IsAcknowledgeFailed>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e02d      	b.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c8:	d021      	beq.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ca:	f7fd fe29 	bl	8001120 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	1ad2      	subs	r2, r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d802      	bhi.n	80034e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d116      	bne.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f043 0220 	orr.w	r2, r3, #32
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e007      	b.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d1ca      	bne.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003532:	e02d      	b.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f88d 	bl	8003654 <I2C_IsAcknowledgeFailed>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e02d      	b.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354a:	d021      	beq.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354c:	f7fd fde8 	bl	8001120 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	1ad2      	subs	r2, r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	d802      	bhi.n	8003562 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d116      	bne.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e007      	b.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d1ca      	bne.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035b4:	e042      	b.n	800363c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d119      	bne.n	80035f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0210 	mvn.w	r2, #16
 80035cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e029      	b.n	800364c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f8:	f7fd fd92 	bl	8001120 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	1ad2      	subs	r2, r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	429a      	cmp	r2, r3
 8003606:	d802      	bhi.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e007      	b.n	800364c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d1b5      	bne.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366a:	d11b      	bne.n	80036a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003674:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f043 0204 	orr.w	r2, r3, #4
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d129      	bne.n	800371c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ea:	f022 0210 	bic.w	r2, r2, #16
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	d12a      	bne.n	800379a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	f023 030f 	bic.w	r3, r3, #15
 800376a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b29a      	uxth	r2, r3
 8003770:	89fb      	ldrh	r3, [r7, #14]
 8003772:	4313      	orrs	r3, r2
 8003774:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	89fa      	ldrh	r2, [r7, #14]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4a20      	ldr	r2, [pc, #128]	; (8003838 <HAL_PWREx_EnableOverDrive+0x90>)
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_PWREx_EnableOverDrive+0x90>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_PWREx_EnableOverDrive+0x90>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_PWREx_EnableOverDrive+0x94>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d4:	f7fd fca4 	bl	8001120 <HAL_GetTick>
 80037d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037da:	e009      	b.n	80037f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037dc:	f7fd fca0 	bl	8001120 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ea:	d901      	bls.n	80037f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e01f      	b.n	8003830 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d1ee      	bne.n	80037dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003804:	f7fd fc8c 	bl	8001120 <HAL_GetTick>
 8003808:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380a:	e009      	b.n	8003820 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800380c:	f7fd fc88 	bl	8001120 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800381a:	d901      	bls.n	8003820 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e007      	b.n	8003830 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <HAL_PWREx_EnableOverDrive+0x98>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382c:	d1ee      	bne.n	800380c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	420e0040 	.word	0x420e0040
 8003840:	40007000 	.word	0x40007000
 8003844:	420e0044 	.word	0x420e0044

08003848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e264      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003866:	4ba3      	ldr	r3, [pc, #652]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d00c      	beq.n	800388c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003872:	4ba0      	ldr	r3, [pc, #640]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800387a:	2b08      	cmp	r3, #8
 800387c:	d112      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387e:	4b9d      	ldr	r3, [pc, #628]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b99      	ldr	r3, [pc, #612]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d157      	bne.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e23f      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x74>
 80038ae:	4a91      	ldr	r2, [pc, #580]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	4b90      	ldr	r3, [pc, #576]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4a8b      	ldr	r2, [pc, #556]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	4b8a      	ldr	r3, [pc, #552]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4a88      	ldr	r2, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038e0:	4a84      	ldr	r2, [pc, #528]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038e2:	4b84      	ldr	r3, [pc, #528]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fc0e 	bl	8001120 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fc0a 	bl	8001120 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e204      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xc0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd fbfa 	bl	8001120 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003930:	f7fd fbf6 	bl	8001120 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e1f0      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395e:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396a:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003972:	2b08      	cmp	r3, #8
 8003974:	d11c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1c4      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399a:	4956      	ldr	r1, [pc, #344]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	e03a      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b8:	4b4f      	ldr	r3, [pc, #316]	; (8003af8 <HAL_RCC_OscConfig+0x2b0>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fbaf 	bl	8001120 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fd fbab 	bl	8001120 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1a5      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4943      	ldr	r1, [pc, #268]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <HAL_RCC_OscConfig+0x2b0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fb8e 	bl	8001120 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a08:	f7fd fb8a 	bl	8001120 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e184      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d030      	beq.n	8003a94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x2b4>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fb6e 	bl	8001120 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd fb6a 	bl	8001120 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e164      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x200>
 8003a66:	e015      	b.n	8003a94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_OscConfig+0x2b4>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fb57 	bl	8001120 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd fb53 	bl	8001120 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e14d      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a0 	beq.w	8003be2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x2b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d121      	bne.n	8003b22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <HAL_RCC_OscConfig+0x2b8>)
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_RCC_OscConfig+0x2b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aea:	f7fd fb19 	bl	8001120 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	e011      	b.n	8003b16 <HAL_RCC_OscConfig+0x2ce>
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
 8003b00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fd fb0c 	bl	8001120 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e106      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b85      	ldr	r3, [pc, #532]	; (8003d2c <HAL_RCC_OscConfig+0x4e4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
 8003b2a:	4a81      	ldr	r2, [pc, #516]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
 8003b36:	e01c      	b.n	8003b72 <HAL_RCC_OscConfig+0x32a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d10c      	bne.n	8003b5a <HAL_RCC_OscConfig+0x312>
 8003b40:	4a7b      	ldr	r2, [pc, #492]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b42:	4b7b      	ldr	r3, [pc, #492]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4c:	4a78      	ldr	r2, [pc, #480]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b4e:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	e00b      	b.n	8003b72 <HAL_RCC_OscConfig+0x32a>
 8003b5a:	4a75      	ldr	r2, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b5c:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	4a72      	ldr	r2, [pc, #456]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b68:	4b71      	ldr	r3, [pc, #452]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d015      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fad1 	bl	8001120 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fd facd 	bl	8001120 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e0c5      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	4b65      	ldr	r3, [pc, #404]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ee      	beq.n	8003b82 <HAL_RCC_OscConfig+0x33a>
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fd fabb 	bl	8001120 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd fab7 	bl	8001120 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0af      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4a56      	ldr	r2, [pc, #344]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 809b 	beq.w	8003d22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d05c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d141      	bne.n	8003c84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c00:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <HAL_RCC_OscConfig+0x4ec>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fd fa8b 	bl	8001120 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fd fa87 	bl	8001120 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e081      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c20:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c2c:	4940      	ldr	r1, [pc, #256]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCC_OscConfig+0x4ec>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fa60 	bl	8001120 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd fa5c 	bl	8001120 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e056      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x41c>
 8003c82:	e04e      	b.n	8003d22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c84:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <HAL_RCC_OscConfig+0x4ec>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fa49 	bl	8001120 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c92:	f7fd fa45 	bl	8001120 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e03f      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x44a>
 8003cb0:	e037      	b.n	8003d22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e032      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <HAL_RCC_OscConfig+0x4e8>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d028      	beq.n	8003d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d121      	bne.n	8003d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d11a      	bne.n	8003d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cee:	4013      	ands	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cf4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	40023800 	.word	0x40023800
 8003d34:	42470060 	.word	0x42470060

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d20c      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b65      	ldr	r3, [pc, #404]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 020f 	and.w	r2, r3, #15
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b8      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d8c:	4a59      	ldr	r2, [pc, #356]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da4:	4a53      	ldr	r2, [pc, #332]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4950      	ldr	r1, [pc, #320]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d044      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d119      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e06f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e067      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4937      	ldr	r1, [pc, #220]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 0203 	bic.w	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fd f97a 	bl	8001120 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fd f976 	bl	8001120 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90c      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 020f 	and.w	r2, r3, #15
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e032      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4919      	ldr	r1, [pc, #100]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eaa:	4912      	ldr	r1, [pc, #72]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ebe:	f000 f821 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	5cd3      	ldrb	r3, [r2, r3]
 8003ed2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fec2 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023c00 	.word	0x40023c00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	0801be7c 	.word	0x0801be7c
 8003efc:	20000000 	.word	0x20000000
 8003f00:	20000004 	.word	0x20000004

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f08:	b087      	sub	sp, #28
 8003f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	60fa      	str	r2, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	617a      	str	r2, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8003f18:	2200      	movs	r2, #0
 8003f1a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f1c:	4a51      	ldr	r2, [pc, #324]	; (8004064 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f1e:	6892      	ldr	r2, [r2, #8]
 8003f20:	f002 020c 	and.w	r2, r2, #12
 8003f24:	2a04      	cmp	r2, #4
 8003f26:	d007      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f28:	2a08      	cmp	r2, #8
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2c:	2a00      	cmp	r2, #0
 8003f2e:	f040 8090 	bne.w	8004052 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f32:	4b4d      	ldr	r3, [pc, #308]	; (8004068 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f34:	613b      	str	r3, [r7, #16]
       break;
 8003f36:	e08f      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f38:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_RCC_GetSysClockFreq+0x168>)
 8003f3a:	613b      	str	r3, [r7, #16]
      break;
 8003f3c:	e08c      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3e:	4a49      	ldr	r2, [pc, #292]	; (8004064 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f40:	6852      	ldr	r2, [r2, #4]
 8003f42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003f46:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f48:	4a46      	ldr	r2, [pc, #280]	; (8004064 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f4a:	6852      	ldr	r2, [r2, #4]
 8003f4c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d023      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	f04f 0400 	mov.w	r4, #0
 8003f5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	ea03 0301 	and.w	r3, r3, r1
 8003f6a:	ea04 0402 	and.w	r4, r4, r2
 8003f6e:	4a3f      	ldr	r2, [pc, #252]	; (800406c <HAL_RCC_GetSysClockFreq+0x168>)
 8003f70:	fb02 f104 	mul.w	r1, r2, r4
 8003f74:	2200      	movs	r2, #0
 8003f76:	fb02 f203 	mul.w	r2, r2, r3
 8003f7a:	440a      	add	r2, r1
 8003f7c:	493b      	ldr	r1, [pc, #236]	; (800406c <HAL_RCC_GetSysClockFreq+0x168>)
 8003f7e:	fba3 0101 	umull	r0, r1, r3, r1
 8003f82:	1853      	adds	r3, r2, r1
 8003f84:	4619      	mov	r1, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f04f 0400 	mov.w	r4, #0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	f7fc f986 	bl	80002a0 <__aeabi_uldivmod>
 8003f94:	4603      	mov	r3, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e04c      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4a31      	ldr	r2, [pc, #196]	; (8004064 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f9e:	6852      	ldr	r2, [r2, #4]
 8003fa0:	0992      	lsrs	r2, r2, #6
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003fac:	f04f 0600 	mov.w	r6, #0
 8003fb0:	ea05 0501 	and.w	r5, r5, r1
 8003fb4:	ea06 0602 	and.w	r6, r6, r2
 8003fb8:	4629      	mov	r1, r5
 8003fba:	4632      	mov	r2, r6
 8003fbc:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003fc0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003fc4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003fc8:	4651      	mov	r1, sl
 8003fca:	465a      	mov	r2, fp
 8003fcc:	46aa      	mov	sl, r5
 8003fce:	46b3      	mov	fp, r6
 8003fd0:	4655      	mov	r5, sl
 8003fd2:	465e      	mov	r6, fp
 8003fd4:	1b4d      	subs	r5, r1, r5
 8003fd6:	eb62 0606 	sbc.w	r6, r2, r6
 8003fda:	4629      	mov	r1, r5
 8003fdc:	4632      	mov	r2, r6
 8003fde:	0194      	lsls	r4, r2, #6
 8003fe0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fe4:	018b      	lsls	r3, r1, #6
 8003fe6:	1a5b      	subs	r3, r3, r1
 8003fe8:	eb64 0402 	sbc.w	r4, r4, r2
 8003fec:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003ff0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003ff4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003ff8:	4643      	mov	r3, r8
 8003ffa:	464c      	mov	r4, r9
 8003ffc:	4655      	mov	r5, sl
 8003ffe:	465e      	mov	r6, fp
 8004000:	18ed      	adds	r5, r5, r3
 8004002:	eb46 0604 	adc.w	r6, r6, r4
 8004006:	462b      	mov	r3, r5
 8004008:	4634      	mov	r4, r6
 800400a:	02a2      	lsls	r2, r4, #10
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800401e:	4618      	mov	r0, r3
 8004020:	4621      	mov	r1, r4
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f04f 0400 	mov.w	r4, #0
 8004028:	461a      	mov	r2, r3
 800402a:	4623      	mov	r3, r4
 800402c:	f7fc f938 	bl	80002a0 <__aeabi_uldivmod>
 8004030:	4603      	mov	r3, r0
 8004032:	460c      	mov	r4, r1
 8004034:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_GetSysClockFreq+0x160>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	0c1b      	lsrs	r3, r3, #16
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	3301      	adds	r3, #1
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	613b      	str	r3, [r7, #16]
      break;
 8004050:	e002      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetSysClockFreq+0x164>)
 8004054:	613b      	str	r3, [r7, #16]
      break;
 8004056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004058:	693b      	ldr	r3, [r7, #16]
}
 800405a:	4618      	mov	r0, r3
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400
 800406c:	017d7840 	.word	0x017d7840

08004070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCC_GetHCLKFreq+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000000 	.word	0x20000000

08004088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800408c:	f7ff fff0 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8004090:	4601      	mov	r1, r0
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	0a9b      	lsrs	r3, r3, #10
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4a03      	ldr	r2, [pc, #12]	; (80040ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800409e:	5cd3      	ldrb	r3, [r2, r3]
 80040a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40023800 	.word	0x40023800
 80040ac:	0801be8c 	.word	0x0801be8c

080040b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040b4:	f7ff ffdc 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 80040b8:	4601      	mov	r1, r0
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0b5b      	lsrs	r3, r3, #13
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4a03      	ldr	r2, [pc, #12]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40023800 	.word	0x40023800
 80040d4:	0801be8c 	.word	0x0801be8c

080040d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	220f      	movs	r2, #15
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_RCC_GetClockConfig+0x60>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	40023c00 	.word	0x40023c00

0800413c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e01c      	b.n	8004188 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	795b      	ldrb	r3, [r3, #5]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fd18 	bl	8000b94 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	f042 0204 	orr.w	r2, r2, #4
 8004178:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e041      	b.n	8004226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f839 	bl	800422e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 f9d8 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e04e      	b.n	80042fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a23      	ldr	r2, [pc, #140]	; (8004308 <HAL_TIM_Base_Start_IT+0xc4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d022      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d01d      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1f      	ldr	r2, [pc, #124]	; (800430c <HAL_TIM_Base_Start_IT+0xc8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d018      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <HAL_TIM_Base_Start_IT+0xcc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <HAL_TIM_Base_Start_IT+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00e      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d009      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_TIM_Base_Start_IT+0xd8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x80>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_TIM_Base_Start_IT+0xdc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d111      	bne.n	80042e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d010      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e6:	e007      	b.n	80042f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40010400 	.word	0x40010400
 800431c:	40014000 	.word	0x40014000
 8004320:	40001800 	.word	0x40001800

08004324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0202 	mvn.w	r2, #2
 8004350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8ee 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8e0 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8f1 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0204 	mvn.w	r2, #4
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f8c4 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8b6 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f8c7 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0208 	mvn.w	r2, #8
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2204      	movs	r2, #4
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f89a 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f88c 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f89d 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b10      	cmp	r3, #16
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b10      	cmp	r3, #16
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0210 	mvn.w	r2, #16
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2208      	movs	r2, #8
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f870 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f862 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f873 	bl	800455c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0201 	mvn.w	r2, #1
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fc faca 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f902 	bl	80046d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f838 	bl	8004570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0220 	mvn.w	r2, #32
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f8cc 	bl	80046c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a40      	ldr	r2, [pc, #256]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3d      	ldr	r2, [pc, #244]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <TIM_Base_SetConfig+0x114>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d027      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d023      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d017      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a28      	ldr	r2, [pc, #160]	; (80046ac <TIM_Base_SetConfig+0x128>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <TIM_Base_SetConfig+0x130>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a25      	ldr	r2, [pc, #148]	; (80046b8 <TIM_Base_SetConfig+0x134>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <TIM_Base_SetConfig+0x138>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <TIM_Base_SetConfig+0x13c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d108      	bne.n	8004648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d103      	bne.n	8004684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	615a      	str	r2, [r3, #20]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40010400 	.word	0x40010400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800
 80046b8:	40001800 	.word	0x40001800
 80046bc:	40001c00 	.word	0x40001c00
 80046c0:	40002000 	.word	0x40002000

080046c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03f      	b.n	800477e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fa60 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	68d2      	ldr	r2, [r2, #12]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f829 	bl	8004788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	6912      	ldr	r2, [r2, #16]
 8004740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	6952      	ldr	r2, [r2, #20]
 8004750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	68d2      	ldr	r2, [r2, #12]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	b091      	sub	sp, #68	; 0x44
 800478e:	af00      	add	r7, sp, #0
 8004790:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	4313      	orrs	r3, r2
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80047ce:	f022 020c 	bic.w	r2, r2, #12
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4bba      	ldr	r3, [pc, #744]	; (8004adc <UART_SetConfig+0x354>)
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d004      	beq.n	8004802 <UART_SetConfig+0x7a>
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4bb8      	ldr	r3, [pc, #736]	; (8004ae0 <UART_SetConfig+0x358>)
 80047fe:	429a      	cmp	r2, r3
 8004800:	d103      	bne.n	800480a <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004802:	f7ff fc55 	bl	80040b0 <HAL_RCC_GetPCLK2Freq>
 8004806:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004808:	e002      	b.n	8004810 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800480a:	f7ff fc3d 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 800480e:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004818:	f040 80a7 	bne.w	800496a <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	62ba      	str	r2, [r7, #40]	; 0x28
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	4619      	mov	r1, r3
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	460b      	mov	r3, r1
 800482c:	4614      	mov	r4, r2
 800482e:	18db      	adds	r3, r3, r3
 8004830:	eb44 0404 	adc.w	r4, r4, r4
 8004834:	185b      	adds	r3, r3, r1
 8004836:	eb44 0402 	adc.w	r4, r4, r2
 800483a:	00e0      	lsls	r0, r4, #3
 800483c:	6178      	str	r0, [r7, #20]
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004844:	6178      	str	r0, [r7, #20]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800484e:	185d      	adds	r5, r3, r1
 8004850:	eb44 0602 	adc.w	r6, r4, r2
 8004854:	4628      	mov	r0, r5
 8004856:	4631      	mov	r1, r6
 8004858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f04f 0400 	mov.w	r4, #0
 8004860:	18db      	adds	r3, r3, r3
 8004862:	eb44 0404 	adc.w	r4, r4, r4
 8004866:	461a      	mov	r2, r3
 8004868:	4623      	mov	r3, r4
 800486a:	f7fb fd19 	bl	80002a0 <__aeabi_uldivmod>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	461a      	mov	r2, r3
 8004874:	4b9b      	ldr	r3, [pc, #620]	; (8004ae4 <UART_SetConfig+0x35c>)
 8004876:	fba3 2302 	umull	r2, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	011e      	lsls	r6, r3, #4
 800487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004880:	4619      	mov	r1, r3
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	460b      	mov	r3, r1
 8004888:	4614      	mov	r4, r2
 800488a:	18db      	adds	r3, r3, r3
 800488c:	eb44 0404 	adc.w	r4, r4, r4
 8004890:	185b      	adds	r3, r3, r1
 8004892:	eb44 0402 	adc.w	r4, r4, r2
 8004896:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800489a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800489e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80048a2:	4653      	mov	r3, sl
 80048a4:	465c      	mov	r4, fp
 80048a6:	eb13 0a01 	adds.w	sl, r3, r1
 80048aa:	eb44 0b02 	adc.w	fp, r4, r2
 80048ae:	4650      	mov	r0, sl
 80048b0:	4659      	mov	r1, fp
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f04f 0400 	mov.w	r4, #0
 80048ba:	18db      	adds	r3, r3, r3
 80048bc:	eb44 0404 	adc.w	r4, r4, r4
 80048c0:	461a      	mov	r2, r3
 80048c2:	4623      	mov	r3, r4
 80048c4:	f7fb fcec 	bl	80002a0 <__aeabi_uldivmod>
 80048c8:	4603      	mov	r3, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b85      	ldr	r3, [pc, #532]	; (8004ae4 <UART_SetConfig+0x35c>)
 80048d0:	fba3 1302 	umull	r1, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	2164      	movs	r1, #100	; 0x64
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	3332      	adds	r3, #50	; 0x32
 80048e2:	4a80      	ldr	r2, [pc, #512]	; (8004ae4 <UART_SetConfig+0x35c>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048f0:	441e      	add	r6, r3
 80048f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4614      	mov	r4, r2
 80048fe:	18db      	adds	r3, r3, r3
 8004900:	eb44 0404 	adc.w	r4, r4, r4
 8004904:	185b      	adds	r3, r3, r1
 8004906:	eb44 0402 	adc.w	r4, r4, r2
 800490a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800490e:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8004912:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8004916:	4643      	mov	r3, r8
 8004918:	464c      	mov	r4, r9
 800491a:	eb13 0801 	adds.w	r8, r3, r1
 800491e:	eb44 0902 	adc.w	r9, r4, r2
 8004922:	4640      	mov	r0, r8
 8004924:	4649      	mov	r1, r9
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	18db      	adds	r3, r3, r3
 8004930:	eb44 0404 	adc.w	r4, r4, r4
 8004934:	461a      	mov	r2, r3
 8004936:	4623      	mov	r3, r4
 8004938:	f7fb fcb2 	bl	80002a0 <__aeabi_uldivmod>
 800493c:	4603      	mov	r3, r0
 800493e:	460c      	mov	r4, r1
 8004940:	461a      	mov	r2, r3
 8004942:	4b68      	ldr	r3, [pc, #416]	; (8004ae4 <UART_SetConfig+0x35c>)
 8004944:	fba3 1302 	umull	r1, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	2164      	movs	r1, #100	; 0x64
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	3332      	adds	r3, #50	; 0x32
 8004956:	4a63      	ldr	r2, [pc, #396]	; (8004ae4 <UART_SetConfig+0x35c>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	4433      	add	r3, r6
 8004964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004966:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004968:	e0b3      	b.n	8004ad2 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004972:	4619      	mov	r1, r3
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	460b      	mov	r3, r1
 800497a:	4614      	mov	r4, r2
 800497c:	18db      	adds	r3, r3, r3
 800497e:	eb44 0404 	adc.w	r4, r4, r4
 8004982:	185b      	adds	r3, r3, r1
 8004984:	eb44 0402 	adc.w	r4, r4, r2
 8004988:	00e6      	lsls	r6, r4, #3
 800498a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800498e:	00dd      	lsls	r5, r3, #3
 8004990:	462b      	mov	r3, r5
 8004992:	4634      	mov	r4, r6
 8004994:	185d      	adds	r5, r3, r1
 8004996:	eb44 0602 	adc.w	r6, r4, r2
 800499a:	4628      	mov	r0, r5
 800499c:	4631      	mov	r1, r6
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	00a5      	lsls	r5, r4, #2
 80049a8:	62fd      	str	r5, [r7, #44]	; 0x2c
 80049aa:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80049ac:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80049b0:	62fd      	str	r5, [r7, #44]	; 0x2c
 80049b2:	009c      	lsls	r4, r3, #2
 80049b4:	62bc      	str	r4, [r7, #40]	; 0x28
 80049b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049ba:	f7fb fc71 	bl	80002a0 <__aeabi_uldivmod>
 80049be:	4603      	mov	r3, r0
 80049c0:	460c      	mov	r4, r1
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <UART_SetConfig+0x35c>)
 80049c6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	011d      	lsls	r5, r3, #4
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	4619      	mov	r1, r3
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4614      	mov	r4, r2
 80049da:	18db      	adds	r3, r3, r3
 80049dc:	eb44 0404 	adc.w	r4, r4, r4
 80049e0:	185b      	adds	r3, r3, r1
 80049e2:	eb44 0402 	adc.w	r4, r4, r2
 80049e6:	00e0      	lsls	r0, r4, #3
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	00d8      	lsls	r0, r3, #3
 80049f4:	60b8      	str	r0, [r7, #8]
 80049f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80049fa:	eb13 0801 	adds.w	r8, r3, r1
 80049fe:	eb44 0902 	adc.w	r9, r4, r2
 8004a02:	4640      	mov	r0, r8
 8004a04:	4649      	mov	r1, r9
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f04f 0400 	mov.w	r4, #0
 8004a0e:	00a6      	lsls	r6, r4, #2
 8004a10:	627e      	str	r6, [r7, #36]	; 0x24
 8004a12:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8004a14:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8004a18:	627e      	str	r6, [r7, #36]	; 0x24
 8004a1a:	009c      	lsls	r4, r3, #2
 8004a1c:	623c      	str	r4, [r7, #32]
 8004a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a22:	f7fb fc3d 	bl	80002a0 <__aeabi_uldivmod>
 8004a26:	4603      	mov	r3, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <UART_SetConfig+0x35c>)
 8004a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	2164      	movs	r1, #100	; 0x64
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	3332      	adds	r3, #50	; 0x32
 8004a40:	4a28      	ldr	r2, [pc, #160]	; (8004ae4 <UART_SetConfig+0x35c>)
 8004a42:	fba2 1303 	umull	r1, r3, r2, r3
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a4c:	441d      	add	r5, r3
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	4619      	mov	r1, r3
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4614      	mov	r4, r2
 8004a5a:	18db      	adds	r3, r3, r3
 8004a5c:	eb44 0404 	adc.w	r4, r4, r4
 8004a60:	185b      	adds	r3, r3, r1
 8004a62:	eb44 0402 	adc.w	r4, r4, r2
 8004a66:	00e0      	lsls	r0, r4, #3
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	00d8      	lsls	r0, r3, #3
 8004a74:	6038      	str	r0, [r7, #0]
 8004a76:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004a7a:	eb13 0801 	adds.w	r8, r3, r1
 8004a7e:	eb44 0902 	adc.w	r9, r4, r2
 8004a82:	4640      	mov	r0, r8
 8004a84:	4649      	mov	r1, r9
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f04f 0400 	mov.w	r4, #0
 8004a8e:	00a6      	lsls	r6, r4, #2
 8004a90:	61fe      	str	r6, [r7, #28]
 8004a92:	69fe      	ldr	r6, [r7, #28]
 8004a94:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8004a98:	61fe      	str	r6, [r7, #28]
 8004a9a:	009c      	lsls	r4, r3, #2
 8004a9c:	61bc      	str	r4, [r7, #24]
 8004a9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa2:	f7fb fbfd 	bl	80002a0 <__aeabi_uldivmod>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <UART_SetConfig+0x35c>)
 8004aae:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2164      	movs	r1, #100	; 0x64
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <UART_SetConfig+0x35c>)
 8004ac2:	fba2 1303 	umull	r1, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	442b      	add	r3, r5
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	6093      	str	r3, [r2, #8]
}
 8004ad2:	bf00      	nop
 8004ad4:	3744      	adds	r7, #68	; 0x44
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	51eb851f 	.word	0x51eb851f

08004ae8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004aee:	2100      	movs	r1, #0
 8004af0:	2000      	movs	r0, #0
 8004af2:	f006 f88b 	bl	800ac0c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <MX_LWIP_Init+0x68>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <MX_LWIP_Init+0x6c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <MX_LWIP_Init+0x70>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
    netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <MX_LWIP_Init+0x74>)
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <MX_LWIP_Init+0x78>)
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <MX_LWIP_Init+0x70>)
 8004b16:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <MX_LWIP_Init+0x6c>)
 8004b18:	490d      	ldr	r1, [pc, #52]	; (8004b50 <MX_LWIP_Init+0x68>)
 8004b1a:	4812      	ldr	r0, [pc, #72]	; (8004b64 <MX_LWIP_Init+0x7c>)
 8004b1c:	f00b fc2c 	bl	8010378 <netif_add>

    /* Registers the default network interface */
    netif_set_default(&gnetif);
 8004b20:	4810      	ldr	r0, [pc, #64]	; (8004b64 <MX_LWIP_Init+0x7c>)
 8004b22:	f00b fd21 	bl	8010568 <netif_set_default>

    if (netif_is_link_up(&gnetif))
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <MX_LWIP_Init+0x7c>)
 8004b28:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <MX_LWIP_Init+0x54>
    {
      /* When the netif is fully configured this function must be called */
      netif_set_up(&gnetif);
 8004b34:	480b      	ldr	r0, [pc, #44]	; (8004b64 <MX_LWIP_Init+0x7c>)
 8004b36:	f00b fd27 	bl	8010588 <netif_set_up>
 8004b3a:	e002      	b.n	8004b42 <MX_LWIP_Init+0x5a>
    }
    else
    {
      /* When the netif link is down this function must be called */
      netif_set_down(&gnetif);
 8004b3c:	4809      	ldr	r0, [pc, #36]	; (8004b64 <MX_LWIP_Init+0x7c>)
 8004b3e:	f00b fd71 	bl	8010624 <netif_set_down>
    }

    /* Start DHCP negotiation for a network interface (IPv4) */
    dhcp_start(&gnetif);
 8004b42:	4808      	ldr	r0, [pc, #32]	; (8004b64 <MX_LWIP_Init+0x7c>)
 8004b44:	f006 ff66 	bl	800ba14 <dhcp_start>

  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  }
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2001a130 	.word	0x2001a130
 8004b54:	2001a134 	.word	0x2001a134
 8004b58:	2001a138 	.word	0x2001a138
 8004b5c:	0800ab09 	.word	0x0800ab09
 8004b60:	080051d1 	.word	0x080051d1
 8004b64:	2001a0f0 	.word	0x2001a0f0

08004b68 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08e      	sub	sp, #56	; 0x38
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a59      	ldr	r2, [pc, #356]	; (8004cec <HAL_ETH_MspInit+0x184>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f040 80ac 	bne.w	8004ce4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004b92:	4b57      	ldr	r3, [pc, #348]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9c:	4b54      	ldr	r3, [pc, #336]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	4a50      	ldr	r2, [pc, #320]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004bae:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb8:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	4a49      	ldr	r2, [pc, #292]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004bca:	4b49      	ldr	r3, [pc, #292]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd4:	4b46      	ldr	r3, [pc, #280]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	4a42      	ldr	r2, [pc, #264]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004be6:	4b42      	ldr	r3, [pc, #264]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f043 0304 	orr.w	r3, r3, #4
 8004bee:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0c:	4b38      	ldr	r3, [pc, #224]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	4a34      	ldr	r2, [pc, #208]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f043 0302 	orr.w	r3, r3, #2
 8004c26:	6313      	str	r3, [r2, #48]	; 0x30
 8004c28:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	4a2d      	ldr	r2, [pc, #180]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c42:	6313      	str	r3, [r2, #48]	; 0x30
 8004c44:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <HAL_ETH_MspInit+0x188>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004c50:	2332      	movs	r3, #50	; 0x32
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c54:	2302      	movs	r3, #2
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c60:	230b      	movs	r3, #11
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4822      	ldr	r0, [pc, #136]	; (8004cf4 <HAL_ETH_MspInit+0x18c>)
 8004c6c:	f7fd fb92 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004c70:	2386      	movs	r3, #134	; 0x86
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c74:	2302      	movs	r3, #2
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c80:	230b      	movs	r3, #11
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c88:	4619      	mov	r1, r3
 8004c8a:	481b      	ldr	r0, [pc, #108]	; (8004cf8 <HAL_ETH_MspInit+0x190>)
 8004c8c:	f7fd fb82 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	2302      	movs	r3, #2
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ca2:	230b      	movs	r3, #11
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004caa:	4619      	mov	r1, r3
 8004cac:	4813      	ldr	r0, [pc, #76]	; (8004cfc <HAL_ETH_MspInit+0x194>)
 8004cae:	f7fd fb71 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004cb2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cc4:	230b      	movs	r3, #11
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ccc:	4619      	mov	r1, r3
 8004cce:	480c      	ldr	r0, [pc, #48]	; (8004d00 <HAL_ETH_MspInit+0x198>)
 8004cd0:	f7fd fb60 	bl	8002394 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2105      	movs	r1, #5
 8004cd8:	203d      	movs	r0, #61	; 0x3d
 8004cda:	f7fc fb05 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004cde:	203d      	movs	r0, #61	; 0x3d
 8004ce0:	f7fc fb1e 	bl	8001320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	3738      	adds	r7, #56	; 0x38
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40028000 	.word	0x40028000
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40020800 	.word	0x40020800
 8004cf8:	40020000 	.word	0x40020000
 8004cfc:	40020400 	.word	0x40020400
 8004d00:	40021800 	.word	0x40021800

08004d04 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <HAL_ETH_RxCpltCallback+0x1c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fc51 	bl	80055b8 <osSemaphoreRelease>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2000074c 	.word	0x2000074c

08004d24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d24:	b5b0      	push	{r4, r5, r7, lr}
 8004d26:	b090      	sub	sp, #64	; 0x40
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

  uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d30:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <low_level_init+0x19c>)
 8004d32:	4a64      	ldr	r2, [pc, #400]	; (8004ec4 <low_level_init+0x1a0>)
 8004d34:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004d36:	4b62      	ldr	r3, [pc, #392]	; (8004ec0 <low_level_init+0x19c>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004d3c:	4b60      	ldr	r3, [pc, #384]	; (8004ec0 <low_level_init+0x19c>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004d4e:	23e1      	movs	r3, #225	; 0xe1
 8004d50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x29;
 8004d60:	2329      	movs	r3, #41	; 0x29
 8004d62:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004d66:	4a56      	ldr	r2, [pc, #344]	; (8004ec0 <low_level_init+0x19c>)
 8004d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d6c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004d6e:	4b54      	ldr	r3, [pc, #336]	; (8004ec0 <low_level_init+0x19c>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d74:	4b52      	ldr	r3, [pc, #328]	; (8004ec0 <low_level_init+0x19c>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d7a:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <low_level_init+0x19c>)
 8004d7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d80:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  PCF8574_WriteBit(ETH_RESET_IO,1);
 8004d82:	2101      	movs	r1, #1
 8004d84:	2007      	movs	r0, #7
 8004d86:	f7fc f967 	bl	8001058 <PCF8574_WriteBit>
  HAL_Delay(100);
 8004d8a:	2064      	movs	r0, #100	; 0x64
 8004d8c:	f7fc f9d4 	bl	8001138 <HAL_Delay>
  PCF8574_WriteBit(ETH_RESET_IO,0);
 8004d90:	2100      	movs	r1, #0
 8004d92:	2007      	movs	r0, #7
 8004d94:	f7fc f960 	bl	8001058 <PCF8574_WriteBit>
  HAL_Delay(100);
 8004d98:	2064      	movs	r0, #100	; 0x64
 8004d9a:	f7fc f9cd 	bl	8001138 <HAL_Delay>


  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d9e:	4848      	ldr	r0, [pc, #288]	; (8004ec0 <low_level_init+0x19c>)
 8004da0:	f7fc fae8 	bl	8001374 <HAL_ETH_Init>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <low_level_init+0xa0>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004db8:	f043 0326 	orr.w	r3, r3, #38	; 0x26
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	  				NETIF_FLAG_IGMP | 		//组播添加IGMP标志位
					NETIF_FLAG_BROADCAST;
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	4a40      	ldr	r2, [pc, #256]	; (8004ec8 <low_level_init+0x1a4>)
 8004dc8:	4940      	ldr	r1, [pc, #256]	; (8004ecc <low_level_init+0x1a8>)
 8004dca:	483d      	ldr	r0, [pc, #244]	; (8004ec0 <low_level_init+0x19c>)
 8004dcc:	f7fc fc70 	bl	80016b0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	4a3f      	ldr	r2, [pc, #252]	; (8004ed0 <low_level_init+0x1ac>)
 8004dd4:	493f      	ldr	r1, [pc, #252]	; (8004ed4 <low_level_init+0x1b0>)
 8004dd6:	483a      	ldr	r0, [pc, #232]	; (8004ec0 <low_level_init+0x19c>)
 8004dd8:	f7fc fcd3 	bl	8001782 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2206      	movs	r2, #6
 8004de0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004de4:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <low_level_init+0x19c>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004df0:	4b33      	ldr	r3, [pc, #204]	; (8004ec0 <low_level_init+0x19c>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	785a      	ldrb	r2, [r3, #1]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004dfc:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <low_level_init+0x19c>)
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	789a      	ldrb	r2, [r3, #2]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <low_level_init+0x19c>)
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	78da      	ldrb	r2, [r3, #3]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e14:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <low_level_init+0x19c>)
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	791a      	ldrb	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <low_level_init+0x19c>)
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	795a      	ldrb	r2, [r3, #5]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e32:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004e3a:	f043 030a 	orr.w	r3, r3, #10
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004e46:	2300      	movs	r3, #0
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8004e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e52:	2101      	movs	r1, #1
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fb2d 	bl	80054b4 <osSemaphoreCreate>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <low_level_init+0x1b4>)
 8004e5e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004e60:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <low_level_init+0x1b8>)
 8004e62:	f107 040c 	add.w	r4, r7, #12
 8004e66:	461d      	mov	r5, r3
 8004e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fa1e 	bl	80052bc <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004e80:	480f      	ldr	r0, [pc, #60]	; (8004ec0 <low_level_init+0x19c>)
 8004e82:	f7fc ffa6 	bl	8001dd2 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */


  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004e86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	211d      	movs	r1, #29
 8004e8e:	480c      	ldr	r0, [pc, #48]	; (8004ec0 <low_level_init+0x19c>)
 8004e90:	f7fc fed1 	bl	8001c36 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	f043 030b 	orr.w	r3, r3, #11
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	211d      	movs	r1, #29
 8004ea2:	4807      	ldr	r0, [pc, #28]	; (8004ec0 <low_level_init+0x19c>)
 8004ea4:	f7fc ff2f 	bl	8001d06 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004ea8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004eac:	461a      	mov	r2, r3
 8004eae:	211d      	movs	r1, #29
 8004eb0:	4803      	ldr	r0, [pc, #12]	; (8004ec0 <low_level_init+0x19c>)
 8004eb2:	f7fc fec0 	bl	8001c36 <HAL_ETH_ReadPHYRegister>
  /* Enable PTP Timestamping */
  ETH_PTPStart(ETH_PTP_FineUpdate);
  /* ETH_PTPStart(ETH_PTP_CoarseUpdate); */
#endif
/* USER CODE END LOW_LEVEL_INIT */
}
 8004eb6:	bf00      	nop
 8004eb8:	3740      	adds	r7, #64	; 0x40
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	2001ba0c 	.word	0x2001ba0c
 8004ec4:	40028000 	.word	0x40028000
 8004ec8:	2001ba54 	.word	0x2001ba54
 8004ecc:	2001a13c 	.word	0x2001a13c
 8004ed0:	2001a1bc 	.word	0x2001a1bc
 8004ed4:	2001b98c 	.word	0x2001b98c
 8004ed8:	2000074c 	.word	0x2000074c
 8004edc:	08018c88 	.word	0x08018c88

08004ee0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	; 0x28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004eea:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <low_level_output+0x138>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004f02:	4b45      	ldr	r3, [pc, #276]	; (8005018 <low_level_output+0x138>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
#endif
/* USER CODE END LOW_LEVEL_OUTPUT 1 */


  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	623b      	str	r3, [r7, #32]
 8004f10:	e05a      	b.n	8004fc8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da03      	bge.n	8004f22 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004f1a:	23f8      	movs	r3, #248	; 0xf8
 8004f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004f20:	e05c      	b.n	8004fdc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	895b      	ldrh	r3, [r3, #10]
 8004f26:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f2c:	e02f      	b.n	8004f8e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	18d0      	adds	r0, r2, r3
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	18d1      	adds	r1, r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004f42:	3304      	adds	r3, #4
 8004f44:	461a      	mov	r2, r3
 8004f46:	f012 fe9a 	bl	8017c7e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	da03      	bge.n	8004f60 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004f58:	23f8      	movs	r3, #248	; 0xf8
 8004f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004f5e:	e03d      	b.n	8004fdc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f70:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f7c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f88:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d8c8      	bhi.n	8004f2e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	18d0      	adds	r0, r2, r3
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4413      	add	r3, r2
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4619      	mov	r1, r3
 8004fae:	f012 fe66 	bl	8017c7e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1a1      	bne.n	8004f12 <low_level_output+0x32>
		p->time_sec = timeStamp.TimeStampHigh;
		p->time_nsec = ETH_PTPSubSecond2NanoSecond(timeStamp.TimeStampLow);
	}
#else
/* USER CODE END LOW_LEVEL_OUTPUT 2 */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	4811      	ldr	r0, [pc, #68]	; (8005018 <low_level_output+0x138>)
 8004fd2:	f7fc fc43 	bl	800185c <HAL_ETH_TransmitFrame>
/* USER CODE BEGIN LOW_LEVEL_OUTPUT 3 */
#endif
/* USER CODE END LOW_LEVEL_OUTPUT 3 */
  errval = ERR_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <low_level_output+0x138>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00d      	beq.n	800500c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <low_level_output+0x138>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <low_level_output+0x138>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005006:	3304      	adds	r3, #4
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800500c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005010:	4618      	mov	r0, r3
 8005012:	3728      	adds	r7, #40	; 0x28
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	2001ba0c 	.word	0x2001ba0c

0800501c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08c      	sub	sp, #48	; 0x30
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]


  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005040:	484e      	ldr	r0, [pc, #312]	; (800517c <low_level_input+0x160>)
 8005042:	f7fc fcf5 	bl	8001a30 <HAL_ETH_GetReceivedFrame_IT>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <low_level_input+0x34>
    return NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	e091      	b.n	8005174 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005050:	4b4a      	ldr	r3, [pc, #296]	; (800517c <low_level_input+0x160>)
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005056:	4b49      	ldr	r3, [pc, #292]	; (800517c <low_level_input+0x160>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800505c:	89fb      	ldrh	r3, [r7, #14]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	2203      	movs	r2, #3
 8005066:	4619      	mov	r1, r3
 8005068:	2004      	movs	r0, #4
 800506a:	f00b fb5d 	bl	8010728 <pbuf_alloc>
 800506e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }



  if (p != NULL)
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d04b      	beq.n	800510e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005076:	4b41      	ldr	r3, [pc, #260]	; (800517c <low_level_input+0x160>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
//	for(int i = 0;i<len; i++){
//		printf("%x ",buffer[i]);
//	}
//	printf("\n");

    for(q = p; q != NULL; q = q->next)
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28
 8005084:	e040      	b.n	8005108 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	895b      	ldrh	r3, [r3, #10]
 800508a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005090:	e021      	b.n	80050d6 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	18d0      	adds	r0, r2, r3
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	18d1      	adds	r1, r2, r3
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80050a6:	3304      	adds	r3, #4
 80050a8:	461a      	mov	r2, r3
 80050aa:	f012 fde8 	bl	8017c7e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80050c4:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050d0:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d8d6      	bhi.n	8005092 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	18d0      	adds	r0, r2, r3
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f012 fdc2 	bl	8017c7e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1bb      	bne.n	8005086 <low_level_input+0x6a>
#endif
/* USER CODE END LOW_LEVEL_INPUT 1 */

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800510e:	4b1b      	ldr	r3, [pc, #108]	; (800517c <low_level_input+0x160>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e00b      	b.n	8005132 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	3301      	adds	r3, #1
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <low_level_input+0x160>)
 8005134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d8ee      	bhi.n	800511a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <low_level_input+0x160>)
 800513e:	2200      	movs	r2, #0
 8005140:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <low_level_input+0x160>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514a:	3314      	adds	r3, #20
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <low_level_input+0x160>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515e:	3314      	adds	r3, #20
 8005160:	2280      	movs	r2, #128	; 0x80
 8005162:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <low_level_input+0x160>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516c:	3308      	adds	r3, #8
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005174:	4618      	mov	r0, r3
 8005176:	3730      	adds	r7, #48	; 0x30
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	2001ba0c 	.word	0x2001ba0c

08005180 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <ethernetif_input+0x4c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f9c1 	bl	800551c <osSemaphoreWait>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f5      	bne.n	800518c <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff ff3b 	bl	800501c <low_level_input>
 80051a6:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	68b8      	ldr	r0, [r7, #8]
 80051b6:	4798      	blx	r3
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80051be:	68b8      	ldr	r0, [r7, #8]
 80051c0:	f00b fe24 	bl	8010e0c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ea      	bne.n	80051a0 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80051ca:	e7df      	b.n	800518c <ethernetif_input+0xc>
 80051cc:	2000074c 	.word	0x2000074c

080051d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <ethernetif_init+0x1c>
 80051de:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <ethernetif_init+0x48>)
 80051e0:	f44f 7224 	mov.w	r2, #656	; 0x290
 80051e4:	490d      	ldr	r1, [pc, #52]	; (800521c <ethernetif_init+0x4c>)
 80051e6:	480e      	ldr	r0, [pc, #56]	; (8005220 <ethernetif_init+0x50>)
 80051e8:	f012 fd5c 	bl	8017ca4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2273      	movs	r2, #115	; 0x73
 80051f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->name[1] = IFNAME1;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2274      	movs	r2, #116	; 0x74
 80051f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a09      	ldr	r2, [pc, #36]	; (8005224 <ethernetif_init+0x54>)
 8005200:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a08      	ldr	r2, [pc, #32]	; (8005228 <ethernetif_init+0x58>)
 8005206:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fd8b 	bl	8004d24 <low_level_init>

  return ERR_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	08018cf8 	.word	0x08018cf8
 800521c:	08018d14 	.word	0x08018d14
 8005220:	08018d24 	.word	0x08018d24
 8005224:	0800d9d9 	.word	0x0800d9d9
 8005228:	08004ee1 	.word	0x08004ee1

0800522c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005230:	f7fb ff76 	bl	8001120 <HAL_GetTick>
 8005234:	4603      	mov	r3, r0
}
 8005236:	4618      	mov	r0, r3
 8005238:	bd80      	pop	{r7, pc}

0800523a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524c:	2b84      	cmp	r3, #132	; 0x84
 800524e:	d005      	beq.n	800525c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005250:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	3303      	adds	r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005270:	f3ef 8305 	mrs	r3, IPSR
 8005274:	607b      	str	r3, [r7, #4]
  return(result);
 8005276:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005278:	2b00      	cmp	r3, #0
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005292:	f002 f989 	bl	80075a8 <vTaskStartScheduler>
  
  return osOK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}

0800529c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80052a0:	f7ff ffe3 	bl	800526a <inHandlerMode>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80052aa:	f002 fa9b 	bl	80077e4 <xTaskGetTickCountFromISR>
 80052ae:	4603      	mov	r3, r0
 80052b0:	e002      	b.n	80052b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80052b2:	f002 fa87 	bl	80077c4 <xTaskGetTickCount>
 80052b6:	4603      	mov	r3, r0
  }
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}

080052bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af04      	add	r7, sp, #16
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d020      	beq.n	8005310 <osThreadCreate+0x54>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01c      	beq.n	8005310 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685c      	ldr	r4, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681d      	ldr	r5, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691e      	ldr	r6, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ffa6 	bl	800523a <makeFreeRtosPriority>
 80052ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052f8:	9202      	str	r2, [sp, #8]
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	9100      	str	r1, [sp, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	4632      	mov	r2, r6
 8005302:	4629      	mov	r1, r5
 8005304:	4620      	mov	r0, r4
 8005306:	f001 ff8b 	bl	8007220 <xTaskCreateStatic>
 800530a:	4603      	mov	r3, r0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e01c      	b.n	800534a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685c      	ldr	r4, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800531c:	b29e      	uxth	r6, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff88 	bl	800523a <makeFreeRtosPriority>
 800532a:	4602      	mov	r2, r0
 800532c:	f107 030c 	add.w	r3, r7, #12
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	9200      	str	r2, [sp, #0]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	4632      	mov	r2, r6
 8005338:	4629      	mov	r1, r5
 800533a:	4620      	mov	r0, r4
 800533c:	f001 ffca 	bl	80072d4 <xTaskCreate>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d001      	beq.n	800534a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	e000      	b.n	800534c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005354 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <osDelay+0x16>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	e000      	b.n	800536c <osDelay+0x18>
 800536a:	2301      	movs	r3, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f002 f8e7 	bl	8007540 <vTaskDelay>
  
  return osOK;
 8005372:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4619      	mov	r1, r3
 8005392:	2001      	movs	r0, #1
 8005394:	f001 f8a3 	bl	80064de <xQueueCreateMutexStatic>
 8005398:	4603      	mov	r3, r0
 800539a:	e003      	b.n	80053a4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800539c:	2001      	movs	r0, #1
 800539e:	f001 f886 	bl	80064ae <xQueueCreateMutex>
 80053a2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <osMutexWait+0x18>
    return osErrorParameter;
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	e03a      	b.n	800543a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ce:	d103      	bne.n	80053d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e009      	b.n	80053ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <osMutexWait+0x40>
      ticks = 1;
 80053e8:	2301      	movs	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053ec:	f7ff ff3d 	bl	800526a <inHandlerMode>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d017      	beq.n	8005426 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80053f6:	f107 0308 	add.w	r3, r7, #8
 80053fa:	461a      	mov	r2, r3
 80053fc:	2100      	movs	r1, #0
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 fc86 	bl	8006d10 <xQueueReceiveFromISR>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d001      	beq.n	800540e <osMutexWait+0x62>
      return osErrorOS;
 800540a:	23ff      	movs	r3, #255	; 0xff
 800540c:	e015      	b.n	800543a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <osMutexWait+0x8c>
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <osMutexWait+0x98>)
 8005416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	e008      	b.n	8005438 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f001 fb69 	bl	8006b00 <xQueueSemaphoreTake>
 800542e:	4603      	mov	r3, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <osMutexWait+0x8c>
    return osErrorOS;
 8005434:	23ff      	movs	r3, #255	; 0xff
 8005436:	e000      	b.n	800543a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	e000ed04 	.word	0xe000ed04

08005448 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005458:	f7ff ff07 	bl	800526a <inHandlerMode>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 f9e4 	bl	8006836 <xQueueGiveFromISR>
 800546e:	4603      	mov	r3, r0
 8005470:	2b01      	cmp	r3, #1
 8005472:	d001      	beq.n	8005478 <osMutexRelease+0x30>
      return osErrorOS;
 8005474:	23ff      	movs	r3, #255	; 0xff
 8005476:	e017      	b.n	80054a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d013      	beq.n	80054a6 <osMutexRelease+0x5e>
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <osMutexRelease+0x68>)
 8005480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	e00a      	b.n	80054a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005490:	2300      	movs	r3, #0
 8005492:	2200      	movs	r2, #0
 8005494:	2100      	movs	r1, #0
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f001 f83c 	bl	8006514 <xQueueGenericSend>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80054a2:	23ff      	movs	r3, #255	; 0xff
 80054a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d010      	beq.n	80054e8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10b      	bne.n	80054e4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	2303      	movs	r3, #3
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	2200      	movs	r2, #0
 80054d8:	2100      	movs	r1, #0
 80054da:	2001      	movs	r0, #1
 80054dc:	f000 ff02 	bl	80062e4 <xQueueGenericCreateStatic>
 80054e0:	4603      	mov	r3, r0
 80054e2:	e016      	b.n	8005512 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e014      	b.n	8005512 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d110      	bne.n	8005510 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80054ee:	2203      	movs	r2, #3
 80054f0:	2100      	movs	r1, #0
 80054f2:	2001      	movs	r0, #1
 80054f4:	f000 ff69 	bl	80063ca <xQueueGenericCreate>
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <osSemaphoreCreate+0x58>
 8005500:	2300      	movs	r3, #0
 8005502:	2200      	movs	r2, #0
 8005504:	2100      	movs	r1, #0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 f804 	bl	8006514 <xQueueGenericSend>
      return sema;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	e000      	b.n	8005512 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005510:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	e03a      	b.n	80055aa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553e:	d103      	bne.n	8005548 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e009      	b.n	800555c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <osSemaphoreWait+0x40>
      ticks = 1;
 8005558:	2301      	movs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800555c:	f7ff fe85 	bl	800526a <inHandlerMode>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d017      	beq.n	8005596 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	461a      	mov	r2, r3
 800556c:	2100      	movs	r1, #0
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 fbce 	bl	8006d10 <xQueueReceiveFromISR>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d001      	beq.n	800557e <osSemaphoreWait+0x62>
      return osErrorOS;
 800557a:	23ff      	movs	r3, #255	; 0xff
 800557c:	e015      	b.n	80055aa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d011      	beq.n	80055a8 <osSemaphoreWait+0x8c>
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <osSemaphoreWait+0x98>)
 8005586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	e008      	b.n	80055a8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fab1 	bl	8006b00 <xQueueSemaphoreTake>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80055a4:	23ff      	movs	r3, #255	; 0xff
 80055a6:	e000      	b.n	80055aa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80055c8:	f7ff fe4f 	bl	800526a <inHandlerMode>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 f92c 	bl	8006836 <xQueueGiveFromISR>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d001      	beq.n	80055e8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80055e4:	23ff      	movs	r3, #255	; 0xff
 80055e6:	e017      	b.n	8005618 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d013      	beq.n	8005616 <osSemaphoreRelease+0x5e>
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <osSemaphoreRelease+0x68>)
 80055f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	e00a      	b.n	8005616 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005600:	2300      	movs	r3, #0
 8005602:	2200      	movs	r2, #0
 8005604:	2100      	movs	r1, #0
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 ff84 	bl	8006514 <xQueueGenericSend>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d001      	beq.n	8005616 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005612:	23ff      	movs	r3, #255	; 0xff
 8005614:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800562c:	f7ff fe1d 	bl	800526a <inHandlerMode>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005636:	2382      	movs	r3, #130	; 0x82
 8005638:	e003      	b.n	8005642 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 fc1f 	bl	8006e7e <vQueueDelete>

  return osOK; 
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800564a:	b590      	push	{r4, r7, lr}
 800564c:	b085      	sub	sp, #20
 800564e:	af02      	add	r7, sp, #8
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d012      	beq.n	8005682 <osMessageCreate+0x38>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6859      	ldr	r1, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68dc      	ldr	r4, [r3, #12]
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4623      	mov	r3, r4
 800567a:	f000 fe33 	bl	80062e4 <xQueueGenericCreateStatic>
 800567e:	4603      	mov	r3, r0
 8005680:	e008      	b.n	8005694 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	4619      	mov	r1, r3
 800568e:	f000 fe9c 	bl	80063ca <xQueueGenericCreate>
 8005692:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	bd90      	pop	{r4, r7, pc}

0800569c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <osMessagePut+0x1e>
    ticks = 1;
 80056b6:	2301      	movs	r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80056ba:	f7ff fdd6 	bl	800526a <inHandlerMode>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d018      	beq.n	80056f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80056c4:	f107 0210 	add.w	r2, r7, #16
 80056c8:	f107 0108 	add.w	r1, r7, #8
 80056cc:	2300      	movs	r3, #0
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f001 f81a 	bl	8006708 <xQueueGenericSendFromISR>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d001      	beq.n	80056de <osMessagePut+0x42>
      return osErrorOS;
 80056da:	23ff      	movs	r3, #255	; 0xff
 80056dc:	e018      	b.n	8005710 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d014      	beq.n	800570e <osMessagePut+0x72>
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <osMessagePut+0x7c>)
 80056e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	e00b      	b.n	800570e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056f6:	f107 0108 	add.w	r1, r7, #8
 80056fa:	2300      	movs	r3, #0
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 ff08 	bl	8006514 <xQueueGenericSend>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <osMessagePut+0x72>
      return osErrorOS;
 800570a:	23ff      	movs	r3, #255	; 0xff
 800570c:	e000      	b.n	8005710 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b08b      	sub	sp, #44	; 0x2c
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	617b      	str	r3, [r7, #20]
    return event;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	461c      	mov	r4, r3
 800573e:	f107 0314 	add.w	r3, r7, #20
 8005742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800574a:	e054      	b.n	80057f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800574c:	2300      	movs	r3, #0
 800574e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575a:	d103      	bne.n	8005764 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800575c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	e009      	b.n	8005778 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <osMessageGet+0x5c>
      ticks = 1;
 8005774:	2301      	movs	r3, #1
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005778:	f7ff fd77 	bl	800526a <inHandlerMode>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01c      	beq.n	80057bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005782:	f107 0220 	add.w	r2, r7, #32
 8005786:	f107 0314 	add.w	r3, r7, #20
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	68b8      	ldr	r0, [r7, #8]
 8005790:	f001 fabe 	bl	8006d10 <xQueueReceiveFromISR>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800579a:	2310      	movs	r3, #16
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e001      	b.n	80057a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01d      	beq.n	80057e6 <osMessageGet+0xca>
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <osMessageGet+0xe4>)
 80057ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	e014      	b.n	80057e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	3304      	adds	r3, #4
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	4619      	mov	r1, r3
 80057c6:	68b8      	ldr	r0, [r7, #8]
 80057c8:	f001 f8be 	bl	8006948 <xQueueReceive>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80057d2:	2310      	movs	r3, #16
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e006      	b.n	80057e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <osMessageGet+0xc6>
 80057de:	2300      	movs	r3, #0
 80057e0:	e000      	b.n	80057e4 <osMessageGet+0xc8>
 80057e2:	2340      	movs	r3, #64	; 0x40
 80057e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	461c      	mov	r4, r3
 80057ea:	f107 0314 	add.w	r3, r7, #20
 80057ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	372c      	adds	r7, #44	; 0x2c
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd90      	pop	{r4, r7, pc}
 80057fe:	bf00      	nop
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800580c:	f7ff fd2d 	bl	800526a <inHandlerMode>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 fb14 	bl	8006e44 <uxQueueMessagesWaitingFromISR>
 800581c:	4603      	mov	r3, r0
 800581e:	e003      	b.n	8005828 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 faf2 	bl	8006e0a <uxQueueMessagesWaiting>
 8005826:	4603      	mov	r3, r0
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005838:	f7ff fd17 	bl	800526a <inHandlerMode>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <osMessageDelete+0x16>
    return osErrorISR;
 8005842:	2382      	movs	r3, #130	; 0x82
 8005844:	e003      	b.n	800584e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fb19 	bl	8006e7e <vQueueDelete>

  return osOK; 
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f103 0208 	add.w	r2, r3, #8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800586e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f103 0208 	add.w	r2, r3, #8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f103 0208 	add.w	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590e:	d103      	bne.n	8005918 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e00c      	b.n	8005932 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3308      	adds	r3, #8
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e002      	b.n	8005926 <vListInsert+0x2e>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d9f6      	bls.n	8005920 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	601a      	str	r2, [r3, #0]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6892      	ldr	r2, [r2, #8]
 8005980:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6852      	ldr	r2, [r2, #4]
 800598a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d103      	bne.n	800599e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	1e5a      	subs	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b04      	subs	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059f0:	4a0c      	ldr	r2, [pc, #48]	; (8005a24 <pxPortInitialiseStack+0x64>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b14      	subs	r3, #20
 80059fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f06f 0202 	mvn.w	r2, #2
 8005a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3b20      	subs	r3, #32
 8005a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	08005a29 	.word	0x08005a29

08005a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <prvTaskExitError+0x50>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3a:	d009      	beq.n	8005a50 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e7fe      	b.n	8005a4e <prvTaskExitError+0x26>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a62:	bf00      	nop
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0fc      	beq.n	8005a64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	00000000 	.word	0x00000000

08005a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <pxCurrentTCBConst2>)
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	6808      	ldr	r0, [r1, #0]
 8005a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	f380 8809 	msr	PSP, r0
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f380 8811 	msr	BASEPRI, r0
 8005a9a:	4770      	bx	lr
 8005a9c:	f3af 8000 	nop.w

08005aa0 <pxCurrentTCBConst2>:
 8005aa0:	20019778 	.word	0x20019778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop

08005aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005aa8:	4808      	ldr	r0, [pc, #32]	; (8005acc <prvPortStartFirstTask+0x24>)
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	6800      	ldr	r0, [r0, #0]
 8005aae:	f380 8808 	msr	MSP, r0
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8814 	msr	CONTROL, r0
 8005aba:	b662      	cpsie	i
 8005abc:	b661      	cpsie	f
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	df00      	svc	0
 8005ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aca:	bf00      	nop
 8005acc:	e000ed08 	.word	0xe000ed08

08005ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ad6:	4b44      	ldr	r3, [pc, #272]	; (8005be8 <xPortStartScheduler+0x118>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a44      	ldr	r2, [pc, #272]	; (8005bec <xPortStartScheduler+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <xPortStartScheduler+0x24>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e7fe      	b.n	8005af2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005af4:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <xPortStartScheduler+0x118>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3d      	ldr	r2, [pc, #244]	; (8005bf0 <xPortStartScheduler+0x120>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d109      	bne.n	8005b12 <xPortStartScheduler+0x42>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e7fe      	b.n	8005b10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b12:	4b38      	ldr	r3, [pc, #224]	; (8005bf4 <xPortStartScheduler+0x124>)
 8005b14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b30      	ldr	r3, [pc, #192]	; (8005bf8 <xPortStartScheduler+0x128>)
 8005b38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b3a:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b3c:	2207      	movs	r2, #7
 8005b3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b40:	e009      	b.n	8005b56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b42:	4b2e      	ldr	r3, [pc, #184]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d0ef      	beq.n	8005b42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b62:	4b26      	ldr	r3, [pc, #152]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1c3 0307 	rsb	r3, r3, #7
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d009      	beq.n	8005b82 <xPortStartScheduler+0xb2>
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	e7fe      	b.n	8005b80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b82:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	4a1c      	ldr	r2, [pc, #112]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b94:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ba0:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <xPortStartScheduler+0x130>)
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <xPortStartScheduler+0x130>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005baa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bac:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <xPortStartScheduler+0x130>)
 8005bae:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <xPortStartScheduler+0x130>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bb8:	f000 f8d6 	bl	8005d68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bbc:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <xPortStartScheduler+0x134>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bc2:	f000 f8f5 	bl	8005db0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bc6:	4a10      	ldr	r2, [pc, #64]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bd2:	f7ff ff69 	bl	8005aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bd6:	f001 fecf 	bl	8007978 <vTaskSwitchContext>
	prvTaskExitError();
 8005bda:	f7ff ff25 	bl	8005a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	e000ed00 	.word	0xe000ed00
 8005bec:	410fc271 	.word	0x410fc271
 8005bf0:	410fc270 	.word	0x410fc270
 8005bf4:	e000e400 	.word	0xe000e400
 8005bf8:	20000750 	.word	0x20000750
 8005bfc:	20000754 	.word	0x20000754
 8005c00:	e000ed20 	.word	0xe000ed20
 8005c04:	2000000c 	.word	0x2000000c
 8005c08:	e000ef34 	.word	0xe000ef34

08005c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortEnterCritical+0x54>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <vPortEnterCritical+0x54>)
 8005c2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <vPortEnterCritical+0x54>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10e      	bne.n	8005c54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <vPortEnterCritical+0x58>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <vPortEnterCritical+0x48>
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	e7fe      	b.n	8005c52 <vPortEnterCritical+0x46>
	}
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	2000000c 	.word	0x2000000c
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <vPortExitCritical+0x22>
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e7fe      	b.n	8005c88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <vPortExitCritical+0x3e>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	2000000c 	.word	0x2000000c
	...

08005cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cc0:	f3ef 8009 	mrs	r0, PSP
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <pxCurrentTCBConst>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	f01e 0f10 	tst.w	lr, #16
 8005cd0:	bf08      	it	eq
 8005cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ce4:	f380 8811 	msr	BASEPRI, r0
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f001 fe42 	bl	8007978 <vTaskSwitchContext>
 8005cf4:	f04f 0000 	mov.w	r0, #0
 8005cf8:	f380 8811 	msr	BASEPRI, r0
 8005cfc:	bc09      	pop	{r0, r3}
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	6808      	ldr	r0, [r1, #0]
 8005d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d06:	f01e 0f10 	tst.w	lr, #16
 8005d0a:	bf08      	it	eq
 8005d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d10:	f380 8809 	msr	PSP, r0
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst>:
 8005d20:	20019778 	.word	0x20019778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d40:	f001 fd62 	bl	8007808 <xTaskIncrementTick>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <SysTick_Handler+0x3c>)
 8005d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <vPortSetupTimerInterrupt+0x34>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d72:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <vPortSetupTimerInterrupt+0x38>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d78:	4a0a      	ldr	r2, [pc, #40]	; (8005da4 <vPortSetupTimerInterrupt+0x3c>)
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <vPortSetupTimerInterrupt+0x40>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	490b      	ldr	r1, [pc, #44]	; (8005dac <vPortSetupTimerInterrupt+0x44>)
 8005d80:	fba1 1303 	umull	r1, r3, r1, r3
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	3b01      	subs	r3, #1
 8005d88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <vPortSetupTimerInterrupt+0x34>)
 8005d8c:	2207      	movs	r2, #7
 8005d8e:	601a      	str	r2, [r3, #0]
}
 8005d90:	bf00      	nop
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	e000e010 	.word	0xe000e010
 8005da0:	e000e018 	.word	0xe000e018
 8005da4:	e000e014 	.word	0xe000e014
 8005da8:	20000000 	.word	0x20000000
 8005dac:	10624dd3 	.word	0x10624dd3

08005db0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005db0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005dc0 <vPortEnableVFP+0x10>
 8005db4:	6801      	ldr	r1, [r0, #0]
 8005db6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dba:	6001      	str	r1, [r0, #0]
 8005dbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dbe:	bf00      	nop
 8005dc0:	e000ed88 	.word	0xe000ed88

08005dc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dca:	f3ef 8305 	mrs	r3, IPSR
 8005dce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b0f      	cmp	r3, #15
 8005dd4:	d913      	bls.n	8005dfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dd6:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <vPortValidateInterruptPriority+0x6c>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005de0:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <vPortValidateInterruptPriority+0x70>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	7afa      	ldrb	r2, [r7, #11]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d209      	bcs.n	8005dfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	e7fe      	b.n	8005dfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dfe:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <vPortValidateInterruptPriority+0x74>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <vPortValidateInterruptPriority+0x78>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d909      	bls.n	8005e22 <vPortValidateInterruptPriority+0x5e>
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	e7fe      	b.n	8005e20 <vPortValidateInterruptPriority+0x5c>
	}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	e000e3f0 	.word	0xe000e3f0
 8005e34:	20000750 	.word	0x20000750
 8005e38:	e000ed0c 	.word	0xe000ed0c
 8005e3c:	20000754 	.word	0x20000754

08005e40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e4c:	f001 fc10 	bl	8007670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e50:	4b5c      	ldr	r3, [pc, #368]	; (8005fc4 <pvPortMalloc+0x184>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e58:	f000 f920 	bl	800609c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e5c:	4b5a      	ldr	r3, [pc, #360]	; (8005fc8 <pvPortMalloc+0x188>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f040 8091 	bne.w	8005f8c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01c      	beq.n	8005eaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e70:	2208      	movs	r2, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d013      	beq.n	8005eaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f023 0307 	bic.w	r3, r3, #7
 8005e88:	3308      	adds	r3, #8
 8005e8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <pvPortMalloc+0x6a>
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e7fe      	b.n	8005ea8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d06d      	beq.n	8005f8c <pvPortMalloc+0x14c>
 8005eb0:	4b46      	ldr	r3, [pc, #280]	; (8005fcc <pvPortMalloc+0x18c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d868      	bhi.n	8005f8c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eba:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <pvPortMalloc+0x190>)
 8005ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ebe:	4b44      	ldr	r3, [pc, #272]	; (8005fd0 <pvPortMalloc+0x190>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ec4:	e004      	b.n	8005ed0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d203      	bcs.n	8005ee2 <pvPortMalloc+0xa2>
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f1      	bne.n	8005ec6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ee2:	4b38      	ldr	r3, [pc, #224]	; (8005fc4 <pvPortMalloc+0x184>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d04f      	beq.n	8005f8c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	4413      	add	r3, r2
 8005ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1ad2      	subs	r2, r2, r3
 8005f06:	2308      	movs	r3, #8
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d91e      	bls.n	8005f4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <pvPortMalloc+0xf4>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f46:	69b8      	ldr	r0, [r7, #24]
 8005f48:	f000 f90a 	bl	8006160 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f4c:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <pvPortMalloc+0x18c>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <pvPortMalloc+0x18c>)
 8005f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f5a:	4b1c      	ldr	r3, [pc, #112]	; (8005fcc <pvPortMalloc+0x18c>)
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <pvPortMalloc+0x194>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d203      	bcs.n	8005f6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f66:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <pvPortMalloc+0x18c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1a      	ldr	r2, [pc, #104]	; (8005fd4 <pvPortMalloc+0x194>)
 8005f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <pvPortMalloc+0x188>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <pvPortMalloc+0x198>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a13      	ldr	r2, [pc, #76]	; (8005fd8 <pvPortMalloc+0x198>)
 8005f8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f8c:	f001 fb7e 	bl	800768c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <pvPortMalloc+0x15a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005f96:	f7fa fb16 	bl	80005c6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <pvPortMalloc+0x178>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e7fe      	b.n	8005fb6 <pvPortMalloc+0x176>
	return pvReturn;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3728      	adds	r7, #40	; 0x28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20019760 	.word	0x20019760
 8005fc8:	20019774 	.word	0x20019774
 8005fcc:	20019764 	.word	0x20019764
 8005fd0:	20019758 	.word	0x20019758
 8005fd4:	20019768 	.word	0x20019768
 8005fd8:	2001976c 	.word	0x2001976c

08005fdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d04b      	beq.n	8006086 <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fee:	2308      	movs	r3, #8
 8005ff0:	425b      	negs	r3, r3
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <vPortFree+0xb4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <vPortFree+0x42>
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e7fe      	b.n	800601c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <vPortFree+0x5e>
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	e7fe      	b.n	8006038 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	4b14      	ldr	r3, [pc, #80]	; (8006090 <vPortFree+0xb4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01e      	beq.n	8006086 <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d11a      	bne.n	8006086 <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <vPortFree+0xb4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	43db      	mvns	r3, r3
 800605a:	401a      	ands	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006060:	f001 fb06 	bl	8007670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <vPortFree+0xb8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4413      	add	r3, r2
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <vPortFree+0xb8>)
 8006070:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006072:	6938      	ldr	r0, [r7, #16]
 8006074:	f000 f874 	bl	8006160 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <vPortFree+0xbc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3301      	adds	r3, #1
 800607e:	4a06      	ldr	r2, [pc, #24]	; (8006098 <vPortFree+0xbc>)
 8006080:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006082:	f001 fb03 	bl	800768c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006086:	bf00      	nop
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20019774 	.word	0x20019774
 8006094:	20019764 	.word	0x20019764
 8006098:	20019770 	.word	0x20019770

0800609c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060a2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80060a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060a8:	4b27      	ldr	r3, [pc, #156]	; (8006148 <prvHeapInit+0xac>)
 80060aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3307      	adds	r3, #7
 80060ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0307 	bic.w	r3, r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	4a1f      	ldr	r2, [pc, #124]	; (8006148 <prvHeapInit+0xac>)
 80060cc:	4413      	add	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060d4:	4a1d      	ldr	r2, [pc, #116]	; (800614c <prvHeapInit+0xb0>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060da:	4b1c      	ldr	r3, [pc, #112]	; (800614c <prvHeapInit+0xb0>)
 80060dc:	2200      	movs	r2, #0
 80060de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4413      	add	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060e8:	2208      	movs	r2, #8
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a15      	ldr	r2, [pc, #84]	; (8006150 <prvHeapInit+0xb4>)
 80060fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060fe:	4b14      	ldr	r3, [pc, #80]	; (8006150 <prvHeapInit+0xb4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <prvHeapInit+0xb4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800611c:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <prvHeapInit+0xb4>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <prvHeapInit+0xb8>)
 800612a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a09      	ldr	r2, [pc, #36]	; (8006158 <prvHeapInit+0xbc>)
 8006132:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006134:	4b09      	ldr	r3, [pc, #36]	; (800615c <prvHeapInit+0xc0>)
 8006136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800613a:	601a      	str	r2, [r3, #0]
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000758 	.word	0x20000758
 800614c:	20019758 	.word	0x20019758
 8006150:	20019760 	.word	0x20019760
 8006154:	20019768 	.word	0x20019768
 8006158:	20019764 	.word	0x20019764
 800615c:	20019774 	.word	0x20019774

08006160 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006168:	4b28      	ldr	r3, [pc, #160]	; (800620c <prvInsertBlockIntoFreeList+0xac>)
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e002      	b.n	8006174 <prvInsertBlockIntoFreeList+0x14>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d3f7      	bcc.n	800616e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	441a      	add	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	d108      	bne.n	80061a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	441a      	add	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	441a      	add	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d118      	bne.n	80061e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b15      	ldr	r3, [pc, #84]	; (8006210 <prvInsertBlockIntoFreeList+0xb0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d00d      	beq.n	80061de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	441a      	add	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	e008      	b.n	80061f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061de:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <prvInsertBlockIntoFreeList+0xb0>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e003      	b.n	80061f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d002      	beq.n	80061fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20019758 	.word	0x20019758
 8006210:	20019760 	.word	0x20019760

08006214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <xQueueGenericReset+0x28>
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	e7fe      	b.n	800623a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800623c:	f7ff fce6 	bl	8005c0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	68f9      	ldr	r1, [r7, #12]
 800624a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	3b01      	subs	r3, #1
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	441a      	add	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	22ff      	movs	r2, #255	; 0xff
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d114      	bne.n	80062bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01a      	beq.n	80062d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3310      	adds	r3, #16
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fc22 	bl	8007ae8 <xTaskRemoveFromEventList>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d012      	beq.n	80062d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <xQueueGenericReset+0xcc>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	e009      	b.n	80062d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3310      	adds	r3, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fac8 	bl	8005856 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3324      	adds	r3, #36	; 0x24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fac3 	bl	8005856 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062d0:	f7ff fcca 	bl	8005c68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062d4:	2301      	movs	r3, #1
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <xQueueGenericCreateStatic+0x28>
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
 800630a:	e7fe      	b.n	800630a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <xQueueGenericCreateStatic+0x42>
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
 8006324:	e7fe      	b.n	8006324 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <xQueueGenericCreateStatic+0x4e>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <xQueueGenericCreateStatic+0x52>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericCreateStatic+0x54>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <xQueueGenericCreateStatic+0x6c>
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	e7fe      	b.n	800634e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <xQueueGenericCreateStatic+0x78>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <xQueueGenericCreateStatic+0x7c>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <xQueueGenericCreateStatic+0x7e>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <xQueueGenericCreateStatic+0x96>
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e7fe      	b.n	8006378 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800637a:	2348      	movs	r3, #72	; 0x48
 800637c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b48      	cmp	r3, #72	; 0x48
 8006382:	d009      	beq.n	8006398 <xQueueGenericCreateStatic+0xb4>
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	e7fe      	b.n	8006396 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006398:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f83e 	bl	800643c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3730      	adds	r7, #48	; 0x30
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b08a      	sub	sp, #40	; 0x28
 80063ce:	af02      	add	r7, sp, #8
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <xQueueGenericCreate+0x28>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e7fe      	b.n	80063f0 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	3348      	adds	r3, #72	; 0x48
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fd1d 	bl	8005e40 <pvPortMalloc>
 8006406:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d011      	beq.n	8006432 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	3348      	adds	r3, #72	; 0x48
 8006416:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006420:	79fa      	ldrb	r2, [r7, #7]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	4613      	mov	r3, r2
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f805 	bl	800643c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006432:	69bb      	ldr	r3, [r7, #24]
	}
 8006434:	4618      	mov	r0, r3
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d103      	bne.n	8006458 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e002      	b.n	800645e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800646a:	2101      	movs	r1, #1
 800646c:	69b8      	ldr	r0, [r7, #24]
 800646e:	f7ff fed1 	bl	8006214 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00e      	beq.n	80064a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800649a:	2300      	movs	r3, #0
 800649c:	2200      	movs	r2, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f837 	bl	8006514 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	4603      	mov	r3, r0
 80064b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6939      	ldr	r1, [r7, #16]
 80064c6:	6978      	ldr	r0, [r7, #20]
 80064c8:	f7ff ff7f 	bl	80063ca <xQueueGenericCreate>
 80064cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff ffd3 	bl	800647a <prvInitialiseMutex>

		return xNewQueue;
 80064d4:	68fb      	ldr	r3, [r7, #12]
	}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b088      	sub	sp, #32
 80064e2:	af02      	add	r7, sp, #8
 80064e4:	4603      	mov	r3, r0
 80064e6:	6039      	str	r1, [r7, #0]
 80064e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064ea:	2301      	movs	r3, #1
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2200      	movs	r2, #0
 80064fa:	6939      	ldr	r1, [r7, #16]
 80064fc:	6978      	ldr	r0, [r7, #20]
 80064fe:	f7ff fef1 	bl	80062e4 <xQueueGenericCreateStatic>
 8006502:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7ff ffb8 	bl	800647a <prvInitialiseMutex>

		return xNewQueue;
 800650a:	68fb      	ldr	r3, [r7, #12]
	}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006522:	2300      	movs	r3, #0
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <xQueueGenericSend+0x30>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
 8006542:	e7fe      	b.n	8006542 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <xQueueGenericSend+0x3e>
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <xQueueGenericSend+0x42>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <xQueueGenericSend+0x44>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <xQueueGenericSend+0x5c>
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
 800656e:	e7fe      	b.n	800656e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d103      	bne.n	800657e <xQueueGenericSend+0x6a>
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <xQueueGenericSend+0x6e>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <xQueueGenericSend+0x70>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <xQueueGenericSend+0x88>
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	e7fe      	b.n	800659a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800659c:	f001 fc5a 	bl	8007e54 <xTaskGetSchedulerState>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <xQueueGenericSend+0x98>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <xQueueGenericSend+0x9c>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <xQueueGenericSend+0x9e>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <xQueueGenericSend+0xb6>
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	e7fe      	b.n	80065c8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ca:	f7ff fb1f 	bl	8005c0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d302      	bcc.n	80065e0 <xQueueGenericSend+0xcc>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d129      	bne.n	8006634 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e6:	f000 fc84 	bl	8006ef2 <prvCopyDataToQueue>
 80065ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d010      	beq.n	8006616 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 fa75 	bl	8007ae8 <xTaskRemoveFromEventList>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d013      	beq.n	800662c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006604:	4b3f      	ldr	r3, [pc, #252]	; (8006704 <xQueueGenericSend+0x1f0>)
 8006606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	e00a      	b.n	800662c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800661c:	4b39      	ldr	r3, [pc, #228]	; (8006704 <xQueueGenericSend+0x1f0>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800662c:	f7ff fb1c 	bl	8005c68 <vPortExitCritical>
				return pdPASS;
 8006630:	2301      	movs	r3, #1
 8006632:	e063      	b.n	80066fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800663a:	f7ff fb15 	bl	8005c68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800663e:	2300      	movs	r3, #0
 8006640:	e05c      	b.n	80066fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006648:	f107 0314 	add.w	r3, r7, #20
 800664c:	4618      	mov	r0, r3
 800664e:	f001 faad 	bl	8007bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006652:	2301      	movs	r3, #1
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006656:	f7ff fb07 	bl	8005c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800665a:	f001 f809 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800665e:	f7ff fad5 	bl	8005c0c <vPortEnterCritical>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006668:	b25b      	sxtb	r3, r3
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800666e:	d103      	bne.n	8006678 <xQueueGenericSend+0x164>
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800667e:	b25b      	sxtb	r3, r3
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006684:	d103      	bne.n	800668e <xQueueGenericSend+0x17a>
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800668e:	f7ff faeb 	bl	8005c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006692:	1d3a      	adds	r2, r7, #4
 8006694:	f107 0314 	add.w	r3, r7, #20
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fa9c 	bl	8007bd8 <xTaskCheckForTimeOut>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d124      	bne.n	80066f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066a8:	f000 fd1b 	bl	80070e2 <prvIsQueueFull>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	3310      	adds	r3, #16
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4611      	mov	r1, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f9c6 	bl	8007a4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 fca6 	bl	8007012 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066c6:	f000 ffe1 	bl	800768c <xTaskResumeAll>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f af7c 	bne.w	80065ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80066d2:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <xQueueGenericSend+0x1f0>)
 80066d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	e772      	b.n	80065ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e6:	f000 fc94 	bl	8007012 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ea:	f000 ffcf 	bl	800768c <xTaskResumeAll>
 80066ee:	e76c      	b.n	80065ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066f2:	f000 fc8e 	bl	8007012 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066f6:	f000 ffc9 	bl	800768c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3738      	adds	r7, #56	; 0x38
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b090      	sub	sp, #64	; 0x40
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <xQueueGenericSendFromISR+0x2c>
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
 8006732:	e7fe      	b.n	8006732 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <xQueueGenericSendFromISR+0x3a>
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <xQueueGenericSendFromISR+0x3e>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <xQueueGenericSendFromISR+0x40>
 8006746:	2300      	movs	r3, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <xQueueGenericSendFromISR+0x58>
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
 800675e:	e7fe      	b.n	800675e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d103      	bne.n	800676e <xQueueGenericSendFromISR+0x66>
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <xQueueGenericSendFromISR+0x6a>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueGenericSendFromISR+0x6c>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <xQueueGenericSendFromISR+0x84>
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e7fe      	b.n	800678a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800678c:	f7ff fb1a 	bl	8005dc4 <vPortValidateInterruptPriority>
	__asm volatile
 8006790:	f3ef 8211 	mrs	r2, BASEPRI
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	61fa      	str	r2, [r7, #28]
 80067a6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80067a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d302      	bcc.n	80067be <xQueueGenericSendFromISR+0xb6>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d12f      	bne.n	800681e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067d4:	f000 fb8d 	bl	8006ef2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e0:	d112      	bne.n	8006808 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d016      	beq.n	8006818 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	3324      	adds	r3, #36	; 0x24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 f97a 	bl	8007ae8 <xTaskRemoveFromEventList>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e007      	b.n	8006818 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800680c:	3301      	adds	r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	b25a      	sxtb	r2, r3
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006818:	2301      	movs	r3, #1
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800681c:	e001      	b.n	8006822 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800681e:	2300      	movs	r3, #0
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800682e:	4618      	mov	r0, r3
 8006830:	3740      	adds	r7, #64	; 0x40
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b08e      	sub	sp, #56	; 0x38
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <xQueueGiveFromISR+0x28>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	623b      	str	r3, [r7, #32]
 800685c:	e7fe      	b.n	800685c <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <xQueueGiveFromISR+0x44>
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	e7fe      	b.n	8006878 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <xQueueGiveFromISR+0x54>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <xQueueGiveFromISR+0x58>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueGiveFromISR+0x5a>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <xQueueGiveFromISR+0x72>
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e7fe      	b.n	80068a6 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068a8:	f7ff fa8c 	bl	8005dc4 <vPortValidateInterruptPriority>
	__asm volatile
 80068ac:	f3ef 8211 	mrs	r2, BASEPRI
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	617a      	str	r2, [r7, #20]
 80068c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d92b      	bls.n	8006930 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f2:	d112      	bne.n	800691a <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d016      	beq.n	800692a <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	3324      	adds	r3, #36	; 0x24
 8006900:	4618      	mov	r0, r3
 8006902:	f001 f8f1 	bl	8007ae8 <xTaskRemoveFromEventList>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00e      	beq.n	800692a <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e007      	b.n	800692a <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800691a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800691e:	3301      	adds	r3, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	b25a      	sxtb	r2, r3
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800692a:	2301      	movs	r3, #1
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
 800692e:	e001      	b.n	8006934 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006930:	2300      	movs	r3, #0
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006940:	4618      	mov	r0, r3
 8006942:	3738      	adds	r7, #56	; 0x38
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	; 0x30
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <xQueueReceive+0x2e>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	623b      	str	r3, [r7, #32]
 8006974:	e7fe      	b.n	8006974 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <xQueueReceive+0x3c>
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <xQueueReceive+0x40>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <xQueueReceive+0x42>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <xQueueReceive+0x5a>
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e7fe      	b.n	80069a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a2:	f001 fa57 	bl	8007e54 <xTaskGetSchedulerState>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <xQueueReceive+0x6a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <xQueueReceive+0x6e>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <xQueueReceive+0x70>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <xQueueReceive+0x88>
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e7fe      	b.n	80069ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069d0:	f7ff f91c 	bl	8005c0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01f      	beq.n	8006a20 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e4:	f000 faef 	bl	8006fc6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	1e5a      	subs	r2, r3, #1
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00f      	beq.n	8006a18 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	3310      	adds	r3, #16
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 f873 	bl	8007ae8 <xTaskRemoveFromEventList>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a08:	4b3c      	ldr	r3, [pc, #240]	; (8006afc <xQueueReceive+0x1b4>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a18:	f7ff f926 	bl	8005c68 <vPortExitCritical>
				return pdPASS;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e069      	b.n	8006af4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a26:	f7ff f91f 	bl	8005c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e062      	b.n	8006af4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a34:	f107 0310 	add.w	r3, r7, #16
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f8b7 	bl	8007bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a42:	f7ff f911 	bl	8005c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a46:	f000 fe13 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a4a:	f7ff f8df 	bl	8005c0c <vPortEnterCritical>
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5a:	d103      	bne.n	8006a64 <xQueueReceive+0x11c>
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a70:	d103      	bne.n	8006a7a <xQueueReceive+0x132>
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a7a:	f7ff f8f5 	bl	8005c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a7e:	1d3a      	adds	r2, r7, #4
 8006a80:	f107 0310 	add.w	r3, r7, #16
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f8a6 	bl	8007bd8 <xTaskCheckForTimeOut>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d123      	bne.n	8006ada <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a94:	f000 fb0f 	bl	80070b6 <prvIsQueueEmpty>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d017      	beq.n	8006ace <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	3324      	adds	r3, #36	; 0x24
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 ffd0 	bl	8007a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aae:	f000 fab0 	bl	8007012 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ab2:	f000 fdeb 	bl	800768c <xTaskResumeAll>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d189      	bne.n	80069d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <xQueueReceive+0x1b4>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	e780      	b.n	80069d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad0:	f000 fa9f 	bl	8007012 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ad4:	f000 fdda 	bl	800768c <xTaskResumeAll>
 8006ad8:	e77a      	b.n	80069d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006adc:	f000 fa99 	bl	8007012 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ae0:	f000 fdd4 	bl	800768c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae6:	f000 fae6 	bl	80070b6 <prvIsQueueEmpty>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f43f af6f 	beq.w	80069d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006af2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3730      	adds	r7, #48	; 0x30
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	e000ed04 	.word	0xe000ed04

08006b00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08e      	sub	sp, #56	; 0x38
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d109      	bne.n	8006b30 <xQueueSemaphoreTake+0x30>
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	e7fe      	b.n	8006b2e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <xQueueSemaphoreTake+0x4c>
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e7fe      	b.n	8006b4a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b4c:	f001 f982 	bl	8007e54 <xTaskGetSchedulerState>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <xQueueSemaphoreTake+0x5c>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <xQueueSemaphoreTake+0x60>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <xQueueSemaphoreTake+0x62>
 8006b60:	2300      	movs	r3, #0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <xQueueSemaphoreTake+0x7a>
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e7fe      	b.n	8006b78 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b7a:	f7ff f847 	bl	8005c0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d024      	beq.n	8006bd4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b9a:	f001 faff 	bl	800819c <pvTaskIncrementMutexHeldCount>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00f      	beq.n	8006bcc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	3310      	adds	r3, #16
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 ff99 	bl	8007ae8 <xTaskRemoveFromEventList>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bbc:	4b53      	ldr	r3, [pc, #332]	; (8006d0c <xQueueSemaphoreTake+0x20c>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bcc:	f7ff f84c 	bl	8005c68 <vPortExitCritical>
				return pdPASS;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e096      	b.n	8006d02 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d110      	bne.n	8006bfc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <xQueueSemaphoreTake+0xf4>
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	e7fe      	b.n	8006bf2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bf4:	f7ff f838 	bl	8005c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e082      	b.n	8006d02 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c02:	f107 030c 	add.w	r3, r7, #12
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 ffd0 	bl	8007bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c10:	f7ff f82a 	bl	8005c68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c14:	f000 fd2c 	bl	8007670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c18:	f7fe fff8 	bl	8005c0c <vPortEnterCritical>
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c28:	d103      	bne.n	8006c32 <xQueueSemaphoreTake+0x132>
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3e:	d103      	bne.n	8006c48 <xQueueSemaphoreTake+0x148>
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c48:	f7ff f80e 	bl	8005c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c4c:	463a      	mov	r2, r7
 8006c4e:	f107 030c 	add.w	r3, r7, #12
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 ffbf 	bl	8007bd8 <xTaskCheckForTimeOut>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d132      	bne.n	8006cc6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c62:	f000 fa28 	bl	80070b6 <prvIsQueueEmpty>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d026      	beq.n	8006cba <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006c74:	f7fe ffca 	bl	8005c0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 f907 	bl	8007e90 <xTaskPriorityInherit>
 8006c82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c84:	f7fe fff0 	bl	8005c68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	3324      	adds	r3, #36	; 0x24
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fedb 	bl	8007a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c98:	f000 f9bb 	bl	8007012 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c9c:	f000 fcf6 	bl	800768c <xTaskResumeAll>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f47f af69 	bne.w	8006b7a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006ca8:	4b18      	ldr	r3, [pc, #96]	; (8006d0c <xQueueSemaphoreTake+0x20c>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	e75f      	b.n	8006b7a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cbc:	f000 f9a9 	bl	8007012 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cc0:	f000 fce4 	bl	800768c <xTaskResumeAll>
 8006cc4:	e759      	b.n	8006b7a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc8:	f000 f9a3 	bl	8007012 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ccc:	f000 fcde 	bl	800768c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cd2:	f000 f9f0 	bl	80070b6 <prvIsQueueEmpty>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f43f af4e 	beq.w	8006b7a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00d      	beq.n	8006d00 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006ce4:	f7fe ff92 	bl	8005c0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cea:	f000 f8ea 	bl	8006ec2 <prvGetDisinheritPriorityAfterTimeout>
 8006cee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 f9c4 	bl	8008084 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006cfc:	f7fe ffb4 	bl	8005c68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3738      	adds	r7, #56	; 0x38
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	e000ed04 	.word	0xe000ed04

08006d10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08e      	sub	sp, #56	; 0x38
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <xQueueReceiveFromISR+0x2a>
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	623b      	str	r3, [r7, #32]
 8006d38:	e7fe      	b.n	8006d38 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d103      	bne.n	8006d48 <xQueueReceiveFromISR+0x38>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <xQueueReceiveFromISR+0x3c>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <xQueueReceiveFromISR+0x3e>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <xQueueReceiveFromISR+0x56>
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e7fe      	b.n	8006d64 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d66:	f7ff f82d 	bl	8005dc4 <vPortValidateInterruptPriority>
	__asm volatile
 8006d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	61ba      	str	r2, [r7, #24]
 8006d80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d02f      	beq.n	8006df2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da0:	f000 f911 	bl	8006fc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db4:	d112      	bne.n	8006ddc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	3310      	adds	r3, #16
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fe90 	bl	8007ae8 <xTaskRemoveFromEventList>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e007      	b.n	8006dec <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de0:	3301      	adds	r3, #1
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	b25a      	sxtb	r2, r3
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006dec:	2301      	movs	r3, #1
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
 8006df0:	e001      	b.n	8006df6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3738      	adds	r7, #56	; 0x38
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d109      	bne.n	8006e2c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	e7fe      	b.n	8006e2a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006e2c:	f7fe feee 	bl	8005c0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006e36:	f7fe ff17 	bl	8005c68 <vPortExitCritical>

	return uxReturn;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <uxQueueMessagesWaitingFromISR+0x26>
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e7fe      	b.n	8006e68 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006e70:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e72:	4618      	mov	r0, r3
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <vQueueDelete+0x26>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	e7fe      	b.n	8006ea2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f95d 	bl	8007164 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff f891 	bl	8005fdc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f1c3 0307 	rsb	r3, r3, #7
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e001      	b.n	8006ee4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
	}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d14d      	bne.n	8006fb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 f82d 	bl	8007f7c <xTaskPriorityDisinherit>
 8006f22:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	609a      	str	r2, [r3, #8]
 8006f2a:	e043      	b.n	8006fb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d119      	bne.n	8006f66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6858      	ldr	r0, [r3, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	f010 fe9e 	bl	8017c7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	441a      	add	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d32b      	bcc.n	8006fb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	605a      	str	r2, [r3, #4]
 8006f64:	e026      	b.n	8006fb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68d8      	ldr	r0, [r3, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	f010 fe84 	bl	8017c7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	425b      	negs	r3, r3
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d207      	bcs.n	8006fa2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	425b      	negs	r3, r3
 8006f9c:	441a      	add	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d105      	bne.n	8006fb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fbc:	697b      	ldr	r3, [r7, #20]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d018      	beq.n	800700a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	441a      	add	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d303      	bcc.n	8006ffa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68d9      	ldr	r1, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	461a      	mov	r2, r3
 8007004:	6838      	ldr	r0, [r7, #0]
 8007006:	f010 fe3a 	bl	8017c7e <memcpy>
	}
}
 800700a:	bf00      	nop
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800701a:	f7fe fdf7 	bl	8005c0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007024:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007026:	e011      	b.n	800704c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	d012      	beq.n	8007056 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3324      	adds	r3, #36	; 0x24
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fd57 	bl	8007ae8 <xTaskRemoveFromEventList>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007040:	f000 fe2a 	bl	8007c98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	3b01      	subs	r3, #1
 8007048:	b2db      	uxtb	r3, r3
 800704a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800704c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dce9      	bgt.n	8007028 <prvUnlockQueue+0x16>
 8007054:	e000      	b.n	8007058 <prvUnlockQueue+0x46>
					break;
 8007056:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	22ff      	movs	r2, #255	; 0xff
 800705c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007060:	f7fe fe02 	bl	8005c68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007064:	f7fe fdd2 	bl	8005c0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800706e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007070:	e011      	b.n	8007096 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d012      	beq.n	80070a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3310      	adds	r3, #16
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fd32 	bl	8007ae8 <xTaskRemoveFromEventList>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800708a:	f000 fe05 	bl	8007c98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	3b01      	subs	r3, #1
 8007092:	b2db      	uxtb	r3, r3
 8007094:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800709a:	2b00      	cmp	r3, #0
 800709c:	dce9      	bgt.n	8007072 <prvUnlockQueue+0x60>
 800709e:	e000      	b.n	80070a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070aa:	f7fe fddd 	bl	8005c68 <vPortExitCritical>
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070be:	f7fe fda5 	bl	8005c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e001      	b.n	80070d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070d4:	f7fe fdc8 	bl	8005c68 <vPortExitCritical>

	return xReturn;
 80070d8:	68fb      	ldr	r3, [r7, #12]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ea:	f7fe fd8f 	bl	8005c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d102      	bne.n	8007100 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e001      	b.n	8007104 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007104:	f7fe fdb0 	bl	8005c68 <vPortExitCritical>

	return xReturn;
 8007108:	68fb      	ldr	r3, [r7, #12]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e014      	b.n	800714e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007124:	4a0e      	ldr	r2, [pc, #56]	; (8007160 <vQueueAddToRegistry+0x4c>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007130:	490b      	ldr	r1, [pc, #44]	; (8007160 <vQueueAddToRegistry+0x4c>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800713a:	4a09      	ldr	r2, [pc, #36]	; (8007160 <vQueueAddToRegistry+0x4c>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	4413      	add	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007146:	e005      	b.n	8007154 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b07      	cmp	r3, #7
 8007152:	d9e7      	bls.n	8007124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	2001d224 	.word	0x2001d224

08007164 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e016      	b.n	80071a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007172:	4a10      	ldr	r2, [pc, #64]	; (80071b4 <vQueueUnregisterQueue+0x50>)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4413      	add	r3, r2
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	429a      	cmp	r2, r3
 8007180:	d10b      	bne.n	800719a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007182:	4a0c      	ldr	r2, [pc, #48]	; (80071b4 <vQueueUnregisterQueue+0x50>)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2100      	movs	r1, #0
 8007188:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800718c:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <vQueueUnregisterQueue+0x50>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4413      	add	r3, r2
 8007194:	2200      	movs	r2, #0
 8007196:	605a      	str	r2, [r3, #4]
				break;
 8007198:	e005      	b.n	80071a6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3301      	adds	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b07      	cmp	r3, #7
 80071a4:	d9e5      	bls.n	8007172 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	2001d224 	.word	0x2001d224

080071b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071c8:	f7fe fd20 	bl	8005c0c <vPortEnterCritical>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071d2:	b25b      	sxtb	r3, r3
 80071d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071d8:	d103      	bne.n	80071e2 <vQueueWaitForMessageRestricted+0x2a>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e8:	b25b      	sxtb	r3, r3
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ee:	d103      	bne.n	80071f8 <vQueueWaitForMessageRestricted+0x40>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f8:	f7fe fd36 	bl	8005c68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fc41 	bl	8007a94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f7ff fefd 	bl	8007012 <prvUnlockQueue>
	}
 8007218:	bf00      	nop
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af04      	add	r7, sp, #16
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <xTaskCreateStatic+0x28>
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	623b      	str	r3, [r7, #32]
 8007246:	e7fe      	b.n	8007246 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <xTaskCreateStatic+0x42>
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	e7fe      	b.n	8007260 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007262:	2354      	movs	r3, #84	; 0x54
 8007264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b54      	cmp	r3, #84	; 0x54
 800726a:	d009      	beq.n	8007280 <xTaskCreateStatic+0x60>
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e7fe      	b.n	800727e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007280:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01e      	beq.n	80072c6 <xTaskCreateStatic+0xa6>
 8007288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728a:	2b00      	cmp	r3, #0
 800728c:	d01b      	beq.n	80072c6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007296:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	2202      	movs	r2, #2
 800729c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072a0:	2300      	movs	r3, #0
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	f107 0314 	add.w	r3, r7, #20
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f850 	bl	800735e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072c0:	f000 f8d4 	bl	800746c <prvAddNewTaskToReadyList>
 80072c4:	e001      	b.n	80072ca <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072ca:	697b      	ldr	r3, [r7, #20]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3728      	adds	r7, #40	; 0x28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08c      	sub	sp, #48	; 0x30
 80072d8:	af04      	add	r7, sp, #16
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	4613      	mov	r3, r2
 80072e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fda9 	bl	8005e40 <pvPortMalloc>
 80072ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00e      	beq.n	8007314 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072f6:	2054      	movs	r0, #84	; 0x54
 80072f8:	f7fe fda2 	bl	8005e40 <pvPortMalloc>
 80072fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
 800730a:	e005      	b.n	8007318 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800730c:	6978      	ldr	r0, [r7, #20]
 800730e:	f7fe fe65 	bl	8005fdc <vPortFree>
 8007312:	e001      	b.n	8007318 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d017      	beq.n	800734e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	2300      	movs	r3, #0
 800732a:	9303      	str	r3, [sp, #12]
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	9302      	str	r3, [sp, #8]
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f80e 	bl	800735e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007342:	69f8      	ldr	r0, [r7, #28]
 8007344:	f000 f892 	bl	800746c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007348:	2301      	movs	r3, #1
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	e002      	b.n	8007354 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800734e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007352:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007354:	69bb      	ldr	r3, [r7, #24]
	}
 8007356:	4618      	mov	r0, r3
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b088      	sub	sp, #32
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007376:	3b01      	subs	r3, #1
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	2b00      	cmp	r3, #0
 800738e:	d009      	beq.n	80073a4 <prvInitialiseNewTask+0x46>
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	e7fe      	b.n	80073a2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01f      	beq.n	80073ea <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073aa:	2300      	movs	r3, #0
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	e012      	b.n	80073d6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	7819      	ldrb	r1, [r3, #0]
 80073b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	3334      	adds	r3, #52	; 0x34
 80073c0:	460a      	mov	r2, r1
 80073c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d006      	beq.n	80073de <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	3301      	adds	r3, #1
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	2b0f      	cmp	r3, #15
 80073da:	d9e9      	bls.n	80073b0 <prvInitialiseNewTask+0x52>
 80073dc:	e000      	b.n	80073e0 <prvInitialiseNewTask+0x82>
			{
				break;
 80073de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073e8:	e003      	b.n	80073f2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	d901      	bls.n	80073fc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073f8:	2306      	movs	r3, #6
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007400:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007406:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2200      	movs	r2, #0
 800740c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	3304      	adds	r3, #4
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fa3f 	bl	8005896 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	3318      	adds	r3, #24
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fa3a 	bl	8005896 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	f1c3 0207 	rsb	r2, r3, #7
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007436:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	2200      	movs	r2, #0
 800743c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	68f9      	ldr	r1, [r7, #12]
 800744a:	69b8      	ldr	r0, [r7, #24]
 800744c:	f7fe fab8 	bl	80059c0 <pxPortInitialiseStack>
 8007450:	4602      	mov	r2, r0
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007462:	bf00      	nop
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007474:	f7fe fbca 	bl	8005c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007478:	4b2a      	ldr	r3, [pc, #168]	; (8007524 <prvAddNewTaskToReadyList+0xb8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	4a29      	ldr	r2, [pc, #164]	; (8007524 <prvAddNewTaskToReadyList+0xb8>)
 8007480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007482:	4b29      	ldr	r3, [pc, #164]	; (8007528 <prvAddNewTaskToReadyList+0xbc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800748a:	4a27      	ldr	r2, [pc, #156]	; (8007528 <prvAddNewTaskToReadyList+0xbc>)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007490:	4b24      	ldr	r3, [pc, #144]	; (8007524 <prvAddNewTaskToReadyList+0xb8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d110      	bne.n	80074ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007498:	f000 fc22 	bl	8007ce0 <prvInitialiseTaskLists>
 800749c:	e00d      	b.n	80074ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800749e:	4b23      	ldr	r3, [pc, #140]	; (800752c <prvAddNewTaskToReadyList+0xc0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074a6:	4b20      	ldr	r3, [pc, #128]	; (8007528 <prvAddNewTaskToReadyList+0xbc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d802      	bhi.n	80074ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074b4:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <prvAddNewTaskToReadyList+0xbc>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <prvAddNewTaskToReadyList+0xc4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <prvAddNewTaskToReadyList+0xc4>)
 80074c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	2201      	movs	r2, #1
 80074ca:	409a      	lsls	r2, r3
 80074cc:	4b19      	ldr	r3, [pc, #100]	; (8007534 <prvAddNewTaskToReadyList+0xc8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	4a18      	ldr	r2, [pc, #96]	; (8007534 <prvAddNewTaskToReadyList+0xc8>)
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a15      	ldr	r2, [pc, #84]	; (8007538 <prvAddNewTaskToReadyList+0xcc>)
 80074e4:	441a      	add	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4619      	mov	r1, r3
 80074ec:	4610      	mov	r0, r2
 80074ee:	f7fe f9df 	bl	80058b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074f2:	f7fe fbb9 	bl	8005c68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <prvAddNewTaskToReadyList+0xc0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00e      	beq.n	800751c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <prvAddNewTaskToReadyList+0xbc>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	429a      	cmp	r2, r3
 800750a:	d207      	bcs.n	800751c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <prvAddNewTaskToReadyList+0xd0>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20019878 	.word	0x20019878
 8007528:	20019778 	.word	0x20019778
 800752c:	20019884 	.word	0x20019884
 8007530:	20019894 	.word	0x20019894
 8007534:	20019880 	.word	0x20019880
 8007538:	2001977c 	.word	0x2001977c
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d016      	beq.n	8007580 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <vTaskDelay+0x60>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <vTaskDelay+0x2e>
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	60bb      	str	r3, [r7, #8]
 800756c:	e7fe      	b.n	800756c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800756e:	f000 f87f 	bl	8007670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007572:	2100      	movs	r1, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fe25 	bl	80081c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800757a:	f000 f887 	bl	800768c <xTaskResumeAll>
 800757e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007586:	4b07      	ldr	r3, [pc, #28]	; (80075a4 <vTaskDelay+0x64>)
 8007588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	200198a0 	.word	0x200198a0
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075b6:	463a      	mov	r2, r7
 80075b8:	1d39      	adds	r1, r7, #4
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4618      	mov	r0, r3
 80075c0:	f7f9 f808 	bl	80005d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	9202      	str	r2, [sp, #8]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	2300      	movs	r3, #0
 80075d4:	460a      	mov	r2, r1
 80075d6:	4920      	ldr	r1, [pc, #128]	; (8007658 <vTaskStartScheduler+0xb0>)
 80075d8:	4820      	ldr	r0, [pc, #128]	; (800765c <vTaskStartScheduler+0xb4>)
 80075da:	f7ff fe21 	bl	8007220 <xTaskCreateStatic>
 80075de:	4602      	mov	r2, r0
 80075e0:	4b1f      	ldr	r3, [pc, #124]	; (8007660 <vTaskStartScheduler+0xb8>)
 80075e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075e4:	4b1e      	ldr	r3, [pc, #120]	; (8007660 <vTaskStartScheduler+0xb8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e001      	b.n	80075f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d102      	bne.n	8007602 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075fc:	f000 fe48 	bl	8008290 <xTimerCreateTimerTask>
 8007600:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d115      	bne.n	8007634 <vTaskStartScheduler+0x8c>
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	613b      	str	r3, [r7, #16]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <vTaskStartScheduler+0xbc>)
 800761c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007620:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <vTaskStartScheduler+0xc0>)
 8007624:	2201      	movs	r2, #1
 8007626:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007628:	4b10      	ldr	r3, [pc, #64]	; (800766c <vTaskStartScheduler+0xc4>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800762e:	f7fe fa4f 	bl	8005ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007632:	e00d      	b.n	8007650 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800763a:	d109      	bne.n	8007650 <vTaskStartScheduler+0xa8>
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e7fe      	b.n	800764e <vTaskStartScheduler+0xa6>
}
 8007650:	bf00      	nop
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	08018d4c 	.word	0x08018d4c
 800765c:	08007cb1 	.word	0x08007cb1
 8007660:	2001989c 	.word	0x2001989c
 8007664:	20019898 	.word	0x20019898
 8007668:	20019884 	.word	0x20019884
 800766c:	2001987c 	.word	0x2001987c

08007670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <vTaskSuspendAll+0x18>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a03      	ldr	r2, [pc, #12]	; (8007688 <vTaskSuspendAll+0x18>)
 800767c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800767e:	bf00      	nop
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	200198a0 	.word	0x200198a0

0800768c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800769a:	4b41      	ldr	r3, [pc, #260]	; (80077a0 <xTaskResumeAll+0x114>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d109      	bne.n	80076b6 <xTaskResumeAll+0x2a>
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	e7fe      	b.n	80076b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076b6:	f7fe faa9 	bl	8005c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076ba:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <xTaskResumeAll+0x114>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3b01      	subs	r3, #1
 80076c0:	4a37      	ldr	r2, [pc, #220]	; (80077a0 <xTaskResumeAll+0x114>)
 80076c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c4:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <xTaskResumeAll+0x114>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d161      	bne.n	8007790 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076cc:	4b35      	ldr	r3, [pc, #212]	; (80077a4 <xTaskResumeAll+0x118>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d05d      	beq.n	8007790 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076d4:	e02e      	b.n	8007734 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d6:	4b34      	ldr	r3, [pc, #208]	; (80077a8 <xTaskResumeAll+0x11c>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3318      	adds	r3, #24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe f941 	bl	800596a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe f93c 	bl	800596a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	2201      	movs	r2, #1
 80076f8:	409a      	lsls	r2, r3
 80076fa:	4b2c      	ldr	r3, [pc, #176]	; (80077ac <xTaskResumeAll+0x120>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4313      	orrs	r3, r2
 8007700:	4a2a      	ldr	r2, [pc, #168]	; (80077ac <xTaskResumeAll+0x120>)
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4a27      	ldr	r2, [pc, #156]	; (80077b0 <xTaskResumeAll+0x124>)
 8007712:	441a      	add	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3304      	adds	r3, #4
 8007718:	4619      	mov	r1, r3
 800771a:	4610      	mov	r0, r2
 800771c:	f7fe f8c8 	bl	80058b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <xTaskResumeAll+0x128>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800772e:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <xTaskResumeAll+0x12c>)
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007734:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <xTaskResumeAll+0x11c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1cc      	bne.n	80076d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007742:	f000 fb67 	bl	8007e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <xTaskResumeAll+0x130>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d010      	beq.n	8007774 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007752:	f000 f859 	bl	8007808 <xTaskIncrementTick>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800775c:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <xTaskResumeAll+0x12c>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3b01      	subs	r3, #1
 8007766:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1f1      	bne.n	8007752 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <xTaskResumeAll+0x130>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <xTaskResumeAll+0x12c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d009      	beq.n	8007790 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007780:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <xTaskResumeAll+0x134>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007790:	f7fe fa6a 	bl	8005c68 <vPortExitCritical>

	return xAlreadyYielded;
 8007794:	68bb      	ldr	r3, [r7, #8]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200198a0 	.word	0x200198a0
 80077a4:	20019878 	.word	0x20019878
 80077a8:	20019838 	.word	0x20019838
 80077ac:	20019880 	.word	0x20019880
 80077b0:	2001977c 	.word	0x2001977c
 80077b4:	20019778 	.word	0x20019778
 80077b8:	2001988c 	.word	0x2001988c
 80077bc:	20019888 	.word	0x20019888
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <xTaskGetTickCount+0x1c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077d0:	687b      	ldr	r3, [r7, #4]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	2001987c 	.word	0x2001987c

080077e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ea:	f7fe faeb 	bl	8005dc4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80077ee:	2300      	movs	r3, #0
 80077f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80077f2:	4b04      	ldr	r3, [pc, #16]	; (8007804 <xTaskGetTickCountFromISR+0x20>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077f8:	683b      	ldr	r3, [r7, #0]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	2001987c 	.word	0x2001987c

08007808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007812:	4b4e      	ldr	r3, [pc, #312]	; (800794c <xTaskIncrementTick+0x144>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f040 808d 	bne.w	8007936 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800781c:	4b4c      	ldr	r3, [pc, #304]	; (8007950 <xTaskIncrementTick+0x148>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3301      	adds	r3, #1
 8007822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007824:	4a4a      	ldr	r2, [pc, #296]	; (8007950 <xTaskIncrementTick+0x148>)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d11f      	bne.n	8007870 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007830:	4b48      	ldr	r3, [pc, #288]	; (8007954 <xTaskIncrementTick+0x14c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <xTaskIncrementTick+0x46>
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	e7fe      	b.n	800784c <xTaskIncrementTick+0x44>
 800784e:	4b41      	ldr	r3, [pc, #260]	; (8007954 <xTaskIncrementTick+0x14c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	4b40      	ldr	r3, [pc, #256]	; (8007958 <xTaskIncrementTick+0x150>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a3e      	ldr	r2, [pc, #248]	; (8007954 <xTaskIncrementTick+0x14c>)
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	4a3e      	ldr	r2, [pc, #248]	; (8007958 <xTaskIncrementTick+0x150>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	4b3e      	ldr	r3, [pc, #248]	; (800795c <xTaskIncrementTick+0x154>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3301      	adds	r3, #1
 8007868:	4a3c      	ldr	r2, [pc, #240]	; (800795c <xTaskIncrementTick+0x154>)
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	f000 fad2 	bl	8007e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007870:	4b3b      	ldr	r3, [pc, #236]	; (8007960 <xTaskIncrementTick+0x158>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	429a      	cmp	r2, r3
 8007878:	d348      	bcc.n	800790c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800787a:	4b36      	ldr	r3, [pc, #216]	; (8007954 <xTaskIncrementTick+0x14c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007884:	4b36      	ldr	r3, [pc, #216]	; (8007960 <xTaskIncrementTick+0x158>)
 8007886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800788a:	601a      	str	r2, [r3, #0]
					break;
 800788c:	e03e      	b.n	800790c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788e:	4b31      	ldr	r3, [pc, #196]	; (8007954 <xTaskIncrementTick+0x14c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d203      	bcs.n	80078ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078a6:	4a2e      	ldr	r2, [pc, #184]	; (8007960 <xTaskIncrementTick+0x158>)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078ac:	e02e      	b.n	800790c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe f859 	bl	800596a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d004      	beq.n	80078ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	3318      	adds	r3, #24
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe f850 	bl	800596a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	2201      	movs	r2, #1
 80078d0:	409a      	lsls	r2, r3
 80078d2:	4b24      	ldr	r3, [pc, #144]	; (8007964 <xTaskIncrementTick+0x15c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	4a22      	ldr	r2, [pc, #136]	; (8007964 <xTaskIncrementTick+0x15c>)
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <xTaskIncrementTick+0x160>)
 80078ea:	441a      	add	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fd ffdc 	bl	80058b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	4b1b      	ldr	r3, [pc, #108]	; (800796c <xTaskIncrementTick+0x164>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	429a      	cmp	r2, r3
 8007904:	d3b9      	bcc.n	800787a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007906:	2301      	movs	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800790a:	e7b6      	b.n	800787a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800790c:	4b17      	ldr	r3, [pc, #92]	; (800796c <xTaskIncrementTick+0x164>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	4915      	ldr	r1, [pc, #84]	; (8007968 <xTaskIncrementTick+0x160>)
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d901      	bls.n	8007928 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8007924:	2301      	movs	r3, #1
 8007926:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007928:	4b11      	ldr	r3, [pc, #68]	; (8007970 <xTaskIncrementTick+0x168>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e004      	b.n	8007940 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007936:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <xTaskIncrementTick+0x16c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3301      	adds	r3, #1
 800793c:	4a0d      	ldr	r2, [pc, #52]	; (8007974 <xTaskIncrementTick+0x16c>)
 800793e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007940:	697b      	ldr	r3, [r7, #20]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200198a0 	.word	0x200198a0
 8007950:	2001987c 	.word	0x2001987c
 8007954:	20019830 	.word	0x20019830
 8007958:	20019834 	.word	0x20019834
 800795c:	20019890 	.word	0x20019890
 8007960:	20019898 	.word	0x20019898
 8007964:	20019880 	.word	0x20019880
 8007968:	2001977c 	.word	0x2001977c
 800796c:	20019778 	.word	0x20019778
 8007970:	2001988c 	.word	0x2001988c
 8007974:	20019888 	.word	0x20019888

08007978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800797e:	4b2e      	ldr	r3, [pc, #184]	; (8007a38 <vTaskSwitchContext+0xc0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007986:	4b2d      	ldr	r3, [pc, #180]	; (8007a3c <vTaskSwitchContext+0xc4>)
 8007988:	2201      	movs	r2, #1
 800798a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800798c:	e04f      	b.n	8007a2e <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800798e:	4b2b      	ldr	r3, [pc, #172]	; (8007a3c <vTaskSwitchContext+0xc4>)
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007994:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <vTaskSwitchContext+0xc8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b29      	ldr	r3, [pc, #164]	; (8007a40 <vTaskSwitchContext+0xc8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d808      	bhi.n	80079b6 <vTaskSwitchContext+0x3e>
 80079a4:	4b26      	ldr	r3, [pc, #152]	; (8007a40 <vTaskSwitchContext+0xc8>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	4b25      	ldr	r3, [pc, #148]	; (8007a40 <vTaskSwitchContext+0xc8>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3334      	adds	r3, #52	; 0x34
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7f8 fdfd 	bl	80005b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b6:	4b23      	ldr	r3, [pc, #140]	; (8007a44 <vTaskSwitchContext+0xcc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	fab3 f383 	clz	r3, r3
 80079c2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	f1c3 031f 	rsb	r3, r3, #31
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	491e      	ldr	r1, [pc, #120]	; (8007a48 <vTaskSwitchContext+0xd0>)
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <vTaskSwitchContext+0x7c>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	607b      	str	r3, [r7, #4]
 80079f2:	e7fe      	b.n	80079f2 <vTaskSwitchContext+0x7a>
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4a12      	ldr	r2, [pc, #72]	; (8007a48 <vTaskSwitchContext+0xd0>)
 8007a00:	4413      	add	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	3308      	adds	r3, #8
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d104      	bne.n	8007a24 <vTaskSwitchContext+0xac>
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	605a      	str	r2, [r3, #4]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	4a05      	ldr	r2, [pc, #20]	; (8007a40 <vTaskSwitchContext+0xc8>)
 8007a2c:	6013      	str	r3, [r2, #0]
}
 8007a2e:	bf00      	nop
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200198a0 	.word	0x200198a0
 8007a3c:	2001988c 	.word	0x2001988c
 8007a40:	20019778 	.word	0x20019778
 8007a44:	20019880 	.word	0x20019880
 8007a48:	2001977c 	.word	0x2001977c

08007a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <vTaskPlaceOnEventList+0x24>
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	e7fe      	b.n	8007a6e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <vTaskPlaceOnEventList+0x44>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3318      	adds	r3, #24
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7fd ff3d 	bl	80058f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a7e:	2101      	movs	r1, #1
 8007a80:	6838      	ldr	r0, [r7, #0]
 8007a82:	f000 fb9f 	bl	80081c4 <prvAddCurrentTaskToDelayedList>
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20019778 	.word	0x20019778

08007a94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <vTaskPlaceOnEventListRestricted+0x26>
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	e7fe      	b.n	8007ab8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <vTaskPlaceOnEventListRestricted+0x50>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3318      	adds	r3, #24
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7fd fef4 	bl	80058b0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	68b8      	ldr	r0, [r7, #8]
 8007ad8:	f000 fb74 	bl	80081c4 <prvAddCurrentTaskToDelayedList>
	}
 8007adc:	bf00      	nop
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20019778 	.word	0x20019778

08007ae8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <xTaskRemoveFromEventList+0x2a>
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	e7fe      	b.n	8007b10 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3318      	adds	r3, #24
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fd ff27 	bl	800596a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <xTaskRemoveFromEventList+0xac>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d11c      	bne.n	8007b5e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fd ff1e 	bl	800596a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	2201      	movs	r2, #1
 8007b34:	409a      	lsls	r2, r3
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <xTaskRemoveFromEventList+0xb0>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <xTaskRemoveFromEventList+0xb0>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4a13      	ldr	r2, [pc, #76]	; (8007b9c <xTaskRemoveFromEventList+0xb4>)
 8007b4e:	441a      	add	r2, r3
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7fd feaa 	bl	80058b0 <vListInsertEnd>
 8007b5c:	e005      	b.n	8007b6a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3318      	adds	r3, #24
 8007b62:	4619      	mov	r1, r3
 8007b64:	480e      	ldr	r0, [pc, #56]	; (8007ba0 <xTaskRemoveFromEventList+0xb8>)
 8007b66:	f7fd fea3 	bl	80058b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <xTaskRemoveFromEventList+0xbc>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d905      	bls.n	8007b84 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <xTaskRemoveFromEventList+0xc0>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	e001      	b.n	8007b88 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200198a0 	.word	0x200198a0
 8007b98:	20019880 	.word	0x20019880
 8007b9c:	2001977c 	.word	0x2001977c
 8007ba0:	20019838 	.word	0x20019838
 8007ba4:	20019778 	.word	0x20019778
 8007ba8:	2001988c 	.word	0x2001988c

08007bac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bb4:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <vTaskInternalSetTimeOutState+0x24>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <vTaskInternalSetTimeOutState+0x28>)
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	605a      	str	r2, [r3, #4]
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	20019890 	.word	0x20019890
 8007bd4:	2001987c 	.word	0x2001987c

08007bd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <xTaskCheckForTimeOut+0x24>
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	e7fe      	b.n	8007bfa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <xTaskCheckForTimeOut+0x3e>
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e7fe      	b.n	8007c14 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007c16:	f7fd fff9 	bl	8005c0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c1a:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <xTaskCheckForTimeOut+0xb8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c32:	d102      	bne.n	8007c3a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61fb      	str	r3, [r7, #28]
 8007c38:	e023      	b.n	8007c82 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <xTaskCheckForTimeOut+0xbc>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d007      	beq.n	8007c56 <xTaskCheckForTimeOut+0x7e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d802      	bhi.n	8007c56 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c50:	2301      	movs	r3, #1
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	e015      	b.n	8007c82 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d90b      	bls.n	8007c78 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	1ad2      	subs	r2, r2, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ff9d 	bl	8007bac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	e004      	b.n	8007c82 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c82:	f7fd fff1 	bl	8005c68 <vPortExitCritical>

	return xReturn;
 8007c86:	69fb      	ldr	r3, [r7, #28]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3720      	adds	r7, #32
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	2001987c 	.word	0x2001987c
 8007c94:	20019890 	.word	0x20019890

08007c98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c9c:	4b03      	ldr	r3, [pc, #12]	; (8007cac <vTaskMissedYield+0x14>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	2001988c 	.word	0x2001988c

08007cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cb8:	f000 f852 	bl	8007d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <prvIdleTask+0x28>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d9f9      	bls.n	8007cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <prvIdleTask+0x2c>)
 8007cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cd4:	e7f0      	b.n	8007cb8 <prvIdleTask+0x8>
 8007cd6:	bf00      	nop
 8007cd8:	2001977c 	.word	0x2001977c
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	607b      	str	r3, [r7, #4]
 8007cea:	e00c      	b.n	8007d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <prvInitialiseTaskLists+0x60>)
 8007cf8:	4413      	add	r3, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd fdab 	bl	8005856 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3301      	adds	r3, #1
 8007d04:	607b      	str	r3, [r7, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b06      	cmp	r3, #6
 8007d0a:	d9ef      	bls.n	8007cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d0c:	480d      	ldr	r0, [pc, #52]	; (8007d44 <prvInitialiseTaskLists+0x64>)
 8007d0e:	f7fd fda2 	bl	8005856 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d12:	480d      	ldr	r0, [pc, #52]	; (8007d48 <prvInitialiseTaskLists+0x68>)
 8007d14:	f7fd fd9f 	bl	8005856 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d18:	480c      	ldr	r0, [pc, #48]	; (8007d4c <prvInitialiseTaskLists+0x6c>)
 8007d1a:	f7fd fd9c 	bl	8005856 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d1e:	480c      	ldr	r0, [pc, #48]	; (8007d50 <prvInitialiseTaskLists+0x70>)
 8007d20:	f7fd fd99 	bl	8005856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d24:	480b      	ldr	r0, [pc, #44]	; (8007d54 <prvInitialiseTaskLists+0x74>)
 8007d26:	f7fd fd96 	bl	8005856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <prvInitialiseTaskLists+0x78>)
 8007d2c:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <prvInitialiseTaskLists+0x64>)
 8007d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <prvInitialiseTaskLists+0x7c>)
 8007d32:	4a05      	ldr	r2, [pc, #20]	; (8007d48 <prvInitialiseTaskLists+0x68>)
 8007d34:	601a      	str	r2, [r3, #0]
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	2001977c 	.word	0x2001977c
 8007d44:	20019808 	.word	0x20019808
 8007d48:	2001981c 	.word	0x2001981c
 8007d4c:	20019838 	.word	0x20019838
 8007d50:	2001984c 	.word	0x2001984c
 8007d54:	20019864 	.word	0x20019864
 8007d58:	20019830 	.word	0x20019830
 8007d5c:	20019834 	.word	0x20019834

08007d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d66:	e019      	b.n	8007d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d68:	f7fd ff50 	bl	8005c0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <prvCheckTasksWaitingTermination+0x4c>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fd fdf6 	bl	800596a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <prvCheckTasksWaitingTermination+0x50>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	4a0a      	ldr	r2, [pc, #40]	; (8007db0 <prvCheckTasksWaitingTermination+0x50>)
 8007d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <prvCheckTasksWaitingTermination+0x54>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <prvCheckTasksWaitingTermination+0x54>)
 8007d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d92:	f7fd ff69 	bl	8005c68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f80e 	bl	8007db8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <prvCheckTasksWaitingTermination+0x54>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e1      	bne.n	8007d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	2001984c 	.word	0x2001984c
 8007db0:	20019878 	.word	0x20019878
 8007db4:	20019860 	.word	0x20019860

08007db8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d108      	bne.n	8007ddc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe f904 	bl	8005fdc <vPortFree>
				vPortFree( pxTCB );
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7fe f901 	bl	8005fdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dda:	e017      	b.n	8007e0c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d103      	bne.n	8007dee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fe f8f8 	bl	8005fdc <vPortFree>
	}
 8007dec:	e00e      	b.n	8007e0c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d009      	beq.n	8007e0c <prvDeleteTCB+0x54>
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e7fe      	b.n	8007e0a <prvDeleteTCB+0x52>
	}
 8007e0c:	bf00      	nop
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <prvResetNextTaskUnblockTime+0x38>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <prvResetNextTaskUnblockTime+0x3c>)
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e2c:	e008      	b.n	8007e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <prvResetNextTaskUnblockTime+0x38>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <prvResetNextTaskUnblockTime+0x3c>)
 8007e3e:	6013      	str	r3, [r2, #0]
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	20019830 	.word	0x20019830
 8007e50:	20019898 	.word	0x20019898

08007e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <xTaskGetSchedulerState+0x34>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e62:	2301      	movs	r3, #1
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e008      	b.n	8007e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e68:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <xTaskGetSchedulerState+0x38>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e70:	2302      	movs	r3, #2
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	e001      	b.n	8007e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e76:	2300      	movs	r3, #0
 8007e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e7a:	687b      	ldr	r3, [r7, #4]
	}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	20019884 	.word	0x20019884
 8007e8c:	200198a0 	.word	0x200198a0

08007e90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d05e      	beq.n	8007f64 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eaa:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <xTaskPriorityInherit+0xe0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d24e      	bcs.n	8007f52 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	db06      	blt.n	8007eca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebc:	4b2c      	ldr	r3, [pc, #176]	; (8007f70 <xTaskPriorityInherit+0xe0>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	f1c3 0207 	rsb	r2, r3, #7
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6959      	ldr	r1, [r3, #20]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4a26      	ldr	r2, [pc, #152]	; (8007f74 <xTaskPriorityInherit+0xe4>)
 8007edc:	4413      	add	r3, r2
 8007ede:	4299      	cmp	r1, r3
 8007ee0:	d12f      	bne.n	8007f42 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fd fd3f 	bl	800596a <uxListRemove>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	43da      	mvns	r2, r3
 8007efe:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <xTaskPriorityInherit+0xe8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4013      	ands	r3, r2
 8007f04:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <xTaskPriorityInherit+0xe8>)
 8007f06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f08:	4b19      	ldr	r3, [pc, #100]	; (8007f70 <xTaskPriorityInherit+0xe0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	2201      	movs	r2, #1
 8007f18:	409a      	lsls	r2, r3
 8007f1a:	4b17      	ldr	r3, [pc, #92]	; (8007f78 <xTaskPriorityInherit+0xe8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <xTaskPriorityInherit+0xe8>)
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4a10      	ldr	r2, [pc, #64]	; (8007f74 <xTaskPriorityInherit+0xe4>)
 8007f32:	441a      	add	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f7fd fcb8 	bl	80058b0 <vListInsertEnd>
 8007f40:	e004      	b.n	8007f4c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <xTaskPriorityInherit+0xe0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	e008      	b.n	8007f64 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <xTaskPriorityInherit+0xe0>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d201      	bcs.n	8007f64 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f64:	68fb      	ldr	r3, [r7, #12]
	}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20019778 	.word	0x20019778
 8007f74:	2001977c 	.word	0x2001977c
 8007f78:	20019880 	.word	0x20019880

08007f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d06c      	beq.n	800806c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f92:	4b39      	ldr	r3, [pc, #228]	; (8008078 <xTaskPriorityDisinherit+0xfc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d009      	beq.n	8007fb0 <xTaskPriorityDisinherit+0x34>
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	e7fe      	b.n	8007fae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <xTaskPriorityDisinherit+0x50>
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	e7fe      	b.n	8007fca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd0:	1e5a      	subs	r2, r3, #1
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d044      	beq.n	800806c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d140      	bne.n	800806c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fd fcbb 	bl	800596a <uxListRemove>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d115      	bne.n	8008026 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffe:	491f      	ldr	r1, [pc, #124]	; (800807c <xTaskPriorityDisinherit+0x100>)
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xTaskPriorityDisinherit+0xaa>
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	2201      	movs	r2, #1
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	43da      	mvns	r2, r3
 800801c:	4b18      	ldr	r3, [pc, #96]	; (8008080 <xTaskPriorityDisinherit+0x104>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4013      	ands	r3, r2
 8008022:	4a17      	ldr	r2, [pc, #92]	; (8008080 <xTaskPriorityDisinherit+0x104>)
 8008024:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	f1c3 0207 	rsb	r2, r3, #7
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	2201      	movs	r2, #1
 8008040:	409a      	lsls	r2, r3
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <xTaskPriorityDisinherit+0x104>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4313      	orrs	r3, r2
 8008048:	4a0d      	ldr	r2, [pc, #52]	; (8008080 <xTaskPriorityDisinherit+0x104>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a08      	ldr	r2, [pc, #32]	; (800807c <xTaskPriorityDisinherit+0x100>)
 800805a:	441a      	add	r2, r3
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7fd fc24 	bl	80058b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800806c:	697b      	ldr	r3, [r7, #20]
	}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20019778 	.word	0x20019778
 800807c:	2001977c 	.word	0x2001977c
 8008080:	20019880 	.word	0x20019880

08008084 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008092:	2301      	movs	r3, #1
 8008094:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d075      	beq.n	8008188 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e7fe      	b.n	80080b6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d202      	bcs.n	80080c8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	61fb      	str	r3, [r7, #28]
 80080c6:	e002      	b.n	80080ce <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d057      	beq.n	8008188 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d152      	bne.n	8008188 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80080e2:	4b2b      	ldr	r3, [pc, #172]	; (8008190 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d109      	bne.n	8008100 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	e7fe      	b.n	80080fe <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	db04      	blt.n	800811e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f1c3 0207 	rsb	r2, r3, #7
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	6959      	ldr	r1, [r3, #20]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4a19      	ldr	r2, [pc, #100]	; (8008194 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800812e:	4413      	add	r3, r2
 8008130:	4299      	cmp	r1, r3
 8008132:	d129      	bne.n	8008188 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	3304      	adds	r3, #4
 8008138:	4618      	mov	r0, r3
 800813a:	f7fd fc16 	bl	800596a <uxListRemove>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	2201      	movs	r2, #1
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	43da      	mvns	r2, r3
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4013      	ands	r3, r2
 8008156:	4a10      	ldr	r2, [pc, #64]	; (8008198 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008158:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815e:	2201      	movs	r2, #1
 8008160:	409a      	lsls	r2, r3
 8008162:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4313      	orrs	r3, r2
 8008168:	4a0b      	ldr	r2, [pc, #44]	; (8008198 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4a06      	ldr	r2, [pc, #24]	; (8008194 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800817a:	441a      	add	r2, r3
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	3304      	adds	r3, #4
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7fd fb94 	bl	80058b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008188:	bf00      	nop
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20019778 	.word	0x20019778
 8008194:	2001977c 	.word	0x2001977c
 8008198:	20019880 	.word	0x20019880

0800819c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d004      	beq.n	80081b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081ae:	3201      	adds	r2, #1
 80081b0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80081b2:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80081b4:	681b      	ldr	r3, [r3, #0]
	}
 80081b6:	4618      	mov	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20019778 	.word	0x20019778

080081c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ce:	4b29      	ldr	r3, [pc, #164]	; (8008274 <prvAddCurrentTaskToDelayedList+0xb0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081d4:	4b28      	ldr	r3, [pc, #160]	; (8008278 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3304      	adds	r3, #4
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fd fbc5 	bl	800596a <uxListRemove>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10b      	bne.n	80081fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80081e6:	4b24      	ldr	r3, [pc, #144]	; (8008278 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	2201      	movs	r2, #1
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	43da      	mvns	r2, r3
 80081f4:	4b21      	ldr	r3, [pc, #132]	; (800827c <prvAddCurrentTaskToDelayedList+0xb8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4013      	ands	r3, r2
 80081fa:	4a20      	ldr	r2, [pc, #128]	; (800827c <prvAddCurrentTaskToDelayedList+0xb8>)
 80081fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008204:	d10a      	bne.n	800821c <prvAddCurrentTaskToDelayedList+0x58>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3304      	adds	r3, #4
 8008212:	4619      	mov	r1, r3
 8008214:	481a      	ldr	r0, [pc, #104]	; (8008280 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008216:	f7fd fb4b 	bl	80058b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800821a:	e026      	b.n	800826a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008224:	4b14      	ldr	r3, [pc, #80]	; (8008278 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	429a      	cmp	r2, r3
 8008232:	d209      	bcs.n	8008248 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3304      	adds	r3, #4
 800823e:	4619      	mov	r1, r3
 8008240:	4610      	mov	r0, r2
 8008242:	f7fd fb59 	bl	80058f8 <vListInsert>
}
 8008246:	e010      	b.n	800826a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008248:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <prvAddCurrentTaskToDelayedList+0xc4>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3304      	adds	r3, #4
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7fd fb4f 	bl	80058f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800825a:	4b0c      	ldr	r3, [pc, #48]	; (800828c <prvAddCurrentTaskToDelayedList+0xc8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	429a      	cmp	r2, r3
 8008262:	d202      	bcs.n	800826a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008264:	4a09      	ldr	r2, [pc, #36]	; (800828c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	6013      	str	r3, [r2, #0]
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	2001987c 	.word	0x2001987c
 8008278:	20019778 	.word	0x20019778
 800827c:	20019880 	.word	0x20019880
 8008280:	20019864 	.word	0x20019864
 8008284:	20019834 	.word	0x20019834
 8008288:	20019830 	.word	0x20019830
 800828c:	20019898 	.word	0x20019898

08008290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	; 0x28
 8008294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800829a:	f000 fae7 	bl	800886c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800829e:	4b1c      	ldr	r3, [pc, #112]	; (8008310 <xTimerCreateTimerTask+0x80>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d021      	beq.n	80082ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082ae:	1d3a      	adds	r2, r7, #4
 80082b0:	f107 0108 	add.w	r1, r7, #8
 80082b4:	f107 030c 	add.w	r3, r7, #12
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7f8 f9a5 	bl	8000608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	9202      	str	r2, [sp, #8]
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	2302      	movs	r3, #2
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	460a      	mov	r2, r1
 80082d0:	4910      	ldr	r1, [pc, #64]	; (8008314 <xTimerCreateTimerTask+0x84>)
 80082d2:	4811      	ldr	r0, [pc, #68]	; (8008318 <xTimerCreateTimerTask+0x88>)
 80082d4:	f7fe ffa4 	bl	8007220 <xTaskCreateStatic>
 80082d8:	4602      	mov	r2, r0
 80082da:	4b10      	ldr	r3, [pc, #64]	; (800831c <xTimerCreateTimerTask+0x8c>)
 80082dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082de:	4b0f      	ldr	r3, [pc, #60]	; (800831c <xTimerCreateTimerTask+0x8c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d109      	bne.n	8008304 <xTimerCreateTimerTask+0x74>
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	613b      	str	r3, [r7, #16]
 8008302:	e7fe      	b.n	8008302 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008304:	697b      	ldr	r3, [r7, #20]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200198d4 	.word	0x200198d4
 8008314:	08018d54 	.word	0x08018d54
 8008318:	08008451 	.word	0x08008451
 800831c:	200198d8 	.word	0x200198d8

08008320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800832e:	2300      	movs	r3, #0
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d109      	bne.n	800834c <xTimerGenericCommand+0x2c>
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	623b      	str	r3, [r7, #32]
 800834a:	e7fe      	b.n	800834a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800834c:	4b19      	ldr	r3, [pc, #100]	; (80083b4 <xTimerGenericCommand+0x94>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d02a      	beq.n	80083aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b05      	cmp	r3, #5
 8008364:	dc18      	bgt.n	8008398 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008366:	f7ff fd75 	bl	8007e54 <xTaskGetSchedulerState>
 800836a:	4603      	mov	r3, r0
 800836c:	2b02      	cmp	r3, #2
 800836e:	d109      	bne.n	8008384 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008370:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <xTimerGenericCommand+0x94>)
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	f107 0114 	add.w	r1, r7, #20
 8008378:	2300      	movs	r3, #0
 800837a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800837c:	f7fe f8ca 	bl	8006514 <xQueueGenericSend>
 8008380:	6278      	str	r0, [r7, #36]	; 0x24
 8008382:	e012      	b.n	80083aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008384:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <xTimerGenericCommand+0x94>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	f107 0114 	add.w	r1, r7, #20
 800838c:	2300      	movs	r3, #0
 800838e:	2200      	movs	r2, #0
 8008390:	f7fe f8c0 	bl	8006514 <xQueueGenericSend>
 8008394:	6278      	str	r0, [r7, #36]	; 0x24
 8008396:	e008      	b.n	80083aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <xTimerGenericCommand+0x94>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	f107 0114 	add.w	r1, r7, #20
 80083a0:	2300      	movs	r3, #0
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	f7fe f9b0 	bl	8006708 <xQueueGenericSendFromISR>
 80083a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3728      	adds	r7, #40	; 0x28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	200198d4 	.word	0x200198d4

080083b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af02      	add	r7, sp, #8
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c2:	4b22      	ldr	r3, [pc, #136]	; (800844c <prvProcessExpiredTimer+0x94>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd faca 	bl	800596a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d021      	beq.n	8008428 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	18d1      	adds	r1, r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	6978      	ldr	r0, [r7, #20]
 80083f2:	f000 f8d1 	bl	8008598 <prvInsertTimerInActiveList>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01e      	beq.n	800843a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083fc:	2300      	movs	r3, #0
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	2100      	movs	r1, #0
 8008406:	6978      	ldr	r0, [r7, #20]
 8008408:	f7ff ff8a 	bl	8008320 <xTimerGenericCommand>
 800840c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d112      	bne.n	800843a <prvProcessExpiredTimer+0x82>
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e7fe      	b.n	8008426 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800842e:	f023 0301 	bic.w	r3, r3, #1
 8008432:	b2da      	uxtb	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	4798      	blx	r3
}
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200198cc 	.word	0x200198cc

08008450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008458:	f107 0308 	add.w	r3, r7, #8
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f857 	bl	8008510 <prvGetNextExpireTime>
 8008462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4619      	mov	r1, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 f803 	bl	8008474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800846e:	f000 f8d5 	bl	800861c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008472:	e7f1      	b.n	8008458 <prvTimerTask+0x8>

08008474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800847e:	f7ff f8f7 	bl	8007670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008482:	f107 0308 	add.w	r3, r7, #8
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f866 	bl	8008558 <prvSampleTimeNow>
 800848c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d130      	bne.n	80084f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <prvProcessTimerOrBlockTask+0x3c>
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d806      	bhi.n	80084b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084a2:	f7ff f8f3 	bl	800768c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff ff85 	bl	80083b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084ae:	e024      	b.n	80084fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d008      	beq.n	80084c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084b6:	4b13      	ldr	r3, [pc, #76]	; (8008504 <prvProcessTimerOrBlockTask+0x90>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <prvProcessTimerOrBlockTask+0x50>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <prvProcessTimerOrBlockTask+0x52>
 80084c4:	2300      	movs	r3, #0
 80084c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <prvProcessTimerOrBlockTask+0x94>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4619      	mov	r1, r3
 80084d6:	f7fe fe6f 	bl	80071b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084da:	f7ff f8d7 	bl	800768c <xTaskResumeAll>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084e4:	4b09      	ldr	r3, [pc, #36]	; (800850c <prvProcessTimerOrBlockTask+0x98>)
 80084e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	f3bf 8f6f 	isb	sy
}
 80084f4:	e001      	b.n	80084fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084f6:	f7ff f8c9 	bl	800768c <xTaskResumeAll>
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	200198d0 	.word	0x200198d0
 8008508:	200198d4 	.word	0x200198d4
 800850c:	e000ed04 	.word	0xe000ed04

08008510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008518:	4b0e      	ldr	r3, [pc, #56]	; (8008554 <prvGetNextExpireTime+0x44>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <prvGetNextExpireTime+0x16>
 8008522:	2201      	movs	r2, #1
 8008524:	e000      	b.n	8008528 <prvGetNextExpireTime+0x18>
 8008526:	2200      	movs	r2, #0
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d105      	bne.n	8008540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008534:	4b07      	ldr	r3, [pc, #28]	; (8008554 <prvGetNextExpireTime+0x44>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	e001      	b.n	8008544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008544:	68fb      	ldr	r3, [r7, #12]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	200198cc 	.word	0x200198cc

08008558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008560:	f7ff f930 	bl	80077c4 <xTaskGetTickCount>
 8008564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008566:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <prvSampleTimeNow+0x3c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	429a      	cmp	r2, r3
 800856e:	d205      	bcs.n	800857c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008570:	f000 f918 	bl	80087a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e002      	b.n	8008582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008582:	4a04      	ldr	r2, [pc, #16]	; (8008594 <prvSampleTimeNow+0x3c>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008588:	68fb      	ldr	r3, [r7, #12]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	200198dc 	.word	0x200198dc

08008598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d812      	bhi.n	80085e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d302      	bcc.n	80085d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085cc:	2301      	movs	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e01b      	b.n	800860a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <prvInsertTimerInActiveList+0x7c>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3304      	adds	r3, #4
 80085da:	4619      	mov	r1, r3
 80085dc:	4610      	mov	r0, r2
 80085de:	f7fd f98b 	bl	80058f8 <vListInsert>
 80085e2:	e012      	b.n	800860a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d206      	bcs.n	80085fa <prvInsertTimerInActiveList+0x62>
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d302      	bcc.n	80085fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e007      	b.n	800860a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <prvInsertTimerInActiveList+0x80>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3304      	adds	r3, #4
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f7fd f977 	bl	80058f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800860a:	697b      	ldr	r3, [r7, #20]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200198d0 	.word	0x200198d0
 8008618:	200198cc 	.word	0x200198cc

0800861c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08c      	sub	sp, #48	; 0x30
 8008620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008622:	e0ac      	b.n	800877e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f2c0 80a9 	blt.w	800877e <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	3304      	adds	r3, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd f994 	bl	800596a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff ff87 	bl	8008558 <prvSampleTimeNow>
 800864a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b09      	cmp	r3, #9
 8008650:	f200 8094 	bhi.w	800877c <prvProcessReceivedCommands+0x160>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <prvProcessReceivedCommands+0x40>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008685 	.word	0x08008685
 8008660:	08008685 	.word	0x08008685
 8008664:	08008685 	.word	0x08008685
 8008668:	080086f7 	.word	0x080086f7
 800866c:	0800870b 	.word	0x0800870b
 8008670:	08008753 	.word	0x08008753
 8008674:	08008685 	.word	0x08008685
 8008678:	08008685 	.word	0x08008685
 800867c:	080086f7 	.word	0x080086f7
 8008680:	0800870b 	.word	0x0800870b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	b2da      	uxtb	r2, r3
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	18d1      	adds	r1, r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086a4:	f7ff ff78 	bl	8008598 <prvInsertTimerInActiveList>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d067      	beq.n	800877e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d05c      	beq.n	800877e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	441a      	add	r2, r3
 80086cc:	2300      	movs	r3, #0
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	2300      	movs	r3, #0
 80086d2:	2100      	movs	r1, #0
 80086d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086d6:	f7ff fe23 	bl	8008320 <xTimerGenericCommand>
 80086da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d14d      	bne.n	800877e <prvProcessReceivedCommands+0x162>
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	61bb      	str	r3, [r7, #24]
 80086f4:	e7fe      	b.n	80086f4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086fc:	f023 0301 	bic.w	r3, r3, #1
 8008700:	b2da      	uxtb	r2, r3
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008708:	e039      	b.n	800877e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <prvProcessReceivedCommands+0x122>
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e7fe      	b.n	800873c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	18d1      	adds	r1, r2, r3
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	6a3a      	ldr	r2, [r7, #32]
 800874a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800874c:	f7ff ff24 	bl	8008598 <prvInsertTimerInActiveList>
					break;
 8008750:	e015      	b.n	800877e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8008760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008762:	f7fd fc3b 	bl	8005fdc <vPortFree>
 8008766:	e00a      	b.n	800877e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	b2da      	uxtb	r2, r3
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800877a:	e000      	b.n	800877e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 800877c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800877e:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <prvProcessReceivedCommands+0x184>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f107 0108 	add.w	r1, r7, #8
 8008786:	2200      	movs	r2, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe f8dd 	bl	8006948 <xQueueReceive>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f47f af47 	bne.w	8008624 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008796:	bf00      	nop
 8008798:	3728      	adds	r7, #40	; 0x28
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	200198d4 	.word	0x200198d4

080087a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087aa:	e047      	b.n	800883c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087ac:	4b2d      	ldr	r3, [pc, #180]	; (8008864 <prvSwitchTimerLists+0xc0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b6:	4b2b      	ldr	r3, [pc, #172]	; (8008864 <prvSwitchTimerLists+0xc0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fd f8d0 	bl	800596a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6938      	ldr	r0, [r7, #16]
 80087d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02d      	beq.n	800883c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4413      	add	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d90e      	bls.n	8008810 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087fe:	4b19      	ldr	r3, [pc, #100]	; (8008864 <prvSwitchTimerLists+0xc0>)
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3304      	adds	r3, #4
 8008806:	4619      	mov	r1, r3
 8008808:	4610      	mov	r0, r2
 800880a:	f7fd f875 	bl	80058f8 <vListInsert>
 800880e:	e015      	b.n	800883c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008810:	2300      	movs	r3, #0
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	2300      	movs	r3, #0
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	2100      	movs	r1, #0
 800881a:	6938      	ldr	r0, [r7, #16]
 800881c:	f7ff fd80 	bl	8008320 <xTimerGenericCommand>
 8008820:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <prvSwitchTimerLists+0x98>
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	603b      	str	r3, [r7, #0]
 800883a:	e7fe      	b.n	800883a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <prvSwitchTimerLists+0xc0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1b2      	bne.n	80087ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <prvSwitchTimerLists+0xc0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <prvSwitchTimerLists+0xc4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a04      	ldr	r2, [pc, #16]	; (8008864 <prvSwitchTimerLists+0xc0>)
 8008852:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008854:	4a04      	ldr	r2, [pc, #16]	; (8008868 <prvSwitchTimerLists+0xc4>)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6013      	str	r3, [r2, #0]
}
 800885a:	bf00      	nop
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	200198cc 	.word	0x200198cc
 8008868:	200198d0 	.word	0x200198d0

0800886c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008872:	f7fd f9cb 	bl	8005c0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008876:	4b15      	ldr	r3, [pc, #84]	; (80088cc <prvCheckForValidListAndQueue+0x60>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d120      	bne.n	80088c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800887e:	4814      	ldr	r0, [pc, #80]	; (80088d0 <prvCheckForValidListAndQueue+0x64>)
 8008880:	f7fc ffe9 	bl	8005856 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008884:	4813      	ldr	r0, [pc, #76]	; (80088d4 <prvCheckForValidListAndQueue+0x68>)
 8008886:	f7fc ffe6 	bl	8005856 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <prvCheckForValidListAndQueue+0x6c>)
 800888c:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <prvCheckForValidListAndQueue+0x64>)
 800888e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <prvCheckForValidListAndQueue+0x70>)
 8008892:	4a10      	ldr	r2, [pc, #64]	; (80088d4 <prvCheckForValidListAndQueue+0x68>)
 8008894:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008896:	2300      	movs	r3, #0
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <prvCheckForValidListAndQueue+0x74>)
 800889c:	4a11      	ldr	r2, [pc, #68]	; (80088e4 <prvCheckForValidListAndQueue+0x78>)
 800889e:	210c      	movs	r1, #12
 80088a0:	200a      	movs	r0, #10
 80088a2:	f7fd fd1f 	bl	80062e4 <xQueueGenericCreateStatic>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b08      	ldr	r3, [pc, #32]	; (80088cc <prvCheckForValidListAndQueue+0x60>)
 80088aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088ac:	4b07      	ldr	r3, [pc, #28]	; (80088cc <prvCheckForValidListAndQueue+0x60>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088b4:	4b05      	ldr	r3, [pc, #20]	; (80088cc <prvCheckForValidListAndQueue+0x60>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	490b      	ldr	r1, [pc, #44]	; (80088e8 <prvCheckForValidListAndQueue+0x7c>)
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fc2a 	bl	8007114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088c0:	f7fd f9d2 	bl	8005c68 <vPortExitCritical>
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200198d4 	.word	0x200198d4
 80088d0:	200198a4 	.word	0x200198a4
 80088d4:	200198b8 	.word	0x200198b8
 80088d8:	200198cc 	.word	0x200198cc
 80088dc:	200198d0 	.word	0x200198d0
 80088e0:	20019958 	.word	0x20019958
 80088e4:	200198e0 	.word	0x200198e0
 80088e8:	08018d5c 	.word	0x08018d5c

080088ec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	330c      	adds	r3, #12
 80088fc:	461a      	mov	r2, r3
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f002 f96d 	bl	800abe0 <tcpip_send_msg_wait_sem>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800890a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d103      	bne.n	800891a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008918:	e001      	b.n	800891e <netconn_apimsg+0x32>
  }
  return err;
 800891a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	; 0x28
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	603a      	str	r2, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
 8008934:	460b      	mov	r3, r1
 8008936:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 ff83 	bl	8009848 <netconn_alloc>
 8008942:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d054      	beq.n	80089f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800894a:	79bb      	ldrb	r3, [r7, #6]
 800894c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008952:	f107 030c 	add.w	r3, r7, #12
 8008956:	4619      	mov	r1, r3
 8008958:	4829      	ldr	r0, [pc, #164]	; (8008a00 <netconn_new_with_proto_and_callback+0xd8>)
 800895a:	f7ff ffc7 	bl	80088ec <netconn_apimsg>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8008964:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008968:	2b00      	cmp	r3, #0
 800896a:	d043      	beq.n	80089f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <netconn_new_with_proto_and_callback+0x58>
 8008974:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <netconn_new_with_proto_and_callback+0xdc>)
 8008976:	2289      	movs	r2, #137	; 0x89
 8008978:	4923      	ldr	r1, [pc, #140]	; (8008a08 <netconn_new_with_proto_and_callback+0xe0>)
 800897a:	4824      	ldr	r0, [pc, #144]	; (8008a0c <netconn_new_with_proto_and_callback+0xe4>)
 800897c:	f00f f992 	bl	8017ca4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	3310      	adds	r3, #16
 8008984:	4618      	mov	r0, r3
 8008986:	f00e ffe3 	bl	8017950 <sys_mbox_valid>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d105      	bne.n	800899c <netconn_new_with_proto_and_callback+0x74>
 8008990:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <netconn_new_with_proto_and_callback+0xdc>)
 8008992:	228a      	movs	r2, #138	; 0x8a
 8008994:	491e      	ldr	r1, [pc, #120]	; (8008a10 <netconn_new_with_proto_and_callback+0xe8>)
 8008996:	481d      	ldr	r0, [pc, #116]	; (8008a0c <netconn_new_with_proto_and_callback+0xe4>)
 8008998:	f00f f984 	bl	8017ca4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	3314      	adds	r3, #20
 80089a0:	4618      	mov	r0, r3
 80089a2:	f00e ffd5 	bl	8017950 <sys_mbox_valid>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <netconn_new_with_proto_and_callback+0x90>
 80089ac:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <netconn_new_with_proto_and_callback+0xdc>)
 80089ae:	228c      	movs	r2, #140	; 0x8c
 80089b0:	4918      	ldr	r1, [pc, #96]	; (8008a14 <netconn_new_with_proto_and_callback+0xec>)
 80089b2:	4816      	ldr	r0, [pc, #88]	; (8008a0c <netconn_new_with_proto_and_callback+0xe4>)
 80089b4:	f00f f976 	bl	8017ca4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	330c      	adds	r3, #12
 80089bc:	4618      	mov	r0, r3
 80089be:	f00f f858 	bl	8017a72 <sys_sem_valid>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d105      	bne.n	80089d4 <netconn_new_with_proto_and_callback+0xac>
 80089c8:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <netconn_new_with_proto_and_callback+0xdc>)
 80089ca:	228f      	movs	r2, #143	; 0x8f
 80089cc:	4912      	ldr	r1, [pc, #72]	; (8008a18 <netconn_new_with_proto_and_callback+0xf0>)
 80089ce:	480f      	ldr	r0, [pc, #60]	; (8008a0c <netconn_new_with_proto_and_callback+0xe4>)
 80089d0:	f00f f968 	bl	8017ca4 <iprintf>
      sys_sem_free(&conn->op_completed);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	330c      	adds	r3, #12
 80089d8:	4618      	mov	r0, r3
 80089da:	f00f f83d 	bl	8017a58 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	3310      	adds	r3, #16
 80089e2:	4618      	mov	r0, r3
 80089e4:	f00e ff18 	bl	8017818 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80089e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ea:	2007      	movs	r0, #7
 80089ec:	f007 fc92 	bl	8010314 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	e000      	b.n	80089f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3728      	adds	r7, #40	; 0x28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	080097f1 	.word	0x080097f1
 8008a04:	08018d64 	.word	0x08018d64
 8008a08:	08018d98 	.word	0x08018d98
 8008a0c:	08018dbc 	.word	0x08018dbc
 8008a10:	08018de4 	.word	0x08018de4
 8008a14:	08018dfc 	.word	0x08018dfc
 8008a18:	08018e20 	.word	0x08018e20

08008a1c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <netconn_delete+0x12>
    return ERR_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e016      	b.n	8008a5c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a32:	2329      	movs	r3, #41	; 0x29
 8008a34:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4809      	ldr	r0, [pc, #36]	; (8008a64 <netconn_delete+0x48>)
 8008a3e:	f7ff ff55 	bl	80088ec <netconn_apimsg>
 8008a42:	4603      	mov	r3, r0
 8008a44:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008a46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <netconn_delete+0x38>
    return err;
 8008a4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a52:	e003      	b.n	8008a5c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 ff67 	bl	8009928 <netconn_free>

  return ERR_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	08009dad 	.word	0x08009dad

08008a68 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	; 0x28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d108      	bne.n	8008a8e <netconn_bind+0x26>
 8008a7c:	4b11      	ldr	r3, [pc, #68]	; (8008ac4 <netconn_bind+0x5c>)
 8008a7e:	22ff      	movs	r2, #255	; 0xff
 8008a80:	4911      	ldr	r1, [pc, #68]	; (8008ac8 <netconn_bind+0x60>)
 8008a82:	4812      	ldr	r0, [pc, #72]	; (8008acc <netconn_bind+0x64>)
 8008a84:	f00f f90e 	bl	8017ca4 <iprintf>
 8008a88:	f06f 030f 	mvn.w	r3, #15
 8008a8c:	e015      	b.n	8008aba <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8008a94:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <netconn_bind+0x68>)
 8008a96:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008aa4:	f107 0310 	add.w	r3, r7, #16
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	480a      	ldr	r0, [pc, #40]	; (8008ad4 <netconn_bind+0x6c>)
 8008aac:	f7ff ff1e 	bl	80088ec <netconn_apimsg>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8008ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3728      	adds	r7, #40	; 0x28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08018d64 	.word	0x08018d64
 8008ac8:	08018e9c 	.word	0x08018e9c
 8008acc:	08018dbc 	.word	0x08018dbc
 8008ad0:	0801be94 	.word	0x0801be94
 8008ad4:	08009fb1 	.word	0x08009fb1

08008ad8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <netconn_listen_with_backlog+0x26>
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <netconn_listen_with_backlog+0x48>)
 8008aec:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008af0:	490c      	ldr	r1, [pc, #48]	; (8008b24 <netconn_listen_with_backlog+0x4c>)
 8008af2:	480d      	ldr	r0, [pc, #52]	; (8008b28 <netconn_listen_with_backlog+0x50>)
 8008af4:	f00f f8d6 	bl	8017ca4 <iprintf>
 8008af8:	f06f 030f 	mvn.w	r3, #15
 8008afc:	e00b      	b.n	8008b16 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4619      	mov	r1, r3
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <netconn_listen_with_backlog+0x54>)
 8008b0a:	f7ff feef 	bl	80088ec <netconn_apimsg>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8008b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	08018d64 	.word	0x08018d64
 8008b24:	08018efc 	.word	0x08018efc
 8008b28:	08018dbc 	.word	0x08018dbc
 8008b2c:	0800a071 	.word	0x0800a071

08008b30 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <netconn_accept+0x24>
 8008b40:	4b34      	ldr	r3, [pc, #208]	; (8008c14 <netconn_accept+0xe4>)
 8008b42:	f240 128d 	movw	r2, #397	; 0x18d
 8008b46:	4934      	ldr	r1, [pc, #208]	; (8008c18 <netconn_accept+0xe8>)
 8008b48:	4834      	ldr	r0, [pc, #208]	; (8008c1c <netconn_accept+0xec>)
 8008b4a:	f00f f8ab 	bl	8017ca4 <iprintf>
 8008b4e:	f06f 030f 	mvn.w	r3, #15
 8008b52:	e05b      	b.n	8008c0c <netconn_accept+0xdc>
  *new_conn = NULL;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2200      	movs	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <netconn_accept+0x44>
 8008b60:	4b2c      	ldr	r3, [pc, #176]	; (8008c14 <netconn_accept+0xe4>)
 8008b62:	f240 128f 	movw	r2, #399	; 0x18f
 8008b66:	492e      	ldr	r1, [pc, #184]	; (8008c20 <netconn_accept+0xf0>)
 8008b68:	482c      	ldr	r0, [pc, #176]	; (8008c1c <netconn_accept+0xec>)
 8008b6a:	f00f f89b 	bl	8017ca4 <iprintf>
 8008b6e:	f06f 030f 	mvn.w	r3, #15
 8008b72:	e04b      	b.n	8008c0c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b7a:	f113 0f0c 	cmn.w	r3, #12
 8008b7e:	da03      	bge.n	8008b88 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b86:	e041      	b.n	8008c0c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f00e fedf 	bl	8017950 <sys_mbox_valid>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <netconn_accept+0x6e>
    return ERR_CLSD;
 8008b98:	f06f 030e 	mvn.w	r3, #14
 8008b9c:	e036      	b.n	8008c0c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3314      	adds	r3, #20
 8008ba2:	f107 010c 	add.w	r1, r7, #12
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f00e fe76 	bl	801789a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <netconn_accept+0x96>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a16      	ldr	r2, [pc, #88]	; (8008c24 <netconn_accept+0xf4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d102      	bne.n	8008bd4 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8008bce:	f06f 030c 	mvn.w	r3, #12
 8008bd2:	e01b      	b.n	8008c0c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d114      	bne.n	8008c04 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00e      	beq.n	8008bfe <netconn_accept+0xce>
 8008be0:	f00e ffd2 	bl	8017b88 <sys_arch_protect>
 8008be4:	6138      	str	r0, [r7, #16]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008bec:	f113 0f0c 	cmn.w	r3, #12
 8008bf0:	db02      	blt.n	8008bf8 <netconn_accept+0xc8>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	22f1      	movs	r2, #241	; 0xf1
 8008bf6:	721a      	strb	r2, [r3, #8]
 8008bf8:	6938      	ldr	r0, [r7, #16]
 8008bfa:	f00e ffd3 	bl	8017ba4 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8008bfe:	f06f 030e 	mvn.w	r3, #14
 8008c02:	e003      	b.n	8008c0c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008c0a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	08018d64 	.word	0x08018d64
 8008c18:	08018f1c 	.word	0x08018f1c
 8008c1c:	08018dbc 	.word	0x08018dbc
 8008c20:	08018f3c 	.word	0x08018f3c
 8008c24:	2001d264 	.word	0x2001d264

08008c28 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d109      	bne.n	8008c50 <netconn_recv_data+0x28>
 8008c3c:	4b5c      	ldr	r3, [pc, #368]	; (8008db0 <netconn_recv_data+0x188>)
 8008c3e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8008c42:	495c      	ldr	r1, [pc, #368]	; (8008db4 <netconn_recv_data+0x18c>)
 8008c44:	485c      	ldr	r0, [pc, #368]	; (8008db8 <netconn_recv_data+0x190>)
 8008c46:	f00f f82d 	bl	8017ca4 <iprintf>
 8008c4a:	f06f 030f 	mvn.w	r3, #15
 8008c4e:	e0aa      	b.n	8008da6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <netconn_recv_data+0x48>
 8008c5c:	4b54      	ldr	r3, [pc, #336]	; (8008db0 <netconn_recv_data+0x188>)
 8008c5e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8008c62:	4956      	ldr	r1, [pc, #344]	; (8008dbc <netconn_recv_data+0x194>)
 8008c64:	4854      	ldr	r0, [pc, #336]	; (8008db8 <netconn_recv_data+0x190>)
 8008c66:	f00f f81d 	bl	8017ca4 <iprintf>
 8008c6a:	f06f 030f 	mvn.w	r3, #15
 8008c6e:	e09a      	b.n	8008da6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c78:	2b10      	cmp	r3, #16
 8008c7a:	d115      	bne.n	8008ca8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3310      	adds	r3, #16
 8008c80:	4618      	mov	r0, r3
 8008c82:	f00e fe65 	bl	8017950 <sys_mbox_valid>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10d      	bne.n	8008ca8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3314      	adds	r3, #20
 8008c90:	4618      	mov	r0, r3
 8008c92:	f00e fe5d 	bl	8017950 <sys_mbox_valid>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <netconn_recv_data+0x7a>
 8008c9c:	f06f 030a 	mvn.w	r3, #10
 8008ca0:	e081      	b.n	8008da6 <netconn_recv_data+0x17e>
 8008ca2:	f06f 030e 	mvn.w	r3, #14
 8008ca6:	e07e      	b.n	8008da6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3310      	adds	r3, #16
 8008cac:	4618      	mov	r0, r3
 8008cae:	f00e fe4f 	bl	8017950 <sys_mbox_valid>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <netconn_recv_data+0xa4>
 8008cb8:	4b3d      	ldr	r3, [pc, #244]	; (8008db0 <netconn_recv_data+0x188>)
 8008cba:	f240 12f5 	movw	r2, #501	; 0x1f5
 8008cbe:	4940      	ldr	r1, [pc, #256]	; (8008dc0 <netconn_recv_data+0x198>)
 8008cc0:	483d      	ldr	r0, [pc, #244]	; (8008db8 <netconn_recv_data+0x190>)
 8008cc2:	f00e ffef 	bl	8017ca4 <iprintf>
 8008cc6:	f06f 030a 	mvn.w	r3, #10
 8008cca:	e06c      	b.n	8008da6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008cd2:	f113 0f0c 	cmn.w	r3, #12
 8008cd6:	da03      	bge.n	8008ce0 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008cde:	e062      	b.n	8008da6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	f107 0120 	add.w	r1, r7, #32
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f00e fdd5 	bl	801789a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	d138      	bne.n	8008d6e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	891b      	ldrh	r3, [r3, #8]
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e001      	b.n	8008d12 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8008d12:	f107 030c 	add.w	r3, r7, #12
 8008d16:	4619      	mov	r1, r3
 8008d18:	482a      	ldr	r0, [pc, #168]	; (8008dc4 <netconn_recv_data+0x19c>)
 8008d1a:	f7ff fde7 	bl	80088ec <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d120      	bne.n	8008d66 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <netconn_recv_data+0x110>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	2200      	movs	r2, #0
 8008d32:	2101      	movs	r1, #1
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <netconn_recv_data+0x12a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008d50:	e029      	b.n	8008da6 <netconn_recv_data+0x17e>
 8008d52:	f06f 030d 	mvn.w	r3, #13
 8008d56:	e026      	b.n	8008da6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008d58:	2101      	movs	r1, #1
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f926 	bl	8008fac <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008d60:	f06f 030e 	mvn.w	r3, #14
 8008d64:	e01f      	b.n	8008da6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	891b      	ldrh	r3, [r3, #8]
 8008d6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d6c:	e00d      	b.n	8008d8a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <netconn_recv_data+0x15a>
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <netconn_recv_data+0x188>)
 8008d76:	f240 223e 	movw	r2, #574	; 0x23e
 8008d7a:	4913      	ldr	r1, [pc, #76]	; (8008dc8 <netconn_recv_data+0x1a0>)
 8008d7c:	480e      	ldr	r0, [pc, #56]	; (8008db8 <netconn_recv_data+0x190>)
 8008d7e:	f00e ff91 	bl	8017ca4 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	891b      	ldrh	r3, [r3, #8]
 8008d88:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <netconn_recv_data+0x176>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d98:	2101      	movs	r1, #1
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3728      	adds	r7, #40	; 0x28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	08018d64 	.word	0x08018d64
 8008db4:	08018f5c 	.word	0x08018f5c
 8008db8:	08018dbc 	.word	0x08018dbc
 8008dbc:	08018f7c 	.word	0x08018f7c
 8008dc0:	08018f98 	.word	0x08018f98
 8008dc4:	0800a1f5 	.word	0x0800a1f5
 8008dc8:	08018fb8 	.word	0x08018fb8

08008dcc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d109      	bne.n	8008df4 <netconn_recv+0x28>
 8008de0:	4b31      	ldr	r3, [pc, #196]	; (8008ea8 <netconn_recv+0xdc>)
 8008de2:	f44f 721d 	mov.w	r2, #628	; 0x274
 8008de6:	4931      	ldr	r1, [pc, #196]	; (8008eac <netconn_recv+0xe0>)
 8008de8:	4831      	ldr	r0, [pc, #196]	; (8008eb0 <netconn_recv+0xe4>)
 8008dea:	f00e ff5b 	bl	8017ca4 <iprintf>
 8008dee:	f06f 030f 	mvn.w	r3, #15
 8008df2:	e054      	b.n	8008e9e <netconn_recv+0xd2>
  *new_buf = NULL;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d109      	bne.n	8008e14 <netconn_recv+0x48>
 8008e00:	4b29      	ldr	r3, [pc, #164]	; (8008ea8 <netconn_recv+0xdc>)
 8008e02:	f240 2276 	movw	r2, #630	; 0x276
 8008e06:	492b      	ldr	r1, [pc, #172]	; (8008eb4 <netconn_recv+0xe8>)
 8008e08:	4829      	ldr	r0, [pc, #164]	; (8008eb0 <netconn_recv+0xe4>)
 8008e0a:	f00e ff4b 	bl	8017ca4 <iprintf>
 8008e0e:	f06f 030f 	mvn.w	r3, #15
 8008e12:	e044      	b.n	8008e9e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	d139      	bne.n	8008e94 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008e24:	2006      	movs	r0, #6
 8008e26:	f007 fa23 	bl	8010270 <memp_malloc>
 8008e2a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d102      	bne.n	8008e38 <netconn_recv+0x6c>
      return ERR_MEM;
 8008e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e36:	e032      	b.n	8008e9e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8008e38:	f107 030c 	add.w	r3, r7, #12
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fef2 	bl	8008c28 <netconn_recv_data>
 8008e44:	4603      	mov	r3, r0
 8008e46:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d006      	beq.n	8008e5e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8008e50:	6979      	ldr	r1, [r7, #20]
 8008e52:	2006      	movs	r0, #6
 8008e54:	f007 fa5e 	bl	8010314 <memp_free>
      return err;
 8008e58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e5c:	e01f      	b.n	8008e9e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d106      	bne.n	8008e72 <netconn_recv+0xa6>
 8008e64:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <netconn_recv+0xdc>)
 8008e66:	f240 228a 	movw	r2, #650	; 0x28a
 8008e6a:	4913      	ldr	r1, [pc, #76]	; (8008eb8 <netconn_recv+0xec>)
 8008e6c:	4810      	ldr	r0, [pc, #64]	; (8008eb0 <netconn_recv+0xe4>)
 8008e6e:	f00e ff19 	bl	8017ca4 <iprintf>

    buf->p = p;
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2200      	movs	r2, #0
 8008e82:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2200      	movs	r2, #0
 8008e88:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	e004      	b.n	8008e9e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff fec6 	bl	8008c28 <netconn_recv_data>
 8008e9c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08018d64 	.word	0x08018d64
 8008eac:	08018f5c 	.word	0x08018f5c
 8008eb0:	08018dbc 	.word	0x08018dbc
 8008eb4:	08018f7c 	.word	0x08018f7c
 8008eb8:	08018fc4 	.word	0x08018fc4

08008ebc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	; 0x28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <netconn_write_partly+0x28>
 8008ed0:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <netconn_write_partly+0xdc>)
 8008ed2:	f240 22e6 	movw	r2, #742	; 0x2e6
 8008ed6:	4931      	ldr	r1, [pc, #196]	; (8008f9c <netconn_write_partly+0xe0>)
 8008ed8:	4831      	ldr	r0, [pc, #196]	; (8008fa0 <netconn_write_partly+0xe4>)
 8008eda:	f00e fee3 	bl	8017ca4 <iprintf>
 8008ede:	f06f 030f 	mvn.w	r3, #15
 8008ee2:	e054      	b.n	8008f8e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d009      	beq.n	8008f04 <netconn_write_partly+0x48>
 8008ef0:	4b29      	ldr	r3, [pc, #164]	; (8008f98 <netconn_write_partly+0xdc>)
 8008ef2:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008ef6:	492b      	ldr	r1, [pc, #172]	; (8008fa4 <netconn_write_partly+0xe8>)
 8008ef8:	4829      	ldr	r0, [pc, #164]	; (8008fa0 <netconn_write_partly+0xe4>)
 8008efa:	f00e fed3 	bl	8017ca4 <iprintf>
 8008efe:	f06f 0305 	mvn.w	r3, #5
 8008f02:	e044      	b.n	8008f8e <netconn_write_partly+0xd2>
  if (size == 0) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <netconn_write_partly+0x52>
    return ERR_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e03f      	b.n	8008f8e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	7f1b      	ldrb	r3, [r3, #28]
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d104      	bne.n	8008f24 <netconn_write_partly+0x68>
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <netconn_write_partly+0x6c>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <netconn_write_partly+0x6e>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <netconn_write_partly+0x86>
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008f3c:	f06f 0305 	mvn.w	r3, #5
 8008f40:	e025      	b.n	8008f8e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4813      	ldr	r0, [pc, #76]	; (8008fa8 <netconn_write_partly+0xec>)
 8008f5c:	f7ff fcc6 	bl	80088ec <netconn_apimsg>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8008f66:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <netconn_write_partly+0xce>
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <netconn_write_partly+0xce>
    if (dontblock) {
 8008f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	e002      	b.n	8008f8a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008f8a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3728      	adds	r7, #40	; 0x28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	08018d64 	.word	0x08018d64
 8008f9c:	08018fec 	.word	0x08018fec
 8008fa0:	08018dbc 	.word	0x08018dbc
 8008fa4:	08019008 	.word	0x08019008
 8008fa8:	0800a5d1 	.word	0x0800a5d1

08008fac <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d109      	bne.n	8008fd2 <netconn_close_shutdown+0x26>
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <netconn_close_shutdown+0x50>)
 8008fc0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8008fc4:	490e      	ldr	r1, [pc, #56]	; (8009000 <netconn_close_shutdown+0x54>)
 8008fc6:	480f      	ldr	r0, [pc, #60]	; (8009004 <netconn_close_shutdown+0x58>)
 8008fc8:	f00e fe6c 	bl	8017ca4 <iprintf>
 8008fcc:	f06f 030f 	mvn.w	r3, #15
 8008fd0:	e00f      	b.n	8008ff2 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008fd6:	78fb      	ldrb	r3, [r7, #3]
 8008fd8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008fda:	2329      	movs	r3, #41	; 0x29
 8008fdc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008fde:	f107 0308 	add.w	r3, r7, #8
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4808      	ldr	r0, [pc, #32]	; (8009008 <netconn_close_shutdown+0x5c>)
 8008fe6:	f7ff fc81 	bl	80088ec <netconn_apimsg>
 8008fea:	4603      	mov	r3, r0
 8008fec:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8008fee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	08018d64 	.word	0x08018d64
 8009000:	0801902c 	.word	0x0801902c
 8009004:	08018dbc 	.word	0x08018dbc
 8009008:	0800a731 	.word	0x0800a731

0800900c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009014:	2103      	movs	r1, #3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff ffc8 	bl	8008fac <netconn_close_shutdown>
 800901c:	4603      	mov	r3, r0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d105      	bne.n	8009048 <recv_udp+0x20>
 800903c:	4b34      	ldr	r3, [pc, #208]	; (8009110 <recv_udp+0xe8>)
 800903e:	22b1      	movs	r2, #177	; 0xb1
 8009040:	4934      	ldr	r1, [pc, #208]	; (8009114 <recv_udp+0xec>)
 8009042:	4835      	ldr	r0, [pc, #212]	; (8009118 <recv_udp+0xf0>)
 8009044:	f00e fe2e 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d105      	bne.n	800905a <recv_udp+0x32>
 800904e:	4b30      	ldr	r3, [pc, #192]	; (8009110 <recv_udp+0xe8>)
 8009050:	22b2      	movs	r2, #178	; 0xb2
 8009052:	4932      	ldr	r1, [pc, #200]	; (800911c <recv_udp+0xf4>)
 8009054:	4830      	ldr	r0, [pc, #192]	; (8009118 <recv_udp+0xf0>)
 8009056:	f00e fe25 	bl	8017ca4 <iprintf>
  conn = (struct netconn *)arg;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <recv_udp+0x44>
    pbuf_free(p);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f007 fed1 	bl	8010e0c <pbuf_free>
    return;
 800906a:	e04d      	b.n	8009108 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	429a      	cmp	r2, r3
 8009074:	d005      	beq.n	8009082 <recv_udp+0x5a>
 8009076:	4b26      	ldr	r3, [pc, #152]	; (8009110 <recv_udp+0xe8>)
 8009078:	22ba      	movs	r2, #186	; 0xba
 800907a:	4929      	ldr	r1, [pc, #164]	; (8009120 <recv_udp+0xf8>)
 800907c:	4826      	ldr	r0, [pc, #152]	; (8009118 <recv_udp+0xf0>)
 800907e:	f00e fe11 	bl	8017ca4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	3310      	adds	r3, #16
 8009086:	4618      	mov	r0, r3
 8009088:	f00e fc62 	bl	8017950 <sys_mbox_valid>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d103      	bne.n	800909a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f007 feba 	bl	8010e0c <pbuf_free>
    return;
 8009098:	e036      	b.n	8009108 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800909a:	2006      	movs	r0, #6
 800909c:	f007 f8e8 	bl	8010270 <memp_malloc>
 80090a0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <recv_udp+0x88>
    pbuf_free(p);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f007 feaf 	bl	8010e0c <pbuf_free>
    return;
 80090ae:	e02b      	b.n	8009108 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d002      	beq.n	80090c8 <recv_udp+0xa0>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	e000      	b.n	80090ca <recv_udp+0xa2>
 80090c8:	2300      	movs	r3, #0
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80090d2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	891b      	ldrh	r3, [r3, #8]
 80090d8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	3310      	adds	r3, #16
 80090de:	69b9      	ldr	r1, [r7, #24]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f00e fbc0 	bl	8017866 <sys_mbox_trypost>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80090ec:	69b8      	ldr	r0, [r7, #24]
 80090ee:	f001 fbc7 	bl	800a880 <netbuf_delete>
    return;
 80090f2:	e009      	b.n	8009108 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <recv_udp+0xe0>
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009100:	8afa      	ldrh	r2, [r7, #22]
 8009102:	2100      	movs	r1, #0
 8009104:	69f8      	ldr	r0, [r7, #28]
 8009106:	4798      	blx	r3
  }
}
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	080190b8 	.word	0x080190b8
 8009114:	080190ec 	.word	0x080190ec
 8009118:	08019110 	.word	0x08019110
 800911c:	08019138 	.word	0x08019138
 8009120:	08019158 	.word	0x08019158

08009124 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d105      	bne.n	8009144 <recv_tcp+0x20>
 8009138:	4b39      	ldr	r3, [pc, #228]	; (8009220 <recv_tcp+0xfc>)
 800913a:	22f9      	movs	r2, #249	; 0xf9
 800913c:	4939      	ldr	r1, [pc, #228]	; (8009224 <recv_tcp+0x100>)
 800913e:	483a      	ldr	r0, [pc, #232]	; (8009228 <recv_tcp+0x104>)
 8009140:	f00e fdb0 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d105      	bne.n	8009156 <recv_tcp+0x32>
 800914a:	4b35      	ldr	r3, [pc, #212]	; (8009220 <recv_tcp+0xfc>)
 800914c:	22fa      	movs	r2, #250	; 0xfa
 800914e:	4937      	ldr	r1, [pc, #220]	; (800922c <recv_tcp+0x108>)
 8009150:	4835      	ldr	r0, [pc, #212]	; (8009228 <recv_tcp+0x104>)
 8009152:	f00e fda7 	bl	8017ca4 <iprintf>
  conn = (struct netconn *)arg;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <recv_tcp+0x42>
    return ERR_VAL;
 8009160:	f06f 0305 	mvn.w	r3, #5
 8009164:	e057      	b.n	8009216 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	429a      	cmp	r2, r3
 800916e:	d006      	beq.n	800917e <recv_tcp+0x5a>
 8009170:	4b2b      	ldr	r3, [pc, #172]	; (8009220 <recv_tcp+0xfc>)
 8009172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009176:	492e      	ldr	r1, [pc, #184]	; (8009230 <recv_tcp+0x10c>)
 8009178:	482b      	ldr	r0, [pc, #172]	; (8009228 <recv_tcp+0x104>)
 800917a:	f00e fd93 	bl	8017ca4 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	3310      	adds	r3, #16
 8009182:	4618      	mov	r0, r3
 8009184:	f00e fbe4 	bl	8017950 <sys_mbox_valid>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10d      	bne.n	80091aa <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d008      	beq.n	80091a6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	891b      	ldrh	r3, [r3, #8]
 8009198:	4619      	mov	r1, r3
 800919a:	68b8      	ldr	r0, [r7, #8]
 800919c:	f008 fe68 	bl	8011e70 <tcp_recved>
      pbuf_free(p);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f007 fe33 	bl	8010e0c <pbuf_free>
    }
    return ERR_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e035      	b.n	8009216 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80091aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d011      	beq.n	80091d6 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00e      	beq.n	80091d6 <recv_tcp+0xb2>
 80091b8:	f00e fce6 	bl	8017b88 <sys_arch_protect>
 80091bc:	6178      	str	r0, [r7, #20]
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80091c4:	f113 0f0c 	cmn.w	r3, #12
 80091c8:	db02      	blt.n	80091d0 <recv_tcp+0xac>
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	721a      	strb	r2, [r3, #8]
 80091d0:	6978      	ldr	r0, [r7, #20]
 80091d2:	f00e fce7 	bl	8017ba4 <sys_arch_unprotect>
  }

  if (p != NULL) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <recv_tcp+0xc0>
    len = p->tot_len;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	891b      	ldrh	r3, [r3, #8]
 80091e0:	83fb      	strh	r3, [r7, #30]
 80091e2:	e001      	b.n	80091e8 <recv_tcp+0xc4>
  } else {
    len = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	3310      	adds	r3, #16
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f00e fb39 	bl	8017866 <sys_mbox_trypost>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80091fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091fe:	e00a      	b.n	8009216 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <recv_tcp+0xf0>
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	8bfa      	ldrh	r2, [r7, #30]
 800920e:	2100      	movs	r1, #0
 8009210:	69b8      	ldr	r0, [r7, #24]
 8009212:	4798      	blx	r3
  }

  return ERR_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3720      	adds	r7, #32
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	080190b8 	.word	0x080190b8
 8009224:	08019178 	.word	0x08019178
 8009228:	08019110 	.word	0x08019110
 800922c:	0801919c 	.word	0x0801919c
 8009230:	080191bc 	.word	0x080191bc

08009234 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <poll_tcp+0x22>
 8009248:	4b29      	ldr	r3, [pc, #164]	; (80092f0 <poll_tcp+0xbc>)
 800924a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800924e:	4929      	ldr	r1, [pc, #164]	; (80092f4 <poll_tcp+0xc0>)
 8009250:	4829      	ldr	r0, [pc, #164]	; (80092f8 <poll_tcp+0xc4>)
 8009252:	f00e fd27 	bl	8017ca4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d104      	bne.n	8009268 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800925e:	2101      	movs	r1, #1
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f001 f813 	bl	800a28c <lwip_netconn_do_writemore>
 8009266:	e016      	b.n	8009296 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	2b04      	cmp	r3, #4
 800926e:	d112      	bne.n	8009296 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <poll_tcp+0x5a>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	7a5b      	ldrb	r3, [r3, #9]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	7a5a      	ldrb	r2, [r3, #9]
 8009288:	3a01      	subs	r2, #1
 800928a:	b2d2      	uxtb	r2, r2
 800928c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800928e:	2101      	movs	r1, #1
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 fc13 	bl	8009abc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	7f1b      	ldrb	r3, [r3, #28]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d021      	beq.n	80092e6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d01d      	beq.n	80092e6 <poll_tcp+0xb2>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80092b6:	d316      	bcc.n	80092e6 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d810      	bhi.n	80092e6 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	7f1b      	ldrb	r3, [r3, #28]
 80092c8:	f023 0310 	bic.w	r3, r3, #16
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <poll_tcp+0xb2>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092de:	2200      	movs	r2, #0
 80092e0:	2102      	movs	r1, #2
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	080190b8 	.word	0x080190b8
 80092f4:	080191dc 	.word	0x080191dc
 80092f8:	08019110 	.word	0x08019110

080092fc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <sent_tcp+0x26>
 8009314:	4b20      	ldr	r3, [pc, #128]	; (8009398 <sent_tcp+0x9c>)
 8009316:	f240 1261 	movw	r2, #353	; 0x161
 800931a:	4920      	ldr	r1, [pc, #128]	; (800939c <sent_tcp+0xa0>)
 800931c:	4820      	ldr	r0, [pc, #128]	; (80093a0 <sent_tcp+0xa4>)
 800931e:	f00e fcc1 	bl	8017ca4 <iprintf>

  if (conn) {
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d032      	beq.n	800938e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d104      	bne.n	800933a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009330:	2101      	movs	r1, #1
 8009332:	6978      	ldr	r0, [r7, #20]
 8009334:	f000 ffaa 	bl	800a28c <lwip_netconn_do_writemore>
 8009338:	e007      	b.n	800934a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	2b04      	cmp	r3, #4
 8009340:	d103      	bne.n	800934a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009342:	2101      	movs	r1, #1
 8009344:	6978      	ldr	r0, [r7, #20]
 8009346:	f000 fbb9 	bl	8009abc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d01d      	beq.n	800938e <sent_tcp+0x92>
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800935a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800935e:	d316      	bcc.n	800938e <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009368:	2b04      	cmp	r3, #4
 800936a:	d810      	bhi.n	800938e <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	7f1b      	ldrb	r3, [r3, #28]
 8009370:	f023 0310 	bic.w	r3, r3, #16
 8009374:	b2da      	uxtb	r2, r3
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <sent_tcp+0x92>
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	88fa      	ldrh	r2, [r7, #6]
 8009388:	2102      	movs	r1, #2
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	080190b8 	.word	0x080190b8
 800939c:	080191dc 	.word	0x080191dc
 80093a0:	08019110 	.word	0x08019110

080093a4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08a      	sub	sp, #40	; 0x28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d106      	bne.n	80093c8 <err_tcp+0x24>
 80093ba:	4b6c      	ldr	r3, [pc, #432]	; (800956c <err_tcp+0x1c8>)
 80093bc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80093c0:	496b      	ldr	r1, [pc, #428]	; (8009570 <err_tcp+0x1cc>)
 80093c2:	486c      	ldr	r0, [pc, #432]	; (8009574 <err_tcp+0x1d0>)
 80093c4:	f00e fc6e 	bl	8017ca4 <iprintf>

  conn->pcb.tcp = NULL;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	2200      	movs	r2, #0
 80093cc:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	785b      	ldrb	r3, [r3, #1]
 80093d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	2200      	movs	r2, #0
 80093da:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 80093dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d114      	bne.n	800940e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d018      	beq.n	8009420 <err_tcp+0x7c>
 80093ee:	f00e fbcb 	bl	8017b88 <sys_arch_protect>
 80093f2:	61f8      	str	r0, [r7, #28]
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80093fa:	f113 0f0c 	cmn.w	r3, #12
 80093fe:	db02      	blt.n	8009406 <err_tcp+0x62>
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	2200      	movs	r2, #0
 8009404:	721a      	strb	r2, [r3, #8]
 8009406:	69f8      	ldr	r0, [r7, #28]
 8009408:	f00e fbcc 	bl	8017ba4 <sys_arch_unprotect>
 800940c:	e008      	b.n	8009420 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800940e:	f00e fbbb 	bl	8017b88 <sys_arch_protect>
 8009412:	61b8      	str	r0, [r7, #24]
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	721a      	strb	r2, [r3, #8]
 800941a:	69b8      	ldr	r0, [r7, #24]
 800941c:	f00e fbc2 	bl	8017ba4 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <err_tcp+0x90>
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942c:	2200      	movs	r2, #0
 800942e:	2104      	movs	r1, #4
 8009430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009432:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <err_tcp+0xa4>
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	2200      	movs	r2, #0
 8009442:	2100      	movs	r1, #0
 8009444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009446:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <err_tcp+0xb8>
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	2200      	movs	r2, #0
 8009456:	2102      	movs	r1, #2
 8009458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800945a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	3310      	adds	r3, #16
 8009460:	4618      	mov	r0, r3
 8009462:	f00e fa75 	bl	8017950 <sys_mbox_valid>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	3310      	adds	r3, #16
 8009470:	2100      	movs	r1, #0
 8009472:	4618      	mov	r0, r3
 8009474:	f00e f9f7 	bl	8017866 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	3314      	adds	r3, #20
 800947c:	4618      	mov	r0, r3
 800947e:	f00e fa67 	bl	8017950 <sys_mbox_valid>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	3314      	adds	r3, #20
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f00e f9e9 	bl	8017866 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009498:	2b01      	cmp	r3, #1
 800949a:	d007      	beq.n	80094ac <err_tcp+0x108>
 800949c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d003      	beq.n	80094ac <err_tcp+0x108>
 80094a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d14d      	bne.n	8009548 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	7f1b      	ldrb	r3, [r3, #28]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bf14      	ite	ne
 80094b8:	2301      	movne	r3, #1
 80094ba:	2300      	moveq	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	7f1b      	ldrb	r3, [r3, #28]
 80094c4:	f023 0304 	bic.w	r3, r3, #4
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d145      	bne.n	8009560 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d106      	bne.n	80094ea <err_tcp+0x146>
 80094dc:	4b23      	ldr	r3, [pc, #140]	; (800956c <err_tcp+0x1c8>)
 80094de:	f240 12b3 	movw	r2, #435	; 0x1b3
 80094e2:	4925      	ldr	r1, [pc, #148]	; (8009578 <err_tcp+0x1d4>)
 80094e4:	4823      	ldr	r0, [pc, #140]	; (8009574 <err_tcp+0x1d0>)
 80094e6:	f00e fbdd 	bl	8017ca4 <iprintf>
      conn->current_msg->err = err;
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	330c      	adds	r3, #12
 80094fa:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80094fc:	6938      	ldr	r0, [r7, #16]
 80094fe:	f00e fab8 	bl	8017a72 <sys_sem_valid>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d106      	bne.n	8009516 <err_tcp+0x172>
 8009508:	4b18      	ldr	r3, [pc, #96]	; (800956c <err_tcp+0x1c8>)
 800950a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800950e:	491b      	ldr	r1, [pc, #108]	; (800957c <err_tcp+0x1d8>)
 8009510:	4818      	ldr	r0, [pc, #96]	; (8009574 <err_tcp+0x1d0>)
 8009512:	f00e fbc7 	bl	8017ca4 <iprintf>
      conn->current_msg = NULL;
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	2200      	movs	r2, #0
 800951a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00e      	beq.n	8009540 <err_tcp+0x19c>
 8009522:	f00e fb31 	bl	8017b88 <sys_arch_protect>
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800952e:	f113 0f0c 	cmn.w	r3, #12
 8009532:	db02      	blt.n	800953a <err_tcp+0x196>
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	78fa      	ldrb	r2, [r7, #3]
 8009538:	721a      	strb	r2, [r3, #8]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f00e fb32 	bl	8017ba4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8009540:	6938      	ldr	r0, [r7, #16]
 8009542:	f00e fa7c 	bl	8017a3e <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009546:	e00b      	b.n	8009560 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <err_tcp+0x1be>
 8009550:	4b06      	ldr	r3, [pc, #24]	; (800956c <err_tcp+0x1c8>)
 8009552:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009556:	490a      	ldr	r1, [pc, #40]	; (8009580 <err_tcp+0x1dc>)
 8009558:	4806      	ldr	r0, [pc, #24]	; (8009574 <err_tcp+0x1d0>)
 800955a:	f00e fba3 	bl	8017ca4 <iprintf>
  }
}
 800955e:	e000      	b.n	8009562 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8009560:	bf00      	nop
}
 8009562:	bf00      	nop
 8009564:	3728      	adds	r7, #40	; 0x28
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	080190b8 	.word	0x080190b8
 8009570:	080191dc 	.word	0x080191dc
 8009574:	08019110 	.word	0x08019110
 8009578:	080191ec 	.word	0x080191ec
 800957c:	08019208 	.word	0x08019208
 8009580:	08019224 	.word	0x08019224

08009584 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f009 fa4f 	bl	8012a38 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800959a:	490a      	ldr	r1, [pc, #40]	; (80095c4 <setup_tcp+0x40>)
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f009 fa5d 	bl	8012a5c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80095a2:	4909      	ldr	r1, [pc, #36]	; (80095c8 <setup_tcp+0x44>)
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f009 fa7b 	bl	8012aa0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80095aa:	2202      	movs	r2, #2
 80095ac:	4907      	ldr	r1, [pc, #28]	; (80095cc <setup_tcp+0x48>)
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f009 fad0 	bl	8012b54 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80095b4:	4906      	ldr	r1, [pc, #24]	; (80095d0 <setup_tcp+0x4c>)
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f009 fa92 	bl	8012ae0 <tcp_err>
}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	08009125 	.word	0x08009125
 80095c8:	080092fd 	.word	0x080092fd
 80095cc:	08009235 	.word	0x08009235
 80095d0:	080093a5 	.word	0x080093a5

080095d4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <accept_function+0x1e>
    return ERR_VAL;
 80095ec:	f06f 0305 	mvn.w	r3, #5
 80095f0:	e08d      	b.n	800970e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	3314      	adds	r3, #20
 80095f6:	4618      	mov	r0, r3
 80095f8:	f00e f9aa 	bl	8017950 <sys_mbox_valid>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009602:	f06f 0305 	mvn.w	r3, #5
 8009606:	e082      	b.n	800970e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d115      	bne.n	800963a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	3314      	adds	r3, #20
 8009612:	4941      	ldr	r1, [pc, #260]	; (8009718 <accept_function+0x144>)
 8009614:	4618      	mov	r0, r3
 8009616:	f00e f926 	bl	8017866 <sys_mbox_trypost>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <accept_function+0x60>
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	69f8      	ldr	r0, [r7, #28]
 8009632:	4798      	blx	r3
    }
    return ERR_VAL;
 8009634:	f06f 0305 	mvn.w	r3, #5
 8009638:	e069      	b.n	800970e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f000 f8ff 	bl	8009848 <netconn_alloc>
 800964a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d115      	bne.n	800967e <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	3314      	adds	r3, #20
 8009656:	4930      	ldr	r1, [pc, #192]	; (8009718 <accept_function+0x144>)
 8009658:	4618      	mov	r0, r3
 800965a:	f00e f904 	bl	8017866 <sys_mbox_trypost>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d109      	bne.n	8009678 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <accept_function+0xa4>
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	69f8      	ldr	r0, [r7, #28]
 8009676:	4798      	blx	r3
    }
    return ERR_MEM;
 8009678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800967c:	e047      	b.n	800970e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009684:	69b8      	ldr	r0, [r7, #24]
 8009686:	f7ff ff7d 	bl	8009584 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	79fa      	ldrb	r2, [r7, #7]
 800968e:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	3314      	adds	r3, #20
 8009694:	69b9      	ldr	r1, [r7, #24]
 8009696:	4618      	mov	r0, r3
 8009698:	f00e f8e5 	bl	8017866 <sys_mbox_trypost>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d02a      	beq.n	80096f8 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80096a8:	2100      	movs	r1, #0
 80096aa:	6978      	ldr	r0, [r7, #20]
 80096ac:	f009 f9c4 	bl	8012a38 <tcp_arg>
    tcp_recv(pcb, NULL);
 80096b0:	2100      	movs	r1, #0
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f009 f9d2 	bl	8012a5c <tcp_recv>
    tcp_sent(pcb, NULL);
 80096b8:	2100      	movs	r1, #0
 80096ba:	6978      	ldr	r0, [r7, #20]
 80096bc:	f009 f9f0 	bl	8012aa0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	6978      	ldr	r0, [r7, #20]
 80096c6:	f009 fa45 	bl	8012b54 <tcp_poll>
    tcp_err(pcb, NULL);
 80096ca:	2100      	movs	r1, #0
 80096cc:	6978      	ldr	r0, [r7, #20]
 80096ce:	f009 fa07 	bl	8012ae0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	2200      	movs	r2, #0
 80096d6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	3310      	adds	r3, #16
 80096dc:	4618      	mov	r0, r3
 80096de:	f00e f89b 	bl	8017818 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	3310      	adds	r3, #16
 80096e6:	4618      	mov	r0, r3
 80096e8:	f00e f943 	bl	8017972 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80096ec:	69b8      	ldr	r0, [r7, #24]
 80096ee:	f000 f91b 	bl	8009928 <netconn_free>
    return ERR_MEM;
 80096f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096f6:	e00a      	b.n	800970e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <accept_function+0x138>
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009704:	2200      	movs	r2, #0
 8009706:	2100      	movs	r1, #0
 8009708:	69f8      	ldr	r0, [r7, #28]
 800970a:	4798      	blx	r3
  }

  return ERR_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3720      	adds	r7, #32
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	2001d264 	.word	0x2001d264

0800971c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d006      	beq.n	8009740 <pcb_new+0x24>
 8009732:	4b2b      	ldr	r3, [pc, #172]	; (80097e0 <pcb_new+0xc4>)
 8009734:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8009738:	492a      	ldr	r1, [pc, #168]	; (80097e4 <pcb_new+0xc8>)
 800973a:	482b      	ldr	r0, [pc, #172]	; (80097e8 <pcb_new+0xcc>)
 800973c:	f00e fab2 	bl	8017ca4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800974a:	2b10      	cmp	r3, #16
 800974c:	d022      	beq.n	8009794 <pcb_new+0x78>
 800974e:	2b20      	cmp	r3, #32
 8009750:	d133      	bne.n	80097ba <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681c      	ldr	r4, [r3, #0]
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	4618      	mov	r0, r3
 800975a:	f00d ff19 	bl	8017590 <udp_new_ip_type>
 800975e:	4603      	mov	r3, r0
 8009760:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d02a      	beq.n	80097c2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b22      	cmp	r3, #34	; 0x22
 8009774:	d104      	bne.n	8009780 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6858      	ldr	r0, [r3, #4]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	4917      	ldr	r1, [pc, #92]	; (80097ec <pcb_new+0xd0>)
 800978e:	f00d fea1 	bl	80174d4 <udp_recv>
    }
    break;
 8009792:	e016      	b.n	80097c2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681c      	ldr	r4, [r3, #0]
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f009 f93e 	bl	8012a1c <tcp_new_ip_type>
 80097a0:	4603      	mov	r3, r0
 80097a2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff fee6 	bl	8009584 <setup_tcp>
    }
    break;
 80097b8:	e005      	b.n	80097c6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	22fa      	movs	r2, #250	; 0xfa
 80097be:	711a      	strb	r2, [r3, #4]
    return;
 80097c0:	e00a      	b.n	80097d8 <pcb_new+0xbc>
    break;
 80097c2:	bf00      	nop
 80097c4:	e000      	b.n	80097c8 <pcb_new+0xac>
    break;
 80097c6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	22ff      	movs	r2, #255	; 0xff
 80097d6:	711a      	strb	r2, [r3, #4]
  }
}
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd90      	pop	{r4, r7, pc}
 80097de:	bf00      	nop
 80097e0:	080190b8 	.word	0x080190b8
 80097e4:	08019240 	.word	0x08019240
 80097e8:	08019110 	.word	0x08019110
 80097ec:	08009029 	.word	0x08009029

080097f0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d102      	bne.n	8009812 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7ff ff85 	bl	800971c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d012      	beq.n	8009840 <lwip_netconn_do_newconn+0x50>
 800981a:	f00e f9b5 	bl	8017b88 <sys_arch_protect>
 800981e:	60b8      	str	r0, [r7, #8]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009828:	f113 0f0c 	cmn.w	r3, #12
 800982c:	db05      	blt.n	800983a <lwip_netconn_do_newconn+0x4a>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009838:	721a      	strb	r2, [r3, #8]
 800983a:	68b8      	ldr	r0, [r7, #8]
 800983c:	f00e f9b2 	bl	8017ba4 <sys_arch_unprotect>
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009854:	2007      	movs	r0, #7
 8009856:	f006 fd0b 	bl	8010270 <memp_malloc>
 800985a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <netconn_alloc+0x1e>
    return NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	e055      	b.n	8009912 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2200      	movs	r2, #0
 800986a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	79fa      	ldrb	r2, [r7, #7]
 8009870:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800987e:	2b10      	cmp	r3, #16
 8009880:	d004      	beq.n	800988c <netconn_alloc+0x44>
 8009882:	2b20      	cmp	r3, #32
 8009884:	d105      	bne.n	8009892 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009886:	2306      	movs	r3, #6
 8009888:	60fb      	str	r3, [r7, #12]
    break;
 800988a:	e00a      	b.n	80098a2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800988c:	2306      	movs	r3, #6
 800988e:	60fb      	str	r3, [r7, #12]
    break;
 8009890:	e007      	b.n	80098a2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009892:	4b22      	ldr	r3, [pc, #136]	; (800991c <netconn_alloc+0xd4>)
 8009894:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009898:	4921      	ldr	r1, [pc, #132]	; (8009920 <netconn_alloc+0xd8>)
 800989a:	4822      	ldr	r0, [pc, #136]	; (8009924 <netconn_alloc+0xdc>)
 800989c:	f00e fa02 	bl	8017ca4 <iprintf>
    goto free_and_return;
 80098a0:	e032      	b.n	8009908 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	3310      	adds	r3, #16
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f00d ff93 	bl	80177d4 <sys_mbox_new>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d128      	bne.n	8009906 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	330c      	adds	r3, #12
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f00e f866 	bl	801798c <sys_sem_new>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	3310      	adds	r3, #16
 80098ca:	4618      	mov	r0, r3
 80098cc:	f00d ffa4 	bl	8017818 <sys_mbox_free>
    goto free_and_return;
 80098d0:	e01a      	b.n	8009908 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3314      	adds	r3, #20
 80098d6:	4618      	mov	r0, r3
 80098d8:	f00e f84b 	bl	8017972 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098e8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2200      	movs	r2, #0
 80098f4:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2200      	movs	r2, #0
 80098fa:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2200      	movs	r2, #0
 8009900:	771a      	strb	r2, [r3, #28]
  return conn;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	e005      	b.n	8009912 <netconn_alloc+0xca>
    goto free_and_return;
 8009906:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	2007      	movs	r0, #7
 800990c:	f006 fd02 	bl	8010314 <memp_free>
  return NULL;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	080190b8 	.word	0x080190b8
 8009920:	08019260 	.word	0x08019260
 8009924:	08019110 	.word	0x08019110

08009928 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d006      	beq.n	8009946 <netconn_free+0x1e>
 8009938:	4b1b      	ldr	r3, [pc, #108]	; (80099a8 <netconn_free+0x80>)
 800993a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800993e:	491b      	ldr	r1, [pc, #108]	; (80099ac <netconn_free+0x84>)
 8009940:	481b      	ldr	r0, [pc, #108]	; (80099b0 <netconn_free+0x88>)
 8009942:	f00e f9af 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3310      	adds	r3, #16
 800994a:	4618      	mov	r0, r3
 800994c:	f00e f800 	bl	8017950 <sys_mbox_valid>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <netconn_free+0x3c>
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <netconn_free+0x80>)
 8009958:	f240 22e2 	movw	r2, #738	; 0x2e2
 800995c:	4915      	ldr	r1, [pc, #84]	; (80099b4 <netconn_free+0x8c>)
 800995e:	4814      	ldr	r0, [pc, #80]	; (80099b0 <netconn_free+0x88>)
 8009960:	f00e f9a0 	bl	8017ca4 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3314      	adds	r3, #20
 8009968:	4618      	mov	r0, r3
 800996a:	f00d fff1 	bl	8017950 <sys_mbox_valid>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <netconn_free+0x5a>
 8009974:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <netconn_free+0x80>)
 8009976:	f240 22e5 	movw	r2, #741	; 0x2e5
 800997a:	490f      	ldr	r1, [pc, #60]	; (80099b8 <netconn_free+0x90>)
 800997c:	480c      	ldr	r0, [pc, #48]	; (80099b0 <netconn_free+0x88>)
 800997e:	f00e f991 	bl	8017ca4 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	330c      	adds	r3, #12
 8009986:	4618      	mov	r0, r3
 8009988:	f00e f866 	bl	8017a58 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	330c      	adds	r3, #12
 8009990:	4618      	mov	r0, r3
 8009992:	f00e f87f 	bl	8017a94 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	2007      	movs	r0, #7
 800999a:	f006 fcbb 	bl	8010314 <memp_free>
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	080190b8 	.word	0x080190b8
 80099ac:	08019288 	.word	0x08019288
 80099b0:	08019110 	.word	0x08019110
 80099b4:	080192b8 	.word	0x080192b8
 80099b8:	080192f4 	.word	0x080192f4

080099bc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3310      	adds	r3, #16
 80099c8:	4618      	mov	r0, r3
 80099ca:	f00d ffc1 	bl	8017950 <sys_mbox_valid>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d035      	beq.n	8009a40 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80099d4:	e01e      	b.n	8009a14 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099de:	2b10      	cmp	r3, #16
 80099e0:	d114      	bne.n	8009a0c <netconn_drain+0x50>
        if (mem != NULL) {
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d015      	beq.n	8009a14 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d007      	beq.n	8009a04 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	891b      	ldrh	r3, [r3, #8]
 80099fc:	4619      	mov	r1, r3
 80099fe:	4610      	mov	r0, r2
 8009a00:	f008 fa36 	bl	8011e70 <tcp_recved>
          }
          pbuf_free(p);
 8009a04:	6978      	ldr	r0, [r7, #20]
 8009a06:	f007 fa01 	bl	8010e0c <pbuf_free>
 8009a0a:	e003      	b.n	8009a14 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 ff36 	bl	800a880 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3310      	adds	r3, #16
 8009a18:	f107 020c 	add.w	r2, r7, #12
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f00d ff7a 	bl	8017918 <sys_arch_mbox_tryfetch>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a2a:	d1d4      	bne.n	80099d6 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3310      	adds	r3, #16
 8009a30:	4618      	mov	r0, r3
 8009a32:	f00d fef1 	bl	8017818 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3310      	adds	r3, #16
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f00d ff99 	bl	8017972 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3314      	adds	r3, #20
 8009a44:	4618      	mov	r0, r3
 8009a46:	f00d ff83 	bl	8017950 <sys_mbox_valid>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d02e      	beq.n	8009aae <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009a50:	e017      	b.n	8009a82 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <netconn_drain+0xfc>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d013      	beq.n	8009a82 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8009a5e:	6938      	ldr	r0, [r7, #16]
 8009a60:	f7ff ffac 	bl	80099bc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f008 f867 	bl	8011b44 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8009a7c:	6938      	ldr	r0, [r7, #16]
 8009a7e:	f7ff ff53 	bl	8009928 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3314      	adds	r3, #20
 8009a86:	f107 020c 	add.w	r2, r7, #12
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f00d ff43 	bl	8017918 <sys_arch_mbox_tryfetch>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a98:	d1db      	bne.n	8009a52 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3314      	adds	r3, #20
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f00d feba 	bl	8017818 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3314      	adds	r3, #20
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f00d ff62 	bl	8017972 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009aae:	bf00      	nop
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	2001d264 	.word	0x2001d264

08009abc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <lwip_netconn_do_close_internal+0x24>
 8009ad2:	4baa      	ldr	r3, [pc, #680]	; (8009d7c <lwip_netconn_do_close_internal+0x2c0>)
 8009ad4:	f240 3243 	movw	r2, #835	; 0x343
 8009ad8:	49a9      	ldr	r1, [pc, #676]	; (8009d80 <lwip_netconn_do_close_internal+0x2c4>)
 8009ada:	48aa      	ldr	r0, [pc, #680]	; (8009d84 <lwip_netconn_do_close_internal+0x2c8>)
 8009adc:	f00e f8e2 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	d006      	beq.n	8009afa <lwip_netconn_do_close_internal+0x3e>
 8009aec:	4ba3      	ldr	r3, [pc, #652]	; (8009d7c <lwip_netconn_do_close_internal+0x2c0>)
 8009aee:	f44f 7251 	mov.w	r2, #836	; 0x344
 8009af2:	49a5      	ldr	r1, [pc, #660]	; (8009d88 <lwip_netconn_do_close_internal+0x2cc>)
 8009af4:	48a3      	ldr	r0, [pc, #652]	; (8009d84 <lwip_netconn_do_close_internal+0x2c8>)
 8009af6:	f00e f8d5 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d006      	beq.n	8009b10 <lwip_netconn_do_close_internal+0x54>
 8009b02:	4b9e      	ldr	r3, [pc, #632]	; (8009d7c <lwip_netconn_do_close_internal+0x2c0>)
 8009b04:	f240 3245 	movw	r2, #837	; 0x345
 8009b08:	49a0      	ldr	r1, [pc, #640]	; (8009d8c <lwip_netconn_do_close_internal+0x2d0>)
 8009b0a:	489e      	ldr	r0, [pc, #632]	; (8009d84 <lwip_netconn_do_close_internal+0x2c8>)
 8009b0c:	f00e f8ca 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d106      	bne.n	8009b26 <lwip_netconn_do_close_internal+0x6a>
 8009b18:	4b98      	ldr	r3, [pc, #608]	; (8009d7c <lwip_netconn_do_close_internal+0x2c0>)
 8009b1a:	f240 3246 	movw	r2, #838	; 0x346
 8009b1e:	499c      	ldr	r1, [pc, #624]	; (8009d90 <lwip_netconn_do_close_internal+0x2d4>)
 8009b20:	4898      	ldr	r0, [pc, #608]	; (8009d84 <lwip_netconn_do_close_internal+0x2c8>)
 8009b22:	f00e f8bf 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <lwip_netconn_do_close_internal+0x80>
 8009b2e:	4b93      	ldr	r3, [pc, #588]	; (8009d7c <lwip_netconn_do_close_internal+0x2c0>)
 8009b30:	f240 3247 	movw	r2, #839	; 0x347
 8009b34:	4997      	ldr	r1, [pc, #604]	; (8009d94 <lwip_netconn_do_close_internal+0x2d8>)
 8009b36:	4893      	ldr	r0, [pc, #588]	; (8009d84 <lwip_netconn_do_close_internal+0x2c8>)
 8009b38:	f00e f8b4 	bl	8017ca4 <iprintf>

  tpcb = conn->pcb.tcp;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	7a1b      	ldrb	r3, [r3, #8]
 8009b48:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d102      	bne.n	8009b66 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8009b60:	2301      	movs	r3, #1
 8009b62:	77bb      	strb	r3, [r7, #30]
 8009b64:	e01f      	b.n	8009ba6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009b66:	7dbb      	ldrb	r3, [r7, #22]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00e      	beq.n	8009b8a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009b70:	2b05      	cmp	r3, #5
 8009b72:	d007      	beq.n	8009b84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009b78:	2b06      	cmp	r3, #6
 8009b7a:	d003      	beq.n	8009b84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d102      	bne.n	8009b8a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8009b84:	2301      	movs	r3, #1
 8009b86:	77bb      	strb	r3, [r7, #30]
 8009b88:	e00d      	b.n	8009ba6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009b8a:	7d7b      	ldrb	r3, [r7, #21]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d008      	beq.n	8009ba2 <lwip_netconn_do_close_internal+0xe6>
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	7e9b      	ldrb	r3, [r3, #26]
 8009b94:	f003 0310 	and.w	r3, r3, #16
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	77bb      	strb	r3, [r7, #30]
 8009ba0:	e001      	b.n	8009ba6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8009ba6:	7fbb      	ldrb	r3, [r7, #30]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009bac:	2100      	movs	r1, #0
 8009bae:	69b8      	ldr	r0, [r7, #24]
 8009bb0:	f008 ff42 	bl	8012a38 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	7d1b      	ldrb	r3, [r3, #20]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d104      	bne.n	8009bc6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	69b8      	ldr	r0, [r7, #24]
 8009bc0:	f008 ffb0 	bl	8012b24 <tcp_accept>
 8009bc4:	e01d      	b.n	8009c02 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009bc6:	7dbb      	ldrb	r3, [r7, #22]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009bcc:	2100      	movs	r1, #0
 8009bce:	69b8      	ldr	r0, [r7, #24]
 8009bd0:	f008 ff44 	bl	8012a5c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	69b8      	ldr	r0, [r7, #24]
 8009bd8:	f008 ffa4 	bl	8012b24 <tcp_accept>
    }
    if (shut_tx) {
 8009bdc:	7d7b      	ldrb	r3, [r7, #21]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009be2:	2100      	movs	r1, #0
 8009be4:	69b8      	ldr	r0, [r7, #24]
 8009be6:	f008 ff5b 	bl	8012aa0 <tcp_sent>
    }
    if (close) {
 8009bea:	7fbb      	ldrb	r3, [r7, #30]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d008      	beq.n	8009c02 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	69b8      	ldr	r0, [r7, #24]
 8009bf6:	f008 ffad 	bl	8012b54 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	69b8      	ldr	r0, [r7, #24]
 8009bfe:	f008 ff6f 	bl	8012ae0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8009c02:	7fbb      	ldrb	r3, [r7, #30]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009c08:	69b8      	ldr	r0, [r7, #24]
 8009c0a:	f007 fe85 	bl	8011918 <tcp_close>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	77fb      	strb	r3, [r7, #31]
 8009c12:	e007      	b.n	8009c24 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009c14:	7dbb      	ldrb	r3, [r7, #22]
 8009c16:	7d7a      	ldrb	r2, [r7, #21]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	69b8      	ldr	r0, [r7, #24]
 8009c1c:	f007 fe99 	bl	8011952 <tcp_shutdown>
 8009c20:	4603      	mov	r3, r0
 8009c22:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8009c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	777b      	strb	r3, [r7, #29]
 8009c30:	e016      	b.n	8009c60 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009c32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c3a:	d10f      	bne.n	8009c5c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	7a5b      	ldrb	r3, [r3, #9]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10c      	bne.n	8009c60 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009c46:	2301      	movs	r3, #1
 8009c48:	777b      	strb	r3, [r7, #29]
        if (close) {
 8009c4a:	7fbb      	ldrb	r3, [r7, #30]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009c50:	69b8      	ldr	r0, [r7, #24]
 8009c52:	f007 ff77 	bl	8011b44 <tcp_abort>
          err = ERR_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	77fb      	strb	r3, [r7, #31]
 8009c5a:	e001      	b.n	8009c60 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8009c60:	7f7b      	ldrb	r3, [r7, #29]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d056      	beq.n	8009d14 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	7ffa      	ldrb	r2, [r7, #31]
 8009c76:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d129      	bne.n	8009ce0 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8009c8c:	7fbb      	ldrb	r3, [r7, #30]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00c      	beq.n	8009cac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <lwip_netconn_do_close_internal+0x1f0>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2104      	movs	r1, #4
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	4798      	blx	r3
      }
      if (shut_rx) {
 8009cac:	7dbb      	ldrb	r3, [r7, #22]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <lwip_netconn_do_close_internal+0x20a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
      }
      if (shut_tx) {
 8009cc6:	7d7b      	ldrb	r3, [r7, #21]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d009      	beq.n	8009ce0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <lwip_netconn_do_close_internal+0x224>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2102      	movs	r1, #2
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00e      	beq.n	8009d04 <lwip_netconn_do_close_internal+0x248>
 8009ce6:	f00d ff4f 	bl	8017b88 <sys_arch_protect>
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009cf2:	f113 0f0c 	cmn.w	r3, #12
 8009cf6:	db02      	blt.n	8009cfe <lwip_netconn_do_close_internal+0x242>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	7ffa      	ldrb	r2, [r7, #31]
 8009cfc:	721a      	strb	r2, [r3, #8]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f00d ff50 	bl	8017ba4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009d0a:	6938      	ldr	r0, [r7, #16]
 8009d0c:	f00d fe97 	bl	8017a3e <sys_sem_signal>
    }
    return ERR_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	e02e      	b.n	8009d72 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8009d14:	7f7b      	ldrb	r3, [r7, #29]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d11e      	bne.n	8009d58 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	7d1b      	ldrb	r3, [r3, #20]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d106      	bne.n	8009d30 <lwip_netconn_do_close_internal+0x274>
 8009d22:	4b16      	ldr	r3, [pc, #88]	; (8009d7c <lwip_netconn_do_close_internal+0x2c0>)
 8009d24:	f240 32e3 	movw	r2, #995	; 0x3e3
 8009d28:	491b      	ldr	r1, [pc, #108]	; (8009d98 <lwip_netconn_do_close_internal+0x2dc>)
 8009d2a:	4816      	ldr	r0, [pc, #88]	; (8009d84 <lwip_netconn_do_close_internal+0x2c8>)
 8009d2c:	f00d ffba 	bl	8017ca4 <iprintf>
    if (shut_tx) {
 8009d30:	7d7b      	ldrb	r3, [r7, #21]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8009d36:	4919      	ldr	r1, [pc, #100]	; (8009d9c <lwip_netconn_do_close_internal+0x2e0>)
 8009d38:	69b8      	ldr	r0, [r7, #24]
 8009d3a:	f008 feb1 	bl	8012aa0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009d3e:	2201      	movs	r2, #1
 8009d40:	4917      	ldr	r1, [pc, #92]	; (8009da0 <lwip_netconn_do_close_internal+0x2e4>)
 8009d42:	69b8      	ldr	r0, [r7, #24]
 8009d44:	f008 ff06 	bl	8012b54 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009d48:	4916      	ldr	r1, [pc, #88]	; (8009da4 <lwip_netconn_do_close_internal+0x2e8>)
 8009d4a:	69b8      	ldr	r0, [r7, #24]
 8009d4c:	f008 fec8 	bl	8012ae0 <tcp_err>
    tcp_arg(tpcb, conn);
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	69b8      	ldr	r0, [r7, #24]
 8009d54:	f008 fe70 	bl	8012a38 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009d58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <lwip_netconn_do_close_internal+0x2b2>
 8009d60:	4b06      	ldr	r3, [pc, #24]	; (8009d7c <lwip_netconn_do_close_internal+0x2c0>)
 8009d62:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009d66:	4910      	ldr	r1, [pc, #64]	; (8009da8 <lwip_netconn_do_close_internal+0x2ec>)
 8009d68:	4806      	ldr	r0, [pc, #24]	; (8009d84 <lwip_netconn_do_close_internal+0x2c8>)
 8009d6a:	f00d ff9b 	bl	8017ca4 <iprintf>
  return err;
 8009d6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3720      	adds	r7, #32
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	080190b8 	.word	0x080190b8
 8009d80:	08019330 	.word	0x08019330
 8009d84:	08019110 	.word	0x08019110
 8009d88:	08019340 	.word	0x08019340
 8009d8c:	08019360 	.word	0x08019360
 8009d90:	08019384 	.word	0x08019384
 8009d94:	080191ec 	.word	0x080191ec
 8009d98:	08019398 	.word	0x08019398
 8009d9c:	080092fd 	.word	0x080092fd
 8009da0:	08009235 	.word	0x08009235
 8009da4:	080093a5 	.word	0x080093a5
 8009da8:	080193bc 	.word	0x080193bc

08009dac <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009dc0:	7cfb      	ldrb	r3, [r7, #19]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00d      	beq.n	8009de2 <lwip_netconn_do_delconn+0x36>
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dd0:	2b10      	cmp	r3, #16
 8009dd2:	d006      	beq.n	8009de2 <lwip_netconn_do_delconn+0x36>
 8009dd4:	4b6f      	ldr	r3, [pc, #444]	; (8009f94 <lwip_netconn_do_delconn+0x1e8>)
 8009dd6:	f240 4201 	movw	r2, #1025	; 0x401
 8009dda:	496f      	ldr	r1, [pc, #444]	; (8009f98 <lwip_netconn_do_delconn+0x1ec>)
 8009ddc:	486f      	ldr	r0, [pc, #444]	; (8009f9c <lwip_netconn_do_delconn+0x1f0>)
 8009dde:	f00d ff61 	bl	8017ca4 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009de2:	7cfb      	ldrb	r3, [r7, #19]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <lwip_netconn_do_delconn+0x48>
 8009de8:	7cfb      	ldrb	r3, [r7, #19]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d002      	beq.n	8009df4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009dee:	7cfb      	ldrb	r3, [r7, #19]
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d109      	bne.n	8009e08 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009df4:	7cfb      	ldrb	r3, [r7, #19]
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d10a      	bne.n	8009e10 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	7f1b      	ldrb	r3, [r3, #28]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d103      	bne.n	8009e10 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	22fb      	movs	r2, #251	; 0xfb
 8009e0c:	711a      	strb	r2, [r3, #4]
 8009e0e:	e09c      	b.n	8009f4a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009e10:	7cfb      	ldrb	r3, [r7, #19]
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d10d      	bne.n	8009e32 <lwip_netconn_do_delconn+0x86>
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	7f1b      	ldrb	r3, [r3, #28]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d106      	bne.n	8009e32 <lwip_netconn_do_delconn+0x86>
 8009e24:	4b5b      	ldr	r3, [pc, #364]	; (8009f94 <lwip_netconn_do_delconn+0x1e8>)
 8009e26:	f240 421f 	movw	r2, #1055	; 0x41f
 8009e2a:	495d      	ldr	r1, [pc, #372]	; (8009fa0 <lwip_netconn_do_delconn+0x1f4>)
 8009e2c:	485b      	ldr	r0, [pc, #364]	; (8009f9c <lwip_netconn_do_delconn+0x1f0>)
 8009e2e:	f00d ff39 	bl	8017ca4 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2200      	movs	r2, #0
 8009e36:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff fdbd 	bl	80099bc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d064      	beq.n	8009f16 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e56:	2b10      	cmp	r3, #16
 8009e58:	d00e      	beq.n	8009e78 <lwip_netconn_do_delconn+0xcc>
 8009e5a:	2b20      	cmp	r3, #32
 8009e5c:	d000      	beq.n	8009e60 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 8009e5e:	e056      	b.n	8009f0e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	625a      	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f00d fb41 	bl	80174f8 <udp_remove>
        break;
 8009e76:	e04a      	b.n	8009f0e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d104      	bne.n	8009e8c <lwip_netconn_do_delconn+0xe0>
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d006      	beq.n	8009e9a <lwip_netconn_do_delconn+0xee>
 8009e8c:	4b41      	ldr	r3, [pc, #260]	; (8009f94 <lwip_netconn_do_delconn+0x1e8>)
 8009e8e:	f240 4235 	movw	r2, #1077	; 0x435
 8009e92:	4944      	ldr	r1, [pc, #272]	; (8009fa4 <lwip_netconn_do_delconn+0x1f8>)
 8009e94:	4841      	ldr	r0, [pc, #260]	; (8009f9c <lwip_netconn_do_delconn+0x1f0>)
 8009e96:	f00d ff05 	bl	8017ca4 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2204      	movs	r2, #4
 8009ea0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2203      	movs	r2, #3
 8009ea6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff fe00 	bl	8009abc <lwip_netconn_do_close_internal>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d064      	beq.n	8009f8c <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	785b      	ldrb	r3, [r3, #1]
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d006      	beq.n	8009eda <lwip_netconn_do_delconn+0x12e>
 8009ecc:	4b31      	ldr	r3, [pc, #196]	; (8009f94 <lwip_netconn_do_delconn+0x1e8>)
 8009ece:	f240 423b 	movw	r2, #1083	; 0x43b
 8009ed2:	4935      	ldr	r1, [pc, #212]	; (8009fa8 <lwip_netconn_do_delconn+0x1fc>)
 8009ed4:	4831      	ldr	r0, [pc, #196]	; (8009f9c <lwip_netconn_do_delconn+0x1f0>)
 8009ed6:	f00d fee5 	bl	8017ca4 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009eda:	4834      	ldr	r0, [pc, #208]	; (8009fac <lwip_netconn_do_delconn+0x200>)
 8009edc:	f00d fe21 	bl	8017b22 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f00d fd77 	bl	80179dc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009eee:	482f      	ldr	r0, [pc, #188]	; (8009fac <lwip_netconn_do_delconn+0x200>)
 8009ef0:	f00d fe08 	bl	8017b04 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d046      	beq.n	8009f8c <lwip_netconn_do_delconn+0x1e0>
 8009efe:	4b25      	ldr	r3, [pc, #148]	; (8009f94 <lwip_netconn_do_delconn+0x1e8>)
 8009f00:	f240 423f 	movw	r2, #1087	; 0x43f
 8009f04:	4928      	ldr	r1, [pc, #160]	; (8009fa8 <lwip_netconn_do_delconn+0x1fc>)
 8009f06:	4825      	ldr	r0, [pc, #148]	; (8009f9c <lwip_netconn_do_delconn+0x1f0>)
 8009f08:	f00d fecc 	bl	8017ca4 <iprintf>
        return;
 8009f0c:	e03e      	b.n	8009f8c <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d007      	beq.n	8009f30 <lwip_netconn_do_delconn+0x184>
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	6810      	ldr	r0, [r2, #0]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d007      	beq.n	8009f4a <lwip_netconn_do_delconn+0x19e>
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	6810      	ldr	r0, [r2, #0]
 8009f44:	2200      	movs	r2, #0
 8009f46:	2102      	movs	r1, #2
 8009f48:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	330c      	adds	r3, #12
 8009f50:	4618      	mov	r0, r3
 8009f52:	f00d fd8e 	bl	8017a72 <sys_sem_valid>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d018      	beq.n	8009f8e <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d014      	beq.n	8009f8e <lwip_netconn_do_delconn+0x1e2>
 8009f64:	f00d fe10 	bl	8017b88 <sys_arch_protect>
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009f72:	f113 0f0c 	cmn.w	r3, #12
 8009f76:	db05      	blt.n	8009f84 <lwip_netconn_do_delconn+0x1d8>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009f82:	721a      	strb	r2, [r3, #8]
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f00d fe0d 	bl	8017ba4 <sys_arch_unprotect>
 8009f8a:	e000      	b.n	8009f8e <lwip_netconn_do_delconn+0x1e2>
        return;
 8009f8c:	bf00      	nop
  }
}
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	080190b8 	.word	0x080190b8
 8009f98:	080193cc 	.word	0x080193cc
 8009f9c:	08019110 	.word	0x08019110
 8009fa0:	080193e0 	.word	0x080193e0
 8009fa4:	08019400 	.word	0x08019400
 8009fa8:	0801941c 	.word	0x0801941c
 8009fac:	2001d268 	.word	0x2001d268

08009fb0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009fc4:	f113 0f0c 	cmn.w	r3, #12
 8009fc8:	da06      	bge.n	8009fd8 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	711a      	strb	r2, [r3, #4]
 8009fd6:	e02f      	b.n	800a038 <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	22fa      	movs	r2, #250	; 0xfa
 8009fdc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d027      	beq.n	800a038 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ff2:	2b10      	cmp	r3, #16
 8009ff4:	d011      	beq.n	800a01a <lwip_netconn_do_bind+0x6a>
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d000      	beq.n	8009ffc <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 8009ffa:	e01d      	b.n	800a038 <lwip_netconn_do_bind+0x88>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6858      	ldr	r0, [r3, #4]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6899      	ldr	r1, [r3, #8]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	899b      	ldrh	r3, [r3, #12]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f00d f99c 	bl	8017348 <udp_bind>
 800a010:	4603      	mov	r3, r0
 800a012:	461a      	mov	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	711a      	strb	r2, [r3, #4]
        break;
 800a018:	e00e      	b.n	800a038 <lwip_netconn_do_bind+0x88>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6858      	ldr	r0, [r3, #4]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6899      	ldr	r1, [r3, #8]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	899b      	ldrh	r3, [r3, #12]
 800a028:	461a      	mov	r2, r3
 800a02a:	f007 fd97 	bl	8011b5c <tcp_bind>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	711a      	strb	r2, [r3, #4]
        break;
 800a036:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d012      	beq.n	800a066 <lwip_netconn_do_bind+0xb6>
 800a040:	f00d fda2 	bl	8017b88 <sys_arch_protect>
 800a044:	60b8      	str	r0, [r7, #8]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a04e:	f113 0f0c 	cmn.w	r3, #12
 800a052:	db05      	blt.n	800a060 <lwip_netconn_do_bind+0xb0>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a05e:	721a      	strb	r2, [r3, #8]
 800a060:	68b8      	ldr	r0, [r7, #8]
 800a062:	f00d fd9f 	bl	8017ba4 <sys_arch_unprotect>
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
	...

0800a070 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a084:	f113 0f0c 	cmn.w	r3, #12
 800a088:	da06      	bge.n	800a098 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	711a      	strb	r2, [r3, #4]
 800a096:	e090      	b.n	800a1ba <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	22f5      	movs	r2, #245	; 0xf5
 800a09c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 8088 	beq.w	800a1ba <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0b4:	2b10      	cmp	r3, #16
 800a0b6:	d17d      	bne.n	800a1b4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	785b      	ldrb	r3, [r3, #1]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d16f      	bne.n	800a1a2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	7d1b      	ldrb	r3, [r3, #20]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	22fa      	movs	r2, #250	; 0xfa
 800a0d2:	711a      	strb	r2, [r3, #4]
 800a0d4:	e071      	b.n	800a1ba <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a0d6:	23ff      	movs	r3, #255	; 0xff
 800a0d8:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f107 020f 	add.w	r2, r7, #15
 800a0e4:	7ef9      	ldrb	r1, [r7, #27]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f007 fdda 	bl	8011ca0 <tcp_listen_with_backlog_and_err>
 800a0ec:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d104      	bne.n	800a0fe <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800a0f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	711a      	strb	r2, [r3, #4]
 800a0fc:	e05d      	b.n	800a1ba <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3310      	adds	r3, #16
 800a104:	4618      	mov	r0, r3
 800a106:	f00d fc23 	bl	8017950 <sys_mbox_valid>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00b      	beq.n	800a128 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3310      	adds	r3, #16
 800a116:	4618      	mov	r0, r3
 800a118:	f00d fb7e 	bl	8017818 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3310      	adds	r3, #16
 800a122:	4618      	mov	r0, r3
 800a124:	f00d fc25 	bl	8017972 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	2200      	movs	r2, #0
 800a12c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	3314      	adds	r3, #20
 800a134:	4618      	mov	r0, r3
 800a136:	f00d fc0b 	bl	8017950 <sys_mbox_valid>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3314      	adds	r3, #20
 800a146:	2106      	movs	r1, #6
 800a148:	4618      	mov	r0, r3
 800a14a:	f00d fb43 	bl	80177d4 <sys_mbox_new>
 800a14e:	4603      	mov	r3, r0
 800a150:	461a      	mov	r2, r3
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d118      	bne.n	800a192 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2202      	movs	r2, #2
 800a166:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4619      	mov	r1, r3
 800a17c:	4610      	mov	r0, r2
 800a17e:	f008 fc5b 	bl	8012a38 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	4919      	ldr	r1, [pc, #100]	; (800a1f0 <lwip_netconn_do_listen+0x180>)
 800a18a:	4618      	mov	r0, r3
 800a18c:	f008 fcca 	bl	8012b24 <tcp_accept>
 800a190:	e013      	b.n	800a1ba <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800a192:	6978      	ldr	r0, [r7, #20]
 800a194:	f007 fbc0 	bl	8011918 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2200      	movs	r2, #0
 800a19e:	605a      	str	r2, [r3, #4]
 800a1a0:	e00b      	b.n	800a1ba <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d106      	bne.n	800a1ba <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	711a      	strb	r2, [r3, #4]
 800a1b2:	e002      	b.n	800a1ba <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	22f0      	movs	r2, #240	; 0xf0
 800a1b8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d012      	beq.n	800a1e8 <lwip_netconn_do_listen+0x178>
 800a1c2:	f00d fce1 	bl	8017b88 <sys_arch_protect>
 800a1c6:	6138      	str	r0, [r7, #16]
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a1d0:	f113 0f0c 	cmn.w	r3, #12
 800a1d4:	db05      	blt.n	800a1e2 <lwip_netconn_do_listen+0x172>
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a1e0:	721a      	strb	r2, [r3, #8]
 800a1e2:	6938      	ldr	r0, [r7, #16]
 800a1e4:	f00d fcde 	bl	8017ba4 <sys_arch_unprotect>
}
 800a1e8:	bf00      	nop
 800a1ea:	3720      	adds	r7, #32
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	080095d5 	.word	0x080095d5

0800a1f4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2200      	movs	r2, #0
 800a204:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d022      	beq.n	800a256 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a21a:	2b10      	cmp	r3, #16
 800a21c:	d11b      	bne.n	800a256 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a22a:	d202      	bcs.n	800a232 <lwip_netconn_do_recv+0x3e>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	e001      	b.n	800a236 <lwip_netconn_do_recv+0x42>
 800a232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a236:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	89fa      	ldrh	r2, [r7, #14]
 800a240:	4611      	mov	r1, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f007 fe14 	bl	8011e70 <tcp_recved>
        remaining -= recved;
 800a248:	89fb      	ldrh	r3, [r7, #14]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e6      	bne.n	800a224 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d012      	beq.n	800a284 <lwip_netconn_do_recv+0x90>
 800a25e:	f00d fc93 	bl	8017b88 <sys_arch_protect>
 800a262:	60b8      	str	r0, [r7, #8]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a26c:	f113 0f0c 	cmn.w	r3, #12
 800a270:	db05      	blt.n	800a27e <lwip_netconn_do_recv+0x8a>
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a27c:	721a      	strb	r2, [r3, #8]
 800a27e:	68b8      	ldr	r0, [r7, #8]
 800a280:	f00d fc90 	bl	8017ba4 <sys_arch_unprotect>
}
 800a284:	bf00      	nop
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	; 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <lwip_netconn_do_writemore+0x26>
 800a2a4:	4ba2      	ldr	r3, [pc, #648]	; (800a530 <lwip_netconn_do_writemore+0x2a4>)
 800a2a6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800a2aa:	49a2      	ldr	r1, [pc, #648]	; (800a534 <lwip_netconn_do_writemore+0x2a8>)
 800a2ac:	48a2      	ldr	r0, [pc, #648]	; (800a538 <lwip_netconn_do_writemore+0x2ac>)
 800a2ae:	f00d fcf9 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d006      	beq.n	800a2c8 <lwip_netconn_do_writemore+0x3c>
 800a2ba:	4b9d      	ldr	r3, [pc, #628]	; (800a530 <lwip_netconn_do_writemore+0x2a4>)
 800a2bc:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800a2c0:	499e      	ldr	r1, [pc, #632]	; (800a53c <lwip_netconn_do_writemore+0x2b0>)
 800a2c2:	489d      	ldr	r0, [pc, #628]	; (800a538 <lwip_netconn_do_writemore+0x2ac>)
 800a2c4:	f00d fcee 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <lwip_netconn_do_writemore+0x52>
 800a2d0:	4b97      	ldr	r3, [pc, #604]	; (800a530 <lwip_netconn_do_writemore+0x2a4>)
 800a2d2:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800a2d6:	499a      	ldr	r1, [pc, #616]	; (800a540 <lwip_netconn_do_writemore+0x2b4>)
 800a2d8:	4897      	ldr	r0, [pc, #604]	; (800a538 <lwip_netconn_do_writemore+0x2ac>)
 800a2da:	f00d fce3 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <lwip_netconn_do_writemore+0x68>
 800a2e6:	4b92      	ldr	r3, [pc, #584]	; (800a530 <lwip_netconn_do_writemore+0x2a4>)
 800a2e8:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800a2ec:	4995      	ldr	r1, [pc, #596]	; (800a544 <lwip_netconn_do_writemore+0x2b8>)
 800a2ee:	4892      	ldr	r0, [pc, #584]	; (800a538 <lwip_netconn_do_writemore+0x2ac>)
 800a2f0:	f00d fcd8 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a1a      	ldr	r2, [r3, #32]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d306      	bcc.n	800a310 <lwip_netconn_do_writemore+0x84>
 800a302:	4b8b      	ldr	r3, [pc, #556]	; (800a530 <lwip_netconn_do_writemore+0x2a4>)
 800a304:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800a308:	498f      	ldr	r1, [pc, #572]	; (800a548 <lwip_netconn_do_writemore+0x2bc>)
 800a30a:	488b      	ldr	r0, [pc, #556]	; (800a538 <lwip_netconn_do_writemore+0x2ac>)
 800a30c:	f00d fcca 	bl	8017ca4 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	7c1b      	ldrb	r3, [r3, #16]
 800a316:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	7f1b      	ldrb	r3, [r3, #28]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b00      	cmp	r3, #0
 800a324:	d105      	bne.n	800a332 <lwip_netconn_do_writemore+0xa6>
 800a326:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <lwip_netconn_do_writemore+0xaa>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <lwip_netconn_do_writemore+0xac>
 800a336:	2300      	movs	r3, #0
 800a338:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	4413      	add	r3, r2
 800a348:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a35e:	d309      	bcc.n	800a374 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800a360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a364:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800a366:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a36a:	f043 0302 	orr.w	r3, r3, #2
 800a36e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a372:	e001      	b.n	800a378 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a380:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800a382:	8afa      	ldrh	r2, [r7, #22]
 800a384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a386:	429a      	cmp	r2, r3
 800a388:	d212      	bcs.n	800a3b0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800a38a:	8afb      	ldrh	r3, [r7, #22]
 800a38c:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800a38e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a392:	2b00      	cmp	r3, #0
 800a394:	d006      	beq.n	800a3a4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800a396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d109      	bne.n	800a3b0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800a39c:	23f9      	movs	r3, #249	; 0xf9
 800a39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800a3a2:	e029      	b.n	800a3f8 <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a3a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1a      	ldr	r2, [r3, #32]
 800a3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3b6:	441a      	add	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d906      	bls.n	800a3d0 <lwip_netconn_do_writemore+0x144>
 800a3c2:	4b5b      	ldr	r3, [pc, #364]	; (800a530 <lwip_netconn_do_writemore+0x2a4>)
 800a3c4:	f240 6213 	movw	r2, #1555	; 0x613
 800a3c8:	4960      	ldr	r1, [pc, #384]	; (800a54c <lwip_netconn_do_writemore+0x2c0>)
 800a3ca:	485b      	ldr	r0, [pc, #364]	; (800a538 <lwip_netconn_do_writemore+0x2ac>)
 800a3cc:	f00d fc6a 	bl	8017ca4 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6858      	ldr	r0, [r3, #4]
 800a3d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3da:	69f9      	ldr	r1, [r7, #28]
 800a3dc:	f00b f9ec 	bl	80157b8 <tcp_write>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a3e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <lwip_netconn_do_writemore+0x16c>
 800a3ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3f6:	d132      	bne.n	800a45e <lwip_netconn_do_writemore+0x1d2>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800a3f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d017      	beq.n	800a430 <lwip_netconn_do_writemore+0x1a4>
 800a400:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d211      	bcs.n	800a430 <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a410:	2b00      	cmp	r3, #0
 800a412:	d005      	beq.n	800a420 <lwip_netconn_do_writemore+0x194>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a418:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a41a:	2103      	movs	r1, #3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	7f1b      	ldrb	r3, [r3, #28]
 800a424:	f043 0310 	orr.w	r3, r3, #16
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	771a      	strb	r2, [r3, #28]
 800a42e:	e016      	b.n	800a45e <lwip_netconn_do_writemore+0x1d2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a438:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a43c:	d305      	bcc.n	800a44a <lwip_netconn_do_writemore+0x1be>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a446:	2b04      	cmp	r3, #4
 800a448:	d909      	bls.n	800a45e <lwip_netconn_do_writemore+0x1d2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <lwip_netconn_do_writemore+0x1d2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a458:	2103      	movs	r1, #3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a45e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a462:	2b00      	cmp	r3, #0
 800a464:	d134      	bne.n	800a4d0 <lwip_netconn_do_writemore+0x244>
      err_t out_err;
      conn->write_offset += len;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1a      	ldr	r2, [r3, #32]
 800a46a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a46c:	441a      	add	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1a      	ldr	r2, [r3, #32]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d003      	beq.n	800a488 <lwip_netconn_do_writemore+0x1fc>
 800a480:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a484:	2b00      	cmp	r3, #0
 800a486:	d007      	beq.n	800a498 <lwip_netconn_do_writemore+0x20c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	6a12      	ldr	r2, [r2, #32]
 800a490:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f00b fe41 	bl	8016124 <tcp_output>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800a4a6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800a4aa:	f113 0f0c 	cmn.w	r3, #12
 800a4ae:	db04      	blt.n	800a4ba <lwip_netconn_do_writemore+0x22e>
 800a4b0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800a4b4:	f113 0f04 	cmn.w	r3, #4
 800a4b8:	d151      	bne.n	800a55e <lwip_netconn_do_writemore+0x2d2>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a4ba:	7d7b      	ldrb	r3, [r7, #21]
 800a4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	60da      	str	r2, [r3, #12]
 800a4ce:	e046      	b.n	800a55e <lwip_netconn_do_writemore+0x2d2>
      }
    } else if (err == ERR_MEM) {
 800a4d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4d8:	d13a      	bne.n	800a550 <lwip_netconn_do_writemore+0x2c4>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f00b fe20 	bl	8016124 <tcp_output>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800a4e8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800a4ec:	f113 0f0c 	cmn.w	r3, #12
 800a4f0:	db04      	blt.n	800a4fc <lwip_netconn_do_writemore+0x270>
 800a4f2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800a4f6:	f113 0f04 	cmn.w	r3, #4
 800a4fa:	d10a      	bne.n	800a512 <lwip_netconn_do_writemore+0x286>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a4fc:	7d3b      	ldrb	r3, [r7, #20]
 800a4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800a502:	2301      	movs	r3, #1
 800a504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2200      	movs	r2, #0
 800a50e:	60da      	str	r2, [r3, #12]
 800a510:	e025      	b.n	800a55e <lwip_netconn_do_writemore+0x2d2>
      } else if (dontblock) {
 800a512:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a516:	2b00      	cmp	r3, #0
 800a518:	d021      	beq.n	800a55e <lwip_netconn_do_writemore+0x2d2>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800a51a:	23f9      	movs	r3, #249	; 0xf9
 800a51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800a520:	2301      	movs	r3, #1
 800a522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	2200      	movs	r2, #0
 800a52c:	60da      	str	r2, [r3, #12]
 800a52e:	e016      	b.n	800a55e <lwip_netconn_do_writemore+0x2d2>
 800a530:	080190b8 	.word	0x080190b8
 800a534:	080191dc 	.word	0x080191dc
 800a538:	08019110 	.word	0x08019110
 800a53c:	080194bc 	.word	0x080194bc
 800a540:	080191ec 	.word	0x080191ec
 800a544:	080194dc 	.word	0x080194dc
 800a548:	080194f4 	.word	0x080194f4
 800a54c:	08019528 	.word	0x08019528
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a550:	2301      	movs	r3, #1
 800a552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	2200      	movs	r2, #0
 800a55c:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800a55e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a562:	2b00      	cmp	r3, #0
 800a564:	d02c      	beq.n	800a5c0 <lwip_netconn_do_writemore+0x334>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330c      	adds	r3, #12
 800a56e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a578:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00f      	beq.n	800a5b2 <lwip_netconn_do_writemore+0x326>
 800a592:	f00d faf9 	bl	8017b88 <sys_arch_protect>
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a59e:	f113 0f0c 	cmn.w	r3, #12
 800a5a2:	db03      	blt.n	800a5ac <lwip_netconn_do_writemore+0x320>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a5aa:	721a      	strb	r2, [r3, #8]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f00d faf9 	bl	8017ba4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a5b2:	78fb      	ldrb	r3, [r7, #3]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d006      	beq.n	800a5c6 <lwip_netconn_do_writemore+0x33a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a5b8:	6938      	ldr	r0, [r7, #16]
 800a5ba:	f00d fa40 	bl	8017a3e <sys_sem_signal>
 800a5be:	e002      	b.n	800a5c6 <lwip_netconn_do_writemore+0x33a>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a5c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5c4:	e000      	b.n	800a5c8 <lwip_netconn_do_writemore+0x33c>
  }
#endif
  return ERR_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3728      	adds	r7, #40	; 0x28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a5e4:	f113 0f0c 	cmn.w	r3, #12
 800a5e8:	da06      	bge.n	800a5f8 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	711a      	strb	r2, [r3, #4]
 800a5f6:	e072      	b.n	800a6de <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a602:	2b10      	cmp	r3, #16
 800a604:	d168      	bne.n	800a6d8 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	785b      	ldrb	r3, [r3, #1]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	22fb      	movs	r2, #251	; 0xfb
 800a614:	711a      	strb	r2, [r3, #4]
 800a616:	e062      	b.n	800a6de <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d056      	beq.n	800a6d0 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2201      	movs	r2, #1
 800a628:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d104      	bne.n	800a63e <lwip_netconn_do_write+0x6e>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d006      	beq.n	800a64c <lwip_netconn_do_write+0x7c>
 800a63e:	4b36      	ldr	r3, [pc, #216]	; (800a718 <lwip_netconn_do_write+0x148>)
 800a640:	f240 6283 	movw	r2, #1667	; 0x683
 800a644:	4935      	ldr	r1, [pc, #212]	; (800a71c <lwip_netconn_do_write+0x14c>)
 800a646:	4836      	ldr	r0, [pc, #216]	; (800a720 <lwip_netconn_do_write+0x150>)
 800a648:	f00d fb2c 	bl	8017ca4 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d106      	bne.n	800a662 <lwip_netconn_do_write+0x92>
 800a654:	4b30      	ldr	r3, [pc, #192]	; (800a718 <lwip_netconn_do_write+0x148>)
 800a656:	f240 6284 	movw	r2, #1668	; 0x684
 800a65a:	4932      	ldr	r1, [pc, #200]	; (800a724 <lwip_netconn_do_write+0x154>)
 800a65c:	4830      	ldr	r0, [pc, #192]	; (800a720 <lwip_netconn_do_write+0x150>)
 800a65e:	f00d fb21 	bl	8017ca4 <iprintf>
        msg->conn->current_msg = msg;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2200      	movs	r2, #0
 800a670:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2100      	movs	r1, #0
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff fe07 	bl	800a28c <lwip_netconn_do_writemore>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d044      	beq.n	800a70e <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	785b      	ldrb	r3, [r3, #1]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d006      	beq.n	800a69c <lwip_netconn_do_write+0xcc>
 800a68e:	4b22      	ldr	r3, [pc, #136]	; (800a718 <lwip_netconn_do_write+0x148>)
 800a690:	f240 6289 	movw	r2, #1673	; 0x689
 800a694:	4924      	ldr	r1, [pc, #144]	; (800a728 <lwip_netconn_do_write+0x158>)
 800a696:	4822      	ldr	r0, [pc, #136]	; (800a720 <lwip_netconn_do_write+0x150>)
 800a698:	f00d fb04 	bl	8017ca4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a69c:	4823      	ldr	r0, [pc, #140]	; (800a72c <lwip_netconn_do_write+0x15c>)
 800a69e:	f00d fa40 	bl	8017b22 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	330c      	adds	r3, #12
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f00d f996 	bl	80179dc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a6b0:	481e      	ldr	r0, [pc, #120]	; (800a72c <lwip_netconn_do_write+0x15c>)
 800a6b2:	f00d fa27 	bl	8017b04 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	785b      	ldrb	r3, [r3, #1]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d126      	bne.n	800a70e <lwip_netconn_do_write+0x13e>
 800a6c0:	4b15      	ldr	r3, [pc, #84]	; (800a718 <lwip_netconn_do_write+0x148>)
 800a6c2:	f240 628d 	movw	r2, #1677	; 0x68d
 800a6c6:	4918      	ldr	r1, [pc, #96]	; (800a728 <lwip_netconn_do_write+0x158>)
 800a6c8:	4815      	ldr	r0, [pc, #84]	; (800a720 <lwip_netconn_do_write+0x150>)
 800a6ca:	f00d faeb 	bl	8017ca4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a6ce:	e01e      	b.n	800a70e <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	22f5      	movs	r2, #245	; 0xf5
 800a6d4:	711a      	strb	r2, [r3, #4]
 800a6d6:	e002      	b.n	800a6de <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	22fa      	movs	r2, #250	; 0xfa
 800a6dc:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d014      	beq.n	800a710 <lwip_netconn_do_write+0x140>
 800a6e6:	f00d fa4f 	bl	8017b88 <sys_arch_protect>
 800a6ea:	60b8      	str	r0, [r7, #8]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a6f4:	f113 0f0c 	cmn.w	r3, #12
 800a6f8:	db05      	blt.n	800a706 <lwip_netconn_do_write+0x136>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a704:	721a      	strb	r2, [r3, #8]
 800a706:	68b8      	ldr	r0, [r7, #8]
 800a708:	f00d fa4c 	bl	8017ba4 <sys_arch_unprotect>
 800a70c:	e000      	b.n	800a710 <lwip_netconn_do_write+0x140>
        return;
 800a70e:	bf00      	nop
}
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	080190b8 	.word	0x080190b8
 800a71c:	08019400 	.word	0x08019400
 800a720:	08019110 	.word	0x08019110
 800a724:	08019554 	.word	0x08019554
 800a728:	0801941c 	.word	0x0801941c
 800a72c:	2001d268 	.word	0x2001d268

0800a730 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	785b      	ldrb	r3, [r3, #1]
 800a742:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d06e      	beq.n	800a82c <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a758:	2b10      	cmp	r3, #16
 800a75a:	d167      	bne.n	800a82c <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a760:	2b03      	cmp	r3, #3
 800a762:	d002      	beq.n	800a76a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a764:	7cfb      	ldrb	r3, [r7, #19]
 800a766:	2b02      	cmp	r3, #2
 800a768:	d060      	beq.n	800a82c <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a76a:	7cfb      	ldrb	r3, [r7, #19]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d103      	bne.n	800a778 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	22f5      	movs	r2, #245	; 0xf5
 800a774:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a776:	e05c      	b.n	800a832 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800a778:	7cfb      	ldrb	r3, [r7, #19]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d103      	bne.n	800a786 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	22fb      	movs	r2, #251	; 0xfb
 800a782:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a784:	e055      	b.n	800a832 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	7a1b      	ldrb	r3, [r3, #8]
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff f910 	bl	80099bc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d104      	bne.n	800a7b0 <lwip_netconn_do_close+0x80>
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d006      	beq.n	800a7be <lwip_netconn_do_close+0x8e>
 800a7b0:	4b2e      	ldr	r3, [pc, #184]	; (800a86c <lwip_netconn_do_close+0x13c>)
 800a7b2:	f240 721c 	movw	r2, #1820	; 0x71c
 800a7b6:	492e      	ldr	r1, [pc, #184]	; (800a870 <lwip_netconn_do_close+0x140>)
 800a7b8:	482e      	ldr	r0, [pc, #184]	; (800a874 <lwip_netconn_do_close+0x144>)
 800a7ba:	f00d fa73 	bl	8017ca4 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff f971 	bl	8009abc <lwip_netconn_do_close_internal>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d040      	beq.n	800a862 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	785b      	ldrb	r3, [r3, #1]
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d006      	beq.n	800a7f8 <lwip_netconn_do_close+0xc8>
 800a7ea:	4b20      	ldr	r3, [pc, #128]	; (800a86c <lwip_netconn_do_close+0x13c>)
 800a7ec:	f240 7221 	movw	r2, #1825	; 0x721
 800a7f0:	4921      	ldr	r1, [pc, #132]	; (800a878 <lwip_netconn_do_close+0x148>)
 800a7f2:	4820      	ldr	r0, [pc, #128]	; (800a874 <lwip_netconn_do_close+0x144>)
 800a7f4:	f00d fa56 	bl	8017ca4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a7f8:	4820      	ldr	r0, [pc, #128]	; (800a87c <lwip_netconn_do_close+0x14c>)
 800a7fa:	f00d f992 	bl	8017b22 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	330c      	adds	r3, #12
 800a804:	2100      	movs	r1, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f00d f8e8 	bl	80179dc <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a80c:	481b      	ldr	r0, [pc, #108]	; (800a87c <lwip_netconn_do_close+0x14c>)
 800a80e:	f00d f979 	bl	8017b04 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	785b      	ldrb	r3, [r3, #1]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d022      	beq.n	800a862 <lwip_netconn_do_close+0x132>
 800a81c:	4b13      	ldr	r3, [pc, #76]	; (800a86c <lwip_netconn_do_close+0x13c>)
 800a81e:	f240 7225 	movw	r2, #1829	; 0x725
 800a822:	4915      	ldr	r1, [pc, #84]	; (800a878 <lwip_netconn_do_close+0x148>)
 800a824:	4813      	ldr	r0, [pc, #76]	; (800a874 <lwip_netconn_do_close+0x144>)
 800a826:	f00d fa3d 	bl	8017ca4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a82a:	e01a      	b.n	800a862 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	22f5      	movs	r2, #245	; 0xf5
 800a830:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d014      	beq.n	800a864 <lwip_netconn_do_close+0x134>
 800a83a:	f00d f9a5 	bl	8017b88 <sys_arch_protect>
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a848:	f113 0f0c 	cmn.w	r3, #12
 800a84c:	db05      	blt.n	800a85a <lwip_netconn_do_close+0x12a>
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a858:	721a      	strb	r2, [r3, #8]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f00d f9a2 	bl	8017ba4 <sys_arch_unprotect>
 800a860:	e000      	b.n	800a864 <lwip_netconn_do_close+0x134>
      return;
 800a862:	bf00      	nop
}
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	080190b8 	.word	0x080190b8
 800a870:	08019400 	.word	0x08019400
 800a874:	08019110 	.word	0x08019110
 800a878:	0801941c 	.word	0x0801941c
 800a87c:	2001d268 	.word	0x2001d268

0800a880 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d013      	beq.n	800a8b6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f006 fab6 	bl	8010e0c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	605a      	str	r2, [r3, #4]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	2006      	movs	r0, #6
 800a8b2:	f005 fd2f 	bl	8010314 <memp_free>
  }
}
 800a8b6:	bf00      	nop
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d108      	bne.n	800a8e4 <netbuf_data+0x24>
 800a8d2:	4b1b      	ldr	r3, [pc, #108]	; (800a940 <netbuf_data+0x80>)
 800a8d4:	22c2      	movs	r2, #194	; 0xc2
 800a8d6:	491b      	ldr	r1, [pc, #108]	; (800a944 <netbuf_data+0x84>)
 800a8d8:	481b      	ldr	r0, [pc, #108]	; (800a948 <netbuf_data+0x88>)
 800a8da:	f00d f9e3 	bl	8017ca4 <iprintf>
 800a8de:	f06f 030f 	mvn.w	r3, #15
 800a8e2:	e029      	b.n	800a938 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d108      	bne.n	800a8fc <netbuf_data+0x3c>
 800a8ea:	4b15      	ldr	r3, [pc, #84]	; (800a940 <netbuf_data+0x80>)
 800a8ec:	22c3      	movs	r2, #195	; 0xc3
 800a8ee:	4917      	ldr	r1, [pc, #92]	; (800a94c <netbuf_data+0x8c>)
 800a8f0:	4815      	ldr	r0, [pc, #84]	; (800a948 <netbuf_data+0x88>)
 800a8f2:	f00d f9d7 	bl	8017ca4 <iprintf>
 800a8f6:	f06f 030f 	mvn.w	r3, #15
 800a8fa:	e01d      	b.n	800a938 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d108      	bne.n	800a914 <netbuf_data+0x54>
 800a902:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <netbuf_data+0x80>)
 800a904:	22c4      	movs	r2, #196	; 0xc4
 800a906:	4912      	ldr	r1, [pc, #72]	; (800a950 <netbuf_data+0x90>)
 800a908:	480f      	ldr	r0, [pc, #60]	; (800a948 <netbuf_data+0x88>)
 800a90a:	f00d f9cb 	bl	8017ca4 <iprintf>
 800a90e:	f06f 030f 	mvn.w	r3, #15
 800a912:	e011      	b.n	800a938 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <netbuf_data+0x62>
    return ERR_BUF;
 800a91c:	f06f 0301 	mvn.w	r3, #1
 800a920:	e00a      	b.n	800a938 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	895a      	ldrh	r2, [r3, #10]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	08019580 	.word	0x08019580
 800a944:	08019688 	.word	0x08019688
 800a948:	080195d0 	.word	0x080195d0
 800a94c:	080196a4 	.word	0x080196a4
 800a950:	080196c4 	.word	0x080196c4

0800a954 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d108      	bne.n	800a974 <netbuf_next+0x20>
 800a962:	4b11      	ldr	r3, [pc, #68]	; (800a9a8 <netbuf_next+0x54>)
 800a964:	22dc      	movs	r2, #220	; 0xdc
 800a966:	4911      	ldr	r1, [pc, #68]	; (800a9ac <netbuf_next+0x58>)
 800a968:	4811      	ldr	r0, [pc, #68]	; (800a9b0 <netbuf_next+0x5c>)
 800a96a:	f00d f99b 	bl	8017ca4 <iprintf>
 800a96e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a972:	e014      	b.n	800a99e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d102      	bne.n	800a984 <netbuf_next+0x30>
    return -1;
 800a97e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a982:	e00c      	b.n	800a99e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <netbuf_next+0x48>
    return 1;
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <netbuf_next+0x4a>
  }
  return 0;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	08019580 	.word	0x08019580
 800a9ac:	080196e0 	.word	0x080196e0
 800a9b0:	080195d0 	.word	0x080195d0

0800a9b4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800a9bc:	4b29      	ldr	r3, [pc, #164]	; (800aa64 <tcpip_thread+0xb0>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800a9c4:	4b27      	ldr	r3, [pc, #156]	; (800aa64 <tcpip_thread+0xb0>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a27      	ldr	r2, [pc, #156]	; (800aa68 <tcpip_thread+0xb4>)
 800a9ca:	6812      	ldr	r2, [r2, #0]
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800a9d0:	4826      	ldr	r0, [pc, #152]	; (800aa6c <tcpip_thread+0xb8>)
 800a9d2:	f00d f897 	bl	8017b04 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800a9d6:	4825      	ldr	r0, [pc, #148]	; (800aa6c <tcpip_thread+0xb8>)
 800a9d8:	f00d f8a3 	bl	8017b22 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800a9dc:	f107 030c 	add.w	r3, r7, #12
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4823      	ldr	r0, [pc, #140]	; (800aa70 <tcpip_thread+0xbc>)
 800a9e4:	f00c f9f0 	bl	8016dc8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a9e8:	4820      	ldr	r0, [pc, #128]	; (800aa6c <tcpip_thread+0xb8>)
 800a9ea:	f00d f88b 	bl	8017b04 <sys_mutex_lock>
    if (msg == NULL) {
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d106      	bne.n	800aa02 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a9f4:	4b1f      	ldr	r3, [pc, #124]	; (800aa74 <tcpip_thread+0xc0>)
 800a9f6:	2269      	movs	r2, #105	; 0x69
 800a9f8:	491f      	ldr	r1, [pc, #124]	; (800aa78 <tcpip_thread+0xc4>)
 800a9fa:	4820      	ldr	r0, [pc, #128]	; (800aa7c <tcpip_thread+0xc8>)
 800a9fc:	f00d f952 	bl	8017ca4 <iprintf>
      continue;
 800aa00:	e02f      	b.n	800aa62 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d011      	beq.n	800aa2e <tcpip_thread+0x7a>
 800aa0a:	2b04      	cmp	r3, #4
 800aa0c:	d01b      	beq.n	800aa46 <tcpip_thread+0x92>
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d120      	bne.n	800aa54 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	6850      	ldr	r0, [r2, #4]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	6892      	ldr	r2, [r2, #8]
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4619      	mov	r1, r3
 800aa26:	2009      	movs	r0, #9
 800aa28:	f005 fc74 	bl	8010314 <memp_free>
      break;
 800aa2c:	e019      	b.n	800aa62 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	6892      	ldr	r2, [r2, #8]
 800aa36:	4610      	mov	r0, r2
 800aa38:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	2008      	movs	r0, #8
 800aa40:	f005 fc68 	bl	8010314 <memp_free>
      break;
 800aa44:	e00d      	b.n	800aa62 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	6892      	ldr	r2, [r2, #8]
 800aa4e:	4610      	mov	r0, r2
 800aa50:	4798      	blx	r3
      break;
 800aa52:	e006      	b.n	800aa62 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aa54:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <tcpip_thread+0xc0>)
 800aa56:	229b      	movs	r2, #155	; 0x9b
 800aa58:	4907      	ldr	r1, [pc, #28]	; (800aa78 <tcpip_thread+0xc4>)
 800aa5a:	4808      	ldr	r0, [pc, #32]	; (800aa7c <tcpip_thread+0xc8>)
 800aa5c:	f00d f922 	bl	8017ca4 <iprintf>
      break;
 800aa60:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800aa62:	e7b8      	b.n	800a9d6 <tcpip_thread+0x22>
 800aa64:	200199a0 	.word	0x200199a0
 800aa68:	200199a4 	.word	0x200199a4
 800aa6c:	2001d268 	.word	0x2001d268
 800aa70:	200199a8 	.word	0x200199a8
 800aa74:	08019718 	.word	0x08019718
 800aa78:	08019748 	.word	0x08019748
 800aa7c:	08019768 	.word	0x08019768

0800aa80 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800aa8c:	481a      	ldr	r0, [pc, #104]	; (800aaf8 <tcpip_inpkt+0x78>)
 800aa8e:	f00c ff5f 	bl	8017950 <sys_mbox_valid>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d105      	bne.n	800aaa4 <tcpip_inpkt+0x24>
 800aa98:	4b18      	ldr	r3, [pc, #96]	; (800aafc <tcpip_inpkt+0x7c>)
 800aa9a:	22b5      	movs	r2, #181	; 0xb5
 800aa9c:	4918      	ldr	r1, [pc, #96]	; (800ab00 <tcpip_inpkt+0x80>)
 800aa9e:	4819      	ldr	r0, [pc, #100]	; (800ab04 <tcpip_inpkt+0x84>)
 800aaa0:	f00d f900 	bl	8017ca4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800aaa4:	2009      	movs	r0, #9
 800aaa6:	f005 fbe3 	bl	8010270 <memp_malloc>
 800aaaa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800aab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aab6:	e01a      	b.n	800aaee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2202      	movs	r2, #2
 800aabc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800aad0:	6979      	ldr	r1, [r7, #20]
 800aad2:	4809      	ldr	r0, [pc, #36]	; (800aaf8 <tcpip_inpkt+0x78>)
 800aad4:	f00c fec7 	bl	8017866 <sys_mbox_trypost>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d006      	beq.n	800aaec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aade:	6979      	ldr	r1, [r7, #20]
 800aae0:	2009      	movs	r0, #9
 800aae2:	f005 fc17 	bl	8010314 <memp_free>
    return ERR_MEM;
 800aae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaea:	e000      	b.n	800aaee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800aaec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	200199a8 	.word	0x200199a8
 800aafc:	08019718 	.word	0x08019718
 800ab00:	08019790 	.word	0x08019790
 800ab04:	08019768 	.word	0x08019768

0800ab08 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ab18:	f003 0318 	and.w	r3, r3, #24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d006      	beq.n	800ab2e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ab20:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <tcpip_input+0x3c>)
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff ffab 	bl	800aa80 <tcpip_inpkt>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	e005      	b.n	800ab3a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800ab2e:	4a06      	ldr	r2, [pc, #24]	; (800ab48 <tcpip_input+0x40>)
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff ffa4 	bl	800aa80 <tcpip_inpkt>
 800ab38:	4603      	mov	r3, r0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	08017621 	.word	0x08017621
 800ab48:	0800e921 	.word	0x0800e921

0800ab4c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	4613      	mov	r3, r2
 800ab58:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800ab5a:	481d      	ldr	r0, [pc, #116]	; (800abd0 <tcpip_callback_with_block+0x84>)
 800ab5c:	f00c fef8 	bl	8017950 <sys_mbox_valid>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d105      	bne.n	800ab72 <tcpip_callback_with_block+0x26>
 800ab66:	4b1b      	ldr	r3, [pc, #108]	; (800abd4 <tcpip_callback_with_block+0x88>)
 800ab68:	22ee      	movs	r2, #238	; 0xee
 800ab6a:	491b      	ldr	r1, [pc, #108]	; (800abd8 <tcpip_callback_with_block+0x8c>)
 800ab6c:	481b      	ldr	r0, [pc, #108]	; (800abdc <tcpip_callback_with_block+0x90>)
 800ab6e:	f00d f899 	bl	8017ca4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ab72:	2008      	movs	r0, #8
 800ab74:	f005 fb7c 	bl	8010270 <memp_malloc>
 800ab78:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800ab80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab84:	e01f      	b.n	800abc6 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2203      	movs	r2, #3
 800ab8a:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	609a      	str	r2, [r3, #8]
  if (block) {
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d004      	beq.n	800aba8 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800ab9e:	6979      	ldr	r1, [r7, #20]
 800aba0:	480b      	ldr	r0, [pc, #44]	; (800abd0 <tcpip_callback_with_block+0x84>)
 800aba2:	f00c fe4b 	bl	801783c <sys_mbox_post>
 800aba6:	e00d      	b.n	800abc4 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800aba8:	6979      	ldr	r1, [r7, #20]
 800abaa:	4809      	ldr	r0, [pc, #36]	; (800abd0 <tcpip_callback_with_block+0x84>)
 800abac:	f00c fe5b 	bl	8017866 <sys_mbox_trypost>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d006      	beq.n	800abc4 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800abb6:	6979      	ldr	r1, [r7, #20]
 800abb8:	2008      	movs	r0, #8
 800abba:	f005 fbab 	bl	8010314 <memp_free>
      return ERR_MEM;
 800abbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abc2:	e000      	b.n	800abc6 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	200199a8 	.word	0x200199a8
 800abd4:	08019718 	.word	0x08019718
 800abd8:	08019790 	.word	0x08019790
 800abdc:	08019768 	.word	0x08019768

0800abe0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800abec:	4806      	ldr	r0, [pc, #24]	; (800ac08 <tcpip_send_msg_wait_sem+0x28>)
 800abee:	f00c ff89 	bl	8017b04 <sys_mutex_lock>
  fn(apimsg);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800abf8:	4803      	ldr	r0, [pc, #12]	; (800ac08 <tcpip_send_msg_wait_sem+0x28>)
 800abfa:	f00c ff92 	bl	8017b22 <sys_mutex_unlock>
  return ERR_OK;
 800abfe:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	2001d268 	.word	0x2001d268

0800ac0c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af02      	add	r7, sp, #8
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ac16:	f000 fb9e 	bl	800b356 <lwip_init>

  tcpip_init_done = initfunc;
 800ac1a:	4a17      	ldr	r2, [pc, #92]	; (800ac78 <tcpip_init+0x6c>)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ac20:	4a16      	ldr	r2, [pc, #88]	; (800ac7c <tcpip_init+0x70>)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ac26:	2106      	movs	r1, #6
 800ac28:	4815      	ldr	r0, [pc, #84]	; (800ac80 <tcpip_init+0x74>)
 800ac2a:	f00c fdd3 	bl	80177d4 <sys_mbox_new>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d006      	beq.n	800ac42 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ac34:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <tcpip_init+0x78>)
 800ac36:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ac3a:	4913      	ldr	r1, [pc, #76]	; (800ac88 <tcpip_init+0x7c>)
 800ac3c:	4813      	ldr	r0, [pc, #76]	; (800ac8c <tcpip_init+0x80>)
 800ac3e:	f00d f831 	bl	8017ca4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ac42:	4813      	ldr	r0, [pc, #76]	; (800ac90 <tcpip_init+0x84>)
 800ac44:	f00c ff42 	bl	8017acc <sys_mutex_new>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d006      	beq.n	800ac5c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <tcpip_init+0x78>)
 800ac50:	f240 12d9 	movw	r2, #473	; 0x1d9
 800ac54:	490f      	ldr	r1, [pc, #60]	; (800ac94 <tcpip_init+0x88>)
 800ac56:	480d      	ldr	r0, [pc, #52]	; (800ac8c <tcpip_init+0x80>)
 800ac58:	f00d f824 	bl	8017ca4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac64:	2200      	movs	r2, #0
 800ac66:	490c      	ldr	r1, [pc, #48]	; (800ac98 <tcpip_init+0x8c>)
 800ac68:	480c      	ldr	r0, [pc, #48]	; (800ac9c <tcpip_init+0x90>)
 800ac6a:	f00c ff67 	bl	8017b3c <sys_thread_new>
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	200199a0 	.word	0x200199a0
 800ac7c:	200199a4 	.word	0x200199a4
 800ac80:	200199a8 	.word	0x200199a8
 800ac84:	08019718 	.word	0x08019718
 800ac88:	080197a0 	.word	0x080197a0
 800ac8c:	08019768 	.word	0x08019768
 800ac90:	2001d268 	.word	0x2001d268
 800ac94:	080197c4 	.word	0x080197c4
 800ac98:	0800a9b5 	.word	0x0800a9b5
 800ac9c:	080197e8 	.word	0x080197e8

0800aca0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	4603      	mov	r3, r0
 800aca8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800acaa:	88fb      	ldrh	r3, [r7, #6]
 800acac:	ba5b      	rev16	r3, r3
 800acae:	b29b      	uxth	r3, r3
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	061a      	lsls	r2, r3, #24
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acd0:	431a      	orrs	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	0e1b      	lsrs	r3, r3, #24
 800ace0:	4313      	orrs	r3, r2
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800acee:	b480      	push	{r7}
 800acf0:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800acf2:	bf00      	nop
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	6039      	str	r1, [r7, #0]
 800ad06:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d80f      	bhi.n	800ad2e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d006      	beq.n	800ad22 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	4909      	ldr	r1, [pc, #36]	; (800ad3c <dns_setserver+0x40>)
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	6812      	ldr	r2, [r2, #0]
 800ad1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800ad20:	e005      	b.n	800ad2e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	4905      	ldr	r1, [pc, #20]	; (800ad3c <dns_setserver+0x40>)
 800ad26:	4a06      	ldr	r2, [pc, #24]	; (800ad40 <dns_setserver+0x44>)
 800ad28:	6812      	ldr	r2, [r2, #0]
 800ad2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20019e2c 	.word	0x20019e2c
 800ad40:	0801be94 	.word	0x0801be94

0800ad44 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800ad48:	f000 fa82 	bl	800b250 <dns_check_entries>
}
 800ad4c:	bf00      	nop
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b090      	sub	sp, #64	; 0x40
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
 800ad5a:	79fa      	ldrb	r2, [r7, #7]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	011b      	lsls	r3, r3, #4
 800ad60:	4413      	add	r3, r2
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	4a64      	ldr	r2, [pc, #400]	; (800aef8 <dns_send+0x1a8>)
 800ad66:	4413      	add	r3, r2
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	7adb      	ldrb	r3, [r3, #11]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d906      	bls.n	800ad80 <dns_send+0x30>
 800ad72:	4b62      	ldr	r3, [pc, #392]	; (800aefc <dns_send+0x1ac>)
 800ad74:	f240 22ed 	movw	r2, #749	; 0x2ed
 800ad78:	4961      	ldr	r1, [pc, #388]	; (800af00 <dns_send+0x1b0>)
 800ad7a:	4862      	ldr	r0, [pc, #392]	; (800af04 <dns_send+0x1b4>)
 800ad7c:	f00c ff92 	bl	8017ca4 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	7adb      	ldrb	r3, [r3, #11]
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b60      	ldr	r3, [pc, #384]	; (800af08 <dns_send+0x1b8>)
 800ad88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d109      	bne.n	800ada4 <dns_send+0x54>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	2100      	movs	r1, #0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f8bb 	bl	800af10 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	e0a4      	b.n	800aeee <dns_send+0x19e>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	3310      	adds	r3, #16
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7f5 fa21 	bl	80001f0 <strlen>
 800adae:	4603      	mov	r3, r0
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	3312      	adds	r3, #18
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	2200      	movs	r2, #0
 800adb8:	4619      	mov	r1, r3
 800adba:	2000      	movs	r0, #0
 800adbc:	f005 fcb4 	bl	8010728 <pbuf_alloc>
 800adc0:	62f8      	str	r0, [r7, #44]	; 0x2c
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f000 808d 	beq.w	800aee4 <dns_send+0x194>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800adca:	f107 0310 	add.w	r3, r7, #16
 800adce:	220c      	movs	r2, #12
 800add0:	2100      	movs	r1, #0
 800add2:	4618      	mov	r0, r3
 800add4:	f00c ff5e 	bl	8017c94 <memset>
    hdr.id = lwip_htons(entry->txid);
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	891b      	ldrh	r3, [r3, #8]
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff ff5f 	bl	800aca0 <lwip_htons>
 800ade2:	4603      	mov	r3, r0
 800ade4:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800ade6:	2301      	movs	r3, #1
 800ade8:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800adea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adee:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800adf0:	f107 0310 	add.w	r3, r7, #16
 800adf4:	220c      	movs	r2, #12
 800adf6:	4619      	mov	r1, r3
 800adf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adfa:	f006 fac9 	bl	8011390 <pbuf_take>
    hostname = entry->name;
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	3310      	adds	r3, #16
 800ae02:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	3b01      	subs	r3, #1
 800ae08:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae10:	3301      	adds	r3, #1
 800ae12:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ae1e:	e007      	b.n	800ae30 <dns_send+0xe0>
        ++n;
 800ae20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae24:	3301      	adds	r3, #1
 800ae26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b2e      	cmp	r3, #46	; 0x2e
 800ae36:	d003      	beq.n	800ae40 <dns_send+0xf0>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1ef      	bne.n	800ae20 <dns_send+0xd0>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800ae40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	84fb      	strh	r3, [r7, #38]	; 0x26
      pbuf_put_at(p, query_idx, n);
 800ae48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ae4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae52:	f006 fb81 	bl	8011558 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 800ae56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae58:	3301      	adds	r3, #1
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae62:	f006 fb27 	bl	80114b4 <pbuf_take_at>
      query_idx += n + 1;
 800ae66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae6e:	4413      	add	r3, r2
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	3301      	adds	r3, #1
 800ae74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1c7      	bne.n	800ae0e <dns_send+0xbe>
    pbuf_put_at(p, query_idx, 0);
 800ae7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae80:	2200      	movs	r2, #0
 800ae82:	4619      	mov	r1, r3
 800ae84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae86:	f006 fb67 	bl	8011558 <pbuf_put_at>
    query_idx++;
 800ae8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800ae90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae94:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800ae96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae9a:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800ae9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae9e:	f107 010c 	add.w	r1, r7, #12
 800aea2:	2204      	movs	r2, #4
 800aea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aea6:	f006 fb05 	bl	80114b4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	7bdb      	ldrb	r3, [r3, #15]
 800aeae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800aeb2:	2335      	movs	r3, #53	; 0x35
 800aeb4:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	7adb      	ldrb	r3, [r3, #11]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4a12      	ldr	r2, [pc, #72]	; (800af08 <dns_send+0x1b8>)
 800aebe:	4413      	add	r3, r2
 800aec0:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800aec2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800aec6:	4a11      	ldr	r2, [pc, #68]	; (800af0c <dns_send+0x1bc>)
 800aec8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aece:	69fa      	ldr	r2, [r7, #28]
 800aed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aed2:	f00c f905 	bl	80170e0 <udp_sendto>
 800aed6:	4603      	mov	r3, r0
 800aed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800aedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aede:	f005 ff95 	bl	8010e0c <pbuf_free>
 800aee2:	e002      	b.n	800aeea <dns_send+0x19a>
  } else {
    err = ERR_MEM;
 800aee4:	23ff      	movs	r3, #255	; 0xff
 800aee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800aeea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3740      	adds	r7, #64	; 0x40
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	200199bc 	.word	0x200199bc
 800aefc:	080197f8 	.word	0x080197f8
 800af00:	08019828 	.word	0x08019828
 800af04:	08019840 	.word	0x08019840
 800af08:	20019e2c 	.word	0x20019e2c
 800af0c:	200199ac 	.word	0x200199ac

0800af10 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]
 800af20:	e03d      	b.n	800af9e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800af22:	7bfa      	ldrb	r2, [r7, #15]
 800af24:	4957      	ldr	r1, [pc, #348]	; (800b084 <dns_call_found+0x174>)
 800af26:	4613      	mov	r3, r2
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	4413      	add	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	440b      	add	r3, r1
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d030      	beq.n	800af98 <dns_call_found+0x88>
 800af36:	7bfa      	ldrb	r2, [r7, #15]
 800af38:	4952      	ldr	r1, [pc, #328]	; (800b084 <dns_call_found+0x174>)
 800af3a:	4613      	mov	r3, r2
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	440b      	add	r3, r1
 800af44:	3308      	adds	r3, #8
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	79fa      	ldrb	r2, [r7, #7]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d124      	bne.n	800af98 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800af4e:	7bfa      	ldrb	r2, [r7, #15]
 800af50:	494c      	ldr	r1, [pc, #304]	; (800b084 <dns_call_found+0x174>)
 800af52:	4613      	mov	r3, r2
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	4413      	add	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	440b      	add	r3, r1
 800af5c:	681c      	ldr	r4, [r3, #0]
 800af5e:	79fa      	ldrb	r2, [r7, #7]
 800af60:	4613      	mov	r3, r2
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	4413      	add	r3, r2
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	3310      	adds	r3, #16
 800af6a:	4a47      	ldr	r2, [pc, #284]	; (800b088 <dns_call_found+0x178>)
 800af6c:	1898      	adds	r0, r3, r2
 800af6e:	7bfa      	ldrb	r2, [r7, #15]
 800af70:	4944      	ldr	r1, [pc, #272]	; (800b084 <dns_call_found+0x174>)
 800af72:	4613      	mov	r3, r2
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	4413      	add	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	440b      	add	r3, r1
 800af7c:	3304      	adds	r3, #4
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800af86:	7bfa      	ldrb	r2, [r7, #15]
 800af88:	493e      	ldr	r1, [pc, #248]	; (800b084 <dns_call_found+0x174>)
 800af8a:	4613      	mov	r3, r2
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	3301      	adds	r3, #1
 800af9c:	73fb      	strb	r3, [r7, #15]
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d9be      	bls.n	800af22 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
 800afa8:	e031      	b.n	800b00e <dns_call_found+0xfe>
    if (i == idx) {
 800afaa:	7bfa      	ldrb	r2, [r7, #15]
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d029      	beq.n	800b006 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800afb2:	7bfa      	ldrb	r2, [r7, #15]
 800afb4:	4934      	ldr	r1, [pc, #208]	; (800b088 <dns_call_found+0x178>)
 800afb6:	4613      	mov	r3, r2
 800afb8:	011b      	lsls	r3, r3, #4
 800afba:	4413      	add	r3, r2
 800afbc:	011b      	lsls	r3, r3, #4
 800afbe:	440b      	add	r3, r1
 800afc0:	330a      	adds	r3, #10
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d11f      	bne.n	800b008 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800afc8:	7bfa      	ldrb	r2, [r7, #15]
 800afca:	492f      	ldr	r1, [pc, #188]	; (800b088 <dns_call_found+0x178>)
 800afcc:	4613      	mov	r3, r2
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	4413      	add	r3, r2
 800afd2:	011b      	lsls	r3, r3, #4
 800afd4:	440b      	add	r3, r1
 800afd6:	330f      	adds	r3, #15
 800afd8:	7819      	ldrb	r1, [r3, #0]
 800afda:	79fa      	ldrb	r2, [r7, #7]
 800afdc:	482a      	ldr	r0, [pc, #168]	; (800b088 <dns_call_found+0x178>)
 800afde:	4613      	mov	r3, r2
 800afe0:	011b      	lsls	r3, r3, #4
 800afe2:	4413      	add	r3, r2
 800afe4:	011b      	lsls	r3, r3, #4
 800afe6:	4403      	add	r3, r0
 800afe8:	330f      	adds	r3, #15
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	4299      	cmp	r1, r3
 800afee:	d10b      	bne.n	800b008 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800aff0:	79fa      	ldrb	r2, [r7, #7]
 800aff2:	4925      	ldr	r1, [pc, #148]	; (800b088 <dns_call_found+0x178>)
 800aff4:	4613      	mov	r3, r2
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	4413      	add	r3, r2
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	440b      	add	r3, r1
 800affe:	330f      	adds	r3, #15
 800b000:	2204      	movs	r2, #4
 800b002:	701a      	strb	r2, [r3, #0]
        break;
 800b004:	e006      	b.n	800b014 <dns_call_found+0x104>
      continue; /* only check other requests */
 800b006:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	3301      	adds	r3, #1
 800b00c:	73fb      	strb	r3, [r7, #15]
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
 800b010:	2b03      	cmp	r3, #3
 800b012:	d9ca      	bls.n	800afaa <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800b014:	79fa      	ldrb	r2, [r7, #7]
 800b016:	491c      	ldr	r1, [pc, #112]	; (800b088 <dns_call_found+0x178>)
 800b018:	4613      	mov	r3, r2
 800b01a:	011b      	lsls	r3, r3, #4
 800b01c:	4413      	add	r3, r2
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	440b      	add	r3, r1
 800b022:	330f      	adds	r3, #15
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b03      	cmp	r3, #3
 800b028:	d827      	bhi.n	800b07a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800b02a:	79fa      	ldrb	r2, [r7, #7]
 800b02c:	4916      	ldr	r1, [pc, #88]	; (800b088 <dns_call_found+0x178>)
 800b02e:	4613      	mov	r3, r2
 800b030:	011b      	lsls	r3, r3, #4
 800b032:	4413      	add	r3, r2
 800b034:	011b      	lsls	r3, r3, #4
 800b036:	440b      	add	r3, r1
 800b038:	330f      	adds	r3, #15
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b13      	ldr	r3, [pc, #76]	; (800b08c <dns_call_found+0x17c>)
 800b040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b044:	4618      	mov	r0, r3
 800b046:	f00c fa57 	bl	80174f8 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800b04a:	79fa      	ldrb	r2, [r7, #7]
 800b04c:	490e      	ldr	r1, [pc, #56]	; (800b088 <dns_call_found+0x178>)
 800b04e:	4613      	mov	r3, r2
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	4413      	add	r3, r2
 800b054:	011b      	lsls	r3, r3, #4
 800b056:	440b      	add	r3, r1
 800b058:	330f      	adds	r3, #15
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	4619      	mov	r1, r3
 800b05e:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <dns_call_found+0x17c>)
 800b060:	2200      	movs	r2, #0
 800b062:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800b066:	79fa      	ldrb	r2, [r7, #7]
 800b068:	4907      	ldr	r1, [pc, #28]	; (800b088 <dns_call_found+0x178>)
 800b06a:	4613      	mov	r3, r2
 800b06c:	011b      	lsls	r3, r3, #4
 800b06e:	4413      	add	r3, r2
 800b070:	011b      	lsls	r3, r3, #4
 800b072:	440b      	add	r3, r1
 800b074:	330f      	adds	r3, #15
 800b076:	2204      	movs	r2, #4
 800b078:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd90      	pop	{r4, r7, pc}
 800b082:	bf00      	nop
 800b084:	20019dfc 	.word	0x20019dfc
 800b088:	200199bc 	.word	0x200199bc
 800b08c:	200199ac 	.word	0x200199ac

0800b090 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800b096:	f00c fe81 	bl	8017d9c <rand>
 800b09a:	4603      	mov	r3, r0
 800b09c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b09e:	2300      	movs	r3, #0
 800b0a0:	71fb      	strb	r3, [r7, #7]
 800b0a2:	e01a      	b.n	800b0da <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b0a4:	79fa      	ldrb	r2, [r7, #7]
 800b0a6:	4911      	ldr	r1, [pc, #68]	; (800b0ec <dns_create_txid+0x5c>)
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	4413      	add	r3, r2
 800b0ae:	011b      	lsls	r3, r3, #4
 800b0b0:	440b      	add	r3, r1
 800b0b2:	330a      	adds	r3, #10
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d10c      	bne.n	800b0d4 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800b0ba:	79fa      	ldrb	r2, [r7, #7]
 800b0bc:	490b      	ldr	r1, [pc, #44]	; (800b0ec <dns_create_txid+0x5c>)
 800b0be:	4613      	mov	r3, r2
 800b0c0:	011b      	lsls	r3, r3, #4
 800b0c2:	4413      	add	r3, r2
 800b0c4:	011b      	lsls	r3, r3, #4
 800b0c6:	440b      	add	r3, r1
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b0cc:	88ba      	ldrh	r2, [r7, #4]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d100      	bne.n	800b0d4 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800b0d2:	e7e0      	b.n	800b096 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b0d4:	79fb      	ldrb	r3, [r7, #7]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	71fb      	strb	r3, [r7, #7]
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d9e1      	bls.n	800b0a4 <dns_create_txid+0x14>
    }
  }

  return txid;
 800b0e0:	88bb      	ldrh	r3, [r7, #4]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	200199bc 	.word	0x200199bc

0800b0f0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800b0fa:	79fa      	ldrb	r2, [r7, #7]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	4413      	add	r3, r2
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	4a4c      	ldr	r2, [pc, #304]	; (800b238 <dns_check_entry+0x148>)
 800b106:	4413      	add	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800b10a:	79fb      	ldrb	r3, [r7, #7]
 800b10c:	2b03      	cmp	r3, #3
 800b10e:	d906      	bls.n	800b11e <dns_check_entry+0x2e>
 800b110:	4b4a      	ldr	r3, [pc, #296]	; (800b23c <dns_check_entry+0x14c>)
 800b112:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 800b116:	494a      	ldr	r1, [pc, #296]	; (800b240 <dns_check_entry+0x150>)
 800b118:	484a      	ldr	r0, [pc, #296]	; (800b244 <dns_check_entry+0x154>)
 800b11a:	f00c fdc3 	bl	8017ca4 <iprintf>

  switch (entry->state) {
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	7a9b      	ldrb	r3, [r3, #10]
 800b122:	2b03      	cmp	r3, #3
 800b124:	d876      	bhi.n	800b214 <dns_check_entry+0x124>
 800b126:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <dns_check_entry+0x3c>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b225 	.word	0x0800b225
 800b130:	0800b13d 	.word	0x0800b13d
 800b134:	0800b16f 	.word	0x0800b16f
 800b138:	0800b1f3 	.word	0x0800b1f3
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800b13c:	f7ff ffa8 	bl	800b090 <dns_create_txid>
 800b140:	4603      	mov	r3, r0
 800b142:	461a      	mov	r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2202      	movs	r2, #2
 800b14c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2201      	movs	r2, #1
 800b158:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	4618      	mov	r0, r3
 800b164:	f7ff fdf4 	bl	800ad50 <dns_send>
 800b168:	4603      	mov	r3, r0
 800b16a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800b16c:	e05f      	b.n	800b22e <dns_check_entry+0x13e>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	7b1b      	ldrb	r3, [r3, #12]
 800b172:	3b01      	subs	r3, #1
 800b174:	b2da      	uxtb	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	731a      	strb	r2, [r3, #12]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	7b1b      	ldrb	r3, [r3, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d152      	bne.n	800b228 <dns_check_entry+0x138>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	7b5b      	ldrb	r3, [r3, #13]
 800b186:	3301      	adds	r3, #1
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	735a      	strb	r2, [r3, #13]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	7b5b      	ldrb	r3, [r3, #13]
 800b192:	2b04      	cmp	r3, #4
 800b194:	d122      	bne.n	800b1dc <dns_check_entry+0xec>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	7adb      	ldrb	r3, [r3, #11]
 800b19a:	3301      	adds	r3, #1
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	dc14      	bgt.n	800b1ca <dns_check_entry+0xda>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	7adb      	ldrb	r3, [r3, #11]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	4a28      	ldr	r2, [pc, #160]	; (800b248 <dns_check_entry+0x158>)
 800b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00c      	beq.n	800b1ca <dns_check_entry+0xda>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	7adb      	ldrb	r3, [r3, #11]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	735a      	strb	r2, [r3, #13]
 800b1c8:	e00c      	b.n	800b1e4 <dns_check_entry+0xf4>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fe9e 	bl	800af10 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	729a      	strb	r2, [r3, #10]
            break;
 800b1da:	e028      	b.n	800b22e <dns_check_entry+0x13e>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	7b5a      	ldrb	r2, [r3, #13]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fdb2 	bl	800ad50 <dns_send>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800b1f0:	e01a      	b.n	800b228 <dns_check_entry+0x138>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d008      	beq.n	800b20c <dns_check_entry+0x11c>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	1e5a      	subs	r2, r3, #1
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10f      	bne.n	800b22c <dns_check_entry+0x13c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	729a      	strb	r2, [r3, #10]
      }
      break;
 800b212:	e00b      	b.n	800b22c <dns_check_entry+0x13c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800b214:	4b09      	ldr	r3, [pc, #36]	; (800b23c <dns_check_entry+0x14c>)
 800b216:	f240 4237 	movw	r2, #1079	; 0x437
 800b21a:	490c      	ldr	r1, [pc, #48]	; (800b24c <dns_check_entry+0x15c>)
 800b21c:	4809      	ldr	r0, [pc, #36]	; (800b244 <dns_check_entry+0x154>)
 800b21e:	f00c fd41 	bl	8017ca4 <iprintf>
      break;
 800b222:	e004      	b.n	800b22e <dns_check_entry+0x13e>
      break;
 800b224:	bf00      	nop
 800b226:	e002      	b.n	800b22e <dns_check_entry+0x13e>
      break;
 800b228:	bf00      	nop
 800b22a:	e000      	b.n	800b22e <dns_check_entry+0x13e>
      break;
 800b22c:	bf00      	nop
  }
}
 800b22e:	bf00      	nop
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200199bc 	.word	0x200199bc
 800b23c:	080197f8 	.word	0x080197f8
 800b240:	08019868 	.word	0x08019868
 800b244:	08019840 	.word	0x08019840
 800b248:	20019e2c 	.word	0x20019e2c
 800b24c:	08019884 	.word	0x08019884

0800b250 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b256:	2300      	movs	r3, #0
 800b258:	71fb      	strb	r3, [r7, #7]
 800b25a:	e006      	b.n	800b26a <dns_check_entries+0x1a>
    dns_check_entry(i);
 800b25c:	79fb      	ldrb	r3, [r7, #7]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff ff46 	bl	800b0f0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	3301      	adds	r3, #1
 800b268:	71fb      	strb	r3, [r7, #7]
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d9f5      	bls.n	800b25c <dns_check_entries+0xc>
  }
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b278:	b480      	push	{r7}
 800b27a:	b089      	sub	sp, #36	; 0x24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00d      	beq.n	800b2b8 <lwip_standard_chksum+0x40>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	dd0a      	ble.n	800b2b8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b2a2:	f107 030e 	add.w	r3, r7, #14
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	69fa      	ldr	r2, [r7, #28]
 800b2aa:	1c51      	adds	r1, r2, #1
 800b2ac:	61f9      	str	r1, [r7, #28]
 800b2ae:	7812      	ldrb	r2, [r2, #0]
 800b2b0:	701a      	strb	r2, [r3, #0]
    len--;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b2bc:	e00a      	b.n	800b2d4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	1c9a      	adds	r2, r3, #2
 800b2c2:	61ba      	str	r2, [r7, #24]
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	3b02      	subs	r3, #2
 800b2d2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	dcf1      	bgt.n	800b2be <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dd04      	ble.n	800b2ea <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b2e0:	f107 030e 	add.w	r3, r7, #14
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	7812      	ldrb	r2, [r2, #0]
 800b2e8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b2ea:	89fb      	ldrh	r3, [r7, #14]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	0c1a      	lsrs	r2, r3, #16
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	4413      	add	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	0c1a      	lsrs	r2, r3, #16
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	b29b      	uxth	r3, r3
 800b308:	4413      	add	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d007      	beq.n	800b322 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	021b      	lsls	r3, r3, #8
 800b316:	b29a      	uxth	r2, r3
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	0a1b      	lsrs	r3, r3, #8
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	4313      	orrs	r3, r2
 800b320:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	b29b      	uxth	r3, r3
}
 800b326:	4618      	mov	r0, r3
 800b328:	3724      	adds	r7, #36	; 0x24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b082      	sub	sp, #8
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b33e:	887b      	ldrh	r3, [r7, #2]
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff ff98 	bl	800b278 <lwip_standard_chksum>
 800b348:	4603      	mov	r3, r0
 800b34a:	43db      	mvns	r3, r3
 800b34c:	b29b      	uxth	r3, r3
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b082      	sub	sp, #8
 800b35a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b360:	f00c fba6 	bl	8017ab0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b364:	f004 fc6c 	bl	800fc40 <mem_init>
  memp_init();
 800b368:	f004 ff36 	bl	80101d8 <memp_init>
  pbuf_init();
  netif_init();
 800b36c:	f004 fffc 	bl	8010368 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b370:	f00b fd50 	bl	8016e14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b374:	f006 f912 	bl	801159c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800b378:	f002 ffb4 	bl	800e2e4 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800b37c:	f7ff fcb7 	bl	800acee <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800b380:	f00b fbde 	bl	8016b40 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800b390:	4b20      	ldr	r3, [pc, #128]	; (800b414 <dhcp_inc_pcb_refcount+0x88>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d133      	bne.n	800b400 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b398:	4b1f      	ldr	r3, [pc, #124]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d005      	beq.n	800b3ac <dhcp_inc_pcb_refcount+0x20>
 800b3a0:	4b1e      	ldr	r3, [pc, #120]	; (800b41c <dhcp_inc_pcb_refcount+0x90>)
 800b3a2:	22d9      	movs	r2, #217	; 0xd9
 800b3a4:	491e      	ldr	r1, [pc, #120]	; (800b420 <dhcp_inc_pcb_refcount+0x94>)
 800b3a6:	481f      	ldr	r0, [pc, #124]	; (800b424 <dhcp_inc_pcb_refcount+0x98>)
 800b3a8:	f00c fc7c 	bl	8017ca4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800b3ac:	f00c f8d6 	bl	801755c <udp_new>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	4b19      	ldr	r3, [pc, #100]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b3b4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800b3b6:	4b18      	ldr	r3, [pc, #96]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d102      	bne.n	800b3c4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800b3be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3c2:	e024      	b.n	800b40e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b3c4:	4b14      	ldr	r3, [pc, #80]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a13      	ldr	r2, [pc, #76]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b3ca:	6812      	ldr	r2, [r2, #0]
 800b3cc:	7a12      	ldrb	r2, [r2, #8]
 800b3ce:	f042 0220 	orr.w	r2, r2, #32
 800b3d2:	b2d2      	uxtb	r2, r2
 800b3d4:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800b3d6:	4b10      	ldr	r3, [pc, #64]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2244      	movs	r2, #68	; 0x44
 800b3dc:	4912      	ldr	r1, [pc, #72]	; (800b428 <dhcp_inc_pcb_refcount+0x9c>)
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f00b ffb2 	bl	8017348 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2243      	movs	r2, #67	; 0x43
 800b3ea:	490f      	ldr	r1, [pc, #60]	; (800b428 <dhcp_inc_pcb_refcount+0x9c>)
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f00c f81b 	bl	8017428 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <dhcp_inc_pcb_refcount+0x8c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	490c      	ldr	r1, [pc, #48]	; (800b42c <dhcp_inc_pcb_refcount+0xa0>)
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f00c f86a 	bl	80174d4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800b400:	4b04      	ldr	r3, [pc, #16]	; (800b414 <dhcp_inc_pcb_refcount+0x88>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	b2da      	uxtb	r2, r3
 800b408:	4b02      	ldr	r3, [pc, #8]	; (800b414 <dhcp_inc_pcb_refcount+0x88>)
 800b40a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20019e38 	.word	0x20019e38
 800b418:	20019e34 	.word	0x20019e34
 800b41c:	080198a4 	.word	0x080198a4
 800b420:	080198dc 	.word	0x080198dc
 800b424:	08019904 	.word	0x08019904
 800b428:	0801be94 	.word	0x0801be94
 800b42c:	0800cb89 	.word	0x0800cb89

0800b430 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b434:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <dhcp_dec_pcb_refcount+0x40>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d105      	bne.n	800b448 <dhcp_dec_pcb_refcount+0x18>
 800b43c:	4b0d      	ldr	r3, [pc, #52]	; (800b474 <dhcp_dec_pcb_refcount+0x44>)
 800b43e:	22f3      	movs	r2, #243	; 0xf3
 800b440:	490d      	ldr	r1, [pc, #52]	; (800b478 <dhcp_dec_pcb_refcount+0x48>)
 800b442:	480e      	ldr	r0, [pc, #56]	; (800b47c <dhcp_dec_pcb_refcount+0x4c>)
 800b444:	f00c fc2e 	bl	8017ca4 <iprintf>
  dhcp_pcb_refcount--;
 800b448:	4b09      	ldr	r3, [pc, #36]	; (800b470 <dhcp_dec_pcb_refcount+0x40>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <dhcp_dec_pcb_refcount+0x40>)
 800b452:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <dhcp_dec_pcb_refcount+0x40>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d107      	bne.n	800b46c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800b45c:	4b08      	ldr	r3, [pc, #32]	; (800b480 <dhcp_dec_pcb_refcount+0x50>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4618      	mov	r0, r3
 800b462:	f00c f849 	bl	80174f8 <udp_remove>
    dhcp_pcb = NULL;
 800b466:	4b06      	ldr	r3, [pc, #24]	; (800b480 <dhcp_dec_pcb_refcount+0x50>)
 800b468:	2200      	movs	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]
  }
}
 800b46c:	bf00      	nop
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20019e38 	.word	0x20019e38
 800b474:	080198a4 	.word	0x080198a4
 800b478:	0801992c 	.word	0x0801992c
 800b47c:	08019904 	.word	0x08019904
 800b480:	20019e34 	.word	0x20019e34

0800b484 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b492:	210c      	movs	r1, #12
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 ffa5 	bl	800c3e4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b49a:	4b06      	ldr	r3, [pc, #24]	; (800b4b4 <dhcp_handle_nak+0x30>)
 800b49c:	4a05      	ldr	r2, [pc, #20]	; (800b4b4 <dhcp_handle_nak+0x30>)
 800b49e:	4905      	ldr	r1, [pc, #20]	; (800b4b4 <dhcp_handle_nak+0x30>)
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f004 ffd5 	bl	8010450 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fbd6 	bl	800bc58 <dhcp_discover>
}
 800b4ac:	bf00      	nop
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	0801be94 	.word	0x0801be94

0800b4b8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800b4c6:	2108      	movs	r1, #8
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 ff8b 	bl	800c3e4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3328      	adds	r3, #40	; 0x28
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f002 fb6c 	bl	800dbb4 <etharp_query>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	7a9b      	ldrb	r3, [r3, #10]
 800b4e4:	2bff      	cmp	r3, #255	; 0xff
 800b4e6:	d005      	beq.n	800b4f4 <dhcp_check+0x3c>
    dhcp->tries++;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	7a9b      	ldrb	r3, [r3, #10]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800b4f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b4f8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b4fa:	893b      	ldrh	r3, [r7, #8]
 800b4fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b500:	4a06      	ldr	r2, [pc, #24]	; (800b51c <dhcp_check+0x64>)
 800b502:	fb82 1203 	smull	r1, r2, r2, r3
 800b506:	1152      	asrs	r2, r2, #5
 800b508:	17db      	asrs	r3, r3, #31
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800b512:	bf00      	nop
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	10624dd3 	.word	0x10624dd3

0800b520 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <dhcp_handle_offer+0x40>)
 800b530:	789b      	ldrb	r3, [r3, #2]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00f      	beq.n	800b556 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b536:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <dhcp_handle_offer+0x44>)
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fbbe 	bl	800acbc <lwip_htonl>
 800b540:	4602      	mov	r2, r0
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	691a      	ldr	r2, [r3, #16]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f809 	bl	800b568 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800b556:	bf00      	nop
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	2001d284 	.word	0x2001d284
 800b564:	2001d290 	.word	0x2001d290

0800b568 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b576:	2101      	movs	r1, #1
 800b578:	6938      	ldr	r0, [r7, #16]
 800b57a:	f000 ff33 	bl	800c3e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800b57e:	2203      	movs	r2, #3
 800b580:	6939      	ldr	r1, [r7, #16]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fbe2 	bl	800cd4c <dhcp_create_msg>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800b58c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d159      	bne.n	800b648 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b594:	2202      	movs	r2, #2
 800b596:	2139      	movs	r1, #57	; 0x39
 800b598:	6938      	ldr	r0, [r7, #16]
 800b59a:	f000 ff3d 	bl	800c418 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6938      	ldr	r0, [r7, #16]
 800b5a6:	f000 ff99 	bl	800c4dc <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	2132      	movs	r1, #50	; 0x32
 800b5ae:	6938      	ldr	r0, [r7, #16]
 800b5b0:	f000 ff32 	bl	800c418 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fb7f 	bl	800acbc <lwip_htonl>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6938      	ldr	r0, [r7, #16]
 800b5c4:	f000 ffc6 	bl	800c554 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800b5c8:	2204      	movs	r2, #4
 800b5ca:	2136      	movs	r1, #54	; 0x36
 800b5cc:	6938      	ldr	r0, [r7, #16]
 800b5ce:	f000 ff23 	bl	800c418 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff fb70 	bl	800acbc <lwip_htonl>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6938      	ldr	r0, [r7, #16]
 800b5e2:	f000 ffb7 	bl	800c554 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b5e6:	2204      	movs	r2, #4
 800b5e8:	2137      	movs	r1, #55	; 0x37
 800b5ea:	6938      	ldr	r0, [r7, #16]
 800b5ec:	f000 ff14 	bl	800c418 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	75fb      	strb	r3, [r7, #23]
 800b5f4:	e009      	b.n	800b60a <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
 800b5f8:	4a29      	ldr	r2, [pc, #164]	; (800b6a0 <dhcp_select+0x138>)
 800b5fa:	5cd3      	ldrb	r3, [r2, r3]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6938      	ldr	r0, [r7, #16]
 800b600:	f000 ff44 	bl	800c48c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	3301      	adds	r3, #1
 800b608:	75fb      	strb	r3, [r7, #23]
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d9f2      	bls.n	800b5f6 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800b610:	6938      	ldr	r0, [r7, #16]
 800b612:	f001 fd3f 	bl	800d094 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	8a9b      	ldrh	r3, [r3, #20]
 800b61e:	33f0      	adds	r3, #240	; 0xf0
 800b620:	b29b      	uxth	r3, r3
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f005 fa7d 	bl	8010b24 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800b62a:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <dhcp_select+0x13c>)
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	68d9      	ldr	r1, [r3, #12]
 800b632:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <dhcp_select+0x140>)
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	2343      	movs	r3, #67	; 0x43
 800b63c:	4a1b      	ldr	r2, [pc, #108]	; (800b6ac <dhcp_select+0x144>)
 800b63e:	f00b fdcd 	bl	80171dc <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800b642:	6938      	ldr	r0, [r7, #16]
 800b644:	f001 fce4 	bl	800d010 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	7a9b      	ldrb	r3, [r3, #10]
 800b64c:	2bff      	cmp	r3, #255	; 0xff
 800b64e:	d005      	beq.n	800b65c <dhcp_select+0xf4>
    dhcp->tries++;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	7a9b      	ldrb	r3, [r3, #10]
 800b654:	3301      	adds	r3, #1
 800b656:	b2da      	uxtb	r2, r3
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	7a9b      	ldrb	r3, [r3, #10]
 800b660:	2b05      	cmp	r3, #5
 800b662:	d807      	bhi.n	800b674 <dhcp_select+0x10c>
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	7a9b      	ldrb	r3, [r3, #10]
 800b668:	461a      	mov	r2, r3
 800b66a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b66e:	4093      	lsls	r3, r2
 800b670:	b29b      	uxth	r3, r3
 800b672:	e001      	b.n	800b678 <dhcp_select+0x110>
 800b674:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b678:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b67a:	89bb      	ldrh	r3, [r7, #12]
 800b67c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b680:	4a0b      	ldr	r2, [pc, #44]	; (800b6b0 <dhcp_select+0x148>)
 800b682:	fb82 1203 	smull	r1, r2, r2, r3
 800b686:	1152      	asrs	r2, r2, #5
 800b688:	17db      	asrs	r3, r3, #31
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b692:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20000010 	.word	0x20000010
 800b6a4:	20019e34 	.word	0x20019e34
 800b6a8:	0801be94 	.word	0x0801be94
 800b6ac:	0801be98 	.word	0x0801be98
 800b6b0:	10624dd3 	.word	0x10624dd3

0800b6b4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800b6ba:	4b27      	ldr	r3, [pc, #156]	; (800b758 <dhcp_coarse_tmr+0xa4>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800b6c0:	e042      	b.n	800b748 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d039      	beq.n	800b742 <dhcp_coarse_tmr+0x8e>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	7a5b      	ldrb	r3, [r3, #9]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d035      	beq.n	800b742 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d012      	beq.n	800b704 <dhcp_coarse_tmr+0x50>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	8c1b      	ldrh	r3, [r3, #32]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	841a      	strh	r2, [r3, #32]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	8c1a      	ldrh	r2, [r3, #32]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d106      	bne.n	800b704 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fdb4 	bl	800c264 <dhcp_release>
        dhcp_discover(netif);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 faab 	bl	800bc58 <dhcp_discover>
 800b702:	e01e      	b.n	800b742 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	8bdb      	ldrh	r3, [r3, #30]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00b      	beq.n	800b724 <dhcp_coarse_tmr+0x70>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	8bdb      	ldrh	r3, [r3, #30]
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	b291      	uxth	r1, r2
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	83d1      	strh	r1, [r2, #30]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d103      	bne.n	800b724 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f8c6 	bl	800b8ae <dhcp_t2_timeout>
 800b722:	e00e      	b.n	800b742 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	8b9b      	ldrh	r3, [r3, #28]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00a      	beq.n	800b742 <dhcp_coarse_tmr+0x8e>
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	8b9b      	ldrh	r3, [r3, #28]
 800b730:	1e5a      	subs	r2, r3, #1
 800b732:	b291      	uxth	r1, r2
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	8391      	strh	r1, [r2, #28]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d102      	bne.n	800b742 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f888 	bl	800b852 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1b9      	bne.n	800b6c2 <dhcp_coarse_tmr+0xe>
  }
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20020bbc 	.word	0x20020bbc

0800b75c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800b762:	4b16      	ldr	r3, [pc, #88]	; (800b7bc <dhcp_fine_tmr+0x60>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800b768:	e020      	b.n	800b7ac <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d017      	beq.n	800b7a6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	8adb      	ldrh	r3, [r3, #22]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d906      	bls.n	800b78c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	8adb      	ldrh	r3, [r3, #22]
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	82da      	strh	r2, [r3, #22]
 800b78a:	e00c      	b.n	800b7a6 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	8adb      	ldrh	r3, [r3, #22]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d108      	bne.n	800b7a6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	8adb      	ldrh	r3, [r3, #22]
 800b798:	3b01      	subs	r3, #1
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f80d 	bl	800b7c0 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1db      	bne.n	800b76a <dhcp_fine_tmr+0xe>
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20020bbc 	.word	0x20020bbc

0800b7c0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	7a5b      	ldrb	r3, [r3, #9]
 800b7d2:	2b0c      	cmp	r3, #12
 800b7d4:	d003      	beq.n	800b7de <dhcp_timeout+0x1e>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	7a5b      	ldrb	r3, [r3, #9]
 800b7da:	2b06      	cmp	r3, #6
 800b7dc:	d103      	bne.n	800b7e6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fa3a 	bl	800bc58 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800b7e4:	e031      	b.n	800b84a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	7a5b      	ldrb	r3, [r3, #9]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d10e      	bne.n	800b80c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	7a9b      	ldrb	r3, [r3, #10]
 800b7f2:	2b05      	cmp	r3, #5
 800b7f4:	d803      	bhi.n	800b7fe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff feb6 	bl	800b568 <dhcp_select>
}
 800b7fc:	e025      	b.n	800b84a <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fd30 	bl	800c264 <dhcp_release>
      dhcp_discover(netif);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fa27 	bl	800bc58 <dhcp_discover>
}
 800b80a:	e01e      	b.n	800b84a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	7a5b      	ldrb	r3, [r3, #9]
 800b810:	2b08      	cmp	r3, #8
 800b812:	d10b      	bne.n	800b82c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	7a9b      	ldrb	r3, [r3, #10]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d803      	bhi.n	800b824 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fe4b 	bl	800b4b8 <dhcp_check>
}
 800b822:	e012      	b.n	800b84a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 faa3 	bl	800bd70 <dhcp_bind>
}
 800b82a:	e00e      	b.n	800b84a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	7a5b      	ldrb	r3, [r3, #9]
 800b830:	2b03      	cmp	r3, #3
 800b832:	d10a      	bne.n	800b84a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	7a9b      	ldrb	r3, [r3, #10]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d803      	bhi.n	800b844 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fc7d 	bl	800c13c <dhcp_reboot>
}
 800b842:	e002      	b.n	800b84a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fa07 	bl	800bc58 <dhcp_discover>
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	7a5b      	ldrb	r3, [r3, #9]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d007      	beq.n	800b878 <dhcp_t1_timeout+0x26>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	7a5b      	ldrb	r3, [r3, #9]
 800b86c:	2b0a      	cmp	r3, #10
 800b86e:	d003      	beq.n	800b878 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b874:	2b05      	cmp	r3, #5
 800b876:	d116      	bne.n	800b8a6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fb53 	bl	800bf24 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8b5b      	ldrh	r3, [r3, #26]
 800b882:	461a      	mov	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8c1b      	ldrh	r3, [r3, #32]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	dd0b      	ble.n	800b8a6 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	8b5b      	ldrh	r3, [r3, #26]
 800b892:	461a      	mov	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	8c1b      	ldrh	r3, [r3, #32]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	0fda      	lsrs	r2, r3, #31
 800b89c:	4413      	add	r3, r2
 800b89e:	105b      	asrs	r3, r3, #1
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	7a5b      	ldrb	r3, [r3, #9]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d00b      	beq.n	800b8dc <dhcp_t2_timeout+0x2e>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	7a5b      	ldrb	r3, [r3, #9]
 800b8c8:	2b0a      	cmp	r3, #10
 800b8ca:	d007      	beq.n	800b8dc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b8d0:	2b05      	cmp	r3, #5
 800b8d2:	d003      	beq.n	800b8dc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	7a5b      	ldrb	r3, [r3, #9]
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d116      	bne.n	800b90a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fba7 	bl	800c030 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8c1b      	ldrh	r3, [r3, #32]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	dd0b      	ble.n	800b90a <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8c1b      	ldrh	r3, [r3, #32]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	0fda      	lsrs	r2, r3, #31
 800b900:	4413      	add	r3, r2
 800b902:	105b      	asrs	r3, r3, #1
 800b904:	b29a      	uxth	r2, r3
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800b90a:	bf00      	nop
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2200      	movs	r2, #0
 800b926:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	2200      	movs	r2, #0
 800b92c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800b92e:	4b37      	ldr	r3, [pc, #220]	; (800ba0c <dhcp_handle_ack+0xf8>)
 800b930:	78db      	ldrb	r3, [r3, #3]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800b936:	4b36      	ldr	r3, [pc, #216]	; (800ba10 <dhcp_handle_ack+0xfc>)
 800b938:	68da      	ldr	r2, [r3, #12]
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800b93e:	4b33      	ldr	r3, [pc, #204]	; (800ba0c <dhcp_handle_ack+0xf8>)
 800b940:	791b      	ldrb	r3, [r3, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d004      	beq.n	800b950 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800b946:	4b32      	ldr	r3, [pc, #200]	; (800ba10 <dhcp_handle_ack+0xfc>)
 800b948:	691a      	ldr	r2, [r3, #16]
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38
 800b94e:	e004      	b.n	800b95a <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b954:	085a      	lsrs	r2, r3, #1
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800b95a:	4b2c      	ldr	r3, [pc, #176]	; (800ba0c <dhcp_handle_ack+0xf8>)
 800b95c:	795b      	ldrb	r3, [r3, #5]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d004      	beq.n	800b96c <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800b962:	4b2b      	ldr	r3, [pc, #172]	; (800ba10 <dhcp_handle_ack+0xfc>)
 800b964:	695a      	ldr	r2, [r3, #20]
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	63da      	str	r2, [r3, #60]	; 0x3c
 800b96a:	e007      	b.n	800b97c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b970:	4613      	mov	r3, r2
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	1a9b      	subs	r3, r3, r2
 800b976:	08da      	lsrs	r2, r3, #3
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	691a      	ldr	r2, [r3, #16]
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800b986:	4b21      	ldr	r3, [pc, #132]	; (800ba0c <dhcp_handle_ack+0xf8>)
 800b988:	799b      	ldrb	r3, [r3, #6]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00b      	beq.n	800b9a6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800b98e:	4b20      	ldr	r3, [pc, #128]	; (800ba10 <dhcp_handle_ack+0xfc>)
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff f992 	bl	800acbc <lwip_htonl>
 800b998:	4602      	mov	r2, r0
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	72da      	strb	r2, [r3, #11]
 800b9a4:	e002      	b.n	800b9ac <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800b9ac:	4b17      	ldr	r3, [pc, #92]	; (800ba0c <dhcp_handle_ack+0xf8>)
 800b9ae:	79db      	ldrb	r3, [r3, #7]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800b9b4:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <dhcp_handle_ack+0xfc>)
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff f97f 	bl	800acbc <lwip_htonl>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	631a      	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	75fb      	strb	r3, [r7, #23]
 800b9c8:	e013      	b.n	800b9f2 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	4a10      	ldr	r2, [pc, #64]	; (800ba10 <dhcp_handle_ack+0xfc>)
 800b9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff f971 	bl	800acbc <lwip_htonl>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800b9de:	f107 020c 	add.w	r2, r7, #12
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff f988 	bl	800acfc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	75fb      	strb	r3, [r7, #23]
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d805      	bhi.n	800ba04 <dhcp_handle_ack+0xf0>
 800b9f8:	7dfb      	ldrb	r3, [r7, #23]
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	4a03      	ldr	r2, [pc, #12]	; (800ba0c <dhcp_handle_ack+0xf8>)
 800b9fe:	5cd3      	ldrb	r3, [r2, r3]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e2      	bne.n	800b9ca <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ba04:	bf00      	nop
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	2001d284 	.word	0x2001d284
 800ba10:	2001d290 	.word	0x2001d290

0800ba14 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d109      	bne.n	800ba36 <dhcp_start+0x22>
 800ba22:	4b3c      	ldr	r3, [pc, #240]	; (800bb14 <dhcp_start+0x100>)
 800ba24:	f240 22d6 	movw	r2, #726	; 0x2d6
 800ba28:	493b      	ldr	r1, [pc, #236]	; (800bb18 <dhcp_start+0x104>)
 800ba2a:	483c      	ldr	r0, [pc, #240]	; (800bb1c <dhcp_start+0x108>)
 800ba2c:	f00c f93a 	bl	8017ca4 <iprintf>
 800ba30:	f06f 030f 	mvn.w	r3, #15
 800ba34:	e069      	b.n	800bb0a <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d109      	bne.n	800ba58 <dhcp_start+0x44>
 800ba44:	4b33      	ldr	r3, [pc, #204]	; (800bb14 <dhcp_start+0x100>)
 800ba46:	f240 22d7 	movw	r2, #727	; 0x2d7
 800ba4a:	4935      	ldr	r1, [pc, #212]	; (800bb20 <dhcp_start+0x10c>)
 800ba4c:	4833      	ldr	r0, [pc, #204]	; (800bb1c <dhcp_start+0x108>)
 800ba4e:	f00c f929 	bl	8017ca4 <iprintf>
 800ba52:	f06f 030f 	mvn.w	r3, #15
 800ba56:	e058      	b.n	800bb0a <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba62:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ba66:	d202      	bcs.n	800ba6e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800ba68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba6c:	e04d      	b.n	800bb0a <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10d      	bne.n	800ba90 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ba74:	2040      	movs	r0, #64	; 0x40
 800ba76:	f004 fa8b 	bl	800ff90 <mem_malloc>
 800ba7a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d102      	bne.n	800ba88 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ba82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba86:	e040      	b.n	800bb0a <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	625a      	str	r2, [r3, #36]	; 0x24
 800ba8e:	e01b      	b.n	800bac8 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d006      	beq.n	800baa6 <dhcp_start+0x92>
 800ba98:	4b1e      	ldr	r3, [pc, #120]	; (800bb14 <dhcp_start+0x100>)
 800ba9a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800ba9e:	4921      	ldr	r1, [pc, #132]	; (800bb24 <dhcp_start+0x110>)
 800baa0:	481e      	ldr	r0, [pc, #120]	; (800bb1c <dhcp_start+0x108>)
 800baa2:	f00c f8ff 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d006      	beq.n	800babc <dhcp_start+0xa8>
 800baae:	4b19      	ldr	r3, [pc, #100]	; (800bb14 <dhcp_start+0x100>)
 800bab0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bab4:	491c      	ldr	r1, [pc, #112]	; (800bb28 <dhcp_start+0x114>)
 800bab6:	4819      	ldr	r0, [pc, #100]	; (800bb1c <dhcp_start+0x108>)
 800bab8:	f00c f8f4 	bl	8017ca4 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	7a1b      	ldrb	r3, [r3, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800bac4:	f7ff fcb4 	bl	800b430 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800bac8:	2240      	movs	r2, #64	; 0x40
 800baca:	2100      	movs	r1, #0
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f00c f8e1 	bl	8017c94 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800bad2:	f7ff fc5b 	bl	800b38c <dhcp_inc_pcb_refcount>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <dhcp_start+0xce>
    return ERR_MEM;
 800badc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bae0:	e013      	b.n	800bb0a <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2201      	movs	r2, #1
 800bae6:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f8b5 	bl	800bc58 <dhcp_discover>
 800baee:	4603      	mov	r3, r0
 800baf0:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800baf2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d005      	beq.n	800bb06 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fc3a 	bl	800c374 <dhcp_stop>
    return ERR_MEM;
 800bb00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb04:	e001      	b.n	800bb0a <dhcp_start+0xf6>
  }
  return result;
 800bb06:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	080198a4 	.word	0x080198a4
 800bb18:	08019950 	.word	0x08019950
 800bb1c:	08019904 	.word	0x08019904
 800bb20:	08019994 	.word	0x08019994
 800bb24:	080199b8 	.word	0x080199b8
 800bb28:	080199d0 	.word	0x080199d0

0800bb2c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d107      	bne.n	800bb4c <dhcp_arp_reply+0x20>
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <dhcp_arp_reply+0x4c>)
 800bb3e:	f240 327b 	movw	r2, #891	; 0x37b
 800bb42:	490e      	ldr	r1, [pc, #56]	; (800bb7c <dhcp_arp_reply+0x50>)
 800bb44:	480e      	ldr	r0, [pc, #56]	; (800bb80 <dhcp_arp_reply+0x54>)
 800bb46:	f00c f8ad 	bl	8017ca4 <iprintf>
 800bb4a:	e012      	b.n	800bb72 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00c      	beq.n	800bb72 <dhcp_arp_reply+0x46>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	7a5b      	ldrb	r3, [r3, #9]
 800bb5c:	2b08      	cmp	r3, #8
 800bb5e:	d108      	bne.n	800bb72 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d102      	bne.n	800bb72 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f809 	bl	800bb84 <dhcp_decline>
    }
  }
}
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	080198a4 	.word	0x080198a4
 800bb7c:	08019950 	.word	0x08019950
 800bb80:	08019904 	.word	0x08019904

0800bb84 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800bb96:	210c      	movs	r1, #12
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 fc23 	bl	800c3e4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800bb9e:	2204      	movs	r2, #4
 800bba0:	68f9      	ldr	r1, [r7, #12]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f001 f8d2 	bl	800cd4c <dhcp_create_msg>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800bbac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d12a      	bne.n	800bc0a <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800bbb4:	2204      	movs	r2, #4
 800bbb6:	2132      	movs	r1, #50	; 0x32
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 fc2d 	bl	800c418 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff f87a 	bl	800acbc <lwip_htonl>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	4619      	mov	r1, r3
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f000 fcc1 	bl	800c554 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f001 fa5e 	bl	800d094 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68da      	ldr	r2, [r3, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8a9b      	ldrh	r3, [r3, #20]
 800bbe0:	33f0      	adds	r3, #240	; 0xf0
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	f004 ff9c 	bl	8010b24 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800bbec:	4b16      	ldr	r3, [pc, #88]	; (800bc48 <dhcp_decline+0xc4>)
 800bbee:	6818      	ldr	r0, [r3, #0]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	68d9      	ldr	r1, [r3, #12]
 800bbf4:	4b15      	ldr	r3, [pc, #84]	; (800bc4c <dhcp_decline+0xc8>)
 800bbf6:	9301      	str	r3, [sp, #4]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	2343      	movs	r3, #67	; 0x43
 800bbfe:	4a14      	ldr	r2, [pc, #80]	; (800bc50 <dhcp_decline+0xcc>)
 800bc00:	f00b faec 	bl	80171dc <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f001 fa03 	bl	800d010 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	7a9b      	ldrb	r3, [r3, #10]
 800bc0e:	2bff      	cmp	r3, #255	; 0xff
 800bc10:	d005      	beq.n	800bc1e <dhcp_decline+0x9a>
    dhcp->tries++;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	7a9b      	ldrb	r3, [r3, #10]
 800bc16:	3301      	adds	r3, #1
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800bc1e:	f242 7310 	movw	r3, #10000	; 0x2710
 800bc22:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800bc24:	893b      	ldrh	r3, [r7, #8]
 800bc26:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bc2a:	4a0a      	ldr	r2, [pc, #40]	; (800bc54 <dhcp_decline+0xd0>)
 800bc2c:	fb82 1203 	smull	r1, r2, r2, r3
 800bc30:	1152      	asrs	r2, r2, #5
 800bc32:	17db      	asrs	r3, r3, #31
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bc3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	20019e34 	.word	0x20019e34
 800bc4c:	0801be94 	.word	0x0801be94
 800bc50:	0801be98 	.word	0x0801be98
 800bc54:	10624dd3 	.word	0x10624dd3

0800bc58 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af02      	add	r7, sp, #8
 800bc5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800bc70:	2106      	movs	r1, #6
 800bc72:	6938      	ldr	r0, [r7, #16]
 800bc74:	f000 fbb6 	bl	800c3e4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800bc78:	2201      	movs	r2, #1
 800bc7a:	6939      	ldr	r1, [r7, #16]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f001 f865 	bl	800cd4c <dhcp_create_msg>
 800bc82:	4603      	mov	r3, r0
 800bc84:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800bc86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d13b      	bne.n	800bd06 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bc8e:	2202      	movs	r2, #2
 800bc90:	2139      	movs	r1, #57	; 0x39
 800bc92:	6938      	ldr	r0, [r7, #16]
 800bc94:	f000 fbc0 	bl	800c418 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6938      	ldr	r0, [r7, #16]
 800bca0:	f000 fc1c 	bl	800c4dc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800bca4:	2204      	movs	r2, #4
 800bca6:	2137      	movs	r1, #55	; 0x37
 800bca8:	6938      	ldr	r0, [r7, #16]
 800bcaa:	f000 fbb5 	bl	800c418 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bcae:	2300      	movs	r3, #0
 800bcb0:	75fb      	strb	r3, [r7, #23]
 800bcb2:	e009      	b.n	800bcc8 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	4a29      	ldr	r2, [pc, #164]	; (800bd5c <dhcp_discover+0x104>)
 800bcb8:	5cd3      	ldrb	r3, [r2, r3]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6938      	ldr	r0, [r7, #16]
 800bcbe:	f000 fbe5 	bl	800c48c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	75fb      	strb	r3, [r7, #23]
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d9f2      	bls.n	800bcb4 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800bcce:	6938      	ldr	r0, [r7, #16]
 800bcd0:	f001 f9e0 	bl	800d094 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	68da      	ldr	r2, [r3, #12]
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	8a9b      	ldrh	r3, [r3, #20]
 800bcdc:	33f0      	adds	r3, #240	; 0xf0
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f004 ff1e 	bl	8010b24 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800bce8:	4b1d      	ldr	r3, [pc, #116]	; (800bd60 <dhcp_discover+0x108>)
 800bcea:	6818      	ldr	r0, [r3, #0]
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	68d9      	ldr	r1, [r3, #12]
 800bcf0:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <dhcp_discover+0x10c>)
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	2343      	movs	r3, #67	; 0x43
 800bcfa:	4a1b      	ldr	r2, [pc, #108]	; (800bd68 <dhcp_discover+0x110>)
 800bcfc:	f00b fa6e 	bl	80171dc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800bd00:	6938      	ldr	r0, [r7, #16]
 800bd02:	f001 f985 	bl	800d010 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	7a9b      	ldrb	r3, [r3, #10]
 800bd0a:	2bff      	cmp	r3, #255	; 0xff
 800bd0c:	d005      	beq.n	800bd1a <dhcp_discover+0xc2>
    dhcp->tries++;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	7a9b      	ldrb	r3, [r3, #10]
 800bd12:	3301      	adds	r3, #1
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	7a9b      	ldrb	r3, [r3, #10]
 800bd1e:	2b05      	cmp	r3, #5
 800bd20:	d807      	bhi.n	800bd32 <dhcp_discover+0xda>
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	7a9b      	ldrb	r3, [r3, #10]
 800bd26:	461a      	mov	r2, r3
 800bd28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd2c:	4093      	lsls	r3, r2
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	e001      	b.n	800bd36 <dhcp_discover+0xde>
 800bd32:	f64e 2360 	movw	r3, #60000	; 0xea60
 800bd36:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800bd38:	89bb      	ldrh	r3, [r7, #12]
 800bd3a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bd3e:	4a0b      	ldr	r2, [pc, #44]	; (800bd6c <dhcp_discover+0x114>)
 800bd40:	fb82 1203 	smull	r1, r2, r2, r3
 800bd44:	1152      	asrs	r2, r2, #5
 800bd46:	17db      	asrs	r3, r3, #31
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bd50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	20000010 	.word	0x20000010
 800bd60:	20019e34 	.word	0x20019e34
 800bd64:	0801be94 	.word	0x0801be94
 800bd68:	0801be98 	.word	0x0801be98
 800bd6c:	10624dd3 	.word	0x10624dd3

0800bd70 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d107      	bne.n	800bd8e <dhcp_bind+0x1e>
 800bd7e:	4b64      	ldr	r3, [pc, #400]	; (800bf10 <dhcp_bind+0x1a0>)
 800bd80:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800bd84:	4963      	ldr	r1, [pc, #396]	; (800bf14 <dhcp_bind+0x1a4>)
 800bd86:	4864      	ldr	r0, [pc, #400]	; (800bf18 <dhcp_bind+0x1a8>)
 800bd88:	f00b ff8c 	bl	8017ca4 <iprintf>
 800bd8c:	e0bc      	b.n	800bf08 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd92:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d107      	bne.n	800bdaa <dhcp_bind+0x3a>
 800bd9a:	4b5d      	ldr	r3, [pc, #372]	; (800bf10 <dhcp_bind+0x1a0>)
 800bd9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bda0:	495e      	ldr	r1, [pc, #376]	; (800bf1c <dhcp_bind+0x1ac>)
 800bda2:	485d      	ldr	r0, [pc, #372]	; (800bf18 <dhcp_bind+0x1a8>)
 800bda4:	f00b ff7e 	bl	8017ca4 <iprintf>
 800bda8:	e0ae      	b.n	800bf08 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2200      	movs	r2, #0
 800bdae:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdb8:	d019      	beq.n	800bdee <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbe:	331e      	adds	r3, #30
 800bdc0:	4a57      	ldr	r2, [pc, #348]	; (800bf20 <dhcp_bind+0x1b0>)
 800bdc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc6:	095b      	lsrs	r3, r3, #5
 800bdc8:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd0:	d302      	bcc.n	800bdd8 <dhcp_bind+0x68>
       timeout = 0xffff;
 800bdd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdd6:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	2201      	movs	r2, #1
 800bdec:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdf6:	d01d      	beq.n	800be34 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	331e      	adds	r3, #30
 800bdfe:	4a48      	ldr	r2, [pc, #288]	; (800bf20 <dhcp_bind+0x1b0>)
 800be00:	fba2 2303 	umull	r2, r3, r2, r3
 800be04:	095b      	lsrs	r3, r3, #5
 800be06:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be0e:	d302      	bcc.n	800be16 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800be10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be14:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	b29a      	uxth	r2, r3
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	8b1b      	ldrh	r3, [r3, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d102      	bne.n	800be2c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	2201      	movs	r2, #1
 800be2a:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	8b1a      	ldrh	r2, [r3, #24]
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be3c:	d01d      	beq.n	800be7a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be42:	331e      	adds	r3, #30
 800be44:	4a36      	ldr	r2, [pc, #216]	; (800bf20 <dhcp_bind+0x1b0>)
 800be46:	fba2 2303 	umull	r2, r3, r2, r3
 800be4a:	095b      	lsrs	r3, r3, #5
 800be4c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be54:	d302      	bcc.n	800be5c <dhcp_bind+0xec>
      timeout = 0xffff;
 800be56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be5a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	b29a      	uxth	r2, r3
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	8b5b      	ldrh	r3, [r3, #26]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d102      	bne.n	800be72 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	2201      	movs	r2, #1
 800be70:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	8b5a      	ldrh	r2, [r3, #26]
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	8b1a      	ldrh	r2, [r3, #24]
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	8b5b      	ldrh	r3, [r3, #26]
 800be82:	429a      	cmp	r2, r3
 800be84:	d306      	bcc.n	800be94 <dhcp_bind+0x124>
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	8b5b      	ldrh	r3, [r3, #26]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d002      	beq.n	800be94 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	2200      	movs	r2, #0
 800be92:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	7adb      	ldrb	r3, [r3, #11]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	e014      	b.n	800bece <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	3328      	adds	r3, #40	; 0x28
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800beac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	db02      	blt.n	800beba <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800beb4:	23ff      	movs	r3, #255	; 0xff
 800beb6:	613b      	str	r3, [r7, #16]
 800beb8:	e009      	b.n	800bece <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	2bbf      	cmp	r3, #191	; 0xbf
 800bebe:	d903      	bls.n	800bec8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800bec0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	e002      	b.n	800bece <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800bec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800becc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d108      	bne.n	800beec <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	4013      	ands	r3, r2
 800bee2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800beea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800beec:	210a      	movs	r1, #10
 800beee:	69b8      	ldr	r0, [r7, #24]
 800bef0:	f000 fa78 	bl	800c3e4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800befa:	f107 030c 	add.w	r3, r7, #12
 800befe:	f107 0210 	add.w	r2, r7, #16
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f004 faa4 	bl	8010450 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800bf08:	3720      	adds	r7, #32
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	080198a4 	.word	0x080198a4
 800bf14:	080199e4 	.word	0x080199e4
 800bf18:	08019904 	.word	0x08019904
 800bf1c:	08019a00 	.word	0x08019a00
 800bf20:	88888889 	.word	0x88888889

0800bf24 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800bf32:	2105      	movs	r1, #5
 800bf34:	6938      	ldr	r0, [r7, #16]
 800bf36:	f000 fa55 	bl	800c3e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800bf3a:	2203      	movs	r2, #3
 800bf3c:	6939      	ldr	r1, [r7, #16]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 ff04 	bl	800cd4c <dhcp_create_msg>
 800bf44:	4603      	mov	r3, r0
 800bf46:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800bf48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d13b      	bne.n	800bfc8 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bf50:	2202      	movs	r2, #2
 800bf52:	2139      	movs	r1, #57	; 0x39
 800bf54:	6938      	ldr	r0, [r7, #16]
 800bf56:	f000 fa5f 	bl	800c418 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6938      	ldr	r0, [r7, #16]
 800bf62:	f000 fabb 	bl	800c4dc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800bf66:	2204      	movs	r2, #4
 800bf68:	2137      	movs	r1, #55	; 0x37
 800bf6a:	6938      	ldr	r0, [r7, #16]
 800bf6c:	f000 fa54 	bl	800c418 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bf70:	2300      	movs	r3, #0
 800bf72:	75fb      	strb	r3, [r7, #23]
 800bf74:	e009      	b.n	800bf8a <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
 800bf78:	4a2a      	ldr	r2, [pc, #168]	; (800c024 <dhcp_renew+0x100>)
 800bf7a:	5cd3      	ldrb	r3, [r2, r3]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6938      	ldr	r0, [r7, #16]
 800bf80:	f000 fa84 	bl	800c48c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
 800bf86:	3301      	adds	r3, #1
 800bf88:	75fb      	strb	r3, [r7, #23]
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
 800bf8c:	2b03      	cmp	r3, #3
 800bf8e:	d9f2      	bls.n	800bf76 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800bf90:	6938      	ldr	r0, [r7, #16]
 800bf92:	f001 f87f 	bl	800d094 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	8a9b      	ldrh	r3, [r3, #20]
 800bf9e:	33f0      	adds	r3, #240	; 0xf0
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f004 fdbd 	bl	8010b24 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800bfaa:	4b1f      	ldr	r3, [pc, #124]	; (800c028 <dhcp_renew+0x104>)
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	68d9      	ldr	r1, [r3, #12]
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	2343      	movs	r3, #67	; 0x43
 800bfbe:	f00b f8cf 	bl	8017160 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800bfc2:	6938      	ldr	r0, [r7, #16]
 800bfc4:	f001 f824 	bl	800d010 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	7a9b      	ldrb	r3, [r3, #10]
 800bfcc:	2bff      	cmp	r3, #255	; 0xff
 800bfce:	d005      	beq.n	800bfdc <dhcp_renew+0xb8>
    dhcp->tries++;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	7a9b      	ldrb	r3, [r3, #10]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	7a9b      	ldrb	r3, [r3, #10]
 800bfe0:	2b09      	cmp	r3, #9
 800bfe2:	d80a      	bhi.n	800bffa <dhcp_renew+0xd6>
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	7a9b      	ldrb	r3, [r3, #10]
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	461a      	mov	r2, r3
 800bfec:	0152      	lsls	r2, r2, #5
 800bfee:	1ad2      	subs	r2, r2, r3
 800bff0:	0092      	lsls	r2, r2, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	011b      	lsls	r3, r3, #4
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	e001      	b.n	800bffe <dhcp_renew+0xda>
 800bffa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bffe:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c000:	89bb      	ldrh	r3, [r7, #12]
 800c002:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c006:	4a09      	ldr	r2, [pc, #36]	; (800c02c <dhcp_renew+0x108>)
 800c008:	fb82 1203 	smull	r1, r2, r2, r3
 800c00c:	1152      	asrs	r2, r2, #5
 800c00e:	17db      	asrs	r3, r3, #31
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	b29a      	uxth	r2, r3
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20000010 	.word	0x20000010
 800c028:	20019e34 	.word	0x20019e34
 800c02c:	10624dd3 	.word	0x10624dd3

0800c030 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af02      	add	r7, sp, #8
 800c036:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c03e:	2104      	movs	r1, #4
 800c040:	6938      	ldr	r0, [r7, #16]
 800c042:	f000 f9cf 	bl	800c3e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800c046:	2203      	movs	r2, #3
 800c048:	6939      	ldr	r1, [r7, #16]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fe7e 	bl	800cd4c <dhcp_create_msg>
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800c054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d139      	bne.n	800c0d0 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c05c:	2202      	movs	r2, #2
 800c05e:	2139      	movs	r1, #57	; 0x39
 800c060:	6938      	ldr	r0, [r7, #16]
 800c062:	f000 f9d9 	bl	800c418 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c06a:	4619      	mov	r1, r3
 800c06c:	6938      	ldr	r0, [r7, #16]
 800c06e:	f000 fa35 	bl	800c4dc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c072:	2204      	movs	r2, #4
 800c074:	2137      	movs	r1, #55	; 0x37
 800c076:	6938      	ldr	r0, [r7, #16]
 800c078:	f000 f9ce 	bl	800c418 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c07c:	2300      	movs	r3, #0
 800c07e:	75fb      	strb	r3, [r7, #23]
 800c080:	e009      	b.n	800c096 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	4a29      	ldr	r2, [pc, #164]	; (800c12c <dhcp_rebind+0xfc>)
 800c086:	5cd3      	ldrb	r3, [r2, r3]
 800c088:	4619      	mov	r1, r3
 800c08a:	6938      	ldr	r0, [r7, #16]
 800c08c:	f000 f9fe 	bl	800c48c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c090:	7dfb      	ldrb	r3, [r7, #23]
 800c092:	3301      	adds	r3, #1
 800c094:	75fb      	strb	r3, [r7, #23]
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d9f2      	bls.n	800c082 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800c09c:	6938      	ldr	r0, [r7, #16]
 800c09e:	f000 fff9 	bl	800d094 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	68da      	ldr	r2, [r3, #12]
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	8a9b      	ldrh	r3, [r3, #20]
 800c0aa:	33f0      	adds	r3, #240	; 0xf0
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	f004 fd37 	bl	8010b24 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800c0b6:	4b1e      	ldr	r3, [pc, #120]	; (800c130 <dhcp_rebind+0x100>)
 800c0b8:	6818      	ldr	r0, [r3, #0]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	68d9      	ldr	r1, [r3, #12]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	2343      	movs	r3, #67	; 0x43
 800c0c4:	4a1b      	ldr	r2, [pc, #108]	; (800c134 <dhcp_rebind+0x104>)
 800c0c6:	f00b f84b 	bl	8017160 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800c0ca:	6938      	ldr	r0, [r7, #16]
 800c0cc:	f000 ffa0 	bl	800d010 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	7a9b      	ldrb	r3, [r3, #10]
 800c0d4:	2bff      	cmp	r3, #255	; 0xff
 800c0d6:	d005      	beq.n	800c0e4 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	7a9b      	ldrb	r3, [r3, #10]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	7a9b      	ldrb	r3, [r3, #10]
 800c0e8:	2b09      	cmp	r3, #9
 800c0ea:	d80a      	bhi.n	800c102 <dhcp_rebind+0xd2>
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	7a9b      	ldrb	r3, [r3, #10]
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	0152      	lsls	r2, r2, #5
 800c0f6:	1ad2      	subs	r2, r2, r3
 800c0f8:	0092      	lsls	r2, r2, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	e001      	b.n	800c106 <dhcp_rebind+0xd6>
 800c102:	f242 7310 	movw	r3, #10000	; 0x2710
 800c106:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c108:	89bb      	ldrh	r3, [r7, #12]
 800c10a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c10e:	4a0a      	ldr	r2, [pc, #40]	; (800c138 <dhcp_rebind+0x108>)
 800c110:	fb82 1203 	smull	r1, r2, r2, r3
 800c114:	1152      	asrs	r2, r2, #5
 800c116:	17db      	asrs	r3, r3, #31
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	20000010 	.word	0x20000010
 800c130:	20019e34 	.word	0x20019e34
 800c134:	0801be98 	.word	0x0801be98
 800c138:	10624dd3 	.word	0x10624dd3

0800c13c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af02      	add	r7, sp, #8
 800c142:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c148:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c14a:	2103      	movs	r1, #3
 800c14c:	6938      	ldr	r0, [r7, #16]
 800c14e:	f000 f949 	bl	800c3e4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800c152:	2203      	movs	r2, #3
 800c154:	6939      	ldr	r1, [r7, #16]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fdf8 	bl	800cd4c <dhcp_create_msg>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800c160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d147      	bne.n	800c1f8 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c168:	2202      	movs	r2, #2
 800c16a:	2139      	movs	r1, #57	; 0x39
 800c16c:	6938      	ldr	r0, [r7, #16]
 800c16e:	f000 f953 	bl	800c418 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c172:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c176:	6938      	ldr	r0, [r7, #16]
 800c178:	f000 f9b0 	bl	800c4dc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800c17c:	2204      	movs	r2, #4
 800c17e:	2132      	movs	r1, #50	; 0x32
 800c180:	6938      	ldr	r0, [r7, #16]
 800c182:	f000 f949 	bl	800c418 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fd96 	bl	800acbc <lwip_htonl>
 800c190:	4603      	mov	r3, r0
 800c192:	4619      	mov	r1, r3
 800c194:	6938      	ldr	r0, [r7, #16]
 800c196:	f000 f9dd 	bl	800c554 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c19a:	2204      	movs	r2, #4
 800c19c:	2137      	movs	r1, #55	; 0x37
 800c19e:	6938      	ldr	r0, [r7, #16]
 800c1a0:	f000 f93a 	bl	800c418 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	75fb      	strb	r3, [r7, #23]
 800c1a8:	e009      	b.n	800c1be <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800c1aa:	7dfb      	ldrb	r3, [r7, #23]
 800c1ac:	4a29      	ldr	r2, [pc, #164]	; (800c254 <dhcp_reboot+0x118>)
 800c1ae:	5cd3      	ldrb	r3, [r2, r3]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6938      	ldr	r0, [r7, #16]
 800c1b4:	f000 f96a 	bl	800c48c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	75fb      	strb	r3, [r7, #23]
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d9f2      	bls.n	800c1aa <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800c1c4:	6938      	ldr	r0, [r7, #16]
 800c1c6:	f000 ff65 	bl	800d094 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	8a9b      	ldrh	r3, [r3, #20]
 800c1d2:	33f0      	adds	r3, #240	; 0xf0
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4610      	mov	r0, r2
 800c1da:	f004 fca3 	bl	8010b24 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <dhcp_reboot+0x11c>)
 800c1e0:	6818      	ldr	r0, [r3, #0]
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	68d9      	ldr	r1, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	2343      	movs	r3, #67	; 0x43
 800c1ec:	4a1b      	ldr	r2, [pc, #108]	; (800c25c <dhcp_reboot+0x120>)
 800c1ee:	f00a ffb7 	bl	8017160 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800c1f2:	6938      	ldr	r0, [r7, #16]
 800c1f4:	f000 ff0c 	bl	800d010 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	7a9b      	ldrb	r3, [r3, #10]
 800c1fc:	2bff      	cmp	r3, #255	; 0xff
 800c1fe:	d005      	beq.n	800c20c <dhcp_reboot+0xd0>
    dhcp->tries++;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	7a9b      	ldrb	r3, [r3, #10]
 800c204:	3301      	adds	r3, #1
 800c206:	b2da      	uxtb	r2, r3
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	7a9b      	ldrb	r3, [r3, #10]
 800c210:	2b09      	cmp	r3, #9
 800c212:	d80a      	bhi.n	800c22a <dhcp_reboot+0xee>
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	7a9b      	ldrb	r3, [r3, #10]
 800c218:	b29b      	uxth	r3, r3
 800c21a:	461a      	mov	r2, r3
 800c21c:	0152      	lsls	r2, r2, #5
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	0092      	lsls	r2, r2, #2
 800c222:	4413      	add	r3, r2
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	b29b      	uxth	r3, r3
 800c228:	e001      	b.n	800c22e <dhcp_reboot+0xf2>
 800c22a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c22e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c230:	89bb      	ldrh	r3, [r7, #12]
 800c232:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c236:	4a0a      	ldr	r2, [pc, #40]	; (800c260 <dhcp_reboot+0x124>)
 800c238:	fb82 1203 	smull	r1, r2, r2, r3
 800c23c:	1152      	asrs	r2, r2, #5
 800c23e:	17db      	asrs	r3, r3, #31
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	b29a      	uxth	r2, r3
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	20000010 	.word	0x20000010
 800c258:	20019e34 	.word	0x20019e34
 800c25c:	0801be98 	.word	0x0801be98
 800c260:	10624dd3 	.word	0x10624dd3

0800c264 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af02      	add	r7, sp, #8
 800c26a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c270:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <dhcp_release+0x1a>
    return ERR_ARG;
 800c278:	f06f 030f 	mvn.w	r3, #15
 800c27c:	e072      	b.n	800c364 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c282:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 ff5f 	bl	800d148 <dhcp_supplied_address>
 800c28a:	4603      	mov	r3, r0
 800c28c:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c28e:	2100      	movs	r1, #0
 800c290:	6978      	ldr	r0, [r7, #20]
 800c292:	f000 f8a7 	bl	800c3e4 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2200      	movs	r2, #0
 800c29a:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	63da      	str	r2, [r3, #60]	; 0x3c
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	845a      	strh	r2, [r3, #34]	; 0x22
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	841a      	strh	r2, [r3, #32]
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	8c1a      	ldrh	r2, [r3, #32]
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	83da      	strh	r2, [r3, #30]
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	8bda      	ldrh	r2, [r3, #30]
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800c2e2:	7cfb      	ldrb	r3, [r7, #19]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	e03b      	b.n	800c364 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800c2ec:	2207      	movs	r2, #7
 800c2ee:	6979      	ldr	r1, [r7, #20]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fd2b 	bl	800cd4c <dhcp_create_msg>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800c2fa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d128      	bne.n	800c354 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800c302:	2204      	movs	r2, #4
 800c304:	2136      	movs	r1, #54	; 0x36
 800c306:	6978      	ldr	r0, [r7, #20]
 800c308:	f000 f886 	bl	800c418 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe fcd4 	bl	800acbc <lwip_htonl>
 800c314:	4603      	mov	r3, r0
 800c316:	4619      	mov	r1, r3
 800c318:	6978      	ldr	r0, [r7, #20]
 800c31a:	f000 f91b 	bl	800c554 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800c31e:	6978      	ldr	r0, [r7, #20]
 800c320:	f000 feb8 	bl	800d094 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	68da      	ldr	r2, [r3, #12]
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	8a9b      	ldrh	r3, [r3, #20]
 800c32c:	33f0      	adds	r3, #240	; 0xf0
 800c32e:	b29b      	uxth	r3, r3
 800c330:	4619      	mov	r1, r3
 800c332:	4610      	mov	r0, r2
 800c334:	f004 fbf6 	bl	8010b24 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800c338:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <dhcp_release+0x108>)
 800c33a:	6818      	ldr	r0, [r3, #0]
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	68d9      	ldr	r1, [r3, #12]
 800c340:	f107 020c 	add.w	r2, r7, #12
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	2343      	movs	r3, #67	; 0x43
 800c34a:	f00a ff09 	bl	8017160 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800c34e:	6978      	ldr	r0, [r7, #20]
 800c350:	f000 fe5e 	bl	800d010 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c354:	4b06      	ldr	r3, [pc, #24]	; (800c370 <dhcp_release+0x10c>)
 800c356:	4a06      	ldr	r2, [pc, #24]	; (800c370 <dhcp_release+0x10c>)
 800c358:	4905      	ldr	r1, [pc, #20]	; (800c370 <dhcp_release+0x10c>)
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f004 f878 	bl	8010450 <netif_set_addr>

  return result;
 800c360:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	20019e34 	.word	0x20019e34
 800c370:	0801be94 	.word	0x0801be94

0800c374 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d107      	bne.n	800c392 <dhcp_stop+0x1e>
 800c382:	4b14      	ldr	r3, [pc, #80]	; (800c3d4 <dhcp_stop+0x60>)
 800c384:	f240 5242 	movw	r2, #1346	; 0x542
 800c388:	4913      	ldr	r1, [pc, #76]	; (800c3d8 <dhcp_stop+0x64>)
 800c38a:	4814      	ldr	r0, [pc, #80]	; (800c3dc <dhcp_stop+0x68>)
 800c38c:	f00b fc8a 	bl	8017ca4 <iprintf>
 800c390:	e01d      	b.n	800c3ce <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c396:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d017      	beq.n	800c3ce <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d006      	beq.n	800c3b4 <dhcp_stop+0x40>
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <dhcp_stop+0x60>)
 800c3a8:	f240 524f 	movw	r2, #1359	; 0x54f
 800c3ac:	490c      	ldr	r1, [pc, #48]	; (800c3e0 <dhcp_stop+0x6c>)
 800c3ae:	480b      	ldr	r0, [pc, #44]	; (800c3dc <dhcp_stop+0x68>)
 800c3b0:	f00b fc78 	bl	8017ca4 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f000 f814 	bl	800c3e4 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	7a1b      	ldrb	r3, [r3, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c3c4:	f7ff f834 	bl	800b430 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	080198a4 	.word	0x080198a4
 800c3d8:	08019a18 	.word	0x08019a18
 800c3dc:	08019904 	.word	0x08019904
 800c3e0:	080199d0 	.word	0x080199d0

0800c3e4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	7a5b      	ldrb	r3, [r3, #9]
 800c3f4:	78fa      	ldrb	r2, [r7, #3]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d008      	beq.n	800c40c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	78fa      	ldrb	r2, [r7, #3]
 800c3fe:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	82da      	strh	r2, [r3, #22]
  }
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
 800c424:	4613      	mov	r3, r2
 800c426:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	8a9b      	ldrh	r3, [r3, #20]
 800c42c:	461a      	mov	r2, r3
 800c42e:	78bb      	ldrb	r3, [r7, #2]
 800c430:	4413      	add	r3, r2
 800c432:	3302      	adds	r3, #2
 800c434:	2b44      	cmp	r3, #68	; 0x44
 800c436:	d906      	bls.n	800c446 <dhcp_option+0x2e>
 800c438:	4b11      	ldr	r3, [pc, #68]	; (800c480 <dhcp_option+0x68>)
 800c43a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c43e:	4911      	ldr	r1, [pc, #68]	; (800c484 <dhcp_option+0x6c>)
 800c440:	4811      	ldr	r0, [pc, #68]	; (800c488 <dhcp_option+0x70>)
 800c442:	f00b fc2f 	bl	8017ca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	691a      	ldr	r2, [r3, #16]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	8a9b      	ldrh	r3, [r3, #20]
 800c44e:	1c59      	adds	r1, r3, #1
 800c450:	b288      	uxth	r0, r1
 800c452:	6879      	ldr	r1, [r7, #4]
 800c454:	8288      	strh	r0, [r1, #20]
 800c456:	4413      	add	r3, r2
 800c458:	78fa      	ldrb	r2, [r7, #3]
 800c45a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691a      	ldr	r2, [r3, #16]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	8a9b      	ldrh	r3, [r3, #20]
 800c466:	1c59      	adds	r1, r3, #1
 800c468:	b288      	uxth	r0, r1
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	8288      	strh	r0, [r1, #20]
 800c46e:	4413      	add	r3, r2
 800c470:	78ba      	ldrb	r2, [r7, #2]
 800c472:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	080198a4 	.word	0x080198a4
 800c484:	08019a34 	.word	0x08019a34
 800c488:	08019904 	.word	0x08019904

0800c48c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	8a9b      	ldrh	r3, [r3, #20]
 800c49c:	2b43      	cmp	r3, #67	; 0x43
 800c49e:	d906      	bls.n	800c4ae <dhcp_option_byte+0x22>
 800c4a0:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <dhcp_option_byte+0x44>)
 800c4a2:	f240 527b 	movw	r2, #1403	; 0x57b
 800c4a6:	490b      	ldr	r1, [pc, #44]	; (800c4d4 <dhcp_option_byte+0x48>)
 800c4a8:	480b      	ldr	r0, [pc, #44]	; (800c4d8 <dhcp_option_byte+0x4c>)
 800c4aa:	f00b fbfb 	bl	8017ca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	691a      	ldr	r2, [r3, #16]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	8a9b      	ldrh	r3, [r3, #20]
 800c4b6:	1c59      	adds	r1, r3, #1
 800c4b8:	b288      	uxth	r0, r1
 800c4ba:	6879      	ldr	r1, [r7, #4]
 800c4bc:	8288      	strh	r0, [r1, #20]
 800c4be:	4413      	add	r3, r2
 800c4c0:	78fa      	ldrb	r2, [r7, #3]
 800c4c2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	080198a4 	.word	0x080198a4
 800c4d4:	08019a7c 	.word	0x08019a7c
 800c4d8:	08019904 	.word	0x08019904

0800c4dc <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	8a9b      	ldrh	r3, [r3, #20]
 800c4ec:	3302      	adds	r3, #2
 800c4ee:	2b44      	cmp	r3, #68	; 0x44
 800c4f0:	d906      	bls.n	800c500 <dhcp_option_short+0x24>
 800c4f2:	4b15      	ldr	r3, [pc, #84]	; (800c548 <dhcp_option_short+0x6c>)
 800c4f4:	f240 5282 	movw	r2, #1410	; 0x582
 800c4f8:	4914      	ldr	r1, [pc, #80]	; (800c54c <dhcp_option_short+0x70>)
 800c4fa:	4815      	ldr	r0, [pc, #84]	; (800c550 <dhcp_option_short+0x74>)
 800c4fc:	f00b fbd2 	bl	8017ca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	8a9b      	ldrh	r3, [r3, #20]
 800c508:	1c59      	adds	r1, r3, #1
 800c50a:	b288      	uxth	r0, r1
 800c50c:	6879      	ldr	r1, [r7, #4]
 800c50e:	8288      	strh	r0, [r1, #20]
 800c510:	4618      	mov	r0, r3
 800c512:	887b      	ldrh	r3, [r7, #2]
 800c514:	0a1b      	lsrs	r3, r3, #8
 800c516:	b29b      	uxth	r3, r3
 800c518:	b2d9      	uxtb	r1, r3
 800c51a:	1813      	adds	r3, r2, r0
 800c51c:	460a      	mov	r2, r1
 800c51e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	691a      	ldr	r2, [r3, #16]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8a9b      	ldrh	r3, [r3, #20]
 800c52a:	1c59      	adds	r1, r3, #1
 800c52c:	b288      	uxth	r0, r1
 800c52e:	6879      	ldr	r1, [r7, #4]
 800c530:	8288      	strh	r0, [r1, #20]
 800c532:	8879      	ldrh	r1, [r7, #2]
 800c534:	b2c9      	uxtb	r1, r1
 800c536:	4413      	add	r3, r2
 800c538:	460a      	mov	r2, r1
 800c53a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	080198a4 	.word	0x080198a4
 800c54c:	08019ab8 	.word	0x08019ab8
 800c550:	08019904 	.word	0x08019904

0800c554 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	8a9b      	ldrh	r3, [r3, #20]
 800c562:	3304      	adds	r3, #4
 800c564:	2b44      	cmp	r3, #68	; 0x44
 800c566:	d906      	bls.n	800c576 <dhcp_option_long+0x22>
 800c568:	4b24      	ldr	r3, [pc, #144]	; (800c5fc <dhcp_option_long+0xa8>)
 800c56a:	f240 528a 	movw	r2, #1418	; 0x58a
 800c56e:	4924      	ldr	r1, [pc, #144]	; (800c600 <dhcp_option_long+0xac>)
 800c570:	4824      	ldr	r0, [pc, #144]	; (800c604 <dhcp_option_long+0xb0>)
 800c572:	f00b fb97 	bl	8017ca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	691a      	ldr	r2, [r3, #16]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	8a9b      	ldrh	r3, [r3, #20]
 800c57e:	1c59      	adds	r1, r3, #1
 800c580:	b288      	uxth	r0, r1
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	8288      	strh	r0, [r1, #20]
 800c586:	4618      	mov	r0, r3
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	0e1b      	lsrs	r3, r3, #24
 800c58c:	b2d9      	uxtb	r1, r3
 800c58e:	1813      	adds	r3, r2, r0
 800c590:	460a      	mov	r2, r1
 800c592:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	691a      	ldr	r2, [r3, #16]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	8a9b      	ldrh	r3, [r3, #20]
 800c59e:	1c59      	adds	r1, r3, #1
 800c5a0:	b288      	uxth	r0, r1
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	8288      	strh	r0, [r1, #20]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	0c1b      	lsrs	r3, r3, #16
 800c5ac:	b2d9      	uxtb	r1, r3
 800c5ae:	1813      	adds	r3, r2, r0
 800c5b0:	460a      	mov	r2, r1
 800c5b2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	691a      	ldr	r2, [r3, #16]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	8a9b      	ldrh	r3, [r3, #20]
 800c5be:	1c59      	adds	r1, r3, #1
 800c5c0:	b288      	uxth	r0, r1
 800c5c2:	6879      	ldr	r1, [r7, #4]
 800c5c4:	8288      	strh	r0, [r1, #20]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	0a1b      	lsrs	r3, r3, #8
 800c5cc:	b2d9      	uxtb	r1, r3
 800c5ce:	1813      	adds	r3, r2, r0
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	691a      	ldr	r2, [r3, #16]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	8a9b      	ldrh	r3, [r3, #20]
 800c5de:	1c59      	adds	r1, r3, #1
 800c5e0:	b288      	uxth	r0, r1
 800c5e2:	6879      	ldr	r1, [r7, #4]
 800c5e4:	8288      	strh	r0, [r1, #20]
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	b2c9      	uxtb	r1, r1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	460a      	mov	r2, r1
 800c5ee:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800c5f2:	bf00      	nop
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	080198a4 	.word	0x080198a4
 800c600:	08019afc 	.word	0x08019afc
 800c604:	08019904 	.word	0x08019904

0800c608 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08e      	sub	sp, #56	; 0x38
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800c61a:	220a      	movs	r2, #10
 800c61c:	2100      	movs	r1, #0
 800c61e:	48b6      	ldr	r0, [pc, #728]	; (800c8f8 <dhcp_parse_reply+0x2f0>)
 800c620:	f00b fb38 	bl	8017c94 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	895b      	ldrh	r3, [r3, #10]
 800c628:	2b2b      	cmp	r3, #43	; 0x2b
 800c62a:	d802      	bhi.n	800c632 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800c62c:	f06f 0301 	mvn.w	r3, #1
 800c630:	e294      	b.n	800cb5c <dhcp_parse_reply+0x554>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800c63a:	23f0      	movs	r3, #240	; 0xf0
 800c63c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	891b      	ldrh	r3, [r3, #8]
 800c642:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800c648:	e00c      	b.n	800c664 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	895b      	ldrh	r3, [r3, #10]
 800c64e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	895b      	ldrh	r3, [r3, #10]
 800c658:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800c65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <dhcp_parse_reply+0x6c>
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	895b      	ldrh	r3, [r3, #10]
 800c66e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c670:	429a      	cmp	r2, r3
 800c672:	d2ea      	bcs.n	800c64a <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c676:	2b00      	cmp	r3, #0
 800c678:	d102      	bne.n	800c680 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800c67a:	f06f 0301 	mvn.w	r3, #1
 800c67e:	e26d      	b.n	800cb5c <dhcp_parse_reply+0x554>
  }
  offset = options_idx;
 800c680:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c682:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800c684:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c686:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800c68e:	e225      	b.n	800cadc <dhcp_parse_reply+0x4d4>
    u8_t op = options[offset];
 800c690:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c694:	4413      	add	r3, r2
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800c69e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6a2:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800c6a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c6a6:	3302      	adds	r3, #2
 800c6a8:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800c6aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b0:	8952      	ldrh	r2, [r2, #10]
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	da06      	bge.n	800c6c4 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800c6b6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6bc:	4413      	add	r3, r2
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	77fb      	strb	r3, [r7, #31]
 800c6c2:	e00a      	b.n	800c6da <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d004      	beq.n	800c6d6 <dhcp_parse_reply+0xce>
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	e000      	b.n	800c6d8 <dhcp_parse_reply+0xd0>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800c6da:	7ffb      	ldrb	r3, [r7, #31]
 800c6dc:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800c6de:	7d7b      	ldrb	r3, [r7, #21]
 800c6e0:	2b3b      	cmp	r3, #59	; 0x3b
 800c6e2:	f200 8149 	bhi.w	800c978 <dhcp_parse_reply+0x370>
 800c6e6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <dhcp_parse_reply+0xe4>)
 800c6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ec:	0800c7dd 	.word	0x0800c7dd
 800c6f0:	0800c7ed 	.word	0x0800c7ed
 800c6f4:	0800c979 	.word	0x0800c979
 800c6f8:	0800c80d 	.word	0x0800c80d
 800c6fc:	0800c979 	.word	0x0800c979
 800c700:	0800c979 	.word	0x0800c979
 800c704:	0800c833 	.word	0x0800c833
 800c708:	0800c979 	.word	0x0800c979
 800c70c:	0800c979 	.word	0x0800c979
 800c710:	0800c979 	.word	0x0800c979
 800c714:	0800c979 	.word	0x0800c979
 800c718:	0800c979 	.word	0x0800c979
 800c71c:	0800c979 	.word	0x0800c979
 800c720:	0800c979 	.word	0x0800c979
 800c724:	0800c979 	.word	0x0800c979
 800c728:	0800c979 	.word	0x0800c979
 800c72c:	0800c979 	.word	0x0800c979
 800c730:	0800c979 	.word	0x0800c979
 800c734:	0800c979 	.word	0x0800c979
 800c738:	0800c979 	.word	0x0800c979
 800c73c:	0800c979 	.word	0x0800c979
 800c740:	0800c979 	.word	0x0800c979
 800c744:	0800c979 	.word	0x0800c979
 800c748:	0800c979 	.word	0x0800c979
 800c74c:	0800c979 	.word	0x0800c979
 800c750:	0800c979 	.word	0x0800c979
 800c754:	0800c979 	.word	0x0800c979
 800c758:	0800c979 	.word	0x0800c979
 800c75c:	0800c979 	.word	0x0800c979
 800c760:	0800c979 	.word	0x0800c979
 800c764:	0800c979 	.word	0x0800c979
 800c768:	0800c979 	.word	0x0800c979
 800c76c:	0800c979 	.word	0x0800c979
 800c770:	0800c979 	.word	0x0800c979
 800c774:	0800c979 	.word	0x0800c979
 800c778:	0800c979 	.word	0x0800c979
 800c77c:	0800c979 	.word	0x0800c979
 800c780:	0800c979 	.word	0x0800c979
 800c784:	0800c979 	.word	0x0800c979
 800c788:	0800c979 	.word	0x0800c979
 800c78c:	0800c979 	.word	0x0800c979
 800c790:	0800c979 	.word	0x0800c979
 800c794:	0800c979 	.word	0x0800c979
 800c798:	0800c979 	.word	0x0800c979
 800c79c:	0800c979 	.word	0x0800c979
 800c7a0:	0800c979 	.word	0x0800c979
 800c7a4:	0800c979 	.word	0x0800c979
 800c7a8:	0800c979 	.word	0x0800c979
 800c7ac:	0800c979 	.word	0x0800c979
 800c7b0:	0800c979 	.word	0x0800c979
 800c7b4:	0800c979 	.word	0x0800c979
 800c7b8:	0800c87f 	.word	0x0800c87f
 800c7bc:	0800c89f 	.word	0x0800c89f
 800c7c0:	0800c8d9 	.word	0x0800c8d9
 800c7c4:	0800c919 	.word	0x0800c919
 800c7c8:	0800c979 	.word	0x0800c979
 800c7cc:	0800c979 	.word	0x0800c979
 800c7d0:	0800c979 	.word	0x0800c979
 800c7d4:	0800c939 	.word	0x0800c939
 800c7d8:	0800c959 	.word	0x0800c959
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	77fb      	strb	r3, [r7, #31]
 800c7e0:	7ffb      	ldrb	r3, [r7, #31]
 800c7e2:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800c7e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800c7ea:	e0c8      	b.n	800c97e <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c7ec:	7ffb      	ldrb	r3, [r7, #31]
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	d009      	beq.n	800c806 <dhcp_parse_reply+0x1fe>
 800c7f2:	4b42      	ldr	r3, [pc, #264]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c7f4:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800c7f8:	4941      	ldr	r1, [pc, #260]	; (800c900 <dhcp_parse_reply+0x2f8>)
 800c7fa:	4842      	ldr	r0, [pc, #264]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c7fc:	f00b fa52 	bl	8017ca4 <iprintf>
 800c800:	f06f 0305 	mvn.w	r3, #5
 800c804:	e1aa      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800c806:	2306      	movs	r3, #6
 800c808:	61bb      	str	r3, [r7, #24]
        break;
 800c80a:	e0b8      	b.n	800c97e <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800c80c:	2304      	movs	r3, #4
 800c80e:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800c810:	7ffa      	ldrb	r2, [r7, #31]
 800c812:	7fbb      	ldrb	r3, [r7, #30]
 800c814:	429a      	cmp	r2, r3
 800c816:	d209      	bcs.n	800c82c <dhcp_parse_reply+0x224>
 800c818:	4b38      	ldr	r3, [pc, #224]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c81a:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800c81e:	493a      	ldr	r1, [pc, #232]	; (800c908 <dhcp_parse_reply+0x300>)
 800c820:	4838      	ldr	r0, [pc, #224]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c822:	f00b fa3f 	bl	8017ca4 <iprintf>
 800c826:	f06f 0305 	mvn.w	r3, #5
 800c82a:	e197      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800c82c:	2307      	movs	r3, #7
 800c82e:	61bb      	str	r3, [r7, #24]
        break;
 800c830:	e0a5      	b.n	800c97e <dhcp_parse_reply+0x376>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800c832:	7ffb      	ldrb	r3, [r7, #31]
 800c834:	f003 0303 	and.w	r3, r3, #3
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d009      	beq.n	800c852 <dhcp_parse_reply+0x24a>
 800c83e:	4b2f      	ldr	r3, [pc, #188]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c840:	f240 6201 	movw	r2, #1537	; 0x601
 800c844:	4931      	ldr	r1, [pc, #196]	; (800c90c <dhcp_parse_reply+0x304>)
 800c846:	482f      	ldr	r0, [pc, #188]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c848:	f00b fa2c 	bl	8017ca4 <iprintf>
 800c84c:	f06f 0305 	mvn.w	r3, #5
 800c850:	e184      	b.n	800cb5c <dhcp_parse_reply+0x554>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800c852:	7ffb      	ldrb	r3, [r7, #31]
 800c854:	2b08      	cmp	r3, #8
 800c856:	bf28      	it	cs
 800c858:	2308      	movcs	r3, #8
 800c85a:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800c85c:	7ffa      	ldrb	r2, [r7, #31]
 800c85e:	7fbb      	ldrb	r3, [r7, #30]
 800c860:	429a      	cmp	r2, r3
 800c862:	d209      	bcs.n	800c878 <dhcp_parse_reply+0x270>
 800c864:	4b25      	ldr	r3, [pc, #148]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c866:	f240 6204 	movw	r2, #1540	; 0x604
 800c86a:	4927      	ldr	r1, [pc, #156]	; (800c908 <dhcp_parse_reply+0x300>)
 800c86c:	4825      	ldr	r0, [pc, #148]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c86e:	f00b fa19 	bl	8017ca4 <iprintf>
 800c872:	f06f 0305 	mvn.w	r3, #5
 800c876:	e171      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800c878:	2308      	movs	r3, #8
 800c87a:	61bb      	str	r3, [r7, #24]
        break;
 800c87c:	e07f      	b.n	800c97e <dhcp_parse_reply+0x376>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c87e:	7ffb      	ldrb	r3, [r7, #31]
 800c880:	2b04      	cmp	r3, #4
 800c882:	d009      	beq.n	800c898 <dhcp_parse_reply+0x290>
 800c884:	4b1d      	ldr	r3, [pc, #116]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c886:	f240 6209 	movw	r2, #1545	; 0x609
 800c88a:	491d      	ldr	r1, [pc, #116]	; (800c900 <dhcp_parse_reply+0x2f8>)
 800c88c:	481d      	ldr	r0, [pc, #116]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c88e:	f00b fa09 	bl	8017ca4 <iprintf>
 800c892:	f06f 0305 	mvn.w	r3, #5
 800c896:	e161      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800c898:	2303      	movs	r3, #3
 800c89a:	61bb      	str	r3, [r7, #24]
        break;
 800c89c:	e06f      	b.n	800c97e <dhcp_parse_reply+0x376>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800c89e:	7ffb      	ldrb	r3, [r7, #31]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d009      	beq.n	800c8b8 <dhcp_parse_reply+0x2b0>
 800c8a4:	4b15      	ldr	r3, [pc, #84]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c8a6:	f240 6217 	movw	r2, #1559	; 0x617
 800c8aa:	4919      	ldr	r1, [pc, #100]	; (800c910 <dhcp_parse_reply+0x308>)
 800c8ac:	4815      	ldr	r0, [pc, #84]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c8ae:	f00b f9f9 	bl	8017ca4 <iprintf>
 800c8b2:	f06f 0305 	mvn.w	r3, #5
 800c8b6:	e151      	b.n	800cb5c <dhcp_parse_reply+0x554>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800c8b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8ba:	2bf0      	cmp	r3, #240	; 0xf0
 800c8bc:	d009      	beq.n	800c8d2 <dhcp_parse_reply+0x2ca>
 800c8be:	4b0f      	ldr	r3, [pc, #60]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c8c0:	f240 6219 	movw	r2, #1561	; 0x619
 800c8c4:	4913      	ldr	r1, [pc, #76]	; (800c914 <dhcp_parse_reply+0x30c>)
 800c8c6:	480f      	ldr	r0, [pc, #60]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c8c8:	f00b f9ec 	bl	8017ca4 <iprintf>
 800c8cc:	f06f 0305 	mvn.w	r3, #5
 800c8d0:	e144      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61bb      	str	r3, [r7, #24]
        break;
 800c8d6:	e052      	b.n	800c97e <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800c8d8:	7ffb      	ldrb	r3, [r7, #31]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d009      	beq.n	800c8f2 <dhcp_parse_reply+0x2ea>
 800c8de:	4b07      	ldr	r3, [pc, #28]	; (800c8fc <dhcp_parse_reply+0x2f4>)
 800c8e0:	f240 621d 	movw	r2, #1565	; 0x61d
 800c8e4:	490a      	ldr	r1, [pc, #40]	; (800c910 <dhcp_parse_reply+0x308>)
 800c8e6:	4807      	ldr	r0, [pc, #28]	; (800c904 <dhcp_parse_reply+0x2fc>)
 800c8e8:	f00b f9dc 	bl	8017ca4 <iprintf>
 800c8ec:	f06f 0305 	mvn.w	r3, #5
 800c8f0:	e134      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	61bb      	str	r3, [r7, #24]
        break;
 800c8f6:	e042      	b.n	800c97e <dhcp_parse_reply+0x376>
 800c8f8:	2001d284 	.word	0x2001d284
 800c8fc:	080198a4 	.word	0x080198a4
 800c900:	08019b3c 	.word	0x08019b3c
 800c904:	08019904 	.word	0x08019904
 800c908:	08019b48 	.word	0x08019b48
 800c90c:	08019b5c 	.word	0x08019b5c
 800c910:	08019b6c 	.word	0x08019b6c
 800c914:	08019b78 	.word	0x08019b78
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c918:	7ffb      	ldrb	r3, [r7, #31]
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	d009      	beq.n	800c932 <dhcp_parse_reply+0x32a>
 800c91e:	4b91      	ldr	r3, [pc, #580]	; (800cb64 <dhcp_parse_reply+0x55c>)
 800c920:	f240 6221 	movw	r2, #1569	; 0x621
 800c924:	4990      	ldr	r1, [pc, #576]	; (800cb68 <dhcp_parse_reply+0x560>)
 800c926:	4891      	ldr	r0, [pc, #580]	; (800cb6c <dhcp_parse_reply+0x564>)
 800c928:	f00b f9bc 	bl	8017ca4 <iprintf>
 800c92c:	f06f 0305 	mvn.w	r3, #5
 800c930:	e114      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800c932:	2302      	movs	r3, #2
 800c934:	61bb      	str	r3, [r7, #24]
        break;
 800c936:	e022      	b.n	800c97e <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c938:	7ffb      	ldrb	r3, [r7, #31]
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d009      	beq.n	800c952 <dhcp_parse_reply+0x34a>
 800c93e:	4b89      	ldr	r3, [pc, #548]	; (800cb64 <dhcp_parse_reply+0x55c>)
 800c940:	f240 6225 	movw	r2, #1573	; 0x625
 800c944:	4988      	ldr	r1, [pc, #544]	; (800cb68 <dhcp_parse_reply+0x560>)
 800c946:	4889      	ldr	r0, [pc, #548]	; (800cb6c <dhcp_parse_reply+0x564>)
 800c948:	f00b f9ac 	bl	8017ca4 <iprintf>
 800c94c:	f06f 0305 	mvn.w	r3, #5
 800c950:	e104      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_T1;
 800c952:	2304      	movs	r3, #4
 800c954:	61bb      	str	r3, [r7, #24]
        break;
 800c956:	e012      	b.n	800c97e <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c958:	7ffb      	ldrb	r3, [r7, #31]
 800c95a:	2b04      	cmp	r3, #4
 800c95c:	d009      	beq.n	800c972 <dhcp_parse_reply+0x36a>
 800c95e:	4b81      	ldr	r3, [pc, #516]	; (800cb64 <dhcp_parse_reply+0x55c>)
 800c960:	f240 6229 	movw	r2, #1577	; 0x629
 800c964:	4980      	ldr	r1, [pc, #512]	; (800cb68 <dhcp_parse_reply+0x560>)
 800c966:	4881      	ldr	r0, [pc, #516]	; (800cb6c <dhcp_parse_reply+0x564>)
 800c968:	f00b f99c 	bl	8017ca4 <iprintf>
 800c96c:	f06f 0305 	mvn.w	r3, #5
 800c970:	e0f4      	b.n	800cb5c <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_T2;
 800c972:	2305      	movs	r3, #5
 800c974:	61bb      	str	r3, [r7, #24]
        break;
 800c976:	e002      	b.n	800c97e <dhcp_parse_reply+0x376>
      default:
        decode_len = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800c97c:	bf00      	nop
    }
    offset += len + 2;
 800c97e:	7ffb      	ldrb	r3, [r7, #31]
 800c980:	b29a      	uxth	r2, r3
 800c982:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c984:	4413      	add	r3, r2
 800c986:	b29b      	uxth	r3, r3
 800c988:	3302      	adds	r3, #2
 800c98a:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800c98c:	7fbb      	ldrb	r3, [r7, #30]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d07b      	beq.n	800ca8a <dhcp_parse_reply+0x482>
      u32_t value = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	db02      	blt.n	800c9a2 <dhcp_parse_reply+0x39a>
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	2b09      	cmp	r3, #9
 800c9a0:	dd06      	ble.n	800c9b0 <dhcp_parse_reply+0x3a8>
 800c9a2:	4b70      	ldr	r3, [pc, #448]	; (800cb64 <dhcp_parse_reply+0x55c>)
 800c9a4:	f240 6236 	movw	r2, #1590	; 0x636
 800c9a8:	4971      	ldr	r1, [pc, #452]	; (800cb70 <dhcp_parse_reply+0x568>)
 800c9aa:	4870      	ldr	r0, [pc, #448]	; (800cb6c <dhcp_parse_reply+0x564>)
 800c9ac:	f00b f97a 	bl	8017ca4 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800c9b0:	4a70      	ldr	r2, [pc, #448]	; (800cb74 <dhcp_parse_reply+0x56c>)
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d166      	bne.n	800ca8a <dhcp_parse_reply+0x482>
        copy_len = LWIP_MIN(decode_len, 4);
 800c9bc:	7fbb      	ldrb	r3, [r7, #30]
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d802      	bhi.n	800c9c8 <dhcp_parse_reply+0x3c0>
 800c9c2:	7fbb      	ldrb	r3, [r7, #30]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	e000      	b.n	800c9ca <dhcp_parse_reply+0x3c2>
 800c9c8:	2304      	movs	r3, #4
 800c9ca:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800c9cc:	8afb      	ldrh	r3, [r7, #22]
 800c9ce:	8a7a      	ldrh	r2, [r7, #18]
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d6:	f004 fc25 	bl	8011224 <pbuf_copy_partial>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	461a      	mov	r2, r3
 800c9de:	8a7b      	ldrh	r3, [r7, #18]
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d002      	beq.n	800c9ea <dhcp_parse_reply+0x3e2>
          return ERR_BUF;
 800c9e4:	f06f 0301 	mvn.w	r3, #1
 800c9e8:	e0b8      	b.n	800cb5c <dhcp_parse_reply+0x554>
        }
        if (decode_len > 4) {
 800c9ea:	7fbb      	ldrb	r3, [r7, #30]
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	d927      	bls.n	800ca40 <dhcp_parse_reply+0x438>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800c9f0:	7fbb      	ldrb	r3, [r7, #30]
 800c9f2:	f003 0303 	and.w	r3, r3, #3
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d009      	beq.n	800ca10 <dhcp_parse_reply+0x408>
 800c9fc:	4b59      	ldr	r3, [pc, #356]	; (800cb64 <dhcp_parse_reply+0x55c>)
 800c9fe:	f240 623e 	movw	r2, #1598	; 0x63e
 800ca02:	495d      	ldr	r1, [pc, #372]	; (800cb78 <dhcp_parse_reply+0x570>)
 800ca04:	4859      	ldr	r0, [pc, #356]	; (800cb6c <dhcp_parse_reply+0x564>)
 800ca06:	f00b f94d 	bl	8017ca4 <iprintf>
 800ca0a:	f06f 0305 	mvn.w	r3, #5
 800ca0e:	e0a5      	b.n	800cb5c <dhcp_parse_reply+0x554>
          dhcp_got_option(dhcp, decode_idx);
 800ca10:	4a58      	ldr	r2, [pc, #352]	; (800cb74 <dhcp_parse_reply+0x56c>)
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	4413      	add	r3, r2
 800ca16:	2201      	movs	r2, #1
 800ca18:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fe f94d 	bl	800acbc <lwip_htonl>
 800ca22:	4601      	mov	r1, r0
 800ca24:	4a55      	ldr	r2, [pc, #340]	; (800cb7c <dhcp_parse_reply+0x574>)
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800ca2c:	7fbb      	ldrb	r3, [r7, #30]
 800ca2e:	3b04      	subs	r3, #4
 800ca30:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800ca32:	8afb      	ldrh	r3, [r7, #22]
 800ca34:	3304      	adds	r3, #4
 800ca36:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800ca3e:	e7aa      	b.n	800c996 <dhcp_parse_reply+0x38e>
        } else if (decode_len == 4) {
 800ca40:	7fbb      	ldrb	r3, [r7, #30]
 800ca42:	2b04      	cmp	r3, #4
 800ca44:	d106      	bne.n	800ca54 <dhcp_parse_reply+0x44c>
          value = lwip_ntohl(value);
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fe f937 	bl	800acbc <lwip_htonl>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	60bb      	str	r3, [r7, #8]
 800ca52:	e010      	b.n	800ca76 <dhcp_parse_reply+0x46e>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ca54:	7fbb      	ldrb	r3, [r7, #30]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d009      	beq.n	800ca6e <dhcp_parse_reply+0x466>
 800ca5a:	4b42      	ldr	r3, [pc, #264]	; (800cb64 <dhcp_parse_reply+0x55c>)
 800ca5c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800ca60:	4947      	ldr	r1, [pc, #284]	; (800cb80 <dhcp_parse_reply+0x578>)
 800ca62:	4842      	ldr	r0, [pc, #264]	; (800cb6c <dhcp_parse_reply+0x564>)
 800ca64:	f00b f91e 	bl	8017ca4 <iprintf>
 800ca68:	f06f 0305 	mvn.w	r3, #5
 800ca6c:	e076      	b.n	800cb5c <dhcp_parse_reply+0x554>
          value = ((u8_t*)&value)[0];
 800ca6e:	f107 0308 	add.w	r3, r7, #8
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800ca76:	4a3f      	ldr	r2, [pc, #252]	; (800cb74 <dhcp_parse_reply+0x56c>)
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	493e      	ldr	r1, [pc, #248]	; (800cb7c <dhcp_parse_reply+0x574>)
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	895b      	ldrh	r3, [r3, #10]
 800ca8e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d323      	bcc.n	800cadc <dhcp_parse_reply+0x4d4>
      offset -= q->len;
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	895b      	ldrh	r3, [r3, #10]
 800ca98:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	895b      	ldrh	r3, [r3, #10]
 800caa2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800caa8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800caaa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800caac:	429a      	cmp	r2, r3
 800caae:	d223      	bcs.n	800caf8 <dhcp_parse_reply+0x4f0>
 800cab0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d020      	beq.n	800caf8 <dhcp_parse_reply+0x4f0>
        q = q->next;
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d109      	bne.n	800cad6 <dhcp_parse_reply+0x4ce>
 800cac2:	4b28      	ldr	r3, [pc, #160]	; (800cb64 <dhcp_parse_reply+0x55c>)
 800cac4:	f240 6254 	movw	r2, #1620	; 0x654
 800cac8:	492e      	ldr	r1, [pc, #184]	; (800cb84 <dhcp_parse_reply+0x57c>)
 800caca:	4828      	ldr	r0, [pc, #160]	; (800cb6c <dhcp_parse_reply+0x564>)
 800cacc:	f00b f8ea 	bl	8017ca4 <iprintf>
 800cad0:	f06f 0305 	mvn.w	r3, #5
 800cad4:	e042      	b.n	800cb5c <dhcp_parse_reply+0x554>
        options = (u8_t*)q->payload;
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00a      	beq.n	800caf8 <dhcp_parse_reply+0x4f0>
 800cae2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800cae4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d206      	bcs.n	800caf8 <dhcp_parse_reply+0x4f0>
 800caea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800caec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caee:	4413      	add	r3, r2
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2bff      	cmp	r3, #255	; 0xff
 800caf4:	f47f adcc 	bne.w	800c690 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800caf8:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <dhcp_parse_reply+0x56c>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d018      	beq.n	800cb32 <dhcp_parse_reply+0x52a>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cb00:	4b1e      	ldr	r3, [pc, #120]	; (800cb7c <dhcp_parse_reply+0x574>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cb06:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <dhcp_parse_reply+0x56c>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d102      	bne.n	800cb18 <dhcp_parse_reply+0x510>
      parse_file_as_options = 1;
 800cb12:	2301      	movs	r3, #1
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
 800cb16:	e00c      	b.n	800cb32 <dhcp_parse_reply+0x52a>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d102      	bne.n	800cb24 <dhcp_parse_reply+0x51c>
      parse_sname_as_options = 1;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	623b      	str	r3, [r7, #32]
 800cb22:	e006      	b.n	800cb32 <dhcp_parse_reply+0x52a>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d103      	bne.n	800cb32 <dhcp_parse_reply+0x52a>
      parse_sname_as_options = 1;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d006      	beq.n	800cb46 <dhcp_parse_reply+0x53e>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800cb3c:	236c      	movs	r3, #108	; 0x6c
 800cb3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800cb40:	23ec      	movs	r3, #236	; 0xec
 800cb42:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800cb44:	e57e      	b.n	800c644 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800cb46:	6a3b      	ldr	r3, [r7, #32]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d006      	beq.n	800cb5a <dhcp_parse_reply+0x552>
    parse_sname_as_options = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800cb50:	232c      	movs	r3, #44	; 0x2c
 800cb52:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800cb54:	236c      	movs	r3, #108	; 0x6c
 800cb56:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800cb58:	e574      	b.n	800c644 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3738      	adds	r7, #56	; 0x38
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	080198a4 	.word	0x080198a4
 800cb68:	08019b3c 	.word	0x08019b3c
 800cb6c:	08019904 	.word	0x08019904
 800cb70:	08019b90 	.word	0x08019b90
 800cb74:	2001d284 	.word	0x2001d284
 800cb78:	08019ba4 	.word	0x08019ba4
 800cb7c:	2001d290 	.word	0x2001d290
 800cb80:	08019bbc 	.word	0x08019bbc
 800cb84:	08019bd0 	.word	0x08019bd0

0800cb88 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08a      	sub	sp, #40	; 0x28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800cb96:	4b67      	ldr	r3, [pc, #412]	; (800cd34 <dhcp_recv+0x1ac>)
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f000 80b4 	beq.w	800cd18 <dhcp_recv+0x190>
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	7a1b      	ldrb	r3, [r3, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80af 	beq.w	800cd18 <dhcp_recv+0x190>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d006      	beq.n	800cbd0 <dhcp_recv+0x48>
 800cbc2:	4b5d      	ldr	r3, [pc, #372]	; (800cd38 <dhcp_recv+0x1b0>)
 800cbc4:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800cbc8:	495c      	ldr	r1, [pc, #368]	; (800cd3c <dhcp_recv+0x1b4>)
 800cbca:	485d      	ldr	r0, [pc, #372]	; (800cd40 <dhcp_recv+0x1b8>)
 800cbcc:	f00b f86a 	bl	8017ca4 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	895b      	ldrh	r3, [r3, #10]
 800cbd4:	2b2b      	cmp	r3, #43	; 0x2b
 800cbd6:	f240 8094 	bls.w	800cd02 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	f040 8091 	bne.w	800cd06 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbea:	e012      	b.n	800cc12 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cbec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf0:	6a3a      	ldr	r2, [r7, #32]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800cbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfc:	69b9      	ldr	r1, [r7, #24]
 800cbfe:	440b      	add	r3, r1
 800cc00:	7f1b      	ldrb	r3, [r3, #28]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	f040 8081 	bne.w	800cd0a <dhcp_recv+0x182>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800cc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d207      	bcs.n	800cc30 <dhcp_recv+0xa8>
 800cc20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc24:	2b05      	cmp	r3, #5
 800cc26:	d803      	bhi.n	800cc30 <dhcp_recv+0xa8>
 800cc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc2c:	2b0f      	cmp	r3, #15
 800cc2e:	d9dd      	bls.n	800cbec <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe f841 	bl	800acbc <lwip_htonl>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d164      	bne.n	800cd0e <dhcp_recv+0x186>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	69f8      	ldr	r0, [r7, #28]
 800cc48:	f7ff fcde 	bl	800c608 <dhcp_parse_reply>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d15f      	bne.n	800cd12 <dhcp_recv+0x18a>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800cc52:	4b3c      	ldr	r3, [pc, #240]	; (800cd44 <dhcp_recv+0x1bc>)
 800cc54:	785b      	ldrb	r3, [r3, #1]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d05d      	beq.n	800cd16 <dhcp_recv+0x18e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800cc5a:	4b3b      	ldr	r3, [pc, #236]	; (800cd48 <dhcp_recv+0x1c0>)
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b05      	cmp	r3, #5
 800cc64:	d128      	bne.n	800ccb8 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	7a5b      	ldrb	r3, [r3, #9]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d111      	bne.n	800cc92 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800cc6e:	6a38      	ldr	r0, [r7, #32]
 800cc70:	f7fe fe50 	bl	800b914 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800cc7a:	f003 0308 	and.w	r3, r3, #8
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800cc82:	6a38      	ldr	r0, [r7, #32]
 800cc84:	f7fe fc18 	bl	800b4b8 <dhcp_check>
 800cc88:	e046      	b.n	800cd18 <dhcp_recv+0x190>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800cc8a:	6a38      	ldr	r0, [r7, #32]
 800cc8c:	f7ff f870 	bl	800bd70 <dhcp_bind>
 800cc90:	e042      	b.n	800cd18 <dhcp_recv+0x190>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	7a5b      	ldrb	r3, [r3, #9]
 800cc96:	2b03      	cmp	r3, #3
 800cc98:	d007      	beq.n	800ccaa <dhcp_recv+0x122>
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	7a5b      	ldrb	r3, [r3, #9]
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d003      	beq.n	800ccaa <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800cca6:	2b05      	cmp	r3, #5
 800cca8:	d136      	bne.n	800cd18 <dhcp_recv+0x190>
      dhcp_handle_ack(netif);
 800ccaa:	6a38      	ldr	r0, [r7, #32]
 800ccac:	f7fe fe32 	bl	800b914 <dhcp_handle_ack>
      dhcp_bind(netif);
 800ccb0:	6a38      	ldr	r0, [r7, #32]
 800ccb2:	f7ff f85d 	bl	800bd70 <dhcp_bind>
 800ccb6:	e02f      	b.n	800cd18 <dhcp_recv+0x190>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800ccb8:	7dfb      	ldrb	r3, [r7, #23]
 800ccba:	2b06      	cmp	r3, #6
 800ccbc:	d113      	bne.n	800cce6 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d00b      	beq.n	800ccde <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	7a5b      	ldrb	r3, [r3, #9]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d007      	beq.n	800ccde <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ccd2:	2b04      	cmp	r3, #4
 800ccd4:	d003      	beq.n	800ccde <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	7a5b      	ldrb	r3, [r3, #9]
 800ccda:	2b05      	cmp	r3, #5
 800ccdc:	d103      	bne.n	800cce6 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800ccde:	6a38      	ldr	r0, [r7, #32]
 800cce0:	f7fe fbd0 	bl	800b484 <dhcp_handle_nak>
 800cce4:	e018      	b.n	800cd18 <dhcp_recv+0x190>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800cce6:	7dfb      	ldrb	r3, [r7, #23]
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d115      	bne.n	800cd18 <dhcp_recv+0x190>
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	7a5b      	ldrb	r3, [r3, #9]
 800ccf0:	2b06      	cmp	r3, #6
 800ccf2:	d111      	bne.n	800cd18 <dhcp_recv+0x190>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800ccfa:	6a38      	ldr	r0, [r7, #32]
 800ccfc:	f7fe fc10 	bl	800b520 <dhcp_handle_offer>
 800cd00:	e00a      	b.n	800cd18 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800cd02:	bf00      	nop
 800cd04:	e008      	b.n	800cd18 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800cd06:	bf00      	nop
 800cd08:	e006      	b.n	800cd18 <dhcp_recv+0x190>
      goto free_pbuf_and_return;
 800cd0a:	bf00      	nop
 800cd0c:	e004      	b.n	800cd18 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800cd0e:	bf00      	nop
 800cd10:	e002      	b.n	800cd18 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800cd12:	bf00      	nop
 800cd14:	e000      	b.n	800cd18 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800cd16:	bf00      	nop
  }

free_pbuf_and_return:
  if (dhcp != NULL) {
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <dhcp_recv+0x19c>
    dhcp->msg_in = NULL;
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	2200      	movs	r2, #0
 800cd22:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f004 f871 	bl	8010e0c <pbuf_free>
}
 800cd2a:	bf00      	nop
 800cd2c:	3728      	adds	r7, #40	; 0x28
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	2001d26c 	.word	0x2001d26c
 800cd38:	080198a4 	.word	0x080198a4
 800cd3c:	080199d0 	.word	0x080199d0
 800cd40:	08019904 	.word	0x08019904
 800cd44:	2001d284 	.word	0x2001d284
 800cd48:	2001d290 	.word	0x2001d290

0800cd4c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800cd4c:	b590      	push	{r4, r7, lr}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	4613      	mov	r3, r2
 800cd58:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d109      	bne.n	800cd74 <dhcp_create_msg+0x28>
 800cd60:	4ba3      	ldr	r3, [pc, #652]	; (800cff0 <dhcp_create_msg+0x2a4>)
 800cd62:	f240 721d 	movw	r2, #1821	; 0x71d
 800cd66:	49a3      	ldr	r1, [pc, #652]	; (800cff4 <dhcp_create_msg+0x2a8>)
 800cd68:	48a3      	ldr	r0, [pc, #652]	; (800cff8 <dhcp_create_msg+0x2ac>)
 800cd6a:	f00a ff9b 	bl	8017ca4 <iprintf>
 800cd6e:	f06f 030f 	mvn.w	r3, #15
 800cd72:	e138      	b.n	800cfe6 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d109      	bne.n	800cd8e <dhcp_create_msg+0x42>
 800cd7a:	4b9d      	ldr	r3, [pc, #628]	; (800cff0 <dhcp_create_msg+0x2a4>)
 800cd7c:	f240 721e 	movw	r2, #1822	; 0x71e
 800cd80:	499e      	ldr	r1, [pc, #632]	; (800cffc <dhcp_create_msg+0x2b0>)
 800cd82:	489d      	ldr	r0, [pc, #628]	; (800cff8 <dhcp_create_msg+0x2ac>)
 800cd84:	f00a ff8e 	bl	8017ca4 <iprintf>
 800cd88:	f06f 0305 	mvn.w	r3, #5
 800cd8c:	e12b      	b.n	800cfe6 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d006      	beq.n	800cda4 <dhcp_create_msg+0x58>
 800cd96:	4b96      	ldr	r3, [pc, #600]	; (800cff0 <dhcp_create_msg+0x2a4>)
 800cd98:	f240 721f 	movw	r2, #1823	; 0x71f
 800cd9c:	4998      	ldr	r1, [pc, #608]	; (800d000 <dhcp_create_msg+0x2b4>)
 800cd9e:	4896      	ldr	r0, [pc, #600]	; (800cff8 <dhcp_create_msg+0x2ac>)
 800cda0:	f00a ff80 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d006      	beq.n	800cdba <dhcp_create_msg+0x6e>
 800cdac:	4b90      	ldr	r3, [pc, #576]	; (800cff0 <dhcp_create_msg+0x2a4>)
 800cdae:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800cdb2:	4994      	ldr	r1, [pc, #592]	; (800d004 <dhcp_create_msg+0x2b8>)
 800cdb4:	4890      	ldr	r0, [pc, #576]	; (800cff8 <dhcp_create_msg+0x2ac>)
 800cdb6:	f00a ff75 	bl	8017ca4 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f44f 719a 	mov.w	r1, #308	; 0x134
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	f003 fcb1 	bl	8010728 <pbuf_alloc>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d102      	bne.n	800cdda <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800cdd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdd8:	e105      	b.n	800cfe6 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	895b      	ldrh	r3, [r3, #10]
 800cde0:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800cde4:	d206      	bcs.n	800cdf4 <dhcp_create_msg+0xa8>
 800cde6:	4b82      	ldr	r3, [pc, #520]	; (800cff0 <dhcp_create_msg+0x2a4>)
 800cde8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cdec:	4986      	ldr	r1, [pc, #536]	; (800d008 <dhcp_create_msg+0x2bc>)
 800cdee:	4882      	ldr	r0, [pc, #520]	; (800cff8 <dhcp_create_msg+0x2ac>)
 800cdf0:	f00a ff58 	bl	8017ca4 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d103      	bne.n	800ce02 <dhcp_create_msg+0xb6>
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	7a5b      	ldrb	r3, [r3, #9]
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d10d      	bne.n	800ce1e <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	7a9b      	ldrb	r3, [r3, #10]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d105      	bne.n	800ce16 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800ce0a:	f00a ffc7 	bl	8017d9c <rand>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	461a      	mov	r2, r3
 800ce12:	4b7e      	ldr	r3, [pc, #504]	; (800d00c <dhcp_create_msg+0x2c0>)
 800ce14:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800ce16:	4b7d      	ldr	r3, [pc, #500]	; (800d00c <dhcp_create_msg+0x2c0>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	2201      	movs	r2, #1
 800ce36:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ce42:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	691c      	ldr	r4, [r3, #16]
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fd ff31 	bl	800acbc <lwip_htonl>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	2200      	movs	r2, #0
 800ce64:	721a      	strb	r2, [r3, #8]
 800ce66:	2200      	movs	r2, #0
 800ce68:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	729a      	strb	r2, [r3, #10]
 800ce72:	2200      	movs	r2, #0
 800ce74:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	731a      	strb	r2, [r3, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	735a      	strb	r2, [r3, #13]
 800ce82:	2200      	movs	r2, #0
 800ce84:	739a      	strb	r2, [r3, #14]
 800ce86:	2200      	movs	r2, #0
 800ce88:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	2b08      	cmp	r3, #8
 800ce8e:	d010      	beq.n	800ceb2 <dhcp_create_msg+0x166>
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	2b04      	cmp	r3, #4
 800ce94:	d00d      	beq.n	800ceb2 <dhcp_create_msg+0x166>
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	2b07      	cmp	r3, #7
 800ce9a:	d00a      	beq.n	800ceb2 <dhcp_create_msg+0x166>
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d10d      	bne.n	800cebe <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800cea6:	2b05      	cmp	r3, #5
 800cea8:	d003      	beq.n	800ceb2 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	7a5b      	ldrb	r3, [r3, #9]
 800ceae:	2b04      	cmp	r3, #4
 800ceb0:	d105      	bne.n	800cebe <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	3204      	adds	r2, #4
 800ceba:	6812      	ldr	r2, [r2, #0]
 800cebc:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	2200      	movs	r2, #0
 800cec4:	741a      	strb	r2, [r3, #16]
 800cec6:	2200      	movs	r2, #0
 800cec8:	745a      	strb	r2, [r3, #17]
 800ceca:	2200      	movs	r2, #0
 800cecc:	749a      	strb	r2, [r3, #18]
 800cece:	2200      	movs	r2, #0
 800ced0:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	2200      	movs	r2, #0
 800ced8:	751a      	strb	r2, [r3, #20]
 800ceda:	2200      	movs	r2, #0
 800cedc:	755a      	strb	r2, [r3, #21]
 800cede:	2200      	movs	r2, #0
 800cee0:	759a      	strb	r2, [r3, #22]
 800cee2:	2200      	movs	r2, #0
 800cee4:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	2200      	movs	r2, #0
 800ceec:	761a      	strb	r2, [r3, #24]
 800ceee:	2200      	movs	r2, #0
 800cef0:	765a      	strb	r2, [r3, #25]
 800cef2:	2200      	movs	r2, #0
 800cef4:	769a      	strb	r2, [r3, #26]
 800cef6:	2200      	movs	r2, #0
 800cef8:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800cefa:	2300      	movs	r3, #0
 800cefc:	82fb      	strh	r3, [r7, #22]
 800cefe:	e019      	b.n	800cf34 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	691a      	ldr	r2, [r3, #16]
 800cf04:	8afb      	ldrh	r3, [r7, #22]
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 800cf0c:	b289      	uxth	r1, r1
 800cf0e:	8af8      	ldrh	r0, [r7, #22]
 800cf10:	4288      	cmp	r0, r1
 800cf12:	d208      	bcs.n	800cf26 <dhcp_create_msg+0x1da>
 800cf14:	8af9      	ldrh	r1, [r7, #22]
 800cf16:	2905      	cmp	r1, #5
 800cf18:	d805      	bhi.n	800cf26 <dhcp_create_msg+0x1da>
 800cf1a:	8af9      	ldrh	r1, [r7, #22]
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	4401      	add	r1, r0
 800cf20:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
 800cf24:	e000      	b.n	800cf28 <dhcp_create_msg+0x1dc>
 800cf26:	2100      	movs	r1, #0
 800cf28:	4413      	add	r3, r2
 800cf2a:	460a      	mov	r2, r1
 800cf2c:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800cf2e:	8afb      	ldrh	r3, [r7, #22]
 800cf30:	3301      	adds	r3, #1
 800cf32:	82fb      	strh	r3, [r7, #22]
 800cf34:	8afb      	ldrh	r3, [r7, #22]
 800cf36:	2b0f      	cmp	r3, #15
 800cf38:	d9e2      	bls.n	800cf00 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	82fb      	strh	r3, [r7, #22]
 800cf3e:	e009      	b.n	800cf54 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	691a      	ldr	r2, [r3, #16]
 800cf44:	8afb      	ldrh	r3, [r7, #22]
 800cf46:	4413      	add	r3, r2
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800cf4e:	8afb      	ldrh	r3, [r7, #22]
 800cf50:	3301      	adds	r3, #1
 800cf52:	82fb      	strh	r3, [r7, #22]
 800cf54:	8afb      	ldrh	r3, [r7, #22]
 800cf56:	2b3f      	cmp	r3, #63	; 0x3f
 800cf58:	d9f2      	bls.n	800cf40 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	82fb      	strh	r3, [r7, #22]
 800cf5e:	e009      	b.n	800cf74 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	691a      	ldr	r2, [r3, #16]
 800cf64:	8afb      	ldrh	r3, [r7, #22]
 800cf66:	4413      	add	r3, r2
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800cf6e:	8afb      	ldrh	r3, [r7, #22]
 800cf70:	3301      	adds	r3, #1
 800cf72:	82fb      	strh	r3, [r7, #22]
 800cf74:	8afb      	ldrh	r3, [r7, #22]
 800cf76:	2b7f      	cmp	r3, #127	; 0x7f
 800cf78:	d9f2      	bls.n	800cf60 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800cf84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800cf8e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800cf92:	2200      	movs	r2, #0
 800cf94:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800cf98:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800cfa2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800cfac:	2300      	movs	r3, #0
 800cfae:	82fb      	strh	r3, [r7, #22]
 800cfb0:	e00b      	b.n	800cfca <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	691a      	ldr	r2, [r3, #16]
 800cfb6:	8afb      	ldrh	r3, [r7, #22]
 800cfb8:	8af9      	ldrh	r1, [r7, #22]
 800cfba:	b2c9      	uxtb	r1, r1
 800cfbc:	4413      	add	r3, r2
 800cfbe:	460a      	mov	r2, r1
 800cfc0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800cfc4:	8afb      	ldrh	r3, [r7, #22]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	82fb      	strh	r3, [r7, #22]
 800cfca:	8afb      	ldrh	r3, [r7, #22]
 800cfcc:	2b43      	cmp	r3, #67	; 0x43
 800cfce:	d9f0      	bls.n	800cfb2 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	2135      	movs	r1, #53	; 0x35
 800cfd4:	68b8      	ldr	r0, [r7, #8]
 800cfd6:	f7ff fa1f 	bl	800c418 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800cfda:	79fb      	ldrb	r3, [r7, #7]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	68b8      	ldr	r0, [r7, #8]
 800cfe0:	f7ff fa54 	bl	800c48c <dhcp_option_byte>
  return ERR_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	371c      	adds	r7, #28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd90      	pop	{r4, r7, pc}
 800cfee:	bf00      	nop
 800cff0:	080198a4 	.word	0x080198a4
 800cff4:	08019be4 	.word	0x08019be4
 800cff8:	08019904 	.word	0x08019904
 800cffc:	08019c04 	.word	0x08019c04
 800d000:	08019c24 	.word	0x08019c24
 800d004:	08019c4c 	.word	0x08019c4c
 800d008:	08019c74 	.word	0x08019c74
 800d00c:	20019e3c 	.word	0x20019e3c

0800d010 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d107      	bne.n	800d02e <dhcp_delete_msg+0x1e>
 800d01e:	4b18      	ldr	r3, [pc, #96]	; (800d080 <dhcp_delete_msg+0x70>)
 800d020:	f240 726d 	movw	r2, #1901	; 0x76d
 800d024:	4917      	ldr	r1, [pc, #92]	; (800d084 <dhcp_delete_msg+0x74>)
 800d026:	4818      	ldr	r0, [pc, #96]	; (800d088 <dhcp_delete_msg+0x78>)
 800d028:	f00a fe3c 	bl	8017ca4 <iprintf>
 800d02c:	e024      	b.n	800d078 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d106      	bne.n	800d044 <dhcp_delete_msg+0x34>
 800d036:	4b12      	ldr	r3, [pc, #72]	; (800d080 <dhcp_delete_msg+0x70>)
 800d038:	f240 726e 	movw	r2, #1902	; 0x76e
 800d03c:	4913      	ldr	r1, [pc, #76]	; (800d08c <dhcp_delete_msg+0x7c>)
 800d03e:	4812      	ldr	r0, [pc, #72]	; (800d088 <dhcp_delete_msg+0x78>)
 800d040:	f00a fe30 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d106      	bne.n	800d05a <dhcp_delete_msg+0x4a>
 800d04c:	4b0c      	ldr	r3, [pc, #48]	; (800d080 <dhcp_delete_msg+0x70>)
 800d04e:	f240 726f 	movw	r2, #1903	; 0x76f
 800d052:	490f      	ldr	r1, [pc, #60]	; (800d090 <dhcp_delete_msg+0x80>)
 800d054:	480c      	ldr	r0, [pc, #48]	; (800d088 <dhcp_delete_msg+0x78>)
 800d056:	f00a fe25 	bl	8017ca4 <iprintf>
  if (dhcp->p_out != NULL) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d004      	beq.n	800d06c <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	4618      	mov	r0, r3
 800d068:	f003 fed0 	bl	8010e0c <pbuf_free>
  }
  dhcp->p_out = NULL;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	611a      	str	r2, [r3, #16]
}
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	080198a4 	.word	0x080198a4
 800d084:	08019cb4 	.word	0x08019cb4
 800d088:	08019904 	.word	0x08019904
 800d08c:	08019cd4 	.word	0x08019cd4
 800d090:	08019cfc 	.word	0x08019cfc

0800d094 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d107      	bne.n	800d0b2 <dhcp_option_trailer+0x1e>
 800d0a2:	4b24      	ldr	r3, [pc, #144]	; (800d134 <dhcp_option_trailer+0xa0>)
 800d0a4:	f240 7282 	movw	r2, #1922	; 0x782
 800d0a8:	4923      	ldr	r1, [pc, #140]	; (800d138 <dhcp_option_trailer+0xa4>)
 800d0aa:	4824      	ldr	r0, [pc, #144]	; (800d13c <dhcp_option_trailer+0xa8>)
 800d0ac:	f00a fdfa 	bl	8017ca4 <iprintf>
 800d0b0:	e03c      	b.n	800d12c <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d106      	bne.n	800d0c8 <dhcp_option_trailer+0x34>
 800d0ba:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <dhcp_option_trailer+0xa0>)
 800d0bc:	f240 7283 	movw	r2, #1923	; 0x783
 800d0c0:	491f      	ldr	r1, [pc, #124]	; (800d140 <dhcp_option_trailer+0xac>)
 800d0c2:	481e      	ldr	r0, [pc, #120]	; (800d13c <dhcp_option_trailer+0xa8>)
 800d0c4:	f00a fdee 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	8a9b      	ldrh	r3, [r3, #20]
 800d0cc:	2b43      	cmp	r3, #67	; 0x43
 800d0ce:	d906      	bls.n	800d0de <dhcp_option_trailer+0x4a>
 800d0d0:	4b18      	ldr	r3, [pc, #96]	; (800d134 <dhcp_option_trailer+0xa0>)
 800d0d2:	f240 7284 	movw	r2, #1924	; 0x784
 800d0d6:	491b      	ldr	r1, [pc, #108]	; (800d144 <dhcp_option_trailer+0xb0>)
 800d0d8:	4818      	ldr	r0, [pc, #96]	; (800d13c <dhcp_option_trailer+0xa8>)
 800d0da:	f00a fde3 	bl	8017ca4 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	691a      	ldr	r2, [r3, #16]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	8a9b      	ldrh	r3, [r3, #20]
 800d0e6:	1c59      	adds	r1, r3, #1
 800d0e8:	b288      	uxth	r0, r1
 800d0ea:	6879      	ldr	r1, [r7, #4]
 800d0ec:	8288      	strh	r0, [r1, #20]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	22ff      	movs	r2, #255	; 0xff
 800d0f2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800d0f6:	e00b      	b.n	800d110 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	691a      	ldr	r2, [r3, #16]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	8a9b      	ldrh	r3, [r3, #20]
 800d100:	1c59      	adds	r1, r3, #1
 800d102:	b288      	uxth	r0, r1
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	8288      	strh	r0, [r1, #20]
 800d108:	4413      	add	r3, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	8a9b      	ldrh	r3, [r3, #20]
 800d114:	2b43      	cmp	r3, #67	; 0x43
 800d116:	d905      	bls.n	800d124 <dhcp_option_trailer+0x90>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	8a9b      	ldrh	r3, [r3, #20]
 800d11c:	f003 0303 	and.w	r3, r3, #3
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800d128:	2b43      	cmp	r3, #67	; 0x43
 800d12a:	d9e5      	bls.n	800d0f8 <dhcp_option_trailer+0x64>
  }
}
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	080198a4 	.word	0x080198a4
 800d138:	08019d24 	.word	0x08019d24
 800d13c:	08019904 	.word	0x08019904
 800d140:	08019d48 	.word	0x08019d48
 800d144:	08019d74 	.word	0x08019d74

0800d148 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d017      	beq.n	800d186 <dhcp_supplied_address+0x3e>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d013      	beq.n	800d186 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	7a5b      	ldrb	r3, [r3, #9]
 800d168:	2b0a      	cmp	r3, #10
 800d16a:	d007      	beq.n	800d17c <dhcp_supplied_address+0x34>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	7a5b      	ldrb	r3, [r3, #9]
 800d170:	2b05      	cmp	r3, #5
 800d172:	d003      	beq.n	800d17c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d178:	2b04      	cmp	r3, #4
 800d17a:	d101      	bne.n	800d180 <dhcp_supplied_address+0x38>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e000      	b.n	800d182 <dhcp_supplied_address+0x3a>
 800d180:	2300      	movs	r3, #0
 800d182:	b2db      	uxtb	r3, r3
 800d184:	e000      	b.n	800d188 <dhcp_supplied_address+0x40>
  }
  return 0;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d19c:	4915      	ldr	r1, [pc, #84]	; (800d1f4 <etharp_free_entry+0x60>)
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	4413      	add	r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	440b      	add	r3, r1
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d013      	beq.n	800d1d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d1b0:	4910      	ldr	r1, [pc, #64]	; (800d1f4 <etharp_free_entry+0x60>)
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	4413      	add	r3, r2
 800d1ba:	00db      	lsls	r3, r3, #3
 800d1bc:	440b      	add	r3, r1
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f003 fe23 	bl	8010e0c <pbuf_free>
    arp_table[i].q = NULL;
 800d1c6:	490b      	ldr	r1, [pc, #44]	; (800d1f4 <etharp_free_entry+0x60>)
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	440b      	add	r3, r1
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d1d8:	4906      	ldr	r1, [pc, #24]	; (800d1f4 <etharp_free_entry+0x60>)
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	4413      	add	r3, r2
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	440b      	add	r3, r1
 800d1e6:	3314      	adds	r3, #20
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d1ec:	bf00      	nop
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	20019e40 	.word	0x20019e40

0800d1f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1fe:	2300      	movs	r3, #0
 800d200:	71fb      	strb	r3, [r7, #7]
 800d202:	e096      	b.n	800d332 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d204:	79fa      	ldrb	r2, [r7, #7]
 800d206:	494f      	ldr	r1, [pc, #316]	; (800d344 <etharp_tmr+0x14c>)
 800d208:	4613      	mov	r3, r2
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	4413      	add	r3, r2
 800d20e:	00db      	lsls	r3, r3, #3
 800d210:	440b      	add	r3, r1
 800d212:	3314      	adds	r3, #20
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800d218:	79bb      	ldrb	r3, [r7, #6]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 8086 	beq.w	800d32c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800d220:	79fa      	ldrb	r2, [r7, #7]
 800d222:	4948      	ldr	r1, [pc, #288]	; (800d344 <etharp_tmr+0x14c>)
 800d224:	4613      	mov	r3, r2
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	440b      	add	r3, r1
 800d22e:	3312      	adds	r3, #18
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	3301      	adds	r3, #1
 800d234:	b298      	uxth	r0, r3
 800d236:	4943      	ldr	r1, [pc, #268]	; (800d344 <etharp_tmr+0x14c>)
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	440b      	add	r3, r1
 800d242:	3312      	adds	r3, #18
 800d244:	4602      	mov	r2, r0
 800d246:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d248:	79fa      	ldrb	r2, [r7, #7]
 800d24a:	493e      	ldr	r1, [pc, #248]	; (800d344 <etharp_tmr+0x14c>)
 800d24c:	4613      	mov	r3, r2
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	4413      	add	r3, r2
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	440b      	add	r3, r1
 800d256:	3312      	adds	r3, #18
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d25e:	d215      	bcs.n	800d28c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d260:	79fa      	ldrb	r2, [r7, #7]
 800d262:	4938      	ldr	r1, [pc, #224]	; (800d344 <etharp_tmr+0x14c>)
 800d264:	4613      	mov	r3, r2
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	4413      	add	r3, r2
 800d26a:	00db      	lsls	r3, r3, #3
 800d26c:	440b      	add	r3, r1
 800d26e:	3314      	adds	r3, #20
 800d270:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d272:	2b01      	cmp	r3, #1
 800d274:	d10f      	bne.n	800d296 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d276:	79fa      	ldrb	r2, [r7, #7]
 800d278:	4932      	ldr	r1, [pc, #200]	; (800d344 <etharp_tmr+0x14c>)
 800d27a:	4613      	mov	r3, r2
 800d27c:	005b      	lsls	r3, r3, #1
 800d27e:	4413      	add	r3, r2
 800d280:	00db      	lsls	r3, r3, #3
 800d282:	440b      	add	r3, r1
 800d284:	3312      	adds	r3, #18
 800d286:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d288:	2b04      	cmp	r3, #4
 800d28a:	d904      	bls.n	800d296 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	4618      	mov	r0, r3
 800d290:	f7ff ff80 	bl	800d194 <etharp_free_entry>
 800d294:	e04a      	b.n	800d32c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d296:	79fa      	ldrb	r2, [r7, #7]
 800d298:	492a      	ldr	r1, [pc, #168]	; (800d344 <etharp_tmr+0x14c>)
 800d29a:	4613      	mov	r3, r2
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	4413      	add	r3, r2
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	440b      	add	r3, r1
 800d2a4:	3314      	adds	r3, #20
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	d10a      	bne.n	800d2c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d2ac:	79fa      	ldrb	r2, [r7, #7]
 800d2ae:	4925      	ldr	r1, [pc, #148]	; (800d344 <etharp_tmr+0x14c>)
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	4413      	add	r3, r2
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	440b      	add	r3, r1
 800d2ba:	3314      	adds	r3, #20
 800d2bc:	2204      	movs	r2, #4
 800d2be:	701a      	strb	r2, [r3, #0]
 800d2c0:	e034      	b.n	800d32c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d2c2:	79fa      	ldrb	r2, [r7, #7]
 800d2c4:	491f      	ldr	r1, [pc, #124]	; (800d344 <etharp_tmr+0x14c>)
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	4413      	add	r3, r2
 800d2cc:	00db      	lsls	r3, r3, #3
 800d2ce:	440b      	add	r3, r1
 800d2d0:	3314      	adds	r3, #20
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2b04      	cmp	r3, #4
 800d2d6:	d10a      	bne.n	800d2ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d2d8:	79fa      	ldrb	r2, [r7, #7]
 800d2da:	491a      	ldr	r1, [pc, #104]	; (800d344 <etharp_tmr+0x14c>)
 800d2dc:	4613      	mov	r3, r2
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	4413      	add	r3, r2
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	440b      	add	r3, r1
 800d2e6:	3314      	adds	r3, #20
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	e01e      	b.n	800d32c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d2ee:	79fa      	ldrb	r2, [r7, #7]
 800d2f0:	4914      	ldr	r1, [pc, #80]	; (800d344 <etharp_tmr+0x14c>)
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	4413      	add	r3, r2
 800d2f8:	00db      	lsls	r3, r3, #3
 800d2fa:	440b      	add	r3, r1
 800d2fc:	3314      	adds	r3, #20
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d113      	bne.n	800d32c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d304:	79fa      	ldrb	r2, [r7, #7]
 800d306:	490f      	ldr	r1, [pc, #60]	; (800d344 <etharp_tmr+0x14c>)
 800d308:	4613      	mov	r3, r2
 800d30a:	005b      	lsls	r3, r3, #1
 800d30c:	4413      	add	r3, r2
 800d30e:	00db      	lsls	r3, r3, #3
 800d310:	440b      	add	r3, r1
 800d312:	3308      	adds	r3, #8
 800d314:	6818      	ldr	r0, [r3, #0]
 800d316:	79fa      	ldrb	r2, [r7, #7]
 800d318:	4613      	mov	r3, r2
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	4413      	add	r3, r2
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	4a08      	ldr	r2, [pc, #32]	; (800d344 <etharp_tmr+0x14c>)
 800d322:	4413      	add	r3, r2
 800d324:	3304      	adds	r3, #4
 800d326:	4619      	mov	r1, r3
 800d328:	f000 fe3c 	bl	800dfa4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d32c:	79fb      	ldrb	r3, [r7, #7]
 800d32e:	3301      	adds	r3, #1
 800d330:	71fb      	strb	r3, [r7, #7]
 800d332:	79fb      	ldrb	r3, [r7, #7]
 800d334:	2b09      	cmp	r3, #9
 800d336:	f67f af65 	bls.w	800d204 <etharp_tmr+0xc>
      }
    }
  }
}
 800d33a:	bf00      	nop
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	20019e40 	.word	0x20019e40

0800d348 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	460b      	mov	r3, r1
 800d352:	607a      	str	r2, [r7, #4]
 800d354:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d356:	230a      	movs	r3, #10
 800d358:	77fb      	strb	r3, [r7, #31]
 800d35a:	230a      	movs	r3, #10
 800d35c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800d35e:	230a      	movs	r3, #10
 800d360:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800d366:	230a      	movs	r3, #10
 800d368:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	833b      	strh	r3, [r7, #24]
 800d36e:	2300      	movs	r3, #0
 800d370:	82fb      	strh	r3, [r7, #22]
 800d372:	2300      	movs	r3, #0
 800d374:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d376:	2300      	movs	r3, #0
 800d378:	773b      	strb	r3, [r7, #28]
 800d37a:	e093      	b.n	800d4a4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800d37c:	7f3a      	ldrb	r2, [r7, #28]
 800d37e:	4990      	ldr	r1, [pc, #576]	; (800d5c0 <etharp_find_entry+0x278>)
 800d380:	4613      	mov	r3, r2
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	440b      	add	r3, r1
 800d38a:	3314      	adds	r3, #20
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d390:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d394:	2b0a      	cmp	r3, #10
 800d396:	d105      	bne.n	800d3a4 <etharp_find_entry+0x5c>
 800d398:	7cfb      	ldrb	r3, [r7, #19]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800d39e:	7f3b      	ldrb	r3, [r7, #28]
 800d3a0:	777b      	strb	r3, [r7, #29]
 800d3a2:	e07c      	b.n	800d49e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d3a4:	7cfb      	ldrb	r3, [r7, #19]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d079      	beq.n	800d49e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d3aa:	7cfb      	ldrb	r3, [r7, #19]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d009      	beq.n	800d3c4 <etharp_find_entry+0x7c>
 800d3b0:	7cfb      	ldrb	r3, [r7, #19]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d806      	bhi.n	800d3c4 <etharp_find_entry+0x7c>
 800d3b6:	4b83      	ldr	r3, [pc, #524]	; (800d5c4 <etharp_find_entry+0x27c>)
 800d3b8:	f44f 7293 	mov.w	r2, #294	; 0x126
 800d3bc:	4982      	ldr	r1, [pc, #520]	; (800d5c8 <etharp_find_entry+0x280>)
 800d3be:	4883      	ldr	r0, [pc, #524]	; (800d5cc <etharp_find_entry+0x284>)
 800d3c0:	f00a fc70 	bl	8017ca4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00f      	beq.n	800d3ea <etharp_find_entry+0xa2>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6819      	ldr	r1, [r3, #0]
 800d3ce:	7f3a      	ldrb	r2, [r7, #28]
 800d3d0:	487b      	ldr	r0, [pc, #492]	; (800d5c0 <etharp_find_entry+0x278>)
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	4413      	add	r3, r2
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	4403      	add	r3, r0
 800d3dc:	3304      	adds	r3, #4
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4299      	cmp	r1, r3
 800d3e2:	d102      	bne.n	800d3ea <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d3e4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d3e8:	e0e5      	b.n	800d5b6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d3ea:	7cfb      	ldrb	r3, [r7, #19]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d13b      	bne.n	800d468 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d3f0:	7f3a      	ldrb	r2, [r7, #28]
 800d3f2:	4973      	ldr	r1, [pc, #460]	; (800d5c0 <etharp_find_entry+0x278>)
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	00db      	lsls	r3, r3, #3
 800d3fc:	440b      	add	r3, r1
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d018      	beq.n	800d436 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800d404:	7f3a      	ldrb	r2, [r7, #28]
 800d406:	496e      	ldr	r1, [pc, #440]	; (800d5c0 <etharp_find_entry+0x278>)
 800d408:	4613      	mov	r3, r2
 800d40a:	005b      	lsls	r3, r3, #1
 800d40c:	4413      	add	r3, r2
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	440b      	add	r3, r1
 800d412:	3312      	adds	r3, #18
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	8b3a      	ldrh	r2, [r7, #24]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d840      	bhi.n	800d49e <etharp_find_entry+0x156>
            old_queue = i;
 800d41c:	7f3b      	ldrb	r3, [r7, #28]
 800d41e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800d420:	7f3a      	ldrb	r2, [r7, #28]
 800d422:	4967      	ldr	r1, [pc, #412]	; (800d5c0 <etharp_find_entry+0x278>)
 800d424:	4613      	mov	r3, r2
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	4413      	add	r3, r2
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	440b      	add	r3, r1
 800d42e:	3312      	adds	r3, #18
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	833b      	strh	r3, [r7, #24]
 800d434:	e033      	b.n	800d49e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d436:	7f3a      	ldrb	r2, [r7, #28]
 800d438:	4961      	ldr	r1, [pc, #388]	; (800d5c0 <etharp_find_entry+0x278>)
 800d43a:	4613      	mov	r3, r2
 800d43c:	005b      	lsls	r3, r3, #1
 800d43e:	4413      	add	r3, r2
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	440b      	add	r3, r1
 800d444:	3312      	adds	r3, #18
 800d446:	881b      	ldrh	r3, [r3, #0]
 800d448:	8afa      	ldrh	r2, [r7, #22]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d827      	bhi.n	800d49e <etharp_find_entry+0x156>
            old_pending = i;
 800d44e:	7f3b      	ldrb	r3, [r7, #28]
 800d450:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800d452:	7f3a      	ldrb	r2, [r7, #28]
 800d454:	495a      	ldr	r1, [pc, #360]	; (800d5c0 <etharp_find_entry+0x278>)
 800d456:	4613      	mov	r3, r2
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	440b      	add	r3, r1
 800d460:	3312      	adds	r3, #18
 800d462:	881b      	ldrh	r3, [r3, #0]
 800d464:	82fb      	strh	r3, [r7, #22]
 800d466:	e01a      	b.n	800d49e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d468:	7cfb      	ldrb	r3, [r7, #19]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d917      	bls.n	800d49e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d46e:	7f3a      	ldrb	r2, [r7, #28]
 800d470:	4953      	ldr	r1, [pc, #332]	; (800d5c0 <etharp_find_entry+0x278>)
 800d472:	4613      	mov	r3, r2
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	4413      	add	r3, r2
 800d478:	00db      	lsls	r3, r3, #3
 800d47a:	440b      	add	r3, r1
 800d47c:	3312      	adds	r3, #18
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	8aba      	ldrh	r2, [r7, #20]
 800d482:	429a      	cmp	r2, r3
 800d484:	d80b      	bhi.n	800d49e <etharp_find_entry+0x156>
            old_stable = i;
 800d486:	7f3b      	ldrb	r3, [r7, #28]
 800d488:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800d48a:	7f3a      	ldrb	r2, [r7, #28]
 800d48c:	494c      	ldr	r1, [pc, #304]	; (800d5c0 <etharp_find_entry+0x278>)
 800d48e:	4613      	mov	r3, r2
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	4413      	add	r3, r2
 800d494:	00db      	lsls	r3, r3, #3
 800d496:	440b      	add	r3, r1
 800d498:	3312      	adds	r3, #18
 800d49a:	881b      	ldrh	r3, [r3, #0]
 800d49c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d49e:	7f3b      	ldrb	r3, [r7, #28]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	773b      	strb	r3, [r7, #28]
 800d4a4:	7f3b      	ldrb	r3, [r7, #28]
 800d4a6:	2b09      	cmp	r3, #9
 800d4a8:	f67f af68 	bls.w	800d37c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d4ac:	7afb      	ldrb	r3, [r7, #11]
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d108      	bne.n	800d4c8 <etharp_find_entry+0x180>
 800d4b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d4ba:	2b0a      	cmp	r3, #10
 800d4bc:	d107      	bne.n	800d4ce <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d4be:	7afb      	ldrb	r3, [r7, #11]
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d102      	bne.n	800d4ce <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800d4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4cc:	e073      	b.n	800d5b6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d4ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d4d2:	2b09      	cmp	r3, #9
 800d4d4:	dc02      	bgt.n	800d4dc <etharp_find_entry+0x194>
    i = empty;
 800d4d6:	7f7b      	ldrb	r3, [r7, #29]
 800d4d8:	773b      	strb	r3, [r7, #28]
 800d4da:	e036      	b.n	800d54a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d4dc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d4e0:	2b09      	cmp	r3, #9
 800d4e2:	dc13      	bgt.n	800d50c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800d4e4:	7fbb      	ldrb	r3, [r7, #30]
 800d4e6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d4e8:	7f3a      	ldrb	r2, [r7, #28]
 800d4ea:	4935      	ldr	r1, [pc, #212]	; (800d5c0 <etharp_find_entry+0x278>)
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	440b      	add	r3, r1
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d018      	beq.n	800d52e <etharp_find_entry+0x1e6>
 800d4fc:	4b31      	ldr	r3, [pc, #196]	; (800d5c4 <etharp_find_entry+0x27c>)
 800d4fe:	f240 126f 	movw	r2, #367	; 0x16f
 800d502:	4933      	ldr	r1, [pc, #204]	; (800d5d0 <etharp_find_entry+0x288>)
 800d504:	4831      	ldr	r0, [pc, #196]	; (800d5cc <etharp_find_entry+0x284>)
 800d506:	f00a fbcd 	bl	8017ca4 <iprintf>
 800d50a:	e010      	b.n	800d52e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d50c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d510:	2b09      	cmp	r3, #9
 800d512:	dc02      	bgt.n	800d51a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800d514:	7ffb      	ldrb	r3, [r7, #31]
 800d516:	773b      	strb	r3, [r7, #28]
 800d518:	e009      	b.n	800d52e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d51a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d51e:	2b09      	cmp	r3, #9
 800d520:	dc02      	bgt.n	800d528 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d522:	7efb      	ldrb	r3, [r7, #27]
 800d524:	773b      	strb	r3, [r7, #28]
 800d526:	e002      	b.n	800d52e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800d528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d52c:	e043      	b.n	800d5b6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d52e:	7f3b      	ldrb	r3, [r7, #28]
 800d530:	2b09      	cmp	r3, #9
 800d532:	d906      	bls.n	800d542 <etharp_find_entry+0x1fa>
 800d534:	4b23      	ldr	r3, [pc, #140]	; (800d5c4 <etharp_find_entry+0x27c>)
 800d536:	f240 1281 	movw	r2, #385	; 0x181
 800d53a:	4926      	ldr	r1, [pc, #152]	; (800d5d4 <etharp_find_entry+0x28c>)
 800d53c:	4823      	ldr	r0, [pc, #140]	; (800d5cc <etharp_find_entry+0x284>)
 800d53e:	f00a fbb1 	bl	8017ca4 <iprintf>
    etharp_free_entry(i);
 800d542:	7f3b      	ldrb	r3, [r7, #28]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff fe25 	bl	800d194 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d54a:	7f3b      	ldrb	r3, [r7, #28]
 800d54c:	2b09      	cmp	r3, #9
 800d54e:	d906      	bls.n	800d55e <etharp_find_entry+0x216>
 800d550:	4b1c      	ldr	r3, [pc, #112]	; (800d5c4 <etharp_find_entry+0x27c>)
 800d552:	f240 1285 	movw	r2, #389	; 0x185
 800d556:	491f      	ldr	r1, [pc, #124]	; (800d5d4 <etharp_find_entry+0x28c>)
 800d558:	481c      	ldr	r0, [pc, #112]	; (800d5cc <etharp_find_entry+0x284>)
 800d55a:	f00a fba3 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d55e:	7f3a      	ldrb	r2, [r7, #28]
 800d560:	4917      	ldr	r1, [pc, #92]	; (800d5c0 <etharp_find_entry+0x278>)
 800d562:	4613      	mov	r3, r2
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	4413      	add	r3, r2
 800d568:	00db      	lsls	r3, r3, #3
 800d56a:	440b      	add	r3, r1
 800d56c:	3314      	adds	r3, #20
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <etharp_find_entry+0x23a>
 800d574:	4b13      	ldr	r3, [pc, #76]	; (800d5c4 <etharp_find_entry+0x27c>)
 800d576:	f240 1287 	movw	r2, #391	; 0x187
 800d57a:	4917      	ldr	r1, [pc, #92]	; (800d5d8 <etharp_find_entry+0x290>)
 800d57c:	4813      	ldr	r0, [pc, #76]	; (800d5cc <etharp_find_entry+0x284>)
 800d57e:	f00a fb91 	bl	8017ca4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00a      	beq.n	800d59e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d588:	7f3a      	ldrb	r2, [r7, #28]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6819      	ldr	r1, [r3, #0]
 800d58e:	480c      	ldr	r0, [pc, #48]	; (800d5c0 <etharp_find_entry+0x278>)
 800d590:	4613      	mov	r3, r2
 800d592:	005b      	lsls	r3, r3, #1
 800d594:	4413      	add	r3, r2
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	4403      	add	r3, r0
 800d59a:	3304      	adds	r3, #4
 800d59c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d59e:	7f3a      	ldrb	r2, [r7, #28]
 800d5a0:	4907      	ldr	r1, [pc, #28]	; (800d5c0 <etharp_find_entry+0x278>)
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	4413      	add	r3, r2
 800d5a8:	00db      	lsls	r3, r3, #3
 800d5aa:	440b      	add	r3, r1
 800d5ac:	3312      	adds	r3, #18
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800d5b2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3720      	adds	r7, #32
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	20019e40 	.word	0x20019e40
 800d5c4:	08019db4 	.word	0x08019db4
 800d5c8:	08019dec 	.word	0x08019dec
 800d5cc:	08019e2c 	.word	0x08019e2c
 800d5d0:	08019e54 	.word	0x08019e54
 800d5d4:	08019e6c 	.word	0x08019e6c
 800d5d8:	08019e80 	.word	0x08019e80

0800d5dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af02      	add	r7, sp, #8
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5f0:	2b06      	cmp	r3, #6
 800d5f2:	d006      	beq.n	800d602 <etharp_update_arp_entry+0x26>
 800d5f4:	4b48      	ldr	r3, [pc, #288]	; (800d718 <etharp_update_arp_entry+0x13c>)
 800d5f6:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d5fa:	4948      	ldr	r1, [pc, #288]	; (800d71c <etharp_update_arp_entry+0x140>)
 800d5fc:	4848      	ldr	r0, [pc, #288]	; (800d720 <etharp_update_arp_entry+0x144>)
 800d5fe:	f00a fb51 	bl	8017ca4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d012      	beq.n	800d62e <etharp_update_arp_entry+0x52>
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00e      	beq.n	800d62e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	68f9      	ldr	r1, [r7, #12]
 800d616:	4618      	mov	r0, r3
 800d618:	f001 fc71 	bl	800eefe <ip4_addr_isbroadcast_u32>
 800d61c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d105      	bne.n	800d62e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d62a:	2be0      	cmp	r3, #224	; 0xe0
 800d62c:	d102      	bne.n	800d634 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d62e:	f06f 030f 	mvn.w	r3, #15
 800d632:	e06c      	b.n	800d70e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d634:	78fb      	ldrb	r3, [r7, #3]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	4619      	mov	r1, r3
 800d63a:	68b8      	ldr	r0, [r7, #8]
 800d63c:	f7ff fe84 	bl	800d348 <etharp_find_entry>
 800d640:	4603      	mov	r3, r0
 800d642:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	da02      	bge.n	800d652 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d64c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d650:	e05d      	b.n	800d70e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d652:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d656:	4933      	ldr	r1, [pc, #204]	; (800d724 <etharp_update_arp_entry+0x148>)
 800d658:	4613      	mov	r3, r2
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	4413      	add	r3, r2
 800d65e:	00db      	lsls	r3, r3, #3
 800d660:	440b      	add	r3, r1
 800d662:	3314      	adds	r3, #20
 800d664:	2202      	movs	r2, #2
 800d666:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d668:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d66c:	492d      	ldr	r1, [pc, #180]	; (800d724 <etharp_update_arp_entry+0x148>)
 800d66e:	4613      	mov	r3, r2
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	4413      	add	r3, r2
 800d674:	00db      	lsls	r3, r3, #3
 800d676:	440b      	add	r3, r1
 800d678:	3308      	adds	r3, #8
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d67e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d682:	4613      	mov	r3, r2
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	4413      	add	r3, r2
 800d688:	00db      	lsls	r3, r3, #3
 800d68a:	3308      	adds	r3, #8
 800d68c:	4a25      	ldr	r2, [pc, #148]	; (800d724 <etharp_update_arp_entry+0x148>)
 800d68e:	4413      	add	r3, r2
 800d690:	3304      	adds	r3, #4
 800d692:	2206      	movs	r2, #6
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	4618      	mov	r0, r3
 800d698:	f00a faf1 	bl	8017c7e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d69c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d6a0:	4920      	ldr	r1, [pc, #128]	; (800d724 <etharp_update_arp_entry+0x148>)
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	4413      	add	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	440b      	add	r3, r1
 800d6ac:	3312      	adds	r3, #18
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d6b2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d6b6:	491b      	ldr	r1, [pc, #108]	; (800d724 <etharp_update_arp_entry+0x148>)
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	440b      	add	r3, r1
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d021      	beq.n	800d70c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d6c8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d6cc:	4915      	ldr	r1, [pc, #84]	; (800d724 <etharp_update_arp_entry+0x148>)
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	00db      	lsls	r3, r3, #3
 800d6d6:	440b      	add	r3, r1
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d6dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d6e0:	4910      	ldr	r1, [pc, #64]	; (800d724 <etharp_update_arp_entry+0x148>)
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	005b      	lsls	r3, r3, #1
 800d6e6:	4413      	add	r3, r2
 800d6e8:	00db      	lsls	r3, r3, #3
 800d6ea:	440b      	add	r3, r1
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f103 0231 	add.w	r2, r3, #49	; 0x31
 800d6f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6939      	ldr	r1, [r7, #16]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f00a f81f 	bl	8017744 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d706:	6938      	ldr	r0, [r7, #16]
 800d708:	f003 fb80 	bl	8010e0c <pbuf_free>
  }
  return ERR_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	08019db4 	.word	0x08019db4
 800d71c:	08019eac 	.word	0x08019eac
 800d720:	08019e2c 	.word	0x08019e2c
 800d724:	20019e40 	.word	0x20019e40

0800d728 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d730:	2300      	movs	r3, #0
 800d732:	73fb      	strb	r3, [r7, #15]
 800d734:	e01f      	b.n	800d776 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800d736:	7bfa      	ldrb	r2, [r7, #15]
 800d738:	4912      	ldr	r1, [pc, #72]	; (800d784 <etharp_cleanup_netif+0x5c>)
 800d73a:	4613      	mov	r3, r2
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	4413      	add	r3, r2
 800d740:	00db      	lsls	r3, r3, #3
 800d742:	440b      	add	r3, r1
 800d744:	3314      	adds	r3, #20
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d74a:	7bbb      	ldrb	r3, [r7, #14]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00f      	beq.n	800d770 <etharp_cleanup_netif+0x48>
 800d750:	7bfa      	ldrb	r2, [r7, #15]
 800d752:	490c      	ldr	r1, [pc, #48]	; (800d784 <etharp_cleanup_netif+0x5c>)
 800d754:	4613      	mov	r3, r2
 800d756:	005b      	lsls	r3, r3, #1
 800d758:	4413      	add	r3, r2
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	440b      	add	r3, r1
 800d75e:	3308      	adds	r3, #8
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	429a      	cmp	r2, r3
 800d766:	d103      	bne.n	800d770 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff fd12 	bl	800d194 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d770:	7bfb      	ldrb	r3, [r7, #15]
 800d772:	3301      	adds	r3, #1
 800d774:	73fb      	strb	r3, [r7, #15]
 800d776:	7bfb      	ldrb	r3, [r7, #15]
 800d778:	2b09      	cmp	r3, #9
 800d77a:	d9dc      	bls.n	800d736 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d77c:	bf00      	nop
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	20019e40 	.word	0x20019e40

0800d788 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d788:	b5b0      	push	{r4, r5, r7, lr}
 800d78a:	b08a      	sub	sp, #40	; 0x28
 800d78c:	af04      	add	r7, sp, #16
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d107      	bne.n	800d7a8 <etharp_input+0x20>
 800d798:	4b3f      	ldr	r3, [pc, #252]	; (800d898 <etharp_input+0x110>)
 800d79a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800d79e:	493f      	ldr	r1, [pc, #252]	; (800d89c <etharp_input+0x114>)
 800d7a0:	483f      	ldr	r0, [pc, #252]	; (800d8a0 <etharp_input+0x118>)
 800d7a2:	f00a fa7f 	bl	8017ca4 <iprintf>
 800d7a6:	e074      	b.n	800d892 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b8:	d10c      	bne.n	800d7d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d7be:	2b06      	cmp	r3, #6
 800d7c0:	d108      	bne.n	800d7d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d7c6:	2b04      	cmp	r3, #4
 800d7c8:	d104      	bne.n	800d7d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	885b      	ldrh	r3, [r3, #2]
 800d7ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d7d0:	2b08      	cmp	r3, #8
 800d7d2:	d003      	beq.n	800d7dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f003 fb19 	bl	8010e0c <pbuf_free>
    return;
 800d7da:	e05a      	b.n	800d892 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	330e      	adds	r3, #14
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	3318      	adds	r3, #24
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d102      	bne.n	800d7fc <etharp_input+0x74>
    for_us = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	75fb      	strb	r3, [r7, #23]
 800d7fa:	e009      	b.n	800d810 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	3304      	adds	r3, #4
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	429a      	cmp	r2, r3
 800d806:	bf0c      	ite	eq
 800d808:	2301      	moveq	r3, #1
 800d80a:	2300      	movne	r3, #0
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f103 0208 	add.w	r2, r3, #8
 800d816:	7dfb      	ldrb	r3, [r7, #23]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <etharp_input+0x98>
 800d81c:	2301      	movs	r3, #1
 800d81e:	e000      	b.n	800d822 <etharp_input+0x9a>
 800d820:	2302      	movs	r3, #2
 800d822:	f107 010c 	add.w	r1, r7, #12
 800d826:	6838      	ldr	r0, [r7, #0]
 800d828:	f7ff fed8 	bl	800d5dc <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	88db      	ldrh	r3, [r3, #6]
 800d830:	b29b      	uxth	r3, r3
 800d832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d836:	d003      	beq.n	800d840 <etharp_input+0xb8>
 800d838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d83c:	d01e      	beq.n	800d87c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800d83e:	e025      	b.n	800d88c <etharp_input+0x104>
    if (for_us) {
 800d840:	7dfb      	ldrb	r3, [r7, #23]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d021      	beq.n	800d88a <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	f103 0031 	add.w	r0, r3, #49	; 0x31
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	f103 0531 	add.w	r5, r3, #49	; 0x31
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800d85c:	693a      	ldr	r2, [r7, #16]
 800d85e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800d860:	2102      	movs	r1, #2
 800d862:	9103      	str	r1, [sp, #12]
 800d864:	f107 010c 	add.w	r1, r7, #12
 800d868:	9102      	str	r1, [sp, #8]
 800d86a:	9201      	str	r2, [sp, #4]
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	462b      	mov	r3, r5
 800d870:	4622      	mov	r2, r4
 800d872:	4601      	mov	r1, r0
 800d874:	6838      	ldr	r0, [r7, #0]
 800d876:	f000 fae7 	bl	800de48 <etharp_raw>
    break;
 800d87a:	e006      	b.n	800d88a <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800d87c:	f107 030c 	add.w	r3, r7, #12
 800d880:	4619      	mov	r1, r3
 800d882:	6838      	ldr	r0, [r7, #0]
 800d884:	f7fe f952 	bl	800bb2c <dhcp_arp_reply>
    break;
 800d888:	e000      	b.n	800d88c <etharp_input+0x104>
    break;
 800d88a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f003 fabd 	bl	8010e0c <pbuf_free>
}
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bdb0      	pop	{r4, r5, r7, pc}
 800d898:	08019db4 	.word	0x08019db4
 800d89c:	08019f04 	.word	0x08019f04
 800d8a0:	08019e2c 	.word	0x08019e2c

0800d8a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d8b2:	79fa      	ldrb	r2, [r7, #7]
 800d8b4:	4944      	ldr	r1, [pc, #272]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	4413      	add	r3, r2
 800d8bc:	00db      	lsls	r3, r3, #3
 800d8be:	440b      	add	r3, r1
 800d8c0:	3314      	adds	r3, #20
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d806      	bhi.n	800d8d6 <etharp_output_to_arp_index+0x32>
 800d8c8:	4b40      	ldr	r3, [pc, #256]	; (800d9cc <etharp_output_to_arp_index+0x128>)
 800d8ca:	f240 22ed 	movw	r2, #749	; 0x2ed
 800d8ce:	4940      	ldr	r1, [pc, #256]	; (800d9d0 <etharp_output_to_arp_index+0x12c>)
 800d8d0:	4840      	ldr	r0, [pc, #256]	; (800d9d4 <etharp_output_to_arp_index+0x130>)
 800d8d2:	f00a f9e7 	bl	8017ca4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d8d6:	79fa      	ldrb	r2, [r7, #7]
 800d8d8:	493b      	ldr	r1, [pc, #236]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d8da:	4613      	mov	r3, r2
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	4413      	add	r3, r2
 800d8e0:	00db      	lsls	r3, r3, #3
 800d8e2:	440b      	add	r3, r1
 800d8e4:	3314      	adds	r3, #20
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d153      	bne.n	800d994 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d8ec:	79fa      	ldrb	r2, [r7, #7]
 800d8ee:	4936      	ldr	r1, [pc, #216]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	4413      	add	r3, r2
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	440b      	add	r3, r1
 800d8fa:	3312      	adds	r3, #18
 800d8fc:	881b      	ldrh	r3, [r3, #0]
 800d8fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d902:	d919      	bls.n	800d938 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d904:	79fa      	ldrb	r2, [r7, #7]
 800d906:	4613      	mov	r3, r2
 800d908:	005b      	lsls	r3, r3, #1
 800d90a:	4413      	add	r3, r2
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	4a2e      	ldr	r2, [pc, #184]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d910:	4413      	add	r3, r2
 800d912:	3304      	adds	r3, #4
 800d914:	4619      	mov	r1, r3
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f000 fb44 	bl	800dfa4 <etharp_request>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d138      	bne.n	800d994 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d922:	79fa      	ldrb	r2, [r7, #7]
 800d924:	4928      	ldr	r1, [pc, #160]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d926:	4613      	mov	r3, r2
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	4413      	add	r3, r2
 800d92c:	00db      	lsls	r3, r3, #3
 800d92e:	440b      	add	r3, r1
 800d930:	3314      	adds	r3, #20
 800d932:	2203      	movs	r2, #3
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	e02d      	b.n	800d994 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d938:	79fa      	ldrb	r2, [r7, #7]
 800d93a:	4923      	ldr	r1, [pc, #140]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d93c:	4613      	mov	r3, r2
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	4413      	add	r3, r2
 800d942:	00db      	lsls	r3, r3, #3
 800d944:	440b      	add	r3, r1
 800d946:	3312      	adds	r3, #18
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d94e:	d321      	bcc.n	800d994 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d950:	79fa      	ldrb	r2, [r7, #7]
 800d952:	4613      	mov	r3, r2
 800d954:	005b      	lsls	r3, r3, #1
 800d956:	4413      	add	r3, r2
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	4a1b      	ldr	r2, [pc, #108]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d95c:	4413      	add	r3, r2
 800d95e:	1d19      	adds	r1, r3, #4
 800d960:	79fa      	ldrb	r2, [r7, #7]
 800d962:	4613      	mov	r3, r2
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	4413      	add	r3, r2
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	3308      	adds	r3, #8
 800d96c:	4a16      	ldr	r2, [pc, #88]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d96e:	4413      	add	r3, r2
 800d970:	3304      	adds	r3, #4
 800d972:	461a      	mov	r2, r3
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f000 faf3 	bl	800df60 <etharp_request_dst>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d109      	bne.n	800d994 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d980:	79fa      	ldrb	r2, [r7, #7]
 800d982:	4911      	ldr	r1, [pc, #68]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d984:	4613      	mov	r3, r2
 800d986:	005b      	lsls	r3, r3, #1
 800d988:	4413      	add	r3, r2
 800d98a:	00db      	lsls	r3, r3, #3
 800d98c:	440b      	add	r3, r1
 800d98e:	3314      	adds	r3, #20
 800d990:	2203      	movs	r2, #3
 800d992:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f103 0131 	add.w	r1, r3, #49	; 0x31
 800d99a:	79fa      	ldrb	r2, [r7, #7]
 800d99c:	4613      	mov	r3, r2
 800d99e:	005b      	lsls	r3, r3, #1
 800d9a0:	4413      	add	r3, r2
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	4a08      	ldr	r2, [pc, #32]	; (800d9c8 <etharp_output_to_arp_index+0x124>)
 800d9a8:	4413      	add	r3, r2
 800d9aa:	1d1a      	adds	r2, r3, #4
 800d9ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	460a      	mov	r2, r1
 800d9b6:	68b9      	ldr	r1, [r7, #8]
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f009 fec3 	bl	8017744 <ethernet_output>
 800d9be:	4603      	mov	r3, r0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	20019e40 	.word	0x20019e40
 800d9cc:	08019db4 	.word	0x08019db4
 800d9d0:	08019f24 	.word	0x08019f24
 800d9d4:	08019e2c 	.word	0x08019e2c

0800d9d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08a      	sub	sp, #40	; 0x28
 800d9dc:	af02      	add	r7, sp, #8
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d106      	bne.n	800d9fc <etharp_output+0x24>
 800d9ee:	4b69      	ldr	r3, [pc, #420]	; (800db94 <etharp_output+0x1bc>)
 800d9f0:	f240 321b 	movw	r2, #795	; 0x31b
 800d9f4:	4968      	ldr	r1, [pc, #416]	; (800db98 <etharp_output+0x1c0>)
 800d9f6:	4869      	ldr	r0, [pc, #420]	; (800db9c <etharp_output+0x1c4>)
 800d9f8:	f00a f954 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <etharp_output+0x38>
 800da02:	4b64      	ldr	r3, [pc, #400]	; (800db94 <etharp_output+0x1bc>)
 800da04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800da08:	4965      	ldr	r1, [pc, #404]	; (800dba0 <etharp_output+0x1c8>)
 800da0a:	4864      	ldr	r0, [pc, #400]	; (800db9c <etharp_output+0x1c4>)
 800da0c:	f00a f94a 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d106      	bne.n	800da24 <etharp_output+0x4c>
 800da16:	4b5f      	ldr	r3, [pc, #380]	; (800db94 <etharp_output+0x1bc>)
 800da18:	f240 321d 	movw	r2, #797	; 0x31d
 800da1c:	4961      	ldr	r1, [pc, #388]	; (800dba4 <etharp_output+0x1cc>)
 800da1e:	485f      	ldr	r0, [pc, #380]	; (800db9c <etharp_output+0x1c4>)
 800da20:	f00a f940 	bl	8017ca4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68f9      	ldr	r1, [r7, #12]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f001 fa67 	bl	800eefe <ip4_addr_isbroadcast_u32>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d002      	beq.n	800da3c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800da36:	4b5c      	ldr	r3, [pc, #368]	; (800dba8 <etharp_output+0x1d0>)
 800da38:	61fb      	str	r3, [r7, #28]
 800da3a:	e09b      	b.n	800db74 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da44:	2be0      	cmp	r3, #224	; 0xe0
 800da46:	d118      	bne.n	800da7a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800da48:	2301      	movs	r3, #1
 800da4a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800da4c:	2300      	movs	r3, #0
 800da4e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800da50:	235e      	movs	r3, #94	; 0x5e
 800da52:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3301      	adds	r3, #1
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3302      	adds	r3, #2
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3303      	adds	r3, #3
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800da72:	f107 0310 	add.w	r3, r7, #16
 800da76:	61fb      	str	r3, [r7, #28]
 800da78:	e07c      	b.n	800db74 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3304      	adds	r3, #4
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	405a      	eors	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	3308      	adds	r3, #8
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4013      	ands	r3, r2
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d012      	beq.n	800dab8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800da98:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d00b      	beq.n	800dab8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	330c      	adds	r3, #12
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d003      	beq.n	800dab2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	330c      	adds	r3, #12
 800daae:	61bb      	str	r3, [r7, #24]
 800dab0:	e002      	b.n	800dab8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dab2:	f06f 0303 	mvn.w	r3, #3
 800dab6:	e069      	b.n	800db8c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dab8:	4b3c      	ldr	r3, [pc, #240]	; (800dbac <etharp_output+0x1d4>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	4619      	mov	r1, r3
 800dabe:	4a3c      	ldr	r2, [pc, #240]	; (800dbb0 <etharp_output+0x1d8>)
 800dac0:	460b      	mov	r3, r1
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	440b      	add	r3, r1
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	4413      	add	r3, r2
 800daca:	3314      	adds	r3, #20
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d917      	bls.n	800db02 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	4b35      	ldr	r3, [pc, #212]	; (800dbac <etharp_output+0x1d4>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	4618      	mov	r0, r3
 800dadc:	4934      	ldr	r1, [pc, #208]	; (800dbb0 <etharp_output+0x1d8>)
 800dade:	4603      	mov	r3, r0
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	4403      	add	r3, r0
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	440b      	add	r3, r1
 800dae8:	3304      	adds	r3, #4
 800daea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800daec:	429a      	cmp	r2, r3
 800daee:	d108      	bne.n	800db02 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800daf0:	4b2e      	ldr	r3, [pc, #184]	; (800dbac <etharp_output+0x1d4>)
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	461a      	mov	r2, r3
 800daf6:	68b9      	ldr	r1, [r7, #8]
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f7ff fed3 	bl	800d8a4 <etharp_output_to_arp_index>
 800dafe:	4603      	mov	r3, r0
 800db00:	e044      	b.n	800db8c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800db02:	2300      	movs	r3, #0
 800db04:	75fb      	strb	r3, [r7, #23]
 800db06:	e02a      	b.n	800db5e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800db08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800db0c:	4928      	ldr	r1, [pc, #160]	; (800dbb0 <etharp_output+0x1d8>)
 800db0e:	4613      	mov	r3, r2
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	4413      	add	r3, r2
 800db14:	00db      	lsls	r3, r3, #3
 800db16:	440b      	add	r3, r1
 800db18:	3314      	adds	r3, #20
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d918      	bls.n	800db52 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	6819      	ldr	r1, [r3, #0]
 800db24:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800db28:	4821      	ldr	r0, [pc, #132]	; (800dbb0 <etharp_output+0x1d8>)
 800db2a:	4613      	mov	r3, r2
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	4413      	add	r3, r2
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	4403      	add	r3, r0
 800db34:	3304      	adds	r3, #4
 800db36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800db38:	4299      	cmp	r1, r3
 800db3a:	d10a      	bne.n	800db52 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800db3c:	7dfa      	ldrb	r2, [r7, #23]
 800db3e:	4b1b      	ldr	r3, [pc, #108]	; (800dbac <etharp_output+0x1d4>)
 800db40:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	461a      	mov	r2, r3
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f7ff feab 	bl	800d8a4 <etharp_output_to_arp_index>
 800db4e:	4603      	mov	r3, r0
 800db50:	e01c      	b.n	800db8c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800db52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	3301      	adds	r3, #1
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	75fb      	strb	r3, [r7, #23]
 800db5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db62:	2b09      	cmp	r3, #9
 800db64:	ddd0      	ble.n	800db08 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	69b9      	ldr	r1, [r7, #24]
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f000 f822 	bl	800dbb4 <etharp_query>
 800db70:	4603      	mov	r3, r0
 800db72:	e00b      	b.n	800db8c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f103 0231 	add.w	r2, r3, #49	; 0x31
 800db7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	68b9      	ldr	r1, [r7, #8]
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f009 fddd 	bl	8017744 <ethernet_output>
 800db8a:	4603      	mov	r3, r0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3720      	adds	r7, #32
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	08019db4 	.word	0x08019db4
 800db98:	08019f04 	.word	0x08019f04
 800db9c:	08019e2c 	.word	0x08019e2c
 800dba0:	08019f54 	.word	0x08019f54
 800dba4:	08019ef4 	.word	0x08019ef4
 800dba8:	0801bfec 	.word	0x0801bfec
 800dbac:	20019f30 	.word	0x20019f30
 800dbb0:	20019e40 	.word	0x20019e40

0800dbb4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08c      	sub	sp, #48	; 0x30
 800dbb8:	af02      	add	r7, sp, #8
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3331      	adds	r3, #49	; 0x31
 800dbc4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800dbc6:	23ff      	movs	r3, #255	; 0xff
 800dbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68f9      	ldr	r1, [r7, #12]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f001 f991 	bl	800eefe <ip4_addr_isbroadcast_u32>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10c      	bne.n	800dbfc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dbea:	2be0      	cmp	r3, #224	; 0xe0
 800dbec:	d006      	beq.n	800dbfc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d003      	beq.n	800dbfc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dbfc:	f06f 030f 	mvn.w	r3, #15
 800dc00:	e10f      	b.n	800de22 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	2101      	movs	r1, #1
 800dc06:	68b8      	ldr	r0, [r7, #8]
 800dc08:	f7ff fb9e 	bl	800d348 <etharp_find_entry>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800dc10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	da02      	bge.n	800dc1e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800dc18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc1c:	e101      	b.n	800de22 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dc1e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dc22:	4982      	ldr	r1, [pc, #520]	; (800de2c <etharp_query+0x278>)
 800dc24:	4613      	mov	r3, r2
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	4413      	add	r3, r2
 800dc2a:	00db      	lsls	r3, r3, #3
 800dc2c:	440b      	add	r3, r1
 800dc2e:	3314      	adds	r3, #20
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d117      	bne.n	800dc66 <etharp_query+0xb2>
    is_new_entry = 1;
 800dc36:	2301      	movs	r3, #1
 800dc38:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dc3a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dc3e:	497b      	ldr	r1, [pc, #492]	; (800de2c <etharp_query+0x278>)
 800dc40:	4613      	mov	r3, r2
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	4413      	add	r3, r2
 800dc46:	00db      	lsls	r3, r3, #3
 800dc48:	440b      	add	r3, r1
 800dc4a:	3314      	adds	r3, #20
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dc50:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dc54:	4975      	ldr	r1, [pc, #468]	; (800de2c <etharp_query+0x278>)
 800dc56:	4613      	mov	r3, r2
 800dc58:	005b      	lsls	r3, r3, #1
 800dc5a:	4413      	add	r3, r2
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	440b      	add	r3, r1
 800dc60:	3308      	adds	r3, #8
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dc66:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dc6a:	4970      	ldr	r1, [pc, #448]	; (800de2c <etharp_query+0x278>)
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	005b      	lsls	r3, r3, #1
 800dc70:	4413      	add	r3, r2
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	440b      	add	r3, r1
 800dc76:	3314      	adds	r3, #20
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d012      	beq.n	800dca4 <etharp_query+0xf0>
 800dc7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dc82:	496a      	ldr	r1, [pc, #424]	; (800de2c <etharp_query+0x278>)
 800dc84:	4613      	mov	r3, r2
 800dc86:	005b      	lsls	r3, r3, #1
 800dc88:	4413      	add	r3, r2
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	440b      	add	r3, r1
 800dc8e:	3314      	adds	r3, #20
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d806      	bhi.n	800dca4 <etharp_query+0xf0>
 800dc96:	4b66      	ldr	r3, [pc, #408]	; (800de30 <etharp_query+0x27c>)
 800dc98:	f240 32c9 	movw	r2, #969	; 0x3c9
 800dc9c:	4965      	ldr	r1, [pc, #404]	; (800de34 <etharp_query+0x280>)
 800dc9e:	4866      	ldr	r0, [pc, #408]	; (800de38 <etharp_query+0x284>)
 800dca0:	f00a f800 	bl	8017ca4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dca4:	6a3b      	ldr	r3, [r7, #32]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d102      	bne.n	800dcb0 <etharp_query+0xfc>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10c      	bne.n	800dcca <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dcb0:	68b9      	ldr	r1, [r7, #8]
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f000 f976 	bl	800dfa4 <etharp_request>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d102      	bne.n	800dcca <etharp_query+0x116>
      return result;
 800dcc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dcc8:	e0ab      	b.n	800de22 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d106      	bne.n	800dcde <etharp_query+0x12a>
 800dcd0:	4b57      	ldr	r3, [pc, #348]	; (800de30 <etharp_query+0x27c>)
 800dcd2:	f240 32db 	movw	r2, #987	; 0x3db
 800dcd6:	4959      	ldr	r1, [pc, #356]	; (800de3c <etharp_query+0x288>)
 800dcd8:	4857      	ldr	r0, [pc, #348]	; (800de38 <etharp_query+0x284>)
 800dcda:	f009 ffe3 	bl	8017ca4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dcde:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dce2:	4952      	ldr	r1, [pc, #328]	; (800de2c <etharp_query+0x278>)
 800dce4:	4613      	mov	r3, r2
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	4413      	add	r3, r2
 800dcea:	00db      	lsls	r3, r3, #3
 800dcec:	440b      	add	r3, r1
 800dcee:	3314      	adds	r3, #20
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d919      	bls.n	800dd2a <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800dcf6:	7cfa      	ldrb	r2, [r7, #19]
 800dcf8:	4b51      	ldr	r3, [pc, #324]	; (800de40 <etharp_query+0x28c>)
 800dcfa:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dcfc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dd00:	4613      	mov	r3, r2
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	4413      	add	r3, r2
 800dd06:	00db      	lsls	r3, r3, #3
 800dd08:	3308      	adds	r3, #8
 800dd0a:	4a48      	ldr	r2, [pc, #288]	; (800de2c <etharp_query+0x278>)
 800dd0c:	4413      	add	r3, r2
 800dd0e:	1d1a      	adds	r2, r3, #4
 800dd10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	4613      	mov	r3, r2
 800dd18:	697a      	ldr	r2, [r7, #20]
 800dd1a:	6879      	ldr	r1, [r7, #4]
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f009 fd11 	bl	8017744 <ethernet_output>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd28:	e079      	b.n	800de1e <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dd2a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dd2e:	493f      	ldr	r1, [pc, #252]	; (800de2c <etharp_query+0x278>)
 800dd30:	4613      	mov	r3, r2
 800dd32:	005b      	lsls	r3, r3, #1
 800dd34:	4413      	add	r3, r2
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	440b      	add	r3, r1
 800dd3a:	3314      	adds	r3, #20
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d16d      	bne.n	800de1e <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dd4a:	e01a      	b.n	800dd82 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	895a      	ldrh	r2, [r3, #10]
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	891b      	ldrh	r3, [r3, #8]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d10a      	bne.n	800dd6e <etharp_query+0x1ba>
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d006      	beq.n	800dd6e <etharp_query+0x1ba>
 800dd60:	4b33      	ldr	r3, [pc, #204]	; (800de30 <etharp_query+0x27c>)
 800dd62:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800dd66:	4937      	ldr	r1, [pc, #220]	; (800de44 <etharp_query+0x290>)
 800dd68:	4833      	ldr	r0, [pc, #204]	; (800de38 <etharp_query+0x284>)
 800dd6a:	f009 ff9b 	bl	8017ca4 <iprintf>
      if (p->type != PBUF_ROM) {
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	7b1b      	ldrb	r3, [r3, #12]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d002      	beq.n	800dd7c <etharp_query+0x1c8>
        copy_needed = 1;
 800dd76:	2301      	movs	r3, #1
 800dd78:	61bb      	str	r3, [r7, #24]
        break;
 800dd7a:	e005      	b.n	800dd88 <etharp_query+0x1d4>
      }
      p = p->next;
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1e1      	bne.n	800dd4c <etharp_query+0x198>
    }
    if (copy_needed) {
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d017      	beq.n	800ddbe <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	891b      	ldrh	r3, [r3, #8]
 800dd92:	2200      	movs	r2, #0
 800dd94:	4619      	mov	r1, r3
 800dd96:	2002      	movs	r0, #2
 800dd98:	f002 fcc6 	bl	8010728 <pbuf_alloc>
 800dd9c:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d011      	beq.n	800ddc8 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800dda4:	6879      	ldr	r1, [r7, #4]
 800dda6:	69f8      	ldr	r0, [r7, #28]
 800dda8:	f003 f970 	bl	801108c <pbuf_copy>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00a      	beq.n	800ddc8 <etharp_query+0x214>
          pbuf_free(p);
 800ddb2:	69f8      	ldr	r0, [r7, #28]
 800ddb4:	f003 f82a 	bl	8010e0c <pbuf_free>
          p = NULL;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	61fb      	str	r3, [r7, #28]
 800ddbc:	e004      	b.n	800ddc8 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ddc2:	69f8      	ldr	r0, [r7, #28]
 800ddc4:	f003 f8d4 	bl	8010f70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d024      	beq.n	800de18 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ddce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ddd2:	4916      	ldr	r1, [pc, #88]	; (800de2c <etharp_query+0x278>)
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	005b      	lsls	r3, r3, #1
 800ddd8:	4413      	add	r3, r2
 800ddda:	00db      	lsls	r3, r3, #3
 800dddc:	440b      	add	r3, r1
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800dde4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800dde8:	4910      	ldr	r1, [pc, #64]	; (800de2c <etharp_query+0x278>)
 800ddea:	4613      	mov	r3, r2
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	4413      	add	r3, r2
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	440b      	add	r3, r1
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f003 f808 	bl	8010e0c <pbuf_free>
      }
      arp_table[i].q = p;
 800ddfc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800de00:	490a      	ldr	r1, [pc, #40]	; (800de2c <etharp_query+0x278>)
 800de02:	4613      	mov	r3, r2
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	4413      	add	r3, r2
 800de08:	00db      	lsls	r3, r3, #3
 800de0a:	440b      	add	r3, r1
 800de0c:	69fa      	ldr	r2, [r7, #28]
 800de0e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de16:	e002      	b.n	800de1e <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800de18:	23ff      	movs	r3, #255	; 0xff
 800de1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800de1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800de22:	4618      	mov	r0, r3
 800de24:	3728      	adds	r7, #40	; 0x28
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	20019e40 	.word	0x20019e40
 800de30:	08019db4 	.word	0x08019db4
 800de34:	08019f60 	.word	0x08019f60
 800de38:	08019e2c 	.word	0x08019e2c
 800de3c:	08019f54 	.word	0x08019f54
 800de40:	20019f30 	.word	0x20019f30
 800de44:	08019f88 	.word	0x08019f88

0800de48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08a      	sub	sp, #40	; 0x28
 800de4c:	af02      	add	r7, sp, #8
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
 800de54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800de56:	2300      	movs	r3, #0
 800de58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d106      	bne.n	800de6e <etharp_raw+0x26>
 800de60:	4b3a      	ldr	r3, [pc, #232]	; (800df4c <etharp_raw+0x104>)
 800de62:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800de66:	493a      	ldr	r1, [pc, #232]	; (800df50 <etharp_raw+0x108>)
 800de68:	483a      	ldr	r0, [pc, #232]	; (800df54 <etharp_raw+0x10c>)
 800de6a:	f009 ff1b 	bl	8017ca4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800de6e:	2200      	movs	r2, #0
 800de70:	211c      	movs	r1, #28
 800de72:	2002      	movs	r0, #2
 800de74:	f002 fc58 	bl	8010728 <pbuf_alloc>
 800de78:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d102      	bne.n	800de86 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800de80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de84:	e05d      	b.n	800df42 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	895b      	ldrh	r3, [r3, #10]
 800de8a:	2b1b      	cmp	r3, #27
 800de8c:	d806      	bhi.n	800de9c <etharp_raw+0x54>
 800de8e:	4b2f      	ldr	r3, [pc, #188]	; (800df4c <etharp_raw+0x104>)
 800de90:	f240 4264 	movw	r2, #1124	; 0x464
 800de94:	4930      	ldr	r1, [pc, #192]	; (800df58 <etharp_raw+0x110>)
 800de96:	482f      	ldr	r0, [pc, #188]	; (800df54 <etharp_raw+0x10c>)
 800de98:	f009 ff04 	bl	8017ca4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800dea2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fc fefb 	bl	800aca0 <lwip_htons>
 800deaa:	4603      	mov	r3, r0
 800deac:	461a      	mov	r2, r3
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800deb8:	2b06      	cmp	r3, #6
 800deba:	d006      	beq.n	800deca <etharp_raw+0x82>
 800debc:	4b23      	ldr	r3, [pc, #140]	; (800df4c <etharp_raw+0x104>)
 800debe:	f240 426b 	movw	r2, #1131	; 0x46b
 800dec2:	4926      	ldr	r1, [pc, #152]	; (800df5c <etharp_raw+0x114>)
 800dec4:	4823      	ldr	r0, [pc, #140]	; (800df54 <etharp_raw+0x10c>)
 800dec6:	f009 feed 	bl	8017ca4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	3308      	adds	r3, #8
 800dece:	2206      	movs	r2, #6
 800ded0:	6839      	ldr	r1, [r7, #0]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f009 fed3 	bl	8017c7e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	3312      	adds	r3, #18
 800dedc:	2206      	movs	r2, #6
 800dede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dee0:	4618      	mov	r0, r3
 800dee2:	f009 fecc 	bl	8017c7e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	330e      	adds	r3, #14
 800deea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800deec:	6812      	ldr	r2, [r2, #0]
 800deee:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	3318      	adds	r3, #24
 800def4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def6:	6812      	ldr	r2, [r2, #0]
 800def8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2200      	movs	r2, #0
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	2200      	movs	r2, #0
 800df02:	f042 0201 	orr.w	r2, r2, #1
 800df06:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f042 0208 	orr.w	r2, r2, #8
 800df10:	709a      	strb	r2, [r3, #2]
 800df12:	2200      	movs	r2, #0
 800df14:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2206      	movs	r2, #6
 800df1a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	2204      	movs	r2, #4
 800df20:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800df22:	f640 0306 	movw	r3, #2054	; 0x806
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	69b9      	ldr	r1, [r7, #24]
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f009 fc08 	bl	8017744 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800df34:	69b8      	ldr	r0, [r7, #24]
 800df36:	f002 ff69 	bl	8010e0c <pbuf_free>
  p = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800df3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df42:	4618      	mov	r0, r3
 800df44:	3720      	adds	r7, #32
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	08019db4 	.word	0x08019db4
 800df50:	08019f04 	.word	0x08019f04
 800df54:	08019e2c 	.word	0x08019e2c
 800df58:	08019fa4 	.word	0x08019fa4
 800df5c:	08019fd8 	.word	0x08019fd8

0800df60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b088      	sub	sp, #32
 800df64:	af04      	add	r7, sp, #16
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f103 0131 	add.w	r1, r3, #49	; 0x31
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f103 0031 	add.w	r0, r3, #49	; 0x31
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800df7c:	2201      	movs	r2, #1
 800df7e:	9203      	str	r2, [sp, #12]
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	9202      	str	r2, [sp, #8]
 800df84:	4a06      	ldr	r2, [pc, #24]	; (800dfa0 <etharp_request_dst+0x40>)
 800df86:	9201      	str	r2, [sp, #4]
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	4603      	mov	r3, r0
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7ff ff5a 	bl	800de48 <etharp_raw>
 800df94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	0801bff4 	.word	0x0801bff4

0800dfa4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dfae:	4a05      	ldr	r2, [pc, #20]	; (800dfc4 <etharp_request+0x20>)
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff ffd4 	bl	800df60 <etharp_request_dst>
 800dfb8:	4603      	mov	r3, r0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	0801bfec 	.word	0x0801bfec

0800dfc8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08e      	sub	sp, #56	; 0x38
 800dfcc:	af04      	add	r7, sp, #16
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800dfd2:	4b7a      	ldr	r3, [pc, #488]	; (800e1bc <icmp_input+0x1f4>)
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	f003 030f 	and.w	r3, r3, #15
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800dfe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfea:	2b13      	cmp	r3, #19
 800dfec:	f240 80d1 	bls.w	800e192 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	895b      	ldrh	r3, [r3, #10]
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	f240 80ce 	bls.w	800e196 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e004:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 80bb 	beq.w	800e184 <icmp_input+0x1bc>
 800e00e:	2b08      	cmp	r3, #8
 800e010:	f040 80bb 	bne.w	800e18a <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800e014:	4b6a      	ldr	r3, [pc, #424]	; (800e1c0 <icmp_input+0x1f8>)
 800e016:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e018:	4b68      	ldr	r3, [pc, #416]	; (800e1bc <icmp_input+0x1f4>)
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e020:	2be0      	cmp	r3, #224	; 0xe0
 800e022:	f000 80bf 	beq.w	800e1a4 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e026:	4b65      	ldr	r3, [pc, #404]	; (800e1bc <icmp_input+0x1f4>)
 800e028:	695a      	ldr	r2, [r3, #20]
 800e02a:	4b64      	ldr	r3, [pc, #400]	; (800e1bc <icmp_input+0x1f4>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f000 ff64 	bl	800eefe <ip4_addr_isbroadcast_u32>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f040 80b5 	bne.w	800e1a8 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	891b      	ldrh	r3, [r3, #8]
 800e042:	2b07      	cmp	r3, #7
 800e044:	f240 80a9 	bls.w	800e19a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e04a:	330e      	adds	r3, #14
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	b21b      	sxth	r3, r3
 800e050:	4619      	mov	r1, r3
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f002 feb6 	bl	8010dc4 <pbuf_header>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d046      	beq.n	800e0ec <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	891a      	ldrh	r2, [r3, #8]
 800e062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e064:	4413      	add	r3, r2
 800e066:	b29b      	uxth	r3, r3
 800e068:	2200      	movs	r2, #0
 800e06a:	4619      	mov	r1, r3
 800e06c:	2002      	movs	r0, #2
 800e06e:	f002 fb5b 	bl	8010728 <pbuf_alloc>
 800e072:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	2b00      	cmp	r3, #0
 800e078:	f000 8098 	beq.w	800e1ac <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	895b      	ldrh	r3, [r3, #10]
 800e080:	461a      	mov	r2, r3
 800e082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e084:	3308      	adds	r3, #8
 800e086:	429a      	cmp	r2, r3
 800e088:	d203      	bcs.n	800e092 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800e08a:	69b8      	ldr	r0, [r7, #24]
 800e08c:	f002 febe 	bl	8010e0c <pbuf_free>
        goto icmperr;
 800e090:	e08d      	b.n	800e1ae <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e09a:	4618      	mov	r0, r3
 800e09c:	f009 fdef 	bl	8017c7e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e0a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0a2:	425b      	negs	r3, r3
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	b21b      	sxth	r3, r3
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	69b8      	ldr	r0, [r7, #24]
 800e0ac:	f002 fe8a 	bl	8010dc4 <pbuf_header>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d009      	beq.n	800e0ca <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e0b6:	4b43      	ldr	r3, [pc, #268]	; (800e1c4 <icmp_input+0x1fc>)
 800e0b8:	22af      	movs	r2, #175	; 0xaf
 800e0ba:	4943      	ldr	r1, [pc, #268]	; (800e1c8 <icmp_input+0x200>)
 800e0bc:	4843      	ldr	r0, [pc, #268]	; (800e1cc <icmp_input+0x204>)
 800e0be:	f009 fdf1 	bl	8017ca4 <iprintf>
        pbuf_free(r);
 800e0c2:	69b8      	ldr	r0, [r7, #24]
 800e0c4:	f002 fea2 	bl	8010e0c <pbuf_free>
        goto icmperr;
 800e0c8:	e071      	b.n	800e1ae <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	69b8      	ldr	r0, [r7, #24]
 800e0ce:	f002 ffdd 	bl	801108c <pbuf_copy>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d003      	beq.n	800e0e0 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800e0d8:	69b8      	ldr	r0, [r7, #24]
 800e0da:	f002 fe97 	bl	8010e0c <pbuf_free>
        goto icmperr;
 800e0de:	e066      	b.n	800e1ae <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f002 fe93 	bl	8010e0c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	607b      	str	r3, [r7, #4]
 800e0ea:	e015      	b.n	800e118 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e0ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0ee:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800e0f2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e0f6:	33f2      	adds	r3, #242	; 0xf2
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	b21b      	sxth	r3, r3
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f002 fe60 	bl	8010dc4 <pbuf_header>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d006      	beq.n	800e118 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e10a:	4b2e      	ldr	r3, [pc, #184]	; (800e1c4 <icmp_input+0x1fc>)
 800e10c:	22c0      	movs	r2, #192	; 0xc0
 800e10e:	4930      	ldr	r1, [pc, #192]	; (800e1d0 <icmp_input+0x208>)
 800e110:	482e      	ldr	r0, [pc, #184]	; (800e1cc <icmp_input+0x204>)
 800e112:	f009 fdc7 	bl	8017ca4 <iprintf>
        goto icmperr;
 800e116:	e04a      	b.n	800e1ae <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800e11e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e122:	4619      	mov	r1, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f002 fe4d 	bl	8010dc4 <pbuf_header>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d12b      	bne.n	800e188 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e13e:	4b1f      	ldr	r3, [pc, #124]	; (800e1bc <icmp_input+0x1f4>)
 800e140:	691a      	ldr	r2, [r3, #16]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	2200      	movs	r2, #0
 800e14a:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2200      	movs	r2, #0
 800e150:	709a      	strb	r2, [r3, #2]
 800e152:	2200      	movs	r2, #0
 800e154:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	22ff      	movs	r2, #255	; 0xff
 800e15a:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	2200      	movs	r2, #0
 800e160:	729a      	strb	r2, [r3, #10]
 800e162:	2200      	movs	r2, #0
 800e164:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	9302      	str	r3, [sp, #8]
 800e16a:	2301      	movs	r3, #1
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	2300      	movs	r3, #0
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	23ff      	movs	r3, #255	; 0xff
 800e174:	2200      	movs	r2, #0
 800e176:	69f9      	ldr	r1, [r7, #28]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 fd6f 	bl	800ec5c <ip4_output_if>
 800e17e:	4603      	mov	r3, r0
 800e180:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800e182:	e001      	b.n	800e188 <icmp_input+0x1c0>
    break;
 800e184:	bf00      	nop
 800e186:	e000      	b.n	800e18a <icmp_input+0x1c2>
    break;
 800e188:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f002 fe3e 	bl	8010e0c <pbuf_free>
  return;
 800e190:	e011      	b.n	800e1b6 <icmp_input+0x1ee>
    goto lenerr;
 800e192:	bf00      	nop
 800e194:	e002      	b.n	800e19c <icmp_input+0x1d4>
    goto lenerr;
 800e196:	bf00      	nop
 800e198:	e000      	b.n	800e19c <icmp_input+0x1d4>
      goto lenerr;
 800e19a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f002 fe35 	bl	8010e0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e1a2:	e008      	b.n	800e1b6 <icmp_input+0x1ee>
      goto icmperr;
 800e1a4:	bf00      	nop
 800e1a6:	e002      	b.n	800e1ae <icmp_input+0x1e6>
      goto icmperr;
 800e1a8:	bf00      	nop
 800e1aa:	e000      	b.n	800e1ae <icmp_input+0x1e6>
        goto icmperr;
 800e1ac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f002 fe2c 	bl	8010e0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e1b4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e1b6:	3728      	adds	r7, #40	; 0x28
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	2001d26c 	.word	0x2001d26c
 800e1c0:	2001d280 	.word	0x2001d280
 800e1c4:	0801a01c 	.word	0x0801a01c
 800e1c8:	0801a054 	.word	0x0801a054
 800e1cc:	0801a08c 	.word	0x0801a08c
 800e1d0:	0801a0b4 	.word	0x0801a0b4

0800e1d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	460b      	mov	r3, r1
 800e1de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e1e0:	78fb      	ldrb	r3, [r7, #3]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	2103      	movs	r1, #3
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f814 	bl	800e214 <icmp_send_response>
}
 800e1ec:	bf00      	nop
 800e1ee:	3708      	adds	r7, #8
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e200:	78fb      	ldrb	r3, [r7, #3]
 800e202:	461a      	mov	r2, r3
 800e204:	210b      	movs	r1, #11
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f804 	bl	800e214 <icmp_send_response>
}
 800e20c:	bf00      	nop
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08c      	sub	sp, #48	; 0x30
 800e218:	af04      	add	r7, sp, #16
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
 800e220:	4613      	mov	r3, r2
 800e222:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e224:	2200      	movs	r2, #0
 800e226:	2124      	movs	r1, #36	; 0x24
 800e228:	2001      	movs	r0, #1
 800e22a:	f002 fa7d 	bl	8010728 <pbuf_alloc>
 800e22e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d04c      	beq.n	800e2d0 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	895b      	ldrh	r3, [r3, #10]
 800e23a:	2b23      	cmp	r3, #35	; 0x23
 800e23c:	d806      	bhi.n	800e24c <icmp_send_response+0x38>
 800e23e:	4b26      	ldr	r3, [pc, #152]	; (800e2d8 <icmp_send_response+0xc4>)
 800e240:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800e244:	4925      	ldr	r1, [pc, #148]	; (800e2dc <icmp_send_response+0xc8>)
 800e246:	4826      	ldr	r0, [pc, #152]	; (800e2e0 <icmp_send_response+0xcc>)
 800e248:	f009 fd2c 	bl	8017ca4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	78fa      	ldrb	r2, [r7, #3]
 800e25c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	78ba      	ldrb	r2, [r7, #2]
 800e262:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2200      	movs	r2, #0
 800e268:	711a      	strb	r2, [r3, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	2200      	movs	r2, #0
 800e272:	719a      	strb	r2, [r3, #6]
 800e274:	2200      	movs	r2, #0
 800e276:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	f103 0008 	add.w	r0, r3, #8
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	221c      	movs	r2, #28
 800e286:	4619      	mov	r1, r3
 800e288:	f009 fcf9 	bl	8017c7e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e292:	f107 030c 	add.w	r3, r7, #12
 800e296:	4618      	mov	r0, r3
 800e298:	f000 facc 	bl	800e834 <ip4_route>
 800e29c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d011      	beq.n	800e2c8 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	709a      	strb	r2, [r3, #2]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e2ae:	f107 020c 	add.w	r2, r7, #12
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	9302      	str	r3, [sp, #8]
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	9301      	str	r3, [sp, #4]
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	23ff      	movs	r3, #255	; 0xff
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	69f8      	ldr	r0, [r7, #28]
 800e2c4:	f000 fcca 	bl	800ec5c <ip4_output_if>
  }
  pbuf_free(q);
 800e2c8:	69f8      	ldr	r0, [r7, #28]
 800e2ca:	f002 fd9f 	bl	8010e0c <pbuf_free>
 800e2ce:	e000      	b.n	800e2d2 <icmp_send_response+0xbe>
    return;
 800e2d0:	bf00      	nop
}
 800e2d2:	3720      	adds	r7, #32
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	0801a01c 	.word	0x0801a01c
 800e2dc:	0801a0e8 	.word	0x0801a0e8
 800e2e0:	0801a08c 	.word	0x0801a08c

0800e2e4 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <igmp_init+0x1c>)
 800e2ea:	4a06      	ldr	r2, [pc, #24]	; (800e304 <igmp_init+0x20>)
 800e2ec:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 800e2ee:	4b06      	ldr	r3, [pc, #24]	; (800e308 <igmp_init+0x24>)
 800e2f0:	4a06      	ldr	r2, [pc, #24]	; (800e30c <igmp_init+0x28>)
 800e2f2:	601a      	str	r2, [r3, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	20019f34 	.word	0x20019f34
 800e304:	010000e0 	.word	0x010000e0
 800e308:	20019f38 	.word	0x20019f38
 800e30c:	020000e0 	.word	0x020000e0

0800e310 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
 800e318:	4911      	ldr	r1, [pc, #68]	; (800e360 <igmp_start+0x50>)
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f85c 	bl	800e3d8 <igmp_lookup_group>
 800e320:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d014      	beq.n	800e352 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2202      	movs	r2, #2
 800e32c:	725a      	strb	r2, [r3, #9]
    group->use++;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	7b1b      	ldrb	r3, [r3, #12]
 800e332:	3301      	adds	r3, #1
 800e334:	b2da      	uxtb	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d005      	beq.n	800e34e <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e346:	2201      	movs	r2, #1
 800e348:	4905      	ldr	r1, [pc, #20]	; (800e360 <igmp_start+0x50>)
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
    }

    return ERR_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	e001      	b.n	800e356 <igmp_start+0x46>
  }

  return ERR_MEM;
 800e352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	20019f34 	.word	0x20019f34

0800e364 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e370:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00a      	beq.n	800e38e <igmp_report_groups+0x2a>
    group = group->next;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	60fb      	str	r3, [r7, #12]
  }
  
  while (group != NULL) {
 800e37e:	e006      	b.n	800e38e <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 800e380:	2105      	movs	r1, #5
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 f99b 	bl	800e6be <igmp_delaying_member>
    group = group->next;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1f5      	bne.n	800e380 <igmp_report_groups+0x1c>
  }
}
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3aa:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 800e3ac:	e00a      	b.n	800e3c4 <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	685a      	ldr	r2, [r3, #4]
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d101      	bne.n	800e3be <igmp_lookfor_group+0x22>
      return group;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	e006      	b.n	800e3cc <igmp_lookfor_group+0x30>
    }
    group = group->next;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1f1      	bne.n	800e3ae <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e6:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7ff ffd6 	bl	800e39c <igmp_lookfor_group>
 800e3f0:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d001      	beq.n	800e3fc <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	e047      	b.n	800e48c <igmp_lookup_group+0xb4>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 800e3fc:	200a      	movs	r0, #10
 800e3fe:	f001 ff37 	bl	8010270 <memp_malloc>
 800e402:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d03f      	beq.n	800e48a <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d002      	beq.n	800e416 <igmp_lookup_group+0x3e>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	e000      	b.n	800e418 <igmp_lookup_group+0x40>
 800e416:	2300      	movs	r3, #0
 800e418:	68ba      	ldr	r2, [r7, #8]
 800e41a:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2200      	movs	r2, #0
 800e420:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2200      	movs	r2, #0
 800e426:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	2200      	movs	r2, #0
 800e42c:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2200      	movs	r2, #0
 800e432:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d113      	bne.n	800e462 <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	4b15      	ldr	r3, [pc, #84]	; (800e494 <igmp_lookup_group+0xbc>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	429a      	cmp	r2, r3
 800e444:	d006      	beq.n	800e454 <igmp_lookup_group+0x7c>
 800e446:	4b14      	ldr	r3, [pc, #80]	; (800e498 <igmp_lookup_group+0xc0>)
 800e448:	f240 120d 	movw	r2, #269	; 0x10d
 800e44c:	4913      	ldr	r1, [pc, #76]	; (800e49c <igmp_lookup_group+0xc4>)
 800e44e:	4814      	ldr	r0, [pc, #80]	; (800e4a0 <igmp_lookup_group+0xc8>)
 800e450:	f009 fc28 	bl	8017ca4 <iprintf>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	2200      	movs	r2, #0
 800e458:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	68ba      	ldr	r2, [r7, #8]
 800e45e:	629a      	str	r2, [r3, #40]	; 0x28
 800e460:	e013      	b.n	800e48a <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	4b0b      	ldr	r3, [pc, #44]	; (800e494 <igmp_lookup_group+0xbc>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d106      	bne.n	800e47c <igmp_lookup_group+0xa4>
 800e46e:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <igmp_lookup_group+0xc0>)
 800e470:	f240 1213 	movw	r2, #275	; 0x113
 800e474:	490b      	ldr	r1, [pc, #44]	; (800e4a4 <igmp_lookup_group+0xcc>)
 800e476:	480a      	ldr	r0, [pc, #40]	; (800e4a0 <igmp_lookup_group+0xc8>)
 800e478:	f009 fc14 	bl	8017ca4 <iprintf>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
 800e48a:	68bb      	ldr	r3, [r7, #8]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20019f34 	.word	0x20019f34
 800e498:	0801a114 	.word	0x0801a114
 800e49c:	0801a14c 	.word	0x0801a14c
 800e4a0:	0801a180 	.word	0x0801a180
 800e4a4:	0801a1a8 	.word	0x0801a1a8

0800e4a8 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b088      	sub	sp, #32
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	895b      	ldrh	r3, [r3, #10]
 800e4b8:	2b07      	cmp	r3, #7
 800e4ba:	d803      	bhi.n	800e4c4 <igmp_input+0x1c>
    pbuf_free(p);
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f002 fca5 	bl	8010e0c <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 800e4c2:	e086      	b.n	800e5d2 <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	895b      	ldrh	r3, [r3, #10]
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6978      	ldr	r0, [r7, #20]
 800e4d2:	f7fc ff2e 	bl	800b332 <inet_chksum>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d003      	beq.n	800e4e4 <igmp_input+0x3c>
    pbuf_free(p);
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f002 fc95 	bl	8010e0c <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 800e4e2:	e076      	b.n	800e5d2 <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	68b8      	ldr	r0, [r7, #8]
 800e4e8:	f7ff ff58 	bl	800e39c <igmp_lookfor_group>
 800e4ec:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d103      	bne.n	800e4fc <igmp_input+0x54>
    pbuf_free(p);
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f002 fc89 	bl	8010e0c <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 800e4fa:	e06a      	b.n	800e5d2 <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	2b11      	cmp	r3, #17
 800e502:	d002      	beq.n	800e50a <igmp_input+0x62>
 800e504:	2b16      	cmp	r3, #22
 800e506:	d04f      	beq.n	800e5a8 <igmp_input+0x100>
    break;
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
    break;
 800e508:	e05f      	b.n	800e5ca <igmp_input+0x122>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	4b32      	ldr	r3, [pc, #200]	; (800e5d8 <igmp_input+0x130>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	429a      	cmp	r2, r3
 800e514:	d125      	bne.n	800e562 <igmp_input+0xba>
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	3304      	adds	r3, #4
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d003      	beq.n	800e526 <igmp_input+0x7e>
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d11d      	bne.n	800e562 <igmp_input+0xba>
      if (igmp->igmp_maxresp == 0) {
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	785b      	ldrb	r3, [r3, #1]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d102      	bne.n	800e534 <igmp_input+0x8c>
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	220a      	movs	r2, #10
 800e532:	705a      	strb	r2, [r3, #1]
      groupref = netif_igmp_data(inp);
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e538:	61bb      	str	r3, [r7, #24]
      if(groupref != NULL) {
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d00c      	beq.n	800e55a <igmp_input+0xb2>
        groupref = groupref->next;
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	61bb      	str	r3, [r7, #24]
      while (groupref) {
 800e546:	e008      	b.n	800e55a <igmp_input+0xb2>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	785b      	ldrb	r3, [r3, #1]
 800e54c:	4619      	mov	r1, r3
 800e54e:	69b8      	ldr	r0, [r7, #24]
 800e550:	f000 f8b5 	bl	800e6be <igmp_delaying_member>
        groupref = groupref->next;
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	61bb      	str	r3, [r7, #24]
      while (groupref) {
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1f3      	bne.n	800e548 <igmp_input+0xa0>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800e560:	e021      	b.n	800e5a6 <igmp_input+0xfe>
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	3304      	adds	r3, #4
 800e566:	2b00      	cmp	r3, #0
 800e568:	d02c      	beq.n	800e5c4 <igmp_input+0x11c>
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d028      	beq.n	800e5c4 <igmp_input+0x11c>
        if (ip4_addr_cmp(dest, &allsystems)) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	4b18      	ldr	r3, [pc, #96]	; (800e5d8 <igmp_input+0x130>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d109      	bne.n	800e592 <igmp_input+0xea>
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	613b      	str	r3, [r7, #16]
          group = igmp_lookfor_group(inp, &groupaddr);
 800e584:	f107 0310 	add.w	r3, r7, #16
 800e588:	4619      	mov	r1, r3
 800e58a:	68b8      	ldr	r0, [r7, #8]
 800e58c:	f7ff ff06 	bl	800e39c <igmp_lookfor_group>
 800e590:	61f8      	str	r0, [r7, #28]
        if (group != NULL) {
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d015      	beq.n	800e5c4 <igmp_input+0x11c>
          igmp_delaying_member(group, igmp->igmp_maxresp);
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	785b      	ldrb	r3, [r3, #1]
 800e59c:	4619      	mov	r1, r3
 800e59e:	69f8      	ldr	r0, [r7, #28]
 800e5a0:	f000 f88d 	bl	800e6be <igmp_delaying_member>
    break;
 800e5a4:	e00e      	b.n	800e5c4 <igmp_input+0x11c>
 800e5a6:	e00d      	b.n	800e5c4 <igmp_input+0x11c>
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	7a5b      	ldrb	r3, [r3, #9]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d10b      	bne.n	800e5c8 <igmp_input+0x120>
      group->timer = 0; /* stopped */
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	815a      	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	725a      	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	721a      	strb	r2, [r3, #8]
    break;
 800e5c2:	e001      	b.n	800e5c8 <igmp_input+0x120>
    break;
 800e5c4:	bf00      	nop
 800e5c6:	e000      	b.n	800e5ca <igmp_input+0x122>
    break;
 800e5c8:	bf00      	nop
  }

  pbuf_free(p);
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f002 fc1e 	bl	8010e0c <pbuf_free>
  return;
 800e5d0:	bf00      	nop
}
 800e5d2:	3720      	adds	r7, #32
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20019f34 	.word	0x20019f34

0800e5dc <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800e5e2:	4b15      	ldr	r3, [pc, #84]	; (800e638 <igmp_tmr+0x5c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	607b      	str	r3, [r7, #4]

  while (netif != NULL) {
 800e5e8:	e01e      	b.n	800e628 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ee:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 800e5f0:	e014      	b.n	800e61c <igmp_tmr+0x40>
      if (group->timer > 0) {
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	895b      	ldrh	r3, [r3, #10]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00d      	beq.n	800e616 <igmp_tmr+0x3a>
        group->timer--;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	895b      	ldrh	r3, [r3, #10]
 800e5fe:	3b01      	subs	r3, #1
 800e600:	b29a      	uxth	r2, r3
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	895b      	ldrh	r3, [r3, #10]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d103      	bne.n	800e616 <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 800e60e:	6839      	ldr	r1, [r7, #0]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 f813 	bl	800e63c <igmp_timeout>
        }
      }
      group = group->next;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1e7      	bne.n	800e5f2 <igmp_tmr+0x16>
    }
    netif = netif->next;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1dd      	bne.n	800e5ea <igmp_tmr+0xe>
  }
}
 800e62e:	bf00      	nop
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	20020bbc 	.word	0x20020bbc

0800e63c <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	7a5b      	ldrb	r3, [r3, #9]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d10d      	bne.n	800e66a <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	685a      	ldr	r2, [r3, #4]
 800e652:	4b08      	ldr	r3, [pc, #32]	; (800e674 <igmp_timeout+0x38>)
 800e654:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e656:	429a      	cmp	r2, r3
 800e658:	d007      	beq.n	800e66a <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2202      	movs	r2, #2
 800e65e:	725a      	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800e660:	2216      	movs	r2, #22
 800e662:	6839      	ldr	r1, [r7, #0]
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 f871 	bl	800e74c <igmp_send>
  }
}
 800e66a:	bf00      	nop
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20019f34 	.word	0x20019f34

0800e678 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	460b      	mov	r3, r1
 800e682:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
 800e684:	78fb      	ldrb	r3, [r7, #3]
 800e686:	2b02      	cmp	r3, #2
 800e688:	d90b      	bls.n	800e6a2 <igmp_start_timer+0x2a>
 800e68a:	f009 fb87 	bl	8017d9c <rand>
 800e68e:	4603      	mov	r3, r0
 800e690:	461a      	mov	r2, r3
 800e692:	78fb      	ldrb	r3, [r7, #3]
 800e694:	fbb2 f1f3 	udiv	r1, r2, r3
 800e698:	fb03 f301 	mul.w	r3, r3, r1
 800e69c:	1ad3      	subs	r3, r2, r3
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	e000      	b.n	800e6a4 <igmp_start_timer+0x2c>
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	895b      	ldrh	r3, [r3, #10]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d102      	bne.n	800e6b6 <igmp_start_timer+0x3e>
    group->timer = 1;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	815a      	strh	r2, [r3, #10]
  }
}
 800e6b6:	bf00      	nop
 800e6b8:	3708      	adds	r7, #8
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b082      	sub	sp, #8
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	7a5b      	ldrb	r3, [r3, #9]
 800e6ce:	2b02      	cmp	r3, #2
 800e6d0:	d00d      	beq.n	800e6ee <igmp_delaying_member+0x30>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d111      	bne.n	800e6fe <igmp_delaying_member+0x40>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	895b      	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d005      	beq.n	800e6ee <igmp_delaying_member+0x30>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	895b      	ldrh	r3, [r3, #10]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d207      	bcs.n	800e6fe <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 800e6ee:	78fb      	ldrb	r3, [r7, #3]
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7ff ffc0 	bl	800e678 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	725a      	strb	r2, [r3, #9]
  }
}
 800e6fe:	bf00      	nop
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 800e706:	b580      	push	{r7, lr}
 800e708:	b08c      	sub	sp, #48	; 0x30
 800e70a:	af06      	add	r7, sp, #24
 800e70c:	60f8      	str	r0, [r7, #12]
 800e70e:	60b9      	str	r1, [r7, #8]
 800e710:	607a      	str	r2, [r7, #4]
 800e712:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 800e714:	f240 4394 	movw	r3, #1172	; 0x494
 800e718:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 800e71a:	2300      	movs	r3, #0
 800e71c:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 800e71e:	2304      	movs	r3, #4
 800e720:	9304      	str	r3, [sp, #16]
 800e722:	f107 0314 	add.w	r3, r7, #20
 800e726:	9303      	str	r3, [sp, #12]
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	9302      	str	r3, [sp, #8]
 800e72c:	2302      	movs	r3, #2
 800e72e:	9301      	str	r3, [sp, #4]
 800e730:	2300      	movs	r3, #0
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	2301      	movs	r3, #1
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	68b9      	ldr	r1, [r7, #8]
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f000 faab 	bl	800ec96 <ip4_output_if_opt>
 800e740:	4603      	mov	r3, r0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3718      	adds	r7, #24
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b088      	sub	sp, #32
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	4613      	mov	r3, r2
 800e758:	71fb      	strb	r3, [r7, #7]
  struct pbuf*     p    = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	61bb      	str	r3, [r7, #24]
  struct igmp_msg* igmp = NULL;
 800e75e:	2300      	movs	r3, #0
 800e760:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 800e762:	4b2f      	ldr	r3, [pc, #188]	; (800e820 <igmp_send+0xd4>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	613b      	str	r3, [r7, #16]
  ip4_addr_t*  dest = NULL;
 800e768:	2300      	movs	r3, #0
 800e76a:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 800e76c:	2200      	movs	r2, #0
 800e76e:	2108      	movs	r1, #8
 800e770:	2000      	movs	r0, #0
 800e772:	f001 ffd9 	bl	8010728 <pbuf_alloc>
 800e776:	61b8      	str	r0, [r7, #24]

  if (p) {
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d04b      	beq.n	800e816 <igmp_send+0xca>
    igmp = (struct igmp_msg *)p->payload;
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	895b      	ldrh	r3, [r3, #10]
 800e788:	2b07      	cmp	r3, #7
 800e78a:	d806      	bhi.n	800e79a <igmp_send+0x4e>
 800e78c:	4b25      	ldr	r3, [pc, #148]	; (800e824 <igmp_send+0xd8>)
 800e78e:	f240 3202 	movw	r2, #770	; 0x302
 800e792:	4925      	ldr	r1, [pc, #148]	; (800e828 <igmp_send+0xdc>)
 800e794:	4825      	ldr	r0, [pc, #148]	; (800e82c <igmp_send+0xe0>)
 800e796:	f009 fa85 	bl	8017ca4 <iprintf>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	3304      	adds	r3, #4
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	2b16      	cmp	r3, #22
 800e7a6:	d10a      	bne.n	800e7be <igmp_send+0x72>
      dest = &(group->group_address);
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	721a      	strb	r2, [r3, #8]
 800e7bc:	e008      	b.n	800e7d0 <igmp_send+0x84>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	2b17      	cmp	r3, #23
 800e7c2:	d105      	bne.n	800e7d0 <igmp_send+0x84>
        dest = &allrouters;
 800e7c4:	4b1a      	ldr	r3, [pc, #104]	; (800e830 <igmp_send+0xe4>)
 800e7c6:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	2b16      	cmp	r3, #22
 800e7d4:	d002      	beq.n	800e7dc <igmp_send+0x90>
 800e7d6:	79fb      	ldrb	r3, [r7, #7]
 800e7d8:	2b17      	cmp	r3, #23
 800e7da:	d119      	bne.n	800e810 <igmp_send+0xc4>
      igmp->igmp_msgtype  = type;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	79fa      	ldrb	r2, [r7, #7]
 800e7e0:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	709a      	strb	r2, [r3, #2]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 800e7f2:	2108      	movs	r1, #8
 800e7f4:	6978      	ldr	r0, [r7, #20]
 800e7f6:	f7fc fd9c 	bl	800b332 <inet_chksum>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 800e802:	f107 0110 	add.w	r1, r7, #16
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	69fa      	ldr	r2, [r7, #28]
 800e80a:	69b8      	ldr	r0, [r7, #24]
 800e80c:	f7ff ff7b 	bl	800e706 <igmp_ip_output_if>
    }

    pbuf_free(p);
 800e810:	69b8      	ldr	r0, [r7, #24]
 800e812:	f002 fafb 	bl	8010e0c <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 800e816:	bf00      	nop
 800e818:	3720      	adds	r7, #32
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	0801be94 	.word	0x0801be94
 800e824:	0801a114 	.word	0x0801a114
 800e828:	0801a430 	.word	0x0801a430
 800e82c:	0801a180 	.word	0x0801a180
 800e830:	20019f38 	.word	0x20019f38

0800e834 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e844:	2be0      	cmp	r3, #224	; 0xe0
 800e846:	d106      	bne.n	800e856 <ip4_route+0x22>
 800e848:	4b32      	ldr	r3, [pc, #200]	; (800e914 <ip4_route+0xe0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <ip4_route+0x22>
    return ip4_default_multicast_netif;
 800e850:	4b30      	ldr	r3, [pc, #192]	; (800e914 <ip4_route+0xe0>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	e058      	b.n	800e908 <ip4_route+0xd4>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e856:	4b30      	ldr	r3, [pc, #192]	; (800e918 <ip4_route+0xe4>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	e033      	b.n	800e8c6 <ip4_route+0x92>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d029      	beq.n	800e8c0 <ip4_route+0x8c>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e872:	f003 0304 	and.w	r3, r3, #4
 800e876:	2b00      	cmp	r3, #0
 800e878:	d022      	beq.n	800e8c0 <ip4_route+0x8c>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3304      	adds	r3, #4
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d01d      	beq.n	800e8c0 <ip4_route+0x8c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3304      	adds	r3, #4
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	405a      	eors	r2, r3
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	3308      	adds	r3, #8
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4013      	ands	r3, r2
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d101      	bne.n	800e8a0 <ip4_route+0x6c>
        /* return netif on which to forward IP packet */
        return netif;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	e033      	b.n	800e908 <ip4_route+0xd4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e8a6:	f003 0302 	and.w	r3, r3, #2
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d108      	bne.n	800e8c0 <ip4_route+0x8c>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	330c      	adds	r3, #12
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d101      	bne.n	800e8c0 <ip4_route+0x8c>
        /* return netif on which to forward IP packet */
        return netif;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	e023      	b.n	800e908 <ip4_route+0xd4>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	60fb      	str	r3, [r7, #12]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1c8      	bne.n	800e85e <ip4_route+0x2a>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8cc:	4b13      	ldr	r3, [pc, #76]	; (800e91c <ip4_route+0xe8>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d015      	beq.n	800e900 <ip4_route+0xcc>
 800e8d4:	4b11      	ldr	r3, [pc, #68]	; (800e91c <ip4_route+0xe8>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00d      	beq.n	800e900 <ip4_route+0xcc>
 800e8e4:	4b0d      	ldr	r3, [pc, #52]	; (800e91c <ip4_route+0xe8>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e8ec:	f003 0304 	and.w	r3, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d005      	beq.n	800e900 <ip4_route+0xcc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800e8f4:	4b09      	ldr	r3, [pc, #36]	; (800e91c <ip4_route+0xe8>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d101      	bne.n	800e904 <ip4_route+0xd0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e900:	2300      	movs	r3, #0
 800e902:	e001      	b.n	800e908 <ip4_route+0xd4>
  }

  return netif_default;
 800e904:	4b05      	ldr	r3, [pc, #20]	; (800e91c <ip4_route+0xe8>)
 800e906:	681b      	ldr	r3, [r3, #0]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3714      	adds	r7, #20
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	20019f40 	.word	0x20019f40
 800e918:	20020bbc 	.word	0x20020bbc
 800e91c:	20020bc0 	.word	0x20020bc0

0800e920 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b08a      	sub	sp, #40	; 0x28
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800e92a:	2301      	movs	r3, #1
 800e92c:	61fb      	str	r3, [r7, #28]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
  if (IPH_V(iphdr) != 4) {
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	091b      	lsrs	r3, r3, #4
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	d007      	beq.n	800e950 <ip4_input+0x30>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 facf 	bl	800eee4 <ip4_debug_print>
    pbuf_free(p);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f002 fa60 	bl	8010e0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e94c:	2300      	movs	r3, #0
 800e94e:	e17f      	b.n	800ec50 <ip4_input+0x330>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	b29b      	uxth	r3, r3
 800e956:	f003 030f 	and.w	r3, r3, #15
 800e95a:	82fb      	strh	r3, [r7, #22]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800e95c:	8afb      	ldrh	r3, [r7, #22]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	82fb      	strh	r3, [r7, #22]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	885b      	ldrh	r3, [r3, #2]
 800e966:	b29b      	uxth	r3, r3
 800e968:	4618      	mov	r0, r3
 800e96a:	f7fc f999 	bl	800aca0 <lwip_htons>
 800e96e:	4603      	mov	r3, r0
 800e970:	82bb      	strh	r3, [r7, #20]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	891b      	ldrh	r3, [r3, #8]
 800e976:	8aba      	ldrh	r2, [r7, #20]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d204      	bcs.n	800e986 <ip4_input+0x66>
    pbuf_realloc(p, iphdr_len);
 800e97c:	8abb      	ldrh	r3, [r7, #20]
 800e97e:	4619      	mov	r1, r3
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f002 f8cf 	bl	8010b24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	895b      	ldrh	r3, [r3, #10]
 800e98a:	8afa      	ldrh	r2, [r7, #22]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d807      	bhi.n	800e9a0 <ip4_input+0x80>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	891b      	ldrh	r3, [r3, #8]
 800e994:	8aba      	ldrh	r2, [r7, #20]
 800e996:	429a      	cmp	r2, r3
 800e998:	d802      	bhi.n	800e9a0 <ip4_input+0x80>
 800e99a:	8afb      	ldrh	r3, [r7, #22]
 800e99c:	2b13      	cmp	r3, #19
 800e99e:	d804      	bhi.n	800e9aa <ip4_input+0x8a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f002 fa33 	bl	8010e0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e152      	b.n	800ec50 <ip4_input+0x330>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	4a8b      	ldr	r2, [pc, #556]	; (800ebdc <ip4_input+0x2bc>)
 800e9b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	4a89      	ldr	r2, [pc, #548]	; (800ebdc <ip4_input+0x2bc>)
 800e9b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e9ba:	4b88      	ldr	r3, [pc, #544]	; (800ebdc <ip4_input+0x2bc>)
 800e9bc:	695b      	ldr	r3, [r3, #20]
 800e9be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9c2:	2be0      	cmp	r3, #224	; 0xe0
 800e9c4:	d120      	bne.n	800ea08 <ip4_input+0xe8>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e9cc:	f003 0320 	and.w	r3, r3, #32
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d016      	beq.n	800ea02 <ip4_input+0xe2>
 800e9d4:	4982      	ldr	r1, [pc, #520]	; (800ebe0 <ip4_input+0x2c0>)
 800e9d6:	6838      	ldr	r0, [r7, #0]
 800e9d8:	f7ff fce0 	bl	800e39c <igmp_lookfor_group>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00f      	beq.n	800ea02 <ip4_input+0xe2>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 800e9e2:	4b80      	ldr	r3, [pc, #512]	; (800ebe4 <ip4_input+0x2c4>)
 800e9e4:	60fb      	str	r3, [r7, #12]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 800e9e6:	4b7d      	ldr	r3, [pc, #500]	; (800ebdc <ip4_input+0x2bc>)
 800e9e8:	695a      	ldr	r2, [r3, #20]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d105      	bne.n	800e9fc <ip4_input+0xdc>
          ip4_addr_isany(ip4_current_src_addr())) {
 800e9f0:	4b7a      	ldr	r3, [pc, #488]	; (800ebdc <ip4_input+0x2bc>)
 800e9f2:	691b      	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d101      	bne.n	800e9fc <ip4_input+0xdc>
        check_ip_src = 0;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	61fb      	str	r3, [r7, #28]
      }
      netif = inp;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	623b      	str	r3, [r7, #32]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800ea00:	e040      	b.n	800ea84 <ip4_input+0x164>
    } else {
      netif = NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	623b      	str	r3, [r7, #32]
 800ea06:	e03d      	b.n	800ea84 <ip4_input+0x164>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	61bb      	str	r3, [r7, #24]
    netif = inp;
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	623b      	str	r3, [r7, #32]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ea10:	6a3b      	ldr	r3, [r7, #32]
 800ea12:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ea16:	f003 0301 	and.w	r3, r3, #1
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d014      	beq.n	800ea48 <ip4_input+0x128>
 800ea1e:	6a3b      	ldr	r3, [r7, #32]
 800ea20:	3304      	adds	r3, #4
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00f      	beq.n	800ea48 <ip4_input+0x128>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea28:	4b6c      	ldr	r3, [pc, #432]	; (800ebdc <ip4_input+0x2bc>)
 800ea2a:	695a      	ldr	r2, [r3, #20]
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	3304      	adds	r3, #4
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d026      	beq.n	800ea84 <ip4_input+0x164>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ea36:	4b69      	ldr	r3, [pc, #420]	; (800ebdc <ip4_input+0x2bc>)
 800ea38:	695b      	ldr	r3, [r3, #20]
 800ea3a:	6a39      	ldr	r1, [r7, #32]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f000 fa5e 	bl	800eefe <ip4_addr_isbroadcast_u32>
 800ea42:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d11d      	bne.n	800ea84 <ip4_input+0x164>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00d      	beq.n	800ea6a <ip4_input+0x14a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ea4e:	4b63      	ldr	r3, [pc, #396]	; (800ebdc <ip4_input+0x2bc>)
 800ea50:	695b      	ldr	r3, [r3, #20]
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b7f      	cmp	r3, #127	; 0x7f
 800ea56:	d102      	bne.n	800ea5e <ip4_input+0x13e>
          netif = NULL;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	623b      	str	r3, [r7, #32]
          break;
 800ea5c:	e012      	b.n	800ea84 <ip4_input+0x164>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	61bb      	str	r3, [r7, #24]
        netif = netif_list;
 800ea62:	4b61      	ldr	r3, [pc, #388]	; (800ebe8 <ip4_input+0x2c8>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	623b      	str	r3, [r7, #32]
 800ea68:	e002      	b.n	800ea70 <ip4_input+0x150>
      } else {
        netif = netif->next;
 800ea6a:	6a3b      	ldr	r3, [r7, #32]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	623b      	str	r3, [r7, #32]
      }
      if (netif == inp) {
 800ea70:	6a3a      	ldr	r2, [r7, #32]
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d102      	bne.n	800ea7e <ip4_input+0x15e>
        netif = netif->next;
 800ea78:	6a3b      	ldr	r3, [r7, #32]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	623b      	str	r3, [r7, #32]
      }
    } while (netif != NULL);
 800ea7e:	6a3b      	ldr	r3, [r7, #32]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1c5      	bne.n	800ea10 <ip4_input+0xf0>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d111      	bne.n	800eaae <ip4_input+0x18e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	7a5b      	ldrb	r3, [r3, #9]
 800ea8e:	2b11      	cmp	r3, #17
 800ea90:	d10d      	bne.n	800eaae <ip4_input+0x18e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800ea92:	8afb      	ldrh	r3, [r7, #22]
 800ea94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea96:	4413      	add	r3, r2
 800ea98:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	885b      	ldrh	r3, [r3, #2]
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800eaa4:	d103      	bne.n	800eaae <ip4_input+0x18e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	623b      	str	r3, [r7, #32]
        check_ip_src = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61fb      	str	r3, [r7, #28]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d017      	beq.n	800eae4 <ip4_input+0x1c4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800eab4:	4b49      	ldr	r3, [pc, #292]	; (800ebdc <ip4_input+0x2bc>)
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d013      	beq.n	800eae4 <ip4_input+0x1c4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eabc:	4b47      	ldr	r3, [pc, #284]	; (800ebdc <ip4_input+0x2bc>)
 800eabe:	691b      	ldr	r3, [r3, #16]
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 fa1b 	bl	800eefe <ip4_addr_isbroadcast_u32>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d105      	bne.n	800eada <ip4_input+0x1ba>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800eace:	4b43      	ldr	r3, [pc, #268]	; (800ebdc <ip4_input+0x2bc>)
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ead6:	2be0      	cmp	r3, #224	; 0xe0
 800ead8:	d104      	bne.n	800eae4 <ip4_input+0x1c4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f002 f996 	bl	8010e0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	e0b5      	b.n	800ec50 <ip4_input+0x330>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d104      	bne.n	800eaf4 <ip4_input+0x1d4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f002 f98e 	bl	8010e0c <pbuf_free>
    return ERR_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	e0ad      	b.n	800ec50 <ip4_input+0x330>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	88db      	ldrh	r3, [r3, #6]
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	461a      	mov	r2, r3
 800eafc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800eb00:	4013      	ands	r3, r2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00b      	beq.n	800eb1e <ip4_input+0x1fe>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fd3c 	bl	800f584 <ip4_reass>
 800eb0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <ip4_input+0x1f8>
      return ERR_OK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	e09b      	b.n	800ec50 <ip4_input+0x330>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f9e0 	bl	800eee4 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800eb24:	4a2d      	ldr	r2, [pc, #180]	; (800ebdc <ip4_input+0x2bc>)
 800eb26:	6a3b      	ldr	r3, [r7, #32]
 800eb28:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eb2a:	4a2c      	ldr	r2, [pc, #176]	; (800ebdc <ip4_input+0x2bc>)
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eb30:	4a2a      	ldr	r2, [pc, #168]	; (800ebdc <ip4_input+0x2bc>)
 800eb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb34:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	f003 030f 	and.w	r3, r3, #15
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	4b25      	ldr	r3, [pc, #148]	; (800ebdc <ip4_input+0x2bc>)
 800eb48:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800eb4a:	8afb      	ldrh	r3, [r7, #22]
 800eb4c:	425b      	negs	r3, r3
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	b21b      	sxth	r3, r3
 800eb52:	4619      	mov	r1, r3
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f002 f935 	bl	8010dc4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5c:	7a5b      	ldrb	r3, [r3, #9]
 800eb5e:	3b01      	subs	r3, #1
 800eb60:	2b10      	cmp	r3, #16
 800eb62:	d843      	bhi.n	800ebec <ip4_input+0x2cc>
 800eb64:	a201      	add	r2, pc, #4	; (adr r2, 800eb6c <ip4_input+0x24c>)
 800eb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb6a:	bf00      	nop
 800eb6c:	0800ebc5 	.word	0x0800ebc5
 800eb70:	0800ebcf 	.word	0x0800ebcf
 800eb74:	0800ebed 	.word	0x0800ebed
 800eb78:	0800ebed 	.word	0x0800ebed
 800eb7c:	0800ebed 	.word	0x0800ebed
 800eb80:	0800ebbb 	.word	0x0800ebbb
 800eb84:	0800ebed 	.word	0x0800ebed
 800eb88:	0800ebed 	.word	0x0800ebed
 800eb8c:	0800ebed 	.word	0x0800ebed
 800eb90:	0800ebed 	.word	0x0800ebed
 800eb94:	0800ebed 	.word	0x0800ebed
 800eb98:	0800ebed 	.word	0x0800ebed
 800eb9c:	0800ebed 	.word	0x0800ebed
 800eba0:	0800ebed 	.word	0x0800ebed
 800eba4:	0800ebed 	.word	0x0800ebed
 800eba8:	0800ebed 	.word	0x0800ebed
 800ebac:	0800ebb1 	.word	0x0800ebb1
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f008 f9aa 	bl	8016f0c <udp_input>
      break;
 800ebb8:	e037      	b.n	800ec2a <ip4_input+0x30a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800ebba:	6839      	ldr	r1, [r7, #0]
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f004 f9bb 	bl	8012f38 <tcp_input>
      break;
 800ebc2:	e032      	b.n	800ec2a <ip4_input+0x30a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ebc4:	6839      	ldr	r1, [r7, #0]
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f7ff f9fe 	bl	800dfc8 <icmp_input>
      break;
 800ebcc:	e02d      	b.n	800ec2a <ip4_input+0x30a>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
 800ebce:	4a04      	ldr	r2, [pc, #16]	; (800ebe0 <ip4_input+0x2c0>)
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff fc68 	bl	800e4a8 <igmp_input>
      break;
 800ebd8:	e027      	b.n	800ec2a <ip4_input+0x30a>
 800ebda:	bf00      	nop
 800ebdc:	2001d26c 	.word	0x2001d26c
 800ebe0:	2001d280 	.word	0x2001d280
 800ebe4:	010000e0 	.word	0x010000e0
 800ebe8:	20020bbc 	.word	0x20020bbc
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ebec:	4b1a      	ldr	r3, [pc, #104]	; (800ec58 <ip4_input+0x338>)
 800ebee:	695b      	ldr	r3, [r3, #20]
 800ebf0:	6a39      	ldr	r1, [r7, #32]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 f983 	bl	800eefe <ip4_addr_isbroadcast_u32>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d112      	bne.n	800ec24 <ip4_input+0x304>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ebfe:	4b16      	ldr	r3, [pc, #88]	; (800ec58 <ip4_input+0x338>)
 800ec00:	695b      	ldr	r3, [r3, #20]
 800ec02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ec06:	2be0      	cmp	r3, #224	; 0xe0
 800ec08:	d00c      	beq.n	800ec24 <ip4_input+0x304>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ec0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ec0e:	4619      	mov	r1, r3
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f002 f8e9 	bl	8010de8 <pbuf_header_force>
        p->payload = iphdr;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec1a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ec1c:	2102      	movs	r1, #2
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff fad8 	bl	800e1d4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f002 f8f1 	bl	8010e0c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ec2a:	4b0b      	ldr	r3, [pc, #44]	; (800ec58 <ip4_input+0x338>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ec30:	4b09      	ldr	r3, [pc, #36]	; (800ec58 <ip4_input+0x338>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ec36:	4b08      	ldr	r3, [pc, #32]	; (800ec58 <ip4_input+0x338>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ec3c:	4b06      	ldr	r3, [pc, #24]	; (800ec58 <ip4_input+0x338>)
 800ec3e:	2200      	movs	r2, #0
 800ec40:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ec42:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <ip4_input+0x338>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ec48:	4b03      	ldr	r3, [pc, #12]	; (800ec58 <ip4_input+0x338>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3728      	adds	r7, #40	; 0x28
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	2001d26c 	.word	0x2001d26c

0800ec5c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b08a      	sub	sp, #40	; 0x28
 800ec60:	af06      	add	r7, sp, #24
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
 800ec68:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 800ec6a:	78fa      	ldrb	r2, [r7, #3]
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	9304      	str	r3, [sp, #16]
 800ec70:	2300      	movs	r3, #0
 800ec72:	9303      	str	r3, [sp, #12]
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	9302      	str	r3, [sp, #8]
 800ec78:	7f3b      	ldrb	r3, [r7, #28]
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	7e3b      	ldrb	r3, [r7, #24]
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	4613      	mov	r3, r2
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	68b9      	ldr	r1, [r7, #8]
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f000 f805 	bl	800ec96 <ip4_output_if_opt>
 800ec8c:	4603      	mov	r3, r0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b08c      	sub	sp, #48	; 0x30
 800ec9a:	af06      	add	r7, sp, #24
 800ec9c:	60f8      	str	r0, [r7, #12]
 800ec9e:	60b9      	str	r1, [r7, #8]
 800eca0:	607a      	str	r2, [r7, #4]
 800eca2:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d009      	beq.n	800ecc2 <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d003      	beq.n	800ecbc <ip4_output_if_opt+0x26>
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 800ecc2:	78fa      	ldrb	r2, [r7, #3]
 800ecc4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ecc6:	9304      	str	r3, [sp, #16]
 800ecc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecca:	9303      	str	r3, [sp, #12]
 800eccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecce:	9302      	str	r3, [sp, #8]
 800ecd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ecd4:	9301      	str	r3, [sp, #4]
 800ecd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	6979      	ldr	r1, [r7, #20]
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 f822 	bl	800ed2c <ip4_output_if_opt_src>
 800ece8:	4603      	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b08a      	sub	sp, #40	; 0x28
 800ecf6:	af06      	add	r7, sp, #24
 800ecf8:	60f8      	str	r0, [r7, #12]
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 800ed00:	78fa      	ldrb	r2, [r7, #3]
 800ed02:	2300      	movs	r3, #0
 800ed04:	9304      	str	r3, [sp, #16]
 800ed06:	2300      	movs	r3, #0
 800ed08:	9303      	str	r3, [sp, #12]
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	9302      	str	r3, [sp, #8]
 800ed0e:	7f3b      	ldrb	r3, [r7, #28]
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	7e3b      	ldrb	r3, [r7, #24]
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	4613      	mov	r3, r2
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	68b9      	ldr	r1, [r7, #8]
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f000 f805 	bl	800ed2c <ip4_output_if_opt_src>
 800ed22:	4603      	mov	r3, r0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b088      	sub	sp, #32
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	89db      	ldrh	r3, [r3, #14]
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d006      	beq.n	800ed50 <ip4_output_if_opt_src+0x24>
 800ed42:	4b62      	ldr	r3, [pc, #392]	; (800eecc <ip4_output_if_opt_src+0x1a0>)
 800ed44:	f240 3233 	movw	r2, #819	; 0x333
 800ed48:	4961      	ldr	r1, [pc, #388]	; (800eed0 <ip4_output_if_opt_src+0x1a4>)
 800ed4a:	4862      	ldr	r0, [pc, #392]	; (800eed4 <ip4_output_if_opt_src+0x1a8>)
 800ed4c:	f008 ffaa 	bl	8017ca4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 8092 	beq.w	800ee7c <ip4_output_if_opt_src+0x150>
    u16_t ip_hlen = IP_HLEN;
 800ed58:	2314      	movs	r3, #20
 800ed5a:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	83bb      	strh	r3, [r7, #28]
    if (optlen != 0) {
 800ed60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d02b      	beq.n	800edbe <ip4_output_if_opt_src+0x92>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
 800ed66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ed68:	3303      	adds	r3, #3
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	f023 0303 	bic.w	r3, r3, #3
 800ed70:	83bb      	strh	r3, [r7, #28]
      ip_hlen += optlen_aligned;
 800ed72:	8bfa      	ldrh	r2, [r7, #30]
 800ed74:	8bbb      	ldrh	r3, [r7, #28]
 800ed76:	4413      	add	r3, r2
 800ed78:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
 800ed7a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ed7e:	4619      	mov	r1, r3
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f002 f81f 	bl	8010dc4 <pbuf_header>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <ip4_output_if_opt_src+0x66>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 800ed8c:	f06f 0301 	mvn.w	r3, #1
 800ed90:	e098      	b.n	800eec4 <ip4_output_if_opt_src+0x198>
      }
      MEMCPY(p->payload, ip_options, optlen);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ed98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f008 ff6f 	bl	8017c7e <memcpy>
      if (optlen < optlen_aligned) {
 800eda0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800eda2:	8bbb      	ldrh	r3, [r7, #28]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d20a      	bcs.n	800edbe <ip4_output_if_opt_src+0x92>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800edae:	18d0      	adds	r0, r2, r3
 800edb0:	8bba      	ldrh	r2, [r7, #28]
 800edb2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	461a      	mov	r2, r3
 800edb8:	2100      	movs	r1, #0
 800edba:	f008 ff6b 	bl	8017c94 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800edbe:	2114      	movs	r1, #20
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f001 ffff 	bl	8010dc4 <pbuf_header>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <ip4_output_if_opt_src+0xa6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800edcc:	f06f 0301 	mvn.w	r3, #1
 800edd0:	e078      	b.n	800eec4 <ip4_output_if_opt_src+0x198>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	895b      	ldrh	r3, [r3, #10]
 800eddc:	2b13      	cmp	r3, #19
 800edde:	d806      	bhi.n	800edee <ip4_output_if_opt_src+0xc2>
 800ede0:	4b3a      	ldr	r3, [pc, #232]	; (800eecc <ip4_output_if_opt_src+0x1a0>)
 800ede2:	f240 3261 	movw	r2, #865	; 0x361
 800ede6:	493c      	ldr	r1, [pc, #240]	; (800eed8 <ip4_output_if_opt_src+0x1ac>)
 800ede8:	483a      	ldr	r0, [pc, #232]	; (800eed4 <ip4_output_if_opt_src+0x1a8>)
 800edea:	f008 ff5b 	bl	8017ca4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	78fa      	ldrb	r2, [r7, #3]
 800edf2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800edfa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ee04:	8bfb      	ldrh	r3, [r7, #30]
 800ee06:	089b      	lsrs	r3, r3, #2
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee10:	b2da      	uxtb	r2, r3
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ee1c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	891b      	ldrh	r3, [r3, #8]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fb ff3c 	bl	800aca0 <lwip_htons>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	2200      	movs	r2, #0
 800ee34:	719a      	strb	r2, [r3, #6]
 800ee36:	2200      	movs	r2, #0
 800ee38:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee3a:	4b28      	ldr	r3, [pc, #160]	; (800eedc <ip4_output_if_opt_src+0x1b0>)
 800ee3c:	881b      	ldrh	r3, [r3, #0]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fb ff2e 	bl	800aca0 <lwip_htons>
 800ee44:	4603      	mov	r3, r0
 800ee46:	461a      	mov	r2, r3
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ee4c:	4b23      	ldr	r3, [pc, #140]	; (800eedc <ip4_output_if_opt_src+0x1b0>)
 800ee4e:	881b      	ldrh	r3, [r3, #0]
 800ee50:	3301      	adds	r3, #1
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	4b21      	ldr	r3, [pc, #132]	; (800eedc <ip4_output_if_opt_src+0x1b0>)
 800ee56:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d104      	bne.n	800ee68 <ip4_output_if_opt_src+0x13c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ee5e:	4b20      	ldr	r3, [pc, #128]	; (800eee0 <ip4_output_if_opt_src+0x1b4>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	60da      	str	r2, [r3, #12]
 800ee66:	e003      	b.n	800ee70 <ip4_output_if_opt_src+0x144>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	2200      	movs	r2, #0
 800ee74:	729a      	strb	r2, [r3, #10]
 800ee76:	2200      	movs	r2, #0
 800ee78:	72da      	strb	r2, [r3, #11]
 800ee7a:	e008      	b.n	800ee8e <ip4_output_if_opt_src+0x162>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	691b      	ldr	r3, [r3, #16]
 800ee86:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ee88:	f107 0314 	add.w	r3, r7, #20
 800ee8c:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f000 f828 	bl	800eee4 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00c      	beq.n	800eeb6 <ip4_output_if_opt_src+0x18a>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	891a      	ldrh	r2, [r3, #8]
 800eea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d906      	bls.n	800eeb6 <ip4_output_if_opt_src+0x18a>
    return ip4_frag(p, netif, dest);
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 fd11 	bl	800f8d4 <ip4_frag>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	e006      	b.n	800eec4 <ip4_output_if_opt_src+0x198>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb8:	695b      	ldr	r3, [r3, #20]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	68f9      	ldr	r1, [r7, #12]
 800eebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eec0:	4798      	blx	r3
 800eec2:	4603      	mov	r3, r0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3720      	adds	r7, #32
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	0801a46c 	.word	0x0801a46c
 800eed0:	0801a4a0 	.word	0x0801a4a0
 800eed4:	0801a4ac 	.word	0x0801a4ac
 800eed8:	0801a4d4 	.word	0x0801a4d4
 800eedc:	20019f3c 	.word	0x20019f3c
 800eee0:	0801be94 	.word	0x0801be94

0800eee4 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	60fb      	str	r3, [r7, #12]
                    ip4_addr1_16(&iphdr->dest),
                    ip4_addr2_16(&iphdr->dest),
                    ip4_addr3_16(&iphdr->dest),
                    ip4_addr4_16(&iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
}
 800eef2:	bf00      	nop
 800eef4:	3714      	adds	r7, #20
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr

0800eefe <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800eefe:	b480      	push	{r7}
 800ef00:	b085      	sub	sp, #20
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef12:	d002      	beq.n	800ef1a <ip4_addr_isbroadcast_u32+0x1c>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d101      	bne.n	800ef1e <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e02a      	b.n	800ef74 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ef24:	f003 0302 	and.w	r3, r3, #2
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d101      	bne.n	800ef30 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	e021      	b.n	800ef74 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	3304      	adds	r3, #4
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d101      	bne.n	800ef40 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	e019      	b.n	800ef74 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	3304      	adds	r3, #4
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	405a      	eors	r2, r3
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4013      	ands	r3, r2
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d10d      	bne.n	800ef72 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	3308      	adds	r3, #8
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	43da      	mvns	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	3308      	adds	r3, #8
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d101      	bne.n	800ef72 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e000      	b.n	800ef74 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ef72:	2300      	movs	r3, #0
  }
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3714      	adds	r7, #20
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ef8a:	4b12      	ldr	r3, [pc, #72]	; (800efd4 <ip_reass_tmr+0x54>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ef90:	e018      	b.n	800efc4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	7fdb      	ldrb	r3, [r3, #31]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00b      	beq.n	800efb2 <ip_reass_tmr+0x32>
      r->timer--;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	7fdb      	ldrb	r3, [r3, #31]
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	60fb      	str	r3, [r7, #12]
 800efb0:	e008      	b.n	800efc4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800efbc:	68b9      	ldr	r1, [r7, #8]
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f80a 	bl	800efd8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e3      	bne.n	800ef92 <ip_reass_tmr+0x12>
     }
   }
}
 800efca:	bf00      	nop
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	20019f44 	.word	0x20019f44

0800efd8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800efe6:	683a      	ldr	r2, [r7, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	429a      	cmp	r2, r3
 800efec:	d105      	bne.n	800effa <ip_reass_free_complete_datagram+0x22>
 800efee:	4b45      	ldr	r3, [pc, #276]	; (800f104 <ip_reass_free_complete_datagram+0x12c>)
 800eff0:	22ab      	movs	r2, #171	; 0xab
 800eff2:	4945      	ldr	r1, [pc, #276]	; (800f108 <ip_reass_free_complete_datagram+0x130>)
 800eff4:	4845      	ldr	r0, [pc, #276]	; (800f10c <ip_reass_free_complete_datagram+0x134>)
 800eff6:	f008 fe55 	bl	8017ca4 <iprintf>
  if (prev != NULL) {
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00a      	beq.n	800f016 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	429a      	cmp	r2, r3
 800f008:	d005      	beq.n	800f016 <ip_reass_free_complete_datagram+0x3e>
 800f00a:	4b3e      	ldr	r3, [pc, #248]	; (800f104 <ip_reass_free_complete_datagram+0x12c>)
 800f00c:	22ad      	movs	r2, #173	; 0xad
 800f00e:	4940      	ldr	r1, [pc, #256]	; (800f110 <ip_reass_free_complete_datagram+0x138>)
 800f010:	483e      	ldr	r0, [pc, #248]	; (800f10c <ip_reass_free_complete_datagram+0x134>)
 800f012:	f008 fe47 	bl	8017ca4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	889b      	ldrh	r3, [r3, #4]
 800f022:	b29b      	uxth	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d12a      	bne.n	800f07e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	6858      	ldr	r0, [r3, #4]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	3308      	adds	r3, #8
 800f03e:	2214      	movs	r2, #20
 800f040:	4619      	mov	r1, r3
 800f042:	f008 fe1c 	bl	8017c7e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f046:	2101      	movs	r1, #1
 800f048:	69b8      	ldr	r0, [r7, #24]
 800f04a:	f7ff f8d3 	bl	800e1f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f04e:	69b8      	ldr	r0, [r7, #24]
 800f050:	f001 ff76 	bl	8010f40 <pbuf_clen>
 800f054:	4603      	mov	r3, r0
 800f056:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f058:	8bfa      	ldrh	r2, [r7, #30]
 800f05a:	8a7b      	ldrh	r3, [r7, #18]
 800f05c:	4413      	add	r3, r2
 800f05e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f062:	db05      	blt.n	800f070 <ip_reass_free_complete_datagram+0x98>
 800f064:	4b27      	ldr	r3, [pc, #156]	; (800f104 <ip_reass_free_complete_datagram+0x12c>)
 800f066:	22bc      	movs	r2, #188	; 0xbc
 800f068:	492a      	ldr	r1, [pc, #168]	; (800f114 <ip_reass_free_complete_datagram+0x13c>)
 800f06a:	4828      	ldr	r0, [pc, #160]	; (800f10c <ip_reass_free_complete_datagram+0x134>)
 800f06c:	f008 fe1a 	bl	8017ca4 <iprintf>
    pbufs_freed += clen;
 800f070:	8bfa      	ldrh	r2, [r7, #30]
 800f072:	8a7b      	ldrh	r3, [r7, #18]
 800f074:	4413      	add	r3, r2
 800f076:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f078:	69b8      	ldr	r0, [r7, #24]
 800f07a:	f001 fec7 	bl	8010e0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f084:	e01f      	b.n	800f0c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f001 ff52 	bl	8010f40 <pbuf_clen>
 800f09c:	4603      	mov	r3, r0
 800f09e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f0a0:	8bfa      	ldrh	r2, [r7, #30]
 800f0a2:	8a7b      	ldrh	r3, [r7, #18]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0aa:	db05      	blt.n	800f0b8 <ip_reass_free_complete_datagram+0xe0>
 800f0ac:	4b15      	ldr	r3, [pc, #84]	; (800f104 <ip_reass_free_complete_datagram+0x12c>)
 800f0ae:	22cc      	movs	r2, #204	; 0xcc
 800f0b0:	4918      	ldr	r1, [pc, #96]	; (800f114 <ip_reass_free_complete_datagram+0x13c>)
 800f0b2:	4816      	ldr	r0, [pc, #88]	; (800f10c <ip_reass_free_complete_datagram+0x134>)
 800f0b4:	f008 fdf6 	bl	8017ca4 <iprintf>
    pbufs_freed += clen;
 800f0b8:	8bfa      	ldrh	r2, [r7, #30]
 800f0ba:	8a7b      	ldrh	r3, [r7, #18]
 800f0bc:	4413      	add	r3, r2
 800f0be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f001 fea3 	bl	8010e0c <pbuf_free>
  while (p != NULL) {
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1dc      	bne.n	800f086 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f0cc:	6839      	ldr	r1, [r7, #0]
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 f8c2 	bl	800f258 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800f0d4:	4b10      	ldr	r3, [pc, #64]	; (800f118 <ip_reass_free_complete_datagram+0x140>)
 800f0d6:	881b      	ldrh	r3, [r3, #0]
 800f0d8:	8bfa      	ldrh	r2, [r7, #30]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d905      	bls.n	800f0ea <ip_reass_free_complete_datagram+0x112>
 800f0de:	4b09      	ldr	r3, [pc, #36]	; (800f104 <ip_reass_free_complete_datagram+0x12c>)
 800f0e0:	22d2      	movs	r2, #210	; 0xd2
 800f0e2:	490e      	ldr	r1, [pc, #56]	; (800f11c <ip_reass_free_complete_datagram+0x144>)
 800f0e4:	4809      	ldr	r0, [pc, #36]	; (800f10c <ip_reass_free_complete_datagram+0x134>)
 800f0e6:	f008 fddd 	bl	8017ca4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800f0ea:	4b0b      	ldr	r3, [pc, #44]	; (800f118 <ip_reass_free_complete_datagram+0x140>)
 800f0ec:	881a      	ldrh	r2, [r3, #0]
 800f0ee:	8bfb      	ldrh	r3, [r7, #30]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	b29a      	uxth	r2, r3
 800f0f4:	4b08      	ldr	r3, [pc, #32]	; (800f118 <ip_reass_free_complete_datagram+0x140>)
 800f0f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f0f8:	8bfb      	ldrh	r3, [r7, #30]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3720      	adds	r7, #32
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	0801a504 	.word	0x0801a504
 800f108:	0801a540 	.word	0x0801a540
 800f10c:	0801a54c 	.word	0x0801a54c
 800f110:	0801a574 	.word	0x0801a574
 800f114:	0801a588 	.word	0x0801a588
 800f118:	20019f48 	.word	0x20019f48
 800f11c:	0801a5a8 	.word	0x0801a5a8

0800f120 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b08a      	sub	sp, #40	; 0x28
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f12a:	2300      	movs	r3, #0
 800f12c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f12e:	2300      	movs	r3, #0
 800f130:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f136:	2300      	movs	r3, #0
 800f138:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f13a:	2300      	movs	r3, #0
 800f13c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f13e:	4b28      	ldr	r3, [pc, #160]	; (800f1e0 <ip_reass_remove_oldest_datagram+0xc0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f144:	e030      	b.n	800f1a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	695a      	ldr	r2, [r3, #20]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d10c      	bne.n	800f16c <ip_reass_remove_oldest_datagram+0x4c>
 800f152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f154:	699a      	ldr	r2, [r3, #24]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	691b      	ldr	r3, [r3, #16]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d106      	bne.n	800f16c <ip_reass_remove_oldest_datagram+0x4c>
 800f15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f160:	899a      	ldrh	r2, [r3, #12]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	889b      	ldrh	r3, [r3, #4]
 800f166:	b29b      	uxth	r3, r3
 800f168:	429a      	cmp	r2, r3
 800f16a:	d014      	beq.n	800f196 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	3301      	adds	r3, #1
 800f170:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f172:	6a3b      	ldr	r3, [r7, #32]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d104      	bne.n	800f182 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	61bb      	str	r3, [r7, #24]
 800f180:	e009      	b.n	800f196 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f184:	7fda      	ldrb	r2, [r3, #31]
 800f186:	6a3b      	ldr	r3, [r7, #32]
 800f188:	7fdb      	ldrb	r3, [r3, #31]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d803      	bhi.n	800f196 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f190:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d001      	beq.n	800f1a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1cb      	bne.n	800f146 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d008      	beq.n	800f1c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f1b4:	69b9      	ldr	r1, [r7, #24]
 800f1b6:	6a38      	ldr	r0, [r7, #32]
 800f1b8:	f7ff ff0e 	bl	800efd8 <ip_reass_free_complete_datagram>
 800f1bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f1be:	697a      	ldr	r2, [r7, #20]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f1c6:	697a      	ldr	r2, [r7, #20]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	da02      	bge.n	800f1d4 <ip_reass_remove_oldest_datagram+0xb4>
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	dcac      	bgt.n	800f12e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f1d4:	697b      	ldr	r3, [r7, #20]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3728      	adds	r7, #40	; 0x28
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	20019f44 	.word	0x20019f44

0800f1e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f1ee:	2004      	movs	r0, #4
 800f1f0:	f001 f83e 	bl	8010270 <memp_malloc>
 800f1f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d110      	bne.n	800f21e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f1fc:	6839      	ldr	r1, [r7, #0]
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7ff ff8e 	bl	800f120 <ip_reass_remove_oldest_datagram>
 800f204:	4602      	mov	r2, r0
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	429a      	cmp	r2, r3
 800f20a:	db03      	blt.n	800f214 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f20c:	2004      	movs	r0, #4
 800f20e:	f001 f82f 	bl	8010270 <memp_malloc>
 800f212:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800f21a:	2300      	movs	r3, #0
 800f21c:	e016      	b.n	800f24c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f21e:	2220      	movs	r2, #32
 800f220:	2100      	movs	r1, #0
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f008 fd36 	bl	8017c94 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2203      	movs	r2, #3
 800f22c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f22e:	4b09      	ldr	r3, [pc, #36]	; (800f254 <ip_reass_enqueue_new_datagram+0x70>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f236:	4a07      	ldr	r2, [pc, #28]	; (800f254 <ip_reass_enqueue_new_datagram+0x70>)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3308      	adds	r3, #8
 800f240:	2214      	movs	r2, #20
 800f242:	6879      	ldr	r1, [r7, #4]
 800f244:	4618      	mov	r0, r3
 800f246:	f008 fd1a 	bl	8017c7e <memcpy>
  return ipr;
 800f24a:	68fb      	ldr	r3, [r7, #12]
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	20019f44 	.word	0x20019f44

0800f258 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f262:	4b10      	ldr	r3, [pc, #64]	; (800f2a4 <ip_reass_dequeue_datagram+0x4c>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d104      	bne.n	800f276 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a0c      	ldr	r2, [pc, #48]	; (800f2a4 <ip_reass_dequeue_datagram+0x4c>)
 800f272:	6013      	str	r3, [r2, #0]
 800f274:	e00d      	b.n	800f292 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d106      	bne.n	800f28a <ip_reass_dequeue_datagram+0x32>
 800f27c:	4b0a      	ldr	r3, [pc, #40]	; (800f2a8 <ip_reass_dequeue_datagram+0x50>)
 800f27e:	f240 1245 	movw	r2, #325	; 0x145
 800f282:	490a      	ldr	r1, [pc, #40]	; (800f2ac <ip_reass_dequeue_datagram+0x54>)
 800f284:	480a      	ldr	r0, [pc, #40]	; (800f2b0 <ip_reass_dequeue_datagram+0x58>)
 800f286:	f008 fd0d 	bl	8017ca4 <iprintf>
    prev->next = ipr->next;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f292:	6879      	ldr	r1, [r7, #4]
 800f294:	2004      	movs	r0, #4
 800f296:	f001 f83d 	bl	8010314 <memp_free>
}
 800f29a:	bf00      	nop
 800f29c:	3708      	adds	r7, #8
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20019f44 	.word	0x20019f44
 800f2a8:	0801a504 	.word	0x0801a504
 800f2ac:	0801a5c4 	.word	0x0801a5c4
 800f2b0:	0801a54c 	.word	0x0801a54c

0800f2b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b08c      	sub	sp, #48	; 0x30
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	885b      	ldrh	r3, [r3, #2]
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fb fce3 	bl	800aca0 <lwip_htons>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	461a      	mov	r2, r3
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	f003 030f 	and.w	r3, r3, #15
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	1ad3      	subs	r3, r2, r3
 800f2f0:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	88db      	ldrh	r3, [r3, #6]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fb fcd1 	bl	800aca0 <lwip_htons>
 800f2fe:	4603      	mov	r3, r0
 800f300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f304:	b29b      	uxth	r3, r3
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	2200      	movs	r2, #0
 800f314:	701a      	strb	r2, [r3, #0]
 800f316:	2200      	movs	r2, #0
 800f318:	705a      	strb	r2, [r3, #1]
 800f31a:	2200      	movs	r2, #0
 800f31c:	709a      	strb	r2, [r3, #2]
 800f31e:	2200      	movs	r2, #0
 800f320:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f324:	8b3a      	ldrh	r2, [r7, #24]
 800f326:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800f328:	8b3a      	ldrh	r2, [r7, #24]
 800f32a:	8b7b      	ldrh	r3, [r7, #26]
 800f32c:	4413      	add	r3, r2
 800f32e:	b29a      	uxth	r2, r3
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	627b      	str	r3, [r7, #36]	; 0x24
 800f33a:	e061      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	889b      	ldrh	r3, [r3, #4]
 800f346:	b29a      	uxth	r2, r3
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	889b      	ldrh	r3, [r3, #4]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	429a      	cmp	r2, r3
 800f350:	d232      	bcs.n	800f3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f356:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d01f      	beq.n	800f39e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	889b      	ldrh	r3, [r3, #4]
 800f362:	b29a      	uxth	r2, r3
 800f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f366:	88db      	ldrh	r3, [r3, #6]
 800f368:	b29b      	uxth	r3, r3
 800f36a:	429a      	cmp	r2, r3
 800f36c:	f0c0 80e8 	bcc.w	800f540 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	88db      	ldrh	r3, [r3, #6]
 800f374:	b29a      	uxth	r2, r3
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	889b      	ldrh	r3, [r3, #4]
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	429a      	cmp	r2, r3
 800f37e:	f200 80df 	bhi.w	800f540 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	88db      	ldrh	r3, [r3, #6]
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f390:	889b      	ldrh	r3, [r3, #4]
 800f392:	b29b      	uxth	r3, r3
 800f394:	429a      	cmp	r2, r3
 800f396:	d037      	beq.n	800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f398:	2300      	movs	r3, #0
 800f39a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f39c:	e034      	b.n	800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	88db      	ldrh	r3, [r3, #6]
 800f3a2:	b29a      	uxth	r2, r3
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	889b      	ldrh	r3, [r3, #4]
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	f200 80c3 	bhi.w	800f536 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	605a      	str	r2, [r3, #4]
      break;
 800f3b6:	e027      	b.n	800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800f3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ba:	889b      	ldrh	r3, [r3, #4]
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	889b      	ldrh	r3, [r3, #4]
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	f000 80b8 	beq.w	800f53a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3cc:	889b      	ldrh	r3, [r3, #4]
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	88db      	ldrh	r3, [r3, #6]
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	f0c0 80b1 	bcc.w	800f53e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d009      	beq.n	800f3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	88db      	ldrh	r3, [r3, #6]
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	889b      	ldrh	r3, [r3, #4]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d001      	beq.n	800f3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f402:	2b00      	cmp	r3, #0
 800f404:	d19a      	bne.n	800f33c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800f406:	e000      	b.n	800f40a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800f408:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d12d      	bne.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f412:	2b00      	cmp	r3, #0
 800f414:	d01c      	beq.n	800f450 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	88db      	ldrh	r3, [r3, #6]
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41e:	889b      	ldrh	r3, [r3, #4]
 800f420:	b29b      	uxth	r3, r3
 800f422:	429a      	cmp	r2, r3
 800f424:	d906      	bls.n	800f434 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800f426:	4b50      	ldr	r3, [pc, #320]	; (800f568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800f428:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f42c:	494f      	ldr	r1, [pc, #316]	; (800f56c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f42e:	4850      	ldr	r0, [pc, #320]	; (800f570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f430:	f008 fc38 	bl	8017ca4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43c:	88db      	ldrh	r3, [r3, #6]
 800f43e:	b29a      	uxth	r2, r3
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	889b      	ldrh	r3, [r3, #4]
 800f444:	b29b      	uxth	r3, r3
 800f446:	429a      	cmp	r2, r3
 800f448:	d010      	beq.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800f44a:	2300      	movs	r3, #0
 800f44c:	623b      	str	r3, [r7, #32]
 800f44e:	e00d      	b.n	800f46c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d006      	beq.n	800f466 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800f458:	4b43      	ldr	r3, [pc, #268]	; (800f568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800f45a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800f45e:	4945      	ldr	r1, [pc, #276]	; (800f574 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f460:	4843      	ldr	r0, [pc, #268]	; (800f570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f462:	f008 fc1f 	bl	8017ca4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d105      	bne.n	800f47e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	7f9b      	ldrb	r3, [r3, #30]
 800f476:	f003 0301 	and.w	r3, r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d059      	beq.n	800f532 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d04f      	beq.n	800f524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d006      	beq.n	800f49a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	889b      	ldrh	r3, [r3, #4]
 800f494:	b29b      	uxth	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d002      	beq.n	800f4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	623b      	str	r3, [r7, #32]
 800f49e:	e041      	b.n	800f524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f4aa:	e012      	b.n	800f4d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b4:	88db      	ldrh	r3, [r3, #6]
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ba:	889b      	ldrh	r3, [r3, #4]
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d002      	beq.n	800f4c8 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	623b      	str	r3, [r7, #32]
            break;
 800f4c6:	e007      	b.n	800f4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1e9      	bne.n	800f4ac <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f4d8:	6a3b      	ldr	r3, [r7, #32]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d022      	beq.n	800f524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800f4e6:	4b20      	ldr	r3, [pc, #128]	; (800f568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800f4e8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800f4ec:	4922      	ldr	r1, [pc, #136]	; (800f578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f4ee:	4820      	ldr	r0, [pc, #128]	; (800f570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f4f0:	f008 fbd8 	bl	8017ca4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	685a      	ldr	r2, [r3, #4]
 800f4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d106      	bne.n	800f50e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800f500:	4b19      	ldr	r3, [pc, #100]	; (800f568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800f502:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800f506:	491c      	ldr	r1, [pc, #112]	; (800f578 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f508:	4819      	ldr	r0, [pc, #100]	; (800f570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f50a:	f008 fbcb 	bl	8017ca4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d006      	beq.n	800f524 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800f516:	4b14      	ldr	r3, [pc, #80]	; (800f568 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800f518:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800f51c:	4917      	ldr	r1, [pc, #92]	; (800f57c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f51e:	4814      	ldr	r0, [pc, #80]	; (800f570 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f520:	f008 fbc0 	bl	8017ca4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f524:	6a3b      	ldr	r3, [r7, #32]
 800f526:	2b00      	cmp	r3, #0
 800f528:	bf14      	ite	ne
 800f52a:	2301      	movne	r3, #1
 800f52c:	2300      	moveq	r3, #0
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	e016      	b.n	800f560 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f532:	2300      	movs	r3, #0
 800f534:	e014      	b.n	800f560 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 800f536:	bf00      	nop
 800f538:	e002      	b.n	800f540 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800f53a:	bf00      	nop
 800f53c:	e000      	b.n	800f540 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800f53e:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800f540:	68b8      	ldr	r0, [r7, #8]
 800f542:	f001 fcfd 	bl	8010f40 <pbuf_clen>
 800f546:	4603      	mov	r3, r0
 800f548:	461a      	mov	r2, r3
 800f54a:	4b0d      	ldr	r3, [pc, #52]	; (800f580 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	1a9b      	subs	r3, r3, r2
 800f550:	b29a      	uxth	r2, r3
 800f552:	4b0b      	ldr	r3, [pc, #44]	; (800f580 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f554:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800f556:	68b8      	ldr	r0, [r7, #8]
 800f558:	f001 fc58 	bl	8010e0c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800f560:	4618      	mov	r0, r3
 800f562:	3730      	adds	r7, #48	; 0x30
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	0801a504 	.word	0x0801a504
 800f56c:	0801a5e0 	.word	0x0801a5e0
 800f570:	0801a54c 	.word	0x0801a54c
 800f574:	0801a600 	.word	0x0801a600
 800f578:	0801a638 	.word	0x0801a638
 800f57c:	0801a648 	.word	0x0801a648
 800f580:	20019f48 	.word	0x20019f48

0800f584 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b08e      	sub	sp, #56	; 0x38
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	f003 030f 	and.w	r3, r3, #15
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	2b14      	cmp	r3, #20
 800f59e:	f040 8131 	bne.w	800f804 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a4:	88db      	ldrh	r3, [r3, #6]
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fb fb79 	bl	800aca0 <lwip_htons>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	00db      	lsls	r3, r3, #3
 800f5b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5bc:	885b      	ldrh	r3, [r3, #2]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fb fb6d 	bl	800aca0 <lwip_htons>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	f003 030f 	and.w	r3, r3, #15
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	1ad3      	subs	r3, r2, r3
 800f5dc:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f001 fcae 	bl	8010f40 <pbuf_clen>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f5e8:	4b8c      	ldr	r3, [pc, #560]	; (800f81c <ip4_reass+0x298>)
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5f0:	4413      	add	r3, r2
 800f5f2:	2b0a      	cmp	r3, #10
 800f5f4:	dd10      	ble.n	800f618 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f5f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5fc:	f7ff fd90 	bl	800f120 <ip_reass_remove_oldest_datagram>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	f000 8101 	beq.w	800f80a <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f608:	4b84      	ldr	r3, [pc, #528]	; (800f81c <ip4_reass+0x298>)
 800f60a:	881b      	ldrh	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f610:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f612:	2b0a      	cmp	r3, #10
 800f614:	f300 80f9 	bgt.w	800f80a <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f618:	4b81      	ldr	r3, [pc, #516]	; (800f820 <ip4_reass+0x29c>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	633b      	str	r3, [r7, #48]	; 0x30
 800f61e:	e015      	b.n	800f64c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f622:	695a      	ldr	r2, [r3, #20]
 800f624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d10c      	bne.n	800f646 <ip4_reass+0xc2>
 800f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62e:	699a      	ldr	r2, [r3, #24]
 800f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f632:	691b      	ldr	r3, [r3, #16]
 800f634:	429a      	cmp	r2, r3
 800f636:	d106      	bne.n	800f646 <ip4_reass+0xc2>
 800f638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63a:	899a      	ldrh	r2, [r3, #12]
 800f63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63e:	889b      	ldrh	r3, [r3, #4]
 800f640:	b29b      	uxth	r3, r3
 800f642:	429a      	cmp	r2, r3
 800f644:	d006      	beq.n	800f654 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	633b      	str	r3, [r7, #48]	; 0x30
 800f64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d1e6      	bne.n	800f620 <ip4_reass+0x9c>
 800f652:	e000      	b.n	800f656 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f654:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d109      	bne.n	800f670 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f65e:	4619      	mov	r1, r3
 800f660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f662:	f7ff fdbf 	bl	800f1e4 <ip_reass_enqueue_new_datagram>
 800f666:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d11c      	bne.n	800f6a8 <ip4_reass+0x124>
      goto nullreturn;
 800f66e:	e0cc      	b.n	800f80a <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f672:	88db      	ldrh	r3, [r3, #6]
 800f674:	b29b      	uxth	r3, r3
 800f676:	4618      	mov	r0, r3
 800f678:	f7fb fb12 	bl	800aca0 <lwip_htons>
 800f67c:	4603      	mov	r3, r0
 800f67e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f682:	2b00      	cmp	r3, #0
 800f684:	d110      	bne.n	800f6a8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	89db      	ldrh	r3, [r3, #14]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fb fb08 	bl	800aca0 <lwip_htons>
 800f690:	4603      	mov	r3, r0
 800f692:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f696:	2b00      	cmp	r3, #0
 800f698:	d006      	beq.n	800f6a8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69c:	3308      	adds	r3, #8
 800f69e:	2214      	movs	r2, #20
 800f6a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f008 faeb 	bl	8017c7e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	88db      	ldrh	r3, [r3, #6]
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	f003 0320 	and.w	r3, r3, #32
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	bf0c      	ite	eq
 800f6b6:	2301      	moveq	r3, #1
 800f6b8:	2300      	movne	r3, #0
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00e      	beq.n	800f6e2 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800f6c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f6c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6c8:	4413      	add	r3, r2
 800f6ca:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f6cc:	8b7a      	ldrh	r2, [r7, #26]
 800f6ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	f0c0 809a 	bcc.w	800f80a <ip4_reass+0x286>
 800f6d6:	8b7b      	ldrh	r3, [r7, #26]
 800f6d8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	f200 8094 	bhi.w	800f80a <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f6e2:	69fa      	ldr	r2, [r7, #28]
 800f6e4:	6879      	ldr	r1, [r7, #4]
 800f6e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6e8:	f7ff fde4 	bl	800f2b4 <ip_reass_chain_frag_into_datagram_and_validate>
 800f6ec:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6f4:	f000 8088 	beq.w	800f808 <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f6f8:	4b48      	ldr	r3, [pc, #288]	; (800f81c <ip4_reass+0x298>)
 800f6fa:	881a      	ldrh	r2, [r3, #0]
 800f6fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6fe:	4413      	add	r3, r2
 800f700:	b29a      	uxth	r2, r3
 800f702:	4b46      	ldr	r3, [pc, #280]	; (800f81c <ip4_reass+0x298>)
 800f704:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00d      	beq.n	800f728 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800f70c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f70e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f710:	4413      	add	r3, r2
 800f712:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	8a7a      	ldrh	r2, [r7, #18]
 800f718:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	7f9b      	ldrb	r3, [r3, #30]
 800f71e:	f043 0301 	orr.w	r3, r3, #1
 800f722:	b2da      	uxtb	r2, r3
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d168      	bne.n	800f800 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	8b9b      	ldrh	r3, [r3, #28]
 800f732:	3314      	adds	r3, #20
 800f734:	b29a      	uxth	r2, r3
 800f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f738:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74e:	3308      	adds	r3, #8
 800f750:	2214      	movs	r2, #20
 800f752:	4619      	mov	r1, r3
 800f754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f756:	f008 fa92 	bl	8017c7e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	8b9b      	ldrh	r3, [r3, #28]
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fb fa9e 	bl	800aca0 <lwip_htons>
 800f764:	4603      	mov	r3, r0
 800f766:	461a      	mov	r2, r3
 800f768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76e:	2200      	movs	r2, #0
 800f770:	719a      	strb	r2, [r3, #6]
 800f772:	2200      	movs	r2, #0
 800f774:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	2200      	movs	r2, #0
 800f77a:	729a      	strb	r2, [r3, #10]
 800f77c:	2200      	movs	r2, #0
 800f77e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f786:	e00e      	b.n	800f7a6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800f788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800f78e:	f06f 0113 	mvn.w	r1, #19
 800f792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f794:	f001 fb16 	bl	8010dc4 <pbuf_header>
      pbuf_cat(p, r);
 800f798:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f001 fc10 	bl	8010fc0 <pbuf_cat>
      r = iprh->next_pbuf;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1ed      	bne.n	800f788 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f7ac:	4b1c      	ldr	r3, [pc, #112]	; (800f820 <ip4_reass+0x29c>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d102      	bne.n	800f7bc <ip4_reass+0x238>
      ipr_prev = NULL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7ba:	e010      	b.n	800f7de <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f7bc:	4b18      	ldr	r3, [pc, #96]	; (800f820 <ip4_reass+0x29c>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7c2:	e007      	b.n	800f7d4 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800f7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d006      	beq.n	800f7dc <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1f4      	bne.n	800f7c4 <ip4_reass+0x240>
 800f7da:	e000      	b.n	800f7de <ip4_reass+0x25a>
          break;
 800f7dc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7e2:	f7ff fd39 	bl	800f258 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f001 fbaa 	bl	8010f40 <pbuf_clen>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	4b0a      	ldr	r3, [pc, #40]	; (800f81c <ip4_reass+0x298>)
 800f7f2:	881b      	ldrh	r3, [r3, #0]
 800f7f4:	1a9b      	subs	r3, r3, r2
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <ip4_reass+0x298>)
 800f7fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	e008      	b.n	800f812 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f800:	2300      	movs	r3, #0
 800f802:	e006      	b.n	800f812 <ip4_reass+0x28e>
    goto nullreturn;
 800f804:	bf00      	nop
 800f806:	e000      	b.n	800f80a <ip4_reass+0x286>
    goto nullreturn;
 800f808:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f001 fafe 	bl	8010e0c <pbuf_free>
  return NULL;
 800f810:	2300      	movs	r3, #0
}
 800f812:	4618      	mov	r0, r3
 800f814:	3738      	adds	r7, #56	; 0x38
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	20019f48 	.word	0x20019f48
 800f820:	20019f44 	.word	0x20019f44

0800f824 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800f828:	2005      	movs	r0, #5
 800f82a:	f000 fd21 	bl	8010270 <memp_malloc>
 800f82e:	4603      	mov	r3, r0
}
 800f830:	4618      	mov	r0, r3
 800f832:	bd80      	pop	{r7, pc}

0800f834 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d106      	bne.n	800f850 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f842:	4b07      	ldr	r3, [pc, #28]	; (800f860 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f844:	f240 22ae 	movw	r2, #686	; 0x2ae
 800f848:	4906      	ldr	r1, [pc, #24]	; (800f864 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f84a:	4807      	ldr	r0, [pc, #28]	; (800f868 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f84c:	f008 fa2a 	bl	8017ca4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f850:	6879      	ldr	r1, [r7, #4]
 800f852:	2005      	movs	r0, #5
 800f854:	f000 fd5e 	bl	8010314 <memp_free>
}
 800f858:	bf00      	nop
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	0801a504 	.word	0x0801a504
 800f864:	0801a66c 	.word	0x0801a66c
 800f868:	0801a54c 	.word	0x0801a54c

0800f86c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <ipfrag_free_pbuf_custom+0x20>
 800f87e:	4b11      	ldr	r3, [pc, #68]	; (800f8c4 <ipfrag_free_pbuf_custom+0x58>)
 800f880:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800f884:	4910      	ldr	r1, [pc, #64]	; (800f8c8 <ipfrag_free_pbuf_custom+0x5c>)
 800f886:	4811      	ldr	r0, [pc, #68]	; (800f8cc <ipfrag_free_pbuf_custom+0x60>)
 800f888:	f008 fa0c 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	429a      	cmp	r2, r3
 800f892:	d006      	beq.n	800f8a2 <ipfrag_free_pbuf_custom+0x36>
 800f894:	4b0b      	ldr	r3, [pc, #44]	; (800f8c4 <ipfrag_free_pbuf_custom+0x58>)
 800f896:	f240 22b9 	movw	r2, #697	; 0x2b9
 800f89a:	490d      	ldr	r1, [pc, #52]	; (800f8d0 <ipfrag_free_pbuf_custom+0x64>)
 800f89c:	480b      	ldr	r0, [pc, #44]	; (800f8cc <ipfrag_free_pbuf_custom+0x60>)
 800f89e:	f008 fa01 	bl	8017ca4 <iprintf>
  if (pcr->original != NULL) {
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	695b      	ldr	r3, [r3, #20]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d004      	beq.n	800f8b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	695b      	ldr	r3, [r3, #20]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f001 faac 	bl	8010e0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7ff ffbd 	bl	800f834 <ip_frag_free_pbuf_custom_ref>
}
 800f8ba:	bf00      	nop
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	0801a504 	.word	0x0801a504
 800f8c8:	0801a678 	.word	0x0801a678
 800f8cc:	0801a54c 	.word	0x0801a54c
 800f8d0:	0801a684 	.word	0x0801a684

0800f8d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b092      	sub	sp, #72	; 0x48
 800f8d8:	af02      	add	r7, sp, #8
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f8e8:	3b14      	subs	r3, #20
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	da00      	bge.n	800f8f0 <ip4_frag+0x1c>
 800f8ee:	3307      	adds	r3, #7
 800f8f0:	10db      	asrs	r3, r3, #3
 800f8f2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f8f4:	2314      	movs	r3, #20
 800f8f6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800f8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f900:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800f902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	f003 030f 	and.w	r3, r3, #15
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	2b14      	cmp	r3, #20
 800f90e:	d009      	beq.n	800f924 <ip4_frag+0x50>
 800f910:	4b79      	ldr	r3, [pc, #484]	; (800faf8 <ip4_frag+0x224>)
 800f912:	f240 22e1 	movw	r2, #737	; 0x2e1
 800f916:	4979      	ldr	r1, [pc, #484]	; (800fafc <ip4_frag+0x228>)
 800f918:	4879      	ldr	r0, [pc, #484]	; (800fb00 <ip4_frag+0x22c>)
 800f91a:	f008 f9c3 	bl	8017ca4 <iprintf>
 800f91e:	f06f 0305 	mvn.w	r3, #5
 800f922:	e0e5      	b.n	800faf0 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f926:	88db      	ldrh	r3, [r3, #6]
 800f928:	b29b      	uxth	r3, r3
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fb f9b8 	bl	800aca0 <lwip_htons>
 800f930:	4603      	mov	r3, r0
 800f932:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800f934:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f936:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f93a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800f93c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f93e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f942:	2b00      	cmp	r3, #0
 800f944:	d009      	beq.n	800f95a <ip4_frag+0x86>
 800f946:	4b6c      	ldr	r3, [pc, #432]	; (800faf8 <ip4_frag+0x224>)
 800f948:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f94c:	496d      	ldr	r1, [pc, #436]	; (800fb04 <ip4_frag+0x230>)
 800f94e:	486c      	ldr	r0, [pc, #432]	; (800fb00 <ip4_frag+0x22c>)
 800f950:	f008 f9a8 	bl	8017ca4 <iprintf>
 800f954:	f06f 0305 	mvn.w	r3, #5
 800f958:	e0ca      	b.n	800faf0 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	891b      	ldrh	r3, [r3, #8]
 800f95e:	3b14      	subs	r3, #20
 800f960:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800f962:	e0bc      	b.n	800fade <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800f964:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f966:	00da      	lsls	r2, r3, #3
 800f968:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f96a:	4293      	cmp	r3, r2
 800f96c:	bfa8      	it	ge
 800f96e:	4613      	movge	r3, r2
 800f970:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f972:	2200      	movs	r2, #0
 800f974:	2114      	movs	r1, #20
 800f976:	2002      	movs	r0, #2
 800f978:	f000 fed6 	bl	8010728 <pbuf_alloc>
 800f97c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800f97e:	6a3b      	ldr	r3, [r7, #32]
 800f980:	2b00      	cmp	r3, #0
 800f982:	f000 80b2 	beq.w	800faea <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	895b      	ldrh	r3, [r3, #10]
 800f98a:	2b13      	cmp	r3, #19
 800f98c:	d806      	bhi.n	800f99c <ip4_frag+0xc8>
 800f98e:	4b5a      	ldr	r3, [pc, #360]	; (800faf8 <ip4_frag+0x224>)
 800f990:	f240 3209 	movw	r2, #777	; 0x309
 800f994:	495c      	ldr	r1, [pc, #368]	; (800fb08 <ip4_frag+0x234>)
 800f996:	485a      	ldr	r0, [pc, #360]	; (800fb00 <ip4_frag+0x22c>)
 800f998:	f008 f984 	bl	8017ca4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f99c:	6a3b      	ldr	r3, [r7, #32]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	2214      	movs	r2, #20
 800f9a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f008 f96a 	bl	8017c7e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f9aa:	6a3b      	ldr	r3, [r7, #32]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800f9b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f9b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800f9b4:	e04f      	b.n	800fa56 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	895a      	ldrh	r2, [r3, #10]
 800f9ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9bc:	1ad3      	subs	r3, r2, r3
 800f9be:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f9c0:	8bfa      	ldrh	r2, [r7, #30]
 800f9c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	bf28      	it	cs
 800f9c8:	4613      	movcs	r3, r2
 800f9ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f9cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d105      	bne.n	800f9de <ip4_frag+0x10a>
        poff = 0;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	60fb      	str	r3, [r7, #12]
        continue;
 800f9dc:	e03b      	b.n	800fa56 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f9de:	f7ff ff21 	bl	800f824 <ip_frag_alloc_pbuf_custom_ref>
 800f9e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d103      	bne.n	800f9f2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800f9ea:	6a38      	ldr	r0, [r7, #32]
 800f9ec:	f001 fa0e 	bl	8010e0c <pbuf_free>
        goto memerr;
 800f9f0:	e07c      	b.n	800faec <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f9f2:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f9f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9fa:	4413      	add	r3, r2
 800f9fc:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800f9fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fa00:	9201      	str	r2, [sp, #4]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	4603      	mov	r3, r0
 800fa06:	2202      	movs	r2, #2
 800fa08:	2004      	movs	r0, #4
 800fa0a:	f001 f821 	bl	8010a50 <pbuf_alloced_custom>
 800fa0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d106      	bne.n	800fa24 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fa16:	69b8      	ldr	r0, [r7, #24]
 800fa18:	f7ff ff0c 	bl	800f834 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fa1c:	6a38      	ldr	r0, [r7, #32]
 800fa1e:	f001 f9f5 	bl	8010e0c <pbuf_free>
        goto memerr;
 800fa22:	e063      	b.n	800faec <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f001 faa3 	bl	8010f70 <pbuf_ref>
      pcr->original = p;
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	4a36      	ldr	r2, [pc, #216]	; (800fb0c <ip4_frag+0x238>)
 800fa34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fa36:	6979      	ldr	r1, [r7, #20]
 800fa38:	6a38      	ldr	r0, [r7, #32]
 800fa3a:	f001 fac1 	bl	8010fc0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800fa3e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800fa40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800fa46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d004      	beq.n	800fa56 <ip4_frag+0x182>
        poff = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fa56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d1ac      	bne.n	800f9b6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800fa5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fa5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa60:	4413      	add	r3, r2
 800fa62:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fa64:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fa6a:	3b14      	subs	r3, #20
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	bfd4      	ite	le
 800fa70:	2301      	movle	r3, #1
 800fa72:	2300      	movgt	r3, #0
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fa78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa7e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d103      	bne.n	800fa8e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800fa86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa8c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fa8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fb f905 	bl	800aca0 <lwip_htons>
 800fa96:	4603      	mov	r3, r0
 800fa98:	461a      	mov	r2, r3
 800fa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fa9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800faa0:	3314      	adds	r3, #20
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fb f8fb 	bl	800aca0 <lwip_htons>
 800faaa:	4603      	mov	r3, r0
 800faac:	461a      	mov	r2, r3
 800faae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab4:	2200      	movs	r2, #0
 800fab6:	729a      	strb	r2, [r3, #10]
 800fab8:	2200      	movs	r2, #0
 800faba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	695b      	ldr	r3, [r3, #20]
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	6a39      	ldr	r1, [r7, #32]
 800fac4:	68b8      	ldr	r0, [r7, #8]
 800fac6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fac8:	6a38      	ldr	r0, [r7, #32]
 800faca:	f001 f99f 	bl	8010e0c <pbuf_free>
    left -= fragsize;
 800face:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fad0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800fad6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fad8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fada:	4413      	add	r3, r2
 800fadc:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800fade:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f47f af3f 	bne.w	800f964 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e002      	b.n	800faf0 <ip4_frag+0x21c>
      goto memerr;
 800faea:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800faec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3740      	adds	r7, #64	; 0x40
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	0801a504 	.word	0x0801a504
 800fafc:	0801a690 	.word	0x0801a690
 800fb00:	0801a54c 	.word	0x0801a54c
 800fb04:	0801a6b8 	.word	0x0801a6b8
 800fb08:	0801a6d4 	.word	0x0801a6d4
 800fb0c:	0800f86d 	.word	0x0800f86d

0800fb10 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fb18:	4b40      	ldr	r3, [pc, #256]	; (800fc1c <plug_holes+0x10c>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d206      	bcs.n	800fb30 <plug_holes+0x20>
 800fb22:	4b3f      	ldr	r3, [pc, #252]	; (800fc20 <plug_holes+0x110>)
 800fb24:	f240 125d 	movw	r2, #349	; 0x15d
 800fb28:	493e      	ldr	r1, [pc, #248]	; (800fc24 <plug_holes+0x114>)
 800fb2a:	483f      	ldr	r0, [pc, #252]	; (800fc28 <plug_holes+0x118>)
 800fb2c:	f008 f8ba 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fb30:	4b3e      	ldr	r3, [pc, #248]	; (800fc2c <plug_holes+0x11c>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d306      	bcc.n	800fb48 <plug_holes+0x38>
 800fb3a:	4b39      	ldr	r3, [pc, #228]	; (800fc20 <plug_holes+0x110>)
 800fb3c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fb40:	493b      	ldr	r1, [pc, #236]	; (800fc30 <plug_holes+0x120>)
 800fb42:	4839      	ldr	r0, [pc, #228]	; (800fc28 <plug_holes+0x118>)
 800fb44:	f008 f8ae 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	791b      	ldrb	r3, [r3, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d006      	beq.n	800fb5e <plug_holes+0x4e>
 800fb50:	4b33      	ldr	r3, [pc, #204]	; (800fc20 <plug_holes+0x110>)
 800fb52:	f240 125f 	movw	r2, #351	; 0x15f
 800fb56:	4937      	ldr	r1, [pc, #220]	; (800fc34 <plug_holes+0x124>)
 800fb58:	4833      	ldr	r0, [pc, #204]	; (800fc28 <plug_holes+0x118>)
 800fb5a:	f008 f8a3 	bl	8017ca4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	881b      	ldrh	r3, [r3, #0]
 800fb62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb66:	d906      	bls.n	800fb76 <plug_holes+0x66>
 800fb68:	4b2d      	ldr	r3, [pc, #180]	; (800fc20 <plug_holes+0x110>)
 800fb6a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800fb6e:	4932      	ldr	r1, [pc, #200]	; (800fc38 <plug_holes+0x128>)
 800fb70:	482d      	ldr	r0, [pc, #180]	; (800fc28 <plug_holes+0x118>)
 800fb72:	f008 f897 	bl	8017ca4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800fb76:	4b29      	ldr	r3, [pc, #164]	; (800fc1c <plug_holes+0x10c>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	8812      	ldrh	r2, [r2, #0]
 800fb7e:	4413      	add	r3, r2
 800fb80:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d01f      	beq.n	800fbca <plug_holes+0xba>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	791b      	ldrb	r3, [r3, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d11b      	bne.n	800fbca <plug_holes+0xba>
 800fb92:	4b26      	ldr	r3, [pc, #152]	; (800fc2c <plug_holes+0x11c>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	68fa      	ldr	r2, [r7, #12]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d016      	beq.n	800fbca <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fb9c:	4b27      	ldr	r3, [pc, #156]	; (800fc3c <plug_holes+0x12c>)
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d102      	bne.n	800fbac <plug_holes+0x9c>
      lfree = mem;
 800fba6:	4a25      	ldr	r2, [pc, #148]	; (800fc3c <plug_holes+0x12c>)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	881a      	ldrh	r2, [r3, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800fbb4:	4b19      	ldr	r3, [pc, #100]	; (800fc1c <plug_holes+0x10c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	8812      	ldrh	r2, [r2, #0]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	4916      	ldr	r1, [pc, #88]	; (800fc1c <plug_holes+0x10c>)
 800fbc2:	6809      	ldr	r1, [r1, #0]
 800fbc4:	1a52      	subs	r2, r2, r1
 800fbc6:	b292      	uxth	r2, r2
 800fbc8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800fbca:	4b14      	ldr	r3, [pc, #80]	; (800fc1c <plug_holes+0x10c>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	8852      	ldrh	r2, [r2, #2]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fbd6:	68ba      	ldr	r2, [r7, #8]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d01a      	beq.n	800fc14 <plug_holes+0x104>
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	791b      	ldrb	r3, [r3, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d116      	bne.n	800fc14 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fbe6:	4b15      	ldr	r3, [pc, #84]	; (800fc3c <plug_holes+0x12c>)
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d102      	bne.n	800fbf6 <plug_holes+0xe6>
      lfree = pmem;
 800fbf0:	4a12      	ldr	r2, [pc, #72]	; (800fc3c <plug_holes+0x12c>)
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	881a      	ldrh	r2, [r3, #0]
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800fbfe:	4b07      	ldr	r3, [pc, #28]	; (800fc1c <plug_holes+0x10c>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	8812      	ldrh	r2, [r2, #0]
 800fc06:	4413      	add	r3, r2
 800fc08:	68ba      	ldr	r2, [r7, #8]
 800fc0a:	4904      	ldr	r1, [pc, #16]	; (800fc1c <plug_holes+0x10c>)
 800fc0c:	6809      	ldr	r1, [r1, #0]
 800fc0e:	1a52      	subs	r2, r2, r1
 800fc10:	b292      	uxth	r2, r2
 800fc12:	805a      	strh	r2, [r3, #2]
  }
}
 800fc14:	bf00      	nop
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	20019f4c 	.word	0x20019f4c
 800fc20:	0801a6f4 	.word	0x0801a6f4
 800fc24:	0801a724 	.word	0x0801a724
 800fc28:	0801a73c 	.word	0x0801a73c
 800fc2c:	20019f50 	.word	0x20019f50
 800fc30:	0801a764 	.word	0x0801a764
 800fc34:	0801a780 	.word	0x0801a780
 800fc38:	0801a79c 	.word	0x0801a79c
 800fc3c:	20019f54 	.word	0x20019f54

0800fc40 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc46:	4b1e      	ldr	r3, [pc, #120]	; (800fcc0 <mem_init+0x80>)
 800fc48:	3303      	adds	r3, #3
 800fc4a:	f023 0303 	bic.w	r3, r3, #3
 800fc4e:	461a      	mov	r2, r3
 800fc50:	4b1c      	ldr	r3, [pc, #112]	; (800fcc4 <mem_init+0x84>)
 800fc52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc54:	4b1b      	ldr	r3, [pc, #108]	; (800fcc4 <mem_init+0x84>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc60:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800fc6e:	4b15      	ldr	r3, [pc, #84]	; (800fcc4 <mem_init+0x84>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800fc76:	4a14      	ldr	r2, [pc, #80]	; (800fcc8 <mem_init+0x88>)
 800fc78:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fc7a:	4b13      	ldr	r3, [pc, #76]	; (800fcc8 <mem_init+0x88>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fc82:	4b11      	ldr	r3, [pc, #68]	; (800fcc8 <mem_init+0x88>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc8a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fc8c:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <mem_init+0x88>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc94:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc96:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <mem_init+0x84>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a0c      	ldr	r2, [pc, #48]	; (800fccc <mem_init+0x8c>)
 800fc9c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fc9e:	480c      	ldr	r0, [pc, #48]	; (800fcd0 <mem_init+0x90>)
 800fca0:	f007 ff14 	bl	8017acc <sys_mutex_new>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d006      	beq.n	800fcb8 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fcaa:	4b0a      	ldr	r3, [pc, #40]	; (800fcd4 <mem_init+0x94>)
 800fcac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fcb0:	4909      	ldr	r1, [pc, #36]	; (800fcd8 <mem_init+0x98>)
 800fcb2:	480a      	ldr	r0, [pc, #40]	; (800fcdc <mem_init+0x9c>)
 800fcb4:	f007 fff6 	bl	8017ca4 <iprintf>
  }
}
 800fcb8:	bf00      	nop
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	2001d2b8 	.word	0x2001d2b8
 800fcc4:	20019f4c 	.word	0x20019f4c
 800fcc8:	20019f50 	.word	0x20019f50
 800fccc:	20019f54 	.word	0x20019f54
 800fcd0:	20019f58 	.word	0x20019f58
 800fcd4:	0801a6f4 	.word	0x0801a6f4
 800fcd8:	0801a7c8 	.word	0x0801a7c8
 800fcdc:	0801a73c 	.word	0x0801a73c

0800fce0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d050      	beq.n	800fd90 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f003 0303 	and.w	r3, r3, #3
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d006      	beq.n	800fd06 <mem_free+0x26>
 800fcf8:	4b27      	ldr	r3, [pc, #156]	; (800fd98 <mem_free+0xb8>)
 800fcfa:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800fcfe:	4927      	ldr	r1, [pc, #156]	; (800fd9c <mem_free+0xbc>)
 800fd00:	4827      	ldr	r0, [pc, #156]	; (800fda0 <mem_free+0xc0>)
 800fd02:	f007 ffcf 	bl	8017ca4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fd06:	4b27      	ldr	r3, [pc, #156]	; (800fda4 <mem_free+0xc4>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d304      	bcc.n	800fd1a <mem_free+0x3a>
 800fd10:	4b25      	ldr	r3, [pc, #148]	; (800fda8 <mem_free+0xc8>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d306      	bcc.n	800fd28 <mem_free+0x48>
 800fd1a:	4b1f      	ldr	r3, [pc, #124]	; (800fd98 <mem_free+0xb8>)
 800fd1c:	f240 12af 	movw	r2, #431	; 0x1af
 800fd20:	4922      	ldr	r1, [pc, #136]	; (800fdac <mem_free+0xcc>)
 800fd22:	481f      	ldr	r0, [pc, #124]	; (800fda0 <mem_free+0xc0>)
 800fd24:	f007 ffbe 	bl	8017ca4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fd28:	4b1e      	ldr	r3, [pc, #120]	; (800fda4 <mem_free+0xc4>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d304      	bcc.n	800fd3c <mem_free+0x5c>
 800fd32:	4b1d      	ldr	r3, [pc, #116]	; (800fda8 <mem_free+0xc8>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d306      	bcc.n	800fd4a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800fd3c:	f007 ff24 	bl	8017b88 <sys_arch_protect>
 800fd40:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800fd42:	68b8      	ldr	r0, [r7, #8]
 800fd44:	f007 ff2e 	bl	8017ba4 <sys_arch_unprotect>
    return;
 800fd48:	e023      	b.n	800fd92 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fd4a:	4819      	ldr	r0, [pc, #100]	; (800fdb0 <mem_free+0xd0>)
 800fd4c:	f007 feda 	bl	8017b04 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	3b08      	subs	r3, #8
 800fd54:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	791b      	ldrb	r3, [r3, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d106      	bne.n	800fd6c <mem_free+0x8c>
 800fd5e:	4b0e      	ldr	r3, [pc, #56]	; (800fd98 <mem_free+0xb8>)
 800fd60:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800fd64:	4913      	ldr	r1, [pc, #76]	; (800fdb4 <mem_free+0xd4>)
 800fd66:	480e      	ldr	r0, [pc, #56]	; (800fda0 <mem_free+0xc0>)
 800fd68:	f007 ff9c 	bl	8017ca4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fd72:	4b11      	ldr	r3, [pc, #68]	; (800fdb8 <mem_free+0xd8>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d202      	bcs.n	800fd82 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fd7c:	4a0e      	ldr	r2, [pc, #56]	; (800fdb8 <mem_free+0xd8>)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f7ff fec4 	bl	800fb10 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fd88:	4809      	ldr	r0, [pc, #36]	; (800fdb0 <mem_free+0xd0>)
 800fd8a:	f007 feca 	bl	8017b22 <sys_mutex_unlock>
 800fd8e:	e000      	b.n	800fd92 <mem_free+0xb2>
    return;
 800fd90:	bf00      	nop
}
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	0801a6f4 	.word	0x0801a6f4
 800fd9c:	0801a7e4 	.word	0x0801a7e4
 800fda0:	0801a73c 	.word	0x0801a73c
 800fda4:	20019f4c 	.word	0x20019f4c
 800fda8:	20019f50 	.word	0x20019f50
 800fdac:	0801a808 	.word	0x0801a808
 800fdb0:	20019f58 	.word	0x20019f58
 800fdb4:	0801a820 	.word	0x0801a820
 800fdb8:	20019f54 	.word	0x20019f54

0800fdbc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800fdc8:	887b      	ldrh	r3, [r7, #2]
 800fdca:	3303      	adds	r3, #3
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	f023 0303 	bic.w	r3, r3, #3
 800fdd2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800fdd4:	887b      	ldrh	r3, [r7, #2]
 800fdd6:	2b0b      	cmp	r3, #11
 800fdd8:	d801      	bhi.n	800fdde <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fdda:	230c      	movs	r3, #12
 800fddc:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800fdde:	887b      	ldrh	r3, [r7, #2]
 800fde0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fde4:	d901      	bls.n	800fdea <mem_trim+0x2e>
    return NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	e0bd      	b.n	800ff66 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fdea:	4b61      	ldr	r3, [pc, #388]	; (800ff70 <mem_trim+0x1b4>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d304      	bcc.n	800fdfe <mem_trim+0x42>
 800fdf4:	4b5f      	ldr	r3, [pc, #380]	; (800ff74 <mem_trim+0x1b8>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d306      	bcc.n	800fe0c <mem_trim+0x50>
 800fdfe:	4b5e      	ldr	r3, [pc, #376]	; (800ff78 <mem_trim+0x1bc>)
 800fe00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800fe04:	495d      	ldr	r1, [pc, #372]	; (800ff7c <mem_trim+0x1c0>)
 800fe06:	485e      	ldr	r0, [pc, #376]	; (800ff80 <mem_trim+0x1c4>)
 800fe08:	f007 ff4c 	bl	8017ca4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fe0c:	4b58      	ldr	r3, [pc, #352]	; (800ff70 <mem_trim+0x1b4>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d304      	bcc.n	800fe20 <mem_trim+0x64>
 800fe16:	4b57      	ldr	r3, [pc, #348]	; (800ff74 <mem_trim+0x1b8>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d307      	bcc.n	800fe30 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800fe20:	f007 feb2 	bl	8017b88 <sys_arch_protect>
 800fe24:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f007 febc 	bl	8017ba4 <sys_arch_unprotect>
    return rmem;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	e09a      	b.n	800ff66 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	3b08      	subs	r3, #8
 800fe34:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	4a4d      	ldr	r2, [pc, #308]	; (800ff70 <mem_trim+0x1b4>)
 800fe3a:	6812      	ldr	r2, [r2, #0]
 800fe3c:	1a9b      	subs	r3, r3, r2
 800fe3e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800fe40:	69fb      	ldr	r3, [r7, #28]
 800fe42:	881a      	ldrh	r2, [r3, #0]
 800fe44:	8b7b      	ldrh	r3, [r7, #26]
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	3b08      	subs	r3, #8
 800fe4c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fe4e:	887a      	ldrh	r2, [r7, #2]
 800fe50:	8b3b      	ldrh	r3, [r7, #24]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d906      	bls.n	800fe64 <mem_trim+0xa8>
 800fe56:	4b48      	ldr	r3, [pc, #288]	; (800ff78 <mem_trim+0x1bc>)
 800fe58:	f240 2206 	movw	r2, #518	; 0x206
 800fe5c:	4949      	ldr	r1, [pc, #292]	; (800ff84 <mem_trim+0x1c8>)
 800fe5e:	4848      	ldr	r0, [pc, #288]	; (800ff80 <mem_trim+0x1c4>)
 800fe60:	f007 ff20 	bl	8017ca4 <iprintf>
  if (newsize > size) {
 800fe64:	887a      	ldrh	r2, [r7, #2]
 800fe66:	8b3b      	ldrh	r3, [r7, #24]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d901      	bls.n	800fe70 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	e07a      	b.n	800ff66 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800fe70:	887a      	ldrh	r2, [r7, #2]
 800fe72:	8b3b      	ldrh	r3, [r7, #24]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d101      	bne.n	800fe7c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	e074      	b.n	800ff66 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fe7c:	4842      	ldr	r0, [pc, #264]	; (800ff88 <mem_trim+0x1cc>)
 800fe7e:	f007 fe41 	bl	8017b04 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800fe82:	4b3b      	ldr	r3, [pc, #236]	; (800ff70 <mem_trim+0x1b4>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	69fa      	ldr	r2, [r7, #28]
 800fe88:	8812      	ldrh	r2, [r2, #0]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	791b      	ldrb	r3, [r3, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d131      	bne.n	800fefa <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800fe9c:	8b7a      	ldrh	r2, [r7, #26]
 800fe9e:	887b      	ldrh	r3, [r7, #2]
 800fea0:	4413      	add	r3, r2
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	3308      	adds	r3, #8
 800fea6:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 800fea8:	4b38      	ldr	r3, [pc, #224]	; (800ff8c <mem_trim+0x1d0>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d105      	bne.n	800febe <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800feb2:	4b2f      	ldr	r3, [pc, #188]	; (800ff70 <mem_trim+0x1b4>)
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	8a3b      	ldrh	r3, [r7, #16]
 800feb8:	4413      	add	r3, r2
 800feba:	4a34      	ldr	r2, [pc, #208]	; (800ff8c <mem_trim+0x1d0>)
 800febc:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800febe:	4b2c      	ldr	r3, [pc, #176]	; (800ff70 <mem_trim+0x1b4>)
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	8a3b      	ldrh	r3, [r7, #16]
 800fec4:	4413      	add	r3, r2
 800fec6:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	2200      	movs	r2, #0
 800fecc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	8a7a      	ldrh	r2, [r7, #18]
 800fed2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	8b7a      	ldrh	r2, [r7, #26]
 800fed8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	8a3a      	ldrh	r2, [r7, #16]
 800fede:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	881b      	ldrh	r3, [r3, #0]
 800fee4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fee8:	d039      	beq.n	800ff5e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800feea:	4b21      	ldr	r3, [pc, #132]	; (800ff70 <mem_trim+0x1b4>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	8812      	ldrh	r2, [r2, #0]
 800fef2:	4413      	add	r3, r2
 800fef4:	8a3a      	ldrh	r2, [r7, #16]
 800fef6:	805a      	strh	r2, [r3, #2]
 800fef8:	e031      	b.n	800ff5e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fefa:	887b      	ldrh	r3, [r7, #2]
 800fefc:	f103 0214 	add.w	r2, r3, #20
 800ff00:	8b3b      	ldrh	r3, [r7, #24]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d82b      	bhi.n	800ff5e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ff06:	8b7a      	ldrh	r2, [r7, #26]
 800ff08:	887b      	ldrh	r3, [r7, #2]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	3308      	adds	r3, #8
 800ff10:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ff12:	4b17      	ldr	r3, [pc, #92]	; (800ff70 <mem_trim+0x1b4>)
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	8a3b      	ldrh	r3, [r7, #16]
 800ff18:	4413      	add	r3, r2
 800ff1a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800ff1c:	4b1b      	ldr	r3, [pc, #108]	; (800ff8c <mem_trim+0x1d0>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	697a      	ldr	r2, [r7, #20]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d202      	bcs.n	800ff2c <mem_trim+0x170>
      lfree = mem2;
 800ff26:	4a19      	ldr	r2, [pc, #100]	; (800ff8c <mem_trim+0x1d0>)
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	881a      	ldrh	r2, [r3, #0]
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	8b7a      	ldrh	r2, [r7, #26]
 800ff3e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	8a3a      	ldrh	r2, [r7, #16]
 800ff44:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff4e:	d006      	beq.n	800ff5e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ff50:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <mem_trim+0x1b4>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	697a      	ldr	r2, [r7, #20]
 800ff56:	8812      	ldrh	r2, [r2, #0]
 800ff58:	4413      	add	r3, r2
 800ff5a:	8a3a      	ldrh	r2, [r7, #16]
 800ff5c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ff5e:	480a      	ldr	r0, [pc, #40]	; (800ff88 <mem_trim+0x1cc>)
 800ff60:	f007 fddf 	bl	8017b22 <sys_mutex_unlock>
  return rmem;
 800ff64:	687b      	ldr	r3, [r7, #4]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3720      	adds	r7, #32
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	20019f4c 	.word	0x20019f4c
 800ff74:	20019f50 	.word	0x20019f50
 800ff78:	0801a6f4 	.word	0x0801a6f4
 800ff7c:	0801a834 	.word	0x0801a834
 800ff80:	0801a73c 	.word	0x0801a73c
 800ff84:	0801a84c 	.word	0x0801a84c
 800ff88:	20019f58 	.word	0x20019f58
 800ff8c:	20019f54 	.word	0x20019f54

0800ff90 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b088      	sub	sp, #32
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	4603      	mov	r3, r0
 800ff98:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800ff9a:	88fb      	ldrh	r3, [r7, #6]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d101      	bne.n	800ffa4 <mem_malloc+0x14>
    return NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e0d1      	b.n	8010148 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ffa4:	88fb      	ldrh	r3, [r7, #6]
 800ffa6:	3303      	adds	r3, #3
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	f023 0303 	bic.w	r3, r3, #3
 800ffae:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800ffb0:	88fb      	ldrh	r3, [r7, #6]
 800ffb2:	2b0b      	cmp	r3, #11
 800ffb4:	d801      	bhi.n	800ffba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ffb6:	230c      	movs	r3, #12
 800ffb8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ffba:	88fb      	ldrh	r3, [r7, #6]
 800ffbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ffc0:	d901      	bls.n	800ffc6 <mem_malloc+0x36>
    return NULL;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	e0c0      	b.n	8010148 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ffc6:	4862      	ldr	r0, [pc, #392]	; (8010150 <mem_malloc+0x1c0>)
 800ffc8:	f007 fd9c 	bl	8017b04 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ffcc:	4b61      	ldr	r3, [pc, #388]	; (8010154 <mem_malloc+0x1c4>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	4b61      	ldr	r3, [pc, #388]	; (8010158 <mem_malloc+0x1c8>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	83fb      	strh	r3, [r7, #30]
 800ffda:	e0aa      	b.n	8010132 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800ffdc:	4b5e      	ldr	r3, [pc, #376]	; (8010158 <mem_malloc+0x1c8>)
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	8bfb      	ldrh	r3, [r7, #30]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	791b      	ldrb	r3, [r3, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f040 809b 	bne.w	8010126 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	461a      	mov	r2, r3
 800fff6:	8bfb      	ldrh	r3, [r7, #30]
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	f1a3 0208 	sub.w	r2, r3, #8
 800fffe:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8010000:	429a      	cmp	r2, r3
 8010002:	f0c0 8090 	bcc.w	8010126 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	881b      	ldrh	r3, [r3, #0]
 801000a:	461a      	mov	r2, r3
 801000c:	8bfb      	ldrh	r3, [r7, #30]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	f1a3 0208 	sub.w	r2, r3, #8
 8010014:	88fb      	ldrh	r3, [r7, #6]
 8010016:	3314      	adds	r3, #20
 8010018:	429a      	cmp	r2, r3
 801001a:	d327      	bcc.n	801006c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801001c:	8bfa      	ldrh	r2, [r7, #30]
 801001e:	88fb      	ldrh	r3, [r7, #6]
 8010020:	4413      	add	r3, r2
 8010022:	b29b      	uxth	r3, r3
 8010024:	3308      	adds	r3, #8
 8010026:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8010028:	4b4b      	ldr	r3, [pc, #300]	; (8010158 <mem_malloc+0x1c8>)
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	8a7b      	ldrh	r3, [r7, #18]
 801002e:	4413      	add	r3, r2
 8010030:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	881a      	ldrh	r2, [r3, #0]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	8bfa      	ldrh	r2, [r7, #30]
 8010044:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	8a7a      	ldrh	r2, [r7, #18]
 801004a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2201      	movs	r2, #1
 8010050:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801005a:	d00a      	beq.n	8010072 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801005c:	4b3e      	ldr	r3, [pc, #248]	; (8010158 <mem_malloc+0x1c8>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	8812      	ldrh	r2, [r2, #0]
 8010064:	4413      	add	r3, r2
 8010066:	8a7a      	ldrh	r2, [r7, #18]
 8010068:	805a      	strh	r2, [r3, #2]
 801006a:	e002      	b.n	8010072 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	2201      	movs	r2, #1
 8010070:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010072:	4b38      	ldr	r3, [pc, #224]	; (8010154 <mem_malloc+0x1c4>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	697a      	ldr	r2, [r7, #20]
 8010078:	429a      	cmp	r2, r3
 801007a:	d127      	bne.n	80100cc <mem_malloc+0x13c>
          struct mem *cur = lfree;
 801007c:	4b35      	ldr	r3, [pc, #212]	; (8010154 <mem_malloc+0x1c4>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010082:	e005      	b.n	8010090 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8010084:	4b34      	ldr	r3, [pc, #208]	; (8010158 <mem_malloc+0x1c8>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	69ba      	ldr	r2, [r7, #24]
 801008a:	8812      	ldrh	r2, [r2, #0]
 801008c:	4413      	add	r3, r2
 801008e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	791b      	ldrb	r3, [r3, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d004      	beq.n	80100a2 <mem_malloc+0x112>
 8010098:	4b30      	ldr	r3, [pc, #192]	; (801015c <mem_malloc+0x1cc>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	69ba      	ldr	r2, [r7, #24]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d1f0      	bne.n	8010084 <mem_malloc+0xf4>
          }
          lfree = cur;
 80100a2:	4a2c      	ldr	r2, [pc, #176]	; (8010154 <mem_malloc+0x1c4>)
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80100a8:	4b2a      	ldr	r3, [pc, #168]	; (8010154 <mem_malloc+0x1c4>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	4b2b      	ldr	r3, [pc, #172]	; (801015c <mem_malloc+0x1cc>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d00b      	beq.n	80100cc <mem_malloc+0x13c>
 80100b4:	4b27      	ldr	r3, [pc, #156]	; (8010154 <mem_malloc+0x1c4>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	791b      	ldrb	r3, [r3, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d006      	beq.n	80100cc <mem_malloc+0x13c>
 80100be:	4b28      	ldr	r3, [pc, #160]	; (8010160 <mem_malloc+0x1d0>)
 80100c0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80100c4:	4927      	ldr	r1, [pc, #156]	; (8010164 <mem_malloc+0x1d4>)
 80100c6:	4828      	ldr	r0, [pc, #160]	; (8010168 <mem_malloc+0x1d8>)
 80100c8:	f007 fdec 	bl	8017ca4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80100cc:	4820      	ldr	r0, [pc, #128]	; (8010150 <mem_malloc+0x1c0>)
 80100ce:	f007 fd28 	bl	8017b22 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80100d2:	88fa      	ldrh	r2, [r7, #6]
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	4413      	add	r3, r2
 80100d8:	3308      	adds	r3, #8
 80100da:	4a20      	ldr	r2, [pc, #128]	; (801015c <mem_malloc+0x1cc>)
 80100dc:	6812      	ldr	r2, [r2, #0]
 80100de:	4293      	cmp	r3, r2
 80100e0:	d906      	bls.n	80100f0 <mem_malloc+0x160>
 80100e2:	4b1f      	ldr	r3, [pc, #124]	; (8010160 <mem_malloc+0x1d0>)
 80100e4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80100e8:	4920      	ldr	r1, [pc, #128]	; (801016c <mem_malloc+0x1dc>)
 80100ea:	481f      	ldr	r0, [pc, #124]	; (8010168 <mem_malloc+0x1d8>)
 80100ec:	f007 fdda 	bl	8017ca4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f003 0303 	and.w	r3, r3, #3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d006      	beq.n	8010108 <mem_malloc+0x178>
 80100fa:	4b19      	ldr	r3, [pc, #100]	; (8010160 <mem_malloc+0x1d0>)
 80100fc:	f240 22d6 	movw	r2, #726	; 0x2d6
 8010100:	491b      	ldr	r1, [pc, #108]	; (8010170 <mem_malloc+0x1e0>)
 8010102:	4819      	ldr	r0, [pc, #100]	; (8010168 <mem_malloc+0x1d8>)
 8010104:	f007 fdce 	bl	8017ca4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	f003 0303 	and.w	r3, r3, #3
 801010e:	2b00      	cmp	r3, #0
 8010110:	d006      	beq.n	8010120 <mem_malloc+0x190>
 8010112:	4b13      	ldr	r3, [pc, #76]	; (8010160 <mem_malloc+0x1d0>)
 8010114:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8010118:	4916      	ldr	r1, [pc, #88]	; (8010174 <mem_malloc+0x1e4>)
 801011a:	4813      	ldr	r0, [pc, #76]	; (8010168 <mem_malloc+0x1d8>)
 801011c:	f007 fdc2 	bl	8017ca4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	3308      	adds	r3, #8
 8010124:	e010      	b.n	8010148 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8010126:	4b0c      	ldr	r3, [pc, #48]	; (8010158 <mem_malloc+0x1c8>)
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	8bfb      	ldrh	r3, [r7, #30]
 801012c:	4413      	add	r3, r2
 801012e:	881b      	ldrh	r3, [r3, #0]
 8010130:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8010132:	8bfa      	ldrh	r2, [r7, #30]
 8010134:	88fb      	ldrh	r3, [r7, #6]
 8010136:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801013a:	429a      	cmp	r2, r3
 801013c:	f4ff af4e 	bcc.w	800ffdc <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010140:	4803      	ldr	r0, [pc, #12]	; (8010150 <mem_malloc+0x1c0>)
 8010142:	f007 fcee 	bl	8017b22 <sys_mutex_unlock>
  return NULL;
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3720      	adds	r7, #32
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	20019f58 	.word	0x20019f58
 8010154:	20019f54 	.word	0x20019f54
 8010158:	20019f4c 	.word	0x20019f4c
 801015c:	20019f50 	.word	0x20019f50
 8010160:	0801a6f4 	.word	0x0801a6f4
 8010164:	0801a86c 	.word	0x0801a86c
 8010168:	0801a73c 	.word	0x0801a73c
 801016c:	0801a888 	.word	0x0801a888
 8010170:	0801a8b8 	.word	0x0801a8b8
 8010174:	0801a8e8 	.word	0x0801a8e8

08010178 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	2200      	movs	r2, #0
 8010186:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	3303      	adds	r3, #3
 801018e:	f023 0303 	bic.w	r3, r3, #3
 8010192:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010194:	2300      	movs	r3, #0
 8010196:	60fb      	str	r3, [r7, #12]
 8010198:	e011      	b.n	80101be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	68ba      	ldr	r2, [r7, #8]
 80101aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	881b      	ldrh	r3, [r3, #0]
 80101b0:	461a      	mov	r2, r3
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	4413      	add	r3, r2
 80101b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	3301      	adds	r3, #1
 80101bc:	60fb      	str	r3, [r7, #12]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	885b      	ldrh	r3, [r3, #2]
 80101c2:	461a      	mov	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	dce7      	bgt.n	801019a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80101ca:	bf00      	nop
 80101cc:	3714      	adds	r7, #20
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr
	...

080101d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80101de:	2300      	movs	r3, #0
 80101e0:	80fb      	strh	r3, [r7, #6]
 80101e2:	e009      	b.n	80101f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80101e4:	88fb      	ldrh	r3, [r7, #6]
 80101e6:	4a08      	ldr	r2, [pc, #32]	; (8010208 <memp_init+0x30>)
 80101e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff ffc3 	bl	8010178 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80101f2:	88fb      	ldrh	r3, [r7, #6]
 80101f4:	3301      	adds	r3, #1
 80101f6:	80fb      	strh	r3, [r7, #6]
 80101f8:	88fb      	ldrh	r3, [r7, #6]
 80101fa:	2b0e      	cmp	r3, #14
 80101fc:	d9f2      	bls.n	80101e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80101fe:	bf00      	nop
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	0801bf50 	.word	0x0801bf50

0801020c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010214:	f007 fcb8 	bl	8017b88 <sys_arch_protect>
 8010218:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d015      	beq.n	8010254 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	68ba      	ldr	r2, [r7, #8]
 801022e:	6812      	ldr	r2, [r2, #0]
 8010230:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	f003 0303 	and.w	r3, r3, #3
 8010238:	2b00      	cmp	r3, #0
 801023a:	d006      	beq.n	801024a <do_memp_malloc_pool+0x3e>
 801023c:	4b09      	ldr	r3, [pc, #36]	; (8010264 <do_memp_malloc_pool+0x58>)
 801023e:	f240 1249 	movw	r2, #329	; 0x149
 8010242:	4909      	ldr	r1, [pc, #36]	; (8010268 <do_memp_malloc_pool+0x5c>)
 8010244:	4809      	ldr	r0, [pc, #36]	; (801026c <do_memp_malloc_pool+0x60>)
 8010246:	f007 fd2d 	bl	8017ca4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f007 fcaa 	bl	8017ba4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	e003      	b.n	801025c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	f007 fca5 	bl	8017ba4 <sys_arch_unprotect>
  return NULL;
 801025a:	2300      	movs	r3, #0
}
 801025c:	4618      	mov	r0, r3
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	0801a90c 	.word	0x0801a90c
 8010268:	0801a93c 	.word	0x0801a93c
 801026c:	0801a960 	.word	0x0801a960

08010270 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	2b0e      	cmp	r3, #14
 801027e:	d908      	bls.n	8010292 <memp_malloc+0x22>
 8010280:	4b0a      	ldr	r3, [pc, #40]	; (80102ac <memp_malloc+0x3c>)
 8010282:	f240 1287 	movw	r2, #391	; 0x187
 8010286:	490a      	ldr	r1, [pc, #40]	; (80102b0 <memp_malloc+0x40>)
 8010288:	480a      	ldr	r0, [pc, #40]	; (80102b4 <memp_malloc+0x44>)
 801028a:	f007 fd0b 	bl	8017ca4 <iprintf>
 801028e:	2300      	movs	r3, #0
 8010290:	e008      	b.n	80102a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010292:	79fb      	ldrb	r3, [r7, #7]
 8010294:	4a08      	ldr	r2, [pc, #32]	; (80102b8 <memp_malloc+0x48>)
 8010296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801029a:	4618      	mov	r0, r3
 801029c:	f7ff ffb6 	bl	801020c <do_memp_malloc_pool>
 80102a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80102a2:	68fb      	ldr	r3, [r7, #12]
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3710      	adds	r7, #16
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	0801a90c 	.word	0x0801a90c
 80102b0:	0801a99c 	.word	0x0801a99c
 80102b4:	0801a960 	.word	0x0801a960
 80102b8:	0801bf50 	.word	0x0801bf50

080102bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	f003 0303 	and.w	r3, r3, #3
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d006      	beq.n	80102de <do_memp_free_pool+0x22>
 80102d0:	4b0d      	ldr	r3, [pc, #52]	; (8010308 <do_memp_free_pool+0x4c>)
 80102d2:	f240 129d 	movw	r2, #413	; 0x19d
 80102d6:	490d      	ldr	r1, [pc, #52]	; (801030c <do_memp_free_pool+0x50>)
 80102d8:	480d      	ldr	r0, [pc, #52]	; (8010310 <do_memp_free_pool+0x54>)
 80102da:	f007 fce3 	bl	8017ca4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80102e2:	f007 fc51 	bl	8017b88 <sys_arch_protect>
 80102e6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	689b      	ldr	r3, [r3, #8]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80102fa:	68b8      	ldr	r0, [r7, #8]
 80102fc:	f007 fc52 	bl	8017ba4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010300:	bf00      	nop
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	0801a90c 	.word	0x0801a90c
 801030c:	0801a9bc 	.word	0x0801a9bc
 8010310:	0801a960 	.word	0x0801a960

08010314 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	4603      	mov	r3, r0
 801031c:	6039      	str	r1, [r7, #0]
 801031e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010320:	79fb      	ldrb	r3, [r7, #7]
 8010322:	2b0e      	cmp	r3, #14
 8010324:	d907      	bls.n	8010336 <memp_free+0x22>
 8010326:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <memp_free+0x44>)
 8010328:	f240 12db 	movw	r2, #475	; 0x1db
 801032c:	490b      	ldr	r1, [pc, #44]	; (801035c <memp_free+0x48>)
 801032e:	480c      	ldr	r0, [pc, #48]	; (8010360 <memp_free+0x4c>)
 8010330:	f007 fcb8 	bl	8017ca4 <iprintf>
 8010334:	e00c      	b.n	8010350 <memp_free+0x3c>

  if (mem == NULL) {
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d008      	beq.n	801034e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801033c:	79fb      	ldrb	r3, [r7, #7]
 801033e:	4a09      	ldr	r2, [pc, #36]	; (8010364 <memp_free+0x50>)
 8010340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff ffb8 	bl	80102bc <do_memp_free_pool>
 801034c:	e000      	b.n	8010350 <memp_free+0x3c>
    return;
 801034e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	0801a90c 	.word	0x0801a90c
 801035c:	0801a9dc 	.word	0x0801a9dc
 8010360:	0801a960 	.word	0x0801a960
 8010364:	0801bf50 	.word	0x0801bf50

08010368 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010368:	b480      	push	{r7}
 801036a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801036c:	bf00      	nop
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
	...

08010378 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d105      	bne.n	8010398 <netif_add+0x20>
 801038c:	4b2b      	ldr	r3, [pc, #172]	; (801043c <netif_add+0xc4>)
 801038e:	22fb      	movs	r2, #251	; 0xfb
 8010390:	492b      	ldr	r1, [pc, #172]	; (8010440 <netif_add+0xc8>)
 8010392:	482c      	ldr	r0, [pc, #176]	; (8010444 <netif_add+0xcc>)
 8010394:	f007 fc86 	bl	8017ca4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2200      	movs	r2, #0
 80103a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2200      	movs	r2, #0
 80103ae:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	3324      	adds	r3, #36	; 0x24
 80103b6:	2208      	movs	r2, #8
 80103b8:	2100      	movs	r1, #0
 80103ba:	4618      	mov	r0, r3
 80103bc:	f007 fc6a 	bl	8017c94 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2203      	movs	r2, #3
 80103c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2200      	movs	r2, #0
 80103cc:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2200      	movs	r2, #0
 80103d2:	63da      	str	r2, [r3, #60]	; 0x3c
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	69ba      	ldr	r2, [r7, #24]
 80103d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80103da:	4b1b      	ldr	r3, [pc, #108]	; (8010448 <netif_add+0xd0>)
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	1c5a      	adds	r2, r3, #1
 80103e0:	b2d1      	uxtb	r1, r2
 80103e2:	4a19      	ldr	r2, [pc, #100]	; (8010448 <netif_add+0xd0>)
 80103e4:	7011      	strb	r1, [r2, #0]
 80103e6:	68fa      	ldr	r2, [r7, #12]
 80103e8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  netif->input = input;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	6a3a      	ldr	r2, [r7, #32]
 80103f0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	687a      	ldr	r2, [r7, #4]
 80103f6:	68b9      	ldr	r1, [r7, #8]
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f000 f829 	bl	8010450 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	68f8      	ldr	r0, [r7, #12]
 8010402:	4798      	blx	r3
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d001      	beq.n	801040e <netif_add+0x96>
    return NULL;
 801040a:	2300      	movs	r3, #0
 801040c:	e011      	b.n	8010432 <netif_add+0xba>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801040e:	4b0f      	ldr	r3, [pc, #60]	; (801044c <netif_add+0xd4>)
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010416:	4a0d      	ldr	r2, [pc, #52]	; (801044c <netif_add+0xd4>)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6013      	str	r3, [r2, #0]
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010422:	f003 0320 	and.w	r3, r3, #32
 8010426:	2b00      	cmp	r3, #0
 8010428:	d002      	beq.n	8010430 <netif_add+0xb8>
    igmp_start(netif);
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7fd ff70 	bl	800e310 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8010430:	68fb      	ldr	r3, [r7, #12]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	0801a9f8 	.word	0x0801a9f8
 8010440:	0801aa2c 	.word	0x0801aa2c
 8010444:	0801aa44 	.word	0x0801aa44
 8010448:	20019f98 	.word	0x20019f98
 801044c:	20020bbc 	.word	0x20020bbc

08010450 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
 801045c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d003      	beq.n	801046c <netif_set_addr+0x1c>
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d10c      	bne.n	8010486 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 801046c:	68b9      	ldr	r1, [r7, #8]
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f000 f81a 	bl	80104a8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8010474:	6879      	ldr	r1, [r7, #4]
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f000 f862 	bl	8010540 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801047c:	6839      	ldr	r1, [r7, #0]
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f000 f84a 	bl	8010518 <netif_set_gw>
 8010484:	e00b      	b.n	801049e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8010486:	6879      	ldr	r1, [r7, #4]
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f000 f859 	bl	8010540 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801048e:	6839      	ldr	r1, [r7, #0]
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 f841 	bl	8010518 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8010496:	68b9      	ldr	r1, [r7, #8]
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f000 f805 	bl	80104a8 <netif_set_ipaddr>
  }
}
 801049e:	bf00      	nop
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
	...

080104a8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d003      	beq.n	80104c0 <netif_set_ipaddr+0x18>
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	60fb      	str	r3, [r7, #12]
 80104be:	e002      	b.n	80104c6 <netif_set_ipaddr+0x1e>
 80104c0:	4b14      	ldr	r3, [pc, #80]	; (8010514 <netif_set_ipaddr+0x6c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	3304      	adds	r3, #4
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d01c      	beq.n	801050c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	3304      	adds	r3, #4
 80104d6:	f107 020c 	add.w	r2, r7, #12
 80104da:	4611      	mov	r1, r2
 80104dc:	4618      	mov	r0, r3
 80104de:	f002 fc87 	bl	8012df0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	3304      	adds	r3, #4
 80104e6:	f107 020c 	add.w	r2, r7, #12
 80104ea:	4611      	mov	r1, r2
 80104ec:	4618      	mov	r0, r3
 80104ee:	f007 f85d 	bl	80175ac <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <netif_set_ipaddr+0x56>
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	e000      	b.n	8010500 <netif_set_ipaddr+0x58>
 80104fe:	2300      	movs	r3, #0
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010504:	2101      	movs	r1, #1
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f861 	bl	80105ce <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 801050c:	bf00      	nop
 801050e:	3710      	adds	r7, #16
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}
 8010514:	0801be94 	.word	0x0801be94

08010518 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <netif_set_gw+0x16>
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	e000      	b.n	8010530 <netif_set_gw+0x18>
 801052e:	2300      	movs	r3, #0
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8010534:	bf00      	nop
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <netif_set_netmask+0x16>
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	e000      	b.n	8010558 <netif_set_netmask+0x18>
 8010556:	2300      	movs	r3, #0
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 801055c:	bf00      	nop
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010570:	4a04      	ldr	r2, [pc, #16]	; (8010584 <netif_set_default+0x1c>)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010576:	bf00      	nop
 8010578:	370c      	adds	r7, #12
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop
 8010584:	20020bc0 	.word	0x20020bc0

08010588 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d113      	bne.n	80105c6 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80105a4:	f043 0301 	orr.w	r3, r3, #1
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80105b6:	f003 0304 	and.w	r3, r3, #4
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d003      	beq.n	80105c6 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80105be:	2103      	movs	r1, #3
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 f804 	bl	80105ce <netif_issue_reports>
    }
  }
}
 80105c6:	bf00      	nop
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b082      	sub	sp, #8
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	460b      	mov	r3, r1
 80105d8:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80105da:	78fb      	ldrb	r3, [r7, #3]
 80105dc:	f003 0301 	and.w	r3, r3, #1
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d01b      	beq.n	801061c <netif_issue_reports+0x4e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	3304      	adds	r3, #4
 80105e8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d016      	beq.n	801061c <netif_issue_reports+0x4e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80105f4:	f003 0308 	and.w	r3, r3, #8
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d005      	beq.n	8010608 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	3304      	adds	r3, #4
 8010600:	4619      	mov	r1, r3
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f7fd fcce 	bl	800dfa4 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801060e:	f003 0320 	and.w	r3, r3, #32
 8010612:	2b00      	cmp	r3, #0
 8010614:	d002      	beq.n	801061c <netif_issue_reports+0x4e>
      igmp_report_groups(netif);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7fd fea4 	bl	800e364 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801061c:	bf00      	nop
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010632:	f003 0301 	and.w	r3, r3, #1
 8010636:	2b00      	cmp	r3, #0
 8010638:	d012      	beq.n	8010660 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010640:	f023 0301 	bic.w	r3, r3, #1
 8010644:	b2da      	uxtb	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010652:	f003 0308 	and.w	r3, r3, #8
 8010656:	2b00      	cmp	r3, #0
 8010658:	d002      	beq.n	8010660 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f7fd f864 	bl	800d728 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010660:	bf00      	nop
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801066e:	f007 fa8b 	bl	8017b88 <sys_arch_protect>
 8010672:	6038      	str	r0, [r7, #0]
 8010674:	4b0f      	ldr	r3, [pc, #60]	; (80106b4 <pbuf_free_ooseq+0x4c>)
 8010676:	2200      	movs	r2, #0
 8010678:	701a      	strb	r2, [r3, #0]
 801067a:	6838      	ldr	r0, [r7, #0]
 801067c:	f007 fa92 	bl	8017ba4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010680:	4b0d      	ldr	r3, [pc, #52]	; (80106b8 <pbuf_free_ooseq+0x50>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	607b      	str	r3, [r7, #4]
 8010686:	e00f      	b.n	80106a8 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801068c:	2b00      	cmp	r3, #0
 801068e:	d008      	beq.n	80106a2 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010694:	4618      	mov	r0, r3
 8010696:	f002 f816 	bl	80126c6 <tcp_segs_free>
      pcb->ooseq = NULL;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80106a0:	e005      	b.n	80106ae <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	68db      	ldr	r3, [r3, #12]
 80106a6:	607b      	str	r3, [r7, #4]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1ec      	bne.n	8010688 <pbuf_free_ooseq+0x20>
    }
  }
}
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	20020bc4 	.word	0x20020bc4
 80106b8:	20020bcc 	.word	0x20020bcc

080106bc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80106c4:	f7ff ffd0 	bl	8010668 <pbuf_free_ooseq>
}
 80106c8:	bf00      	nop
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80106d6:	f007 fa57 	bl	8017b88 <sys_arch_protect>
 80106da:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80106dc:	4b10      	ldr	r3, [pc, #64]	; (8010720 <pbuf_pool_is_empty+0x50>)
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80106e2:	4b0f      	ldr	r3, [pc, #60]	; (8010720 <pbuf_pool_is_empty+0x50>)
 80106e4:	2201      	movs	r2, #1
 80106e6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f007 fa5b 	bl	8017ba4 <sys_arch_unprotect>

  if (!queued) {
 80106ee:	78fb      	ldrb	r3, [r7, #3]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d110      	bne.n	8010716 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80106f4:	2200      	movs	r2, #0
 80106f6:	2100      	movs	r1, #0
 80106f8:	480a      	ldr	r0, [pc, #40]	; (8010724 <pbuf_pool_is_empty+0x54>)
 80106fa:	f7fa fa27 	bl	800ab4c <tcpip_callback_with_block>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d008      	beq.n	8010716 <pbuf_pool_is_empty+0x46>
 8010704:	f007 fa40 	bl	8017b88 <sys_arch_protect>
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	4b05      	ldr	r3, [pc, #20]	; (8010720 <pbuf_pool_is_empty+0x50>)
 801070c:	2200      	movs	r2, #0
 801070e:	701a      	strb	r2, [r3, #0]
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f007 fa47 	bl	8017ba4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010716:	bf00      	nop
 8010718:	3708      	adds	r7, #8
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	20020bc4 	.word	0x20020bc4
 8010724:	080106bd 	.word	0x080106bd

08010728 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b088      	sub	sp, #32
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	71fb      	strb	r3, [r7, #7]
 8010732:	460b      	mov	r3, r1
 8010734:	80bb      	strh	r3, [r7, #4]
 8010736:	4613      	mov	r3, r2
 8010738:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	2b04      	cmp	r3, #4
 801073e:	d81c      	bhi.n	801077a <pbuf_alloc+0x52>
 8010740:	a201      	add	r2, pc, #4	; (adr r2, 8010748 <pbuf_alloc+0x20>)
 8010742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010746:	bf00      	nop
 8010748:	0801075d 	.word	0x0801075d
 801074c:	08010763 	.word	0x08010763
 8010750:	08010769 	.word	0x08010769
 8010754:	0801076f 	.word	0x0801076f
 8010758:	08010775 	.word	0x08010775
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801075c:	2336      	movs	r3, #54	; 0x36
 801075e:	82fb      	strh	r3, [r7, #22]
    break;
 8010760:	e014      	b.n	801078c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010762:	2322      	movs	r3, #34	; 0x22
 8010764:	82fb      	strh	r3, [r7, #22]
    break;
 8010766:	e011      	b.n	801078c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8010768:	230e      	movs	r3, #14
 801076a:	82fb      	strh	r3, [r7, #22]
    break;
 801076c:	e00e      	b.n	801078c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801076e:	2300      	movs	r3, #0
 8010770:	82fb      	strh	r3, [r7, #22]
    break;
 8010772:	e00b      	b.n	801078c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8010774:	2300      	movs	r3, #0
 8010776:	82fb      	strh	r3, [r7, #22]
    break;
 8010778:	e008      	b.n	801078c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801077a:	4ba5      	ldr	r3, [pc, #660]	; (8010a10 <pbuf_alloc+0x2e8>)
 801077c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8010780:	49a4      	ldr	r1, [pc, #656]	; (8010a14 <pbuf_alloc+0x2ec>)
 8010782:	48a5      	ldr	r0, [pc, #660]	; (8010a18 <pbuf_alloc+0x2f0>)
 8010784:	f007 fa8e 	bl	8017ca4 <iprintf>
    return NULL;
 8010788:	2300      	movs	r3, #0
 801078a:	e15d      	b.n	8010a48 <pbuf_alloc+0x320>
  }

  switch (type) {
 801078c:	79bb      	ldrb	r3, [r7, #6]
 801078e:	2b03      	cmp	r3, #3
 8010790:	f200 8134 	bhi.w	80109fc <pbuf_alloc+0x2d4>
 8010794:	a201      	add	r2, pc, #4	; (adr r2, 801079c <pbuf_alloc+0x74>)
 8010796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079a:	bf00      	nop
 801079c:	0801093d 	.word	0x0801093d
 80107a0:	080109c9 	.word	0x080109c9
 80107a4:	080109c9 	.word	0x080109c9
 80107a8:	080107ad 	.word	0x080107ad
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80107ac:	200e      	movs	r0, #14
 80107ae:	f7ff fd5f 	bl	8010270 <memp_malloc>
 80107b2:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d103      	bne.n	80107c2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80107ba:	f7ff ff89 	bl	80106d0 <pbuf_pool_is_empty>
      return NULL;
 80107be:	2300      	movs	r3, #0
 80107c0:	e142      	b.n	8010a48 <pbuf_alloc+0x320>
    }
    p->type = type;
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	79ba      	ldrb	r2, [r7, #6]
 80107c6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	2200      	movs	r2, #0
 80107cc:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80107ce:	8afb      	ldrh	r3, [r7, #22]
 80107d0:	3310      	adds	r3, #16
 80107d2:	69fa      	ldr	r2, [r7, #28]
 80107d4:	4413      	add	r3, r2
 80107d6:	3303      	adds	r3, #3
 80107d8:	f023 0303 	bic.w	r3, r3, #3
 80107dc:	461a      	mov	r2, r3
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	f003 0303 	and.w	r3, r3, #3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d006      	beq.n	80107fc <pbuf_alloc+0xd4>
 80107ee:	4b88      	ldr	r3, [pc, #544]	; (8010a10 <pbuf_alloc+0x2e8>)
 80107f0:	f240 1229 	movw	r2, #297	; 0x129
 80107f4:	4989      	ldr	r1, [pc, #548]	; (8010a1c <pbuf_alloc+0x2f4>)
 80107f6:	4888      	ldr	r0, [pc, #544]	; (8010a18 <pbuf_alloc+0x2f0>)
 80107f8:	f007 fa54 	bl	8017ca4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	88ba      	ldrh	r2, [r7, #4]
 8010800:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8010802:	8afb      	ldrh	r3, [r7, #22]
 8010804:	3303      	adds	r3, #3
 8010806:	f023 0303 	bic.w	r3, r3, #3
 801080a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 801080e:	88bb      	ldrh	r3, [r7, #4]
 8010810:	4293      	cmp	r3, r2
 8010812:	bf28      	it	cs
 8010814:	4613      	movcs	r3, r2
 8010816:	b29a      	uxth	r2, r3
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	69fa      	ldr	r2, [r7, #28]
 8010822:	8952      	ldrh	r2, [r2, #10]
 8010824:	441a      	add	r2, r3
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801082c:	429a      	cmp	r2, r3
 801082e:	d906      	bls.n	801083e <pbuf_alloc+0x116>
 8010830:	4b77      	ldr	r3, [pc, #476]	; (8010a10 <pbuf_alloc+0x2e8>)
 8010832:	f44f 7298 	mov.w	r2, #304	; 0x130
 8010836:	497a      	ldr	r1, [pc, #488]	; (8010a20 <pbuf_alloc+0x2f8>)
 8010838:	4877      	ldr	r0, [pc, #476]	; (8010a18 <pbuf_alloc+0x2f0>)
 801083a:	f007 fa33 	bl	8017ca4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801083e:	8afb      	ldrh	r3, [r7, #22]
 8010840:	3303      	adds	r3, #3
 8010842:	f023 0303 	bic.w	r3, r3, #3
 8010846:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801084a:	d106      	bne.n	801085a <pbuf_alloc+0x132>
 801084c:	4b70      	ldr	r3, [pc, #448]	; (8010a10 <pbuf_alloc+0x2e8>)
 801084e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010852:	4974      	ldr	r1, [pc, #464]	; (8010a24 <pbuf_alloc+0x2fc>)
 8010854:	4870      	ldr	r0, [pc, #448]	; (8010a18 <pbuf_alloc+0x2f0>)
 8010856:	f007 fa25 	bl	8017ca4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	2201      	movs	r2, #1
 801085e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8010864:	88bb      	ldrh	r3, [r7, #4]
 8010866:	69fa      	ldr	r2, [r7, #28]
 8010868:	8952      	ldrh	r2, [r2, #10]
 801086a:	1a9b      	subs	r3, r3, r2
 801086c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801086e:	e061      	b.n	8010934 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010870:	200e      	movs	r0, #14
 8010872:	f7ff fcfd 	bl	8010270 <memp_malloc>
 8010876:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d106      	bne.n	801088c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801087e:	f7ff ff27 	bl	80106d0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8010882:	69f8      	ldr	r0, [r7, #28]
 8010884:	f000 fac2 	bl	8010e0c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8010888:	2300      	movs	r3, #0
 801088a:	e0dd      	b.n	8010a48 <pbuf_alloc+0x320>
      }
      q->type = type;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	79ba      	ldrb	r2, [r7, #6]
 8010890:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2200      	movs	r2, #0
 8010896:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2200      	movs	r2, #0
 801089c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80108aa:	4293      	cmp	r3, r2
 80108ac:	dd06      	ble.n	80108bc <pbuf_alloc+0x194>
 80108ae:	4b58      	ldr	r3, [pc, #352]	; (8010a10 <pbuf_alloc+0x2e8>)
 80108b0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80108b4:	495c      	ldr	r1, [pc, #368]	; (8010a28 <pbuf_alloc+0x300>)
 80108b6:	4858      	ldr	r0, [pc, #352]	; (8010a18 <pbuf_alloc+0x2f0>)
 80108b8:	f007 f9f4 	bl	8017ca4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	b29a      	uxth	r2, r3
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80108cc:	bf28      	it	cs
 80108ce:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f103 0210 	add.w	r2, r3, #16
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	f003 0303 	and.w	r3, r3, #3
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d006      	beq.n	80108fc <pbuf_alloc+0x1d4>
 80108ee:	4b48      	ldr	r3, [pc, #288]	; (8010a10 <pbuf_alloc+0x2e8>)
 80108f0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80108f4:	494d      	ldr	r1, [pc, #308]	; (8010a2c <pbuf_alloc+0x304>)
 80108f6:	4848      	ldr	r0, [pc, #288]	; (8010a18 <pbuf_alloc+0x2f0>)
 80108f8:	f007 f9d4 	bl	8017ca4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	69fa      	ldr	r2, [r7, #28]
 8010902:	8952      	ldrh	r2, [r2, #10]
 8010904:	441a      	add	r2, r3
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801090c:	429a      	cmp	r2, r3
 801090e:	d906      	bls.n	801091e <pbuf_alloc+0x1f6>
 8010910:	4b3f      	ldr	r3, [pc, #252]	; (8010a10 <pbuf_alloc+0x2e8>)
 8010912:	f240 1255 	movw	r2, #341	; 0x155
 8010916:	4942      	ldr	r1, [pc, #264]	; (8010a20 <pbuf_alloc+0x2f8>)
 8010918:	483f      	ldr	r0, [pc, #252]	; (8010a18 <pbuf_alloc+0x2f0>)
 801091a:	f007 f9c3 	bl	8017ca4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2201      	movs	r2, #1
 8010922:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	895b      	ldrh	r3, [r3, #10]
 8010928:	461a      	mov	r2, r3
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	1a9b      	subs	r3, r3, r2
 801092e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	2b00      	cmp	r3, #0
 8010938:	dc9a      	bgt.n	8010870 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 801093a:	e07e      	b.n	8010a3a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801093c:	8afb      	ldrh	r3, [r7, #22]
 801093e:	3313      	adds	r3, #19
 8010940:	b29b      	uxth	r3, r3
 8010942:	f023 0303 	bic.w	r3, r3, #3
 8010946:	b29a      	uxth	r2, r3
 8010948:	88bb      	ldrh	r3, [r7, #4]
 801094a:	3303      	adds	r3, #3
 801094c:	b29b      	uxth	r3, r3
 801094e:	f023 0303 	bic.w	r3, r3, #3
 8010952:	b29b      	uxth	r3, r3
 8010954:	4413      	add	r3, r2
 8010956:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8010958:	897a      	ldrh	r2, [r7, #10]
 801095a:	88bb      	ldrh	r3, [r7, #4]
 801095c:	3303      	adds	r3, #3
 801095e:	f023 0303 	bic.w	r3, r3, #3
 8010962:	429a      	cmp	r2, r3
 8010964:	d201      	bcs.n	801096a <pbuf_alloc+0x242>
        return NULL;
 8010966:	2300      	movs	r3, #0
 8010968:	e06e      	b.n	8010a48 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 801096a:	897b      	ldrh	r3, [r7, #10]
 801096c:	4618      	mov	r0, r3
 801096e:	f7ff fb0f 	bl	800ff90 <mem_malloc>
 8010972:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d101      	bne.n	801097e <pbuf_alloc+0x256>
      return NULL;
 801097a:	2300      	movs	r3, #0
 801097c:	e064      	b.n	8010a48 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801097e:	8afb      	ldrh	r3, [r7, #22]
 8010980:	3310      	adds	r3, #16
 8010982:	69fa      	ldr	r2, [r7, #28]
 8010984:	4413      	add	r3, r2
 8010986:	3303      	adds	r3, #3
 8010988:	f023 0303 	bic.w	r3, r3, #3
 801098c:	461a      	mov	r2, r3
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	88ba      	ldrh	r2, [r7, #4]
 8010996:	811a      	strh	r2, [r3, #8]
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	891a      	ldrh	r2, [r3, #8]
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80109a0:	69fb      	ldr	r3, [r7, #28]
 80109a2:	2200      	movs	r2, #0
 80109a4:	601a      	str	r2, [r3, #0]
    p->type = type;
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	79ba      	ldrb	r2, [r7, #6]
 80109aa:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	f003 0303 	and.w	r3, r3, #3
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d03f      	beq.n	8010a38 <pbuf_alloc+0x310>
 80109b8:	4b15      	ldr	r3, [pc, #84]	; (8010a10 <pbuf_alloc+0x2e8>)
 80109ba:	f240 1277 	movw	r2, #375	; 0x177
 80109be:	491c      	ldr	r1, [pc, #112]	; (8010a30 <pbuf_alloc+0x308>)
 80109c0:	4815      	ldr	r0, [pc, #84]	; (8010a18 <pbuf_alloc+0x2f0>)
 80109c2:	f007 f96f 	bl	8017ca4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80109c6:	e037      	b.n	8010a38 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80109c8:	200d      	movs	r0, #13
 80109ca:	f7ff fc51 	bl	8010270 <memp_malloc>
 80109ce:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d101      	bne.n	80109da <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80109d6:	2300      	movs	r3, #0
 80109d8:	e036      	b.n	8010a48 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	2200      	movs	r2, #0
 80109de:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	88ba      	ldrh	r2, [r7, #4]
 80109e4:	811a      	strh	r2, [r3, #8]
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	891a      	ldrh	r2, [r3, #8]
 80109ea:	69fb      	ldr	r3, [r7, #28]
 80109ec:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]
    p->type = type;
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	79ba      	ldrb	r2, [r7, #6]
 80109f8:	731a      	strb	r2, [r3, #12]
    break;
 80109fa:	e01e      	b.n	8010a3a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80109fc:	4b04      	ldr	r3, [pc, #16]	; (8010a10 <pbuf_alloc+0x2e8>)
 80109fe:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8010a02:	490c      	ldr	r1, [pc, #48]	; (8010a34 <pbuf_alloc+0x30c>)
 8010a04:	4804      	ldr	r0, [pc, #16]	; (8010a18 <pbuf_alloc+0x2f0>)
 8010a06:	f007 f94d 	bl	8017ca4 <iprintf>
    return NULL;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	e01c      	b.n	8010a48 <pbuf_alloc+0x320>
 8010a0e:	bf00      	nop
 8010a10:	0801aa6c 	.word	0x0801aa6c
 8010a14:	0801aa9c 	.word	0x0801aa9c
 8010a18:	0801aab8 	.word	0x0801aab8
 8010a1c:	0801aae0 	.word	0x0801aae0
 8010a20:	0801ab10 	.word	0x0801ab10
 8010a24:	0801ab44 	.word	0x0801ab44
 8010a28:	0801ab78 	.word	0x0801ab78
 8010a2c:	0801ab8c 	.word	0x0801ab8c
 8010a30:	0801abbc 	.word	0x0801abbc
 8010a34:	0801abe8 	.word	0x0801abe8
    break;
 8010a38:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	2200      	movs	r2, #0
 8010a44:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010a46:	69fb      	ldr	r3, [r7, #28]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3720      	adds	r7, #32
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	603b      	str	r3, [r7, #0]
 8010a58:	4603      	mov	r3, r0
 8010a5a:	71fb      	strb	r3, [r7, #7]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	80bb      	strh	r3, [r7, #4]
 8010a60:	4613      	mov	r3, r2
 8010a62:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8010a64:	79fb      	ldrb	r3, [r7, #7]
 8010a66:	2b04      	cmp	r3, #4
 8010a68:	d81b      	bhi.n	8010aa2 <pbuf_alloced_custom+0x52>
 8010a6a:	a201      	add	r2, pc, #4	; (adr r2, 8010a70 <pbuf_alloced_custom+0x20>)
 8010a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a70:	08010a85 	.word	0x08010a85
 8010a74:	08010a8b 	.word	0x08010a8b
 8010a78:	08010a91 	.word	0x08010a91
 8010a7c:	08010a97 	.word	0x08010a97
 8010a80:	08010a9d 	.word	0x08010a9d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010a84:	2336      	movs	r3, #54	; 0x36
 8010a86:	81fb      	strh	r3, [r7, #14]
    break;
 8010a88:	e014      	b.n	8010ab4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010a8a:	2322      	movs	r3, #34	; 0x22
 8010a8c:	81fb      	strh	r3, [r7, #14]
    break;
 8010a8e:	e011      	b.n	8010ab4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8010a90:	230e      	movs	r3, #14
 8010a92:	81fb      	strh	r3, [r7, #14]
    break;
 8010a94:	e00e      	b.n	8010ab4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8010a96:	2300      	movs	r3, #0
 8010a98:	81fb      	strh	r3, [r7, #14]
    break;
 8010a9a:	e00b      	b.n	8010ab4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	81fb      	strh	r3, [r7, #14]
    break;
 8010aa0:	e008      	b.n	8010ab4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8010aa2:	4b1d      	ldr	r3, [pc, #116]	; (8010b18 <pbuf_alloced_custom+0xc8>)
 8010aa4:	f240 12c5 	movw	r2, #453	; 0x1c5
 8010aa8:	491c      	ldr	r1, [pc, #112]	; (8010b1c <pbuf_alloced_custom+0xcc>)
 8010aaa:	481d      	ldr	r0, [pc, #116]	; (8010b20 <pbuf_alloced_custom+0xd0>)
 8010aac:	f007 f8fa 	bl	8017ca4 <iprintf>
    return NULL;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	e02d      	b.n	8010b10 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010ab4:	89fb      	ldrh	r3, [r7, #14]
 8010ab6:	3303      	adds	r3, #3
 8010ab8:	f023 0203 	bic.w	r2, r3, #3
 8010abc:	88bb      	ldrh	r3, [r7, #4]
 8010abe:	441a      	add	r2, r3
 8010ac0:	8bbb      	ldrh	r3, [r7, #28]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d901      	bls.n	8010aca <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	e022      	b.n	8010b10 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	2200      	movs	r2, #0
 8010ace:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d008      	beq.n	8010ae8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010ad6:	89fb      	ldrh	r3, [r7, #14]
 8010ad8:	3303      	adds	r3, #3
 8010ada:	f023 0303 	bic.w	r3, r3, #3
 8010ade:	69ba      	ldr	r2, [r7, #24]
 8010ae0:	441a      	add	r2, r3
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	605a      	str	r2, [r3, #4]
 8010ae6:	e002      	b.n	8010aee <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	2200      	movs	r2, #0
 8010aec:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	2202      	movs	r2, #2
 8010af2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	88ba      	ldrh	r2, [r7, #4]
 8010af8:	811a      	strh	r2, [r3, #8]
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	891a      	ldrh	r2, [r3, #8]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	79ba      	ldrb	r2, [r7, #6]
 8010b06:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8010b0e:	683b      	ldr	r3, [r7, #0]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	0801aa6c 	.word	0x0801aa6c
 8010b1c:	0801ac04 	.word	0x0801ac04
 8010b20:	0801aab8 	.word	0x0801aab8

08010b24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d106      	bne.n	8010b44 <pbuf_realloc+0x20>
 8010b36:	4b4b      	ldr	r3, [pc, #300]	; (8010c64 <pbuf_realloc+0x140>)
 8010b38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8010b3c:	494a      	ldr	r1, [pc, #296]	; (8010c68 <pbuf_realloc+0x144>)
 8010b3e:	484b      	ldr	r0, [pc, #300]	; (8010c6c <pbuf_realloc+0x148>)
 8010b40:	f007 f8b0 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	7b1b      	ldrb	r3, [r3, #12]
 8010b48:	2b03      	cmp	r3, #3
 8010b4a:	d012      	beq.n	8010b72 <pbuf_realloc+0x4e>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	7b1b      	ldrb	r3, [r3, #12]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d00e      	beq.n	8010b72 <pbuf_realloc+0x4e>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7b1b      	ldrb	r3, [r3, #12]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00a      	beq.n	8010b72 <pbuf_realloc+0x4e>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	7b1b      	ldrb	r3, [r3, #12]
 8010b60:	2b02      	cmp	r3, #2
 8010b62:	d006      	beq.n	8010b72 <pbuf_realloc+0x4e>
 8010b64:	4b3f      	ldr	r3, [pc, #252]	; (8010c64 <pbuf_realloc+0x140>)
 8010b66:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010b6a:	4941      	ldr	r1, [pc, #260]	; (8010c70 <pbuf_realloc+0x14c>)
 8010b6c:	483f      	ldr	r0, [pc, #252]	; (8010c6c <pbuf_realloc+0x148>)
 8010b6e:	f007 f899 	bl	8017ca4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	891b      	ldrh	r3, [r3, #8]
 8010b76:	887a      	ldrh	r2, [r7, #2]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d26f      	bcs.n	8010c5c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8010b7c:	887b      	ldrh	r3, [r7, #2]
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	8912      	ldrh	r2, [r2, #8]
 8010b82:	1a9b      	subs	r3, r3, r2
 8010b84:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010b86:	887b      	ldrh	r3, [r7, #2]
 8010b88:	827b      	strh	r3, [r7, #18]
  q = p;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010b8e:	e025      	b.n	8010bdc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	895b      	ldrh	r3, [r3, #10]
 8010b94:	8a7a      	ldrh	r2, [r7, #18]
 8010b96:	1ad3      	subs	r3, r2, r3
 8010b98:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	dd06      	ble.n	8010bb2 <pbuf_realloc+0x8e>
 8010ba4:	4b2f      	ldr	r3, [pc, #188]	; (8010c64 <pbuf_realloc+0x140>)
 8010ba6:	f240 220b 	movw	r2, #523	; 0x20b
 8010baa:	4932      	ldr	r1, [pc, #200]	; (8010c74 <pbuf_realloc+0x150>)
 8010bac:	482f      	ldr	r0, [pc, #188]	; (8010c6c <pbuf_realloc+0x148>)
 8010bae:	f007 f879 	bl	8017ca4 <iprintf>
    q->tot_len += (u16_t)grow;
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	891a      	ldrh	r2, [r3, #8]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	4413      	add	r3, r2
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <pbuf_realloc+0xb8>
 8010bce:	4b25      	ldr	r3, [pc, #148]	; (8010c64 <pbuf_realloc+0x140>)
 8010bd0:	f240 220f 	movw	r2, #527	; 0x20f
 8010bd4:	4928      	ldr	r1, [pc, #160]	; (8010c78 <pbuf_realloc+0x154>)
 8010bd6:	4825      	ldr	r0, [pc, #148]	; (8010c6c <pbuf_realloc+0x148>)
 8010bd8:	f007 f864 	bl	8017ca4 <iprintf>
  while (rem_len > q->len) {
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	895b      	ldrh	r3, [r3, #10]
 8010be0:	8a7a      	ldrh	r2, [r7, #18]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d8d4      	bhi.n	8010b90 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	7b1b      	ldrb	r3, [r3, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d122      	bne.n	8010c34 <pbuf_realloc+0x110>
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	895b      	ldrh	r3, [r3, #10]
 8010bf2:	8a7a      	ldrh	r2, [r7, #18]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d01d      	beq.n	8010c34 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	7b5b      	ldrb	r3, [r3, #13]
 8010bfc:	f003 0302 	and.w	r3, r3, #2
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d117      	bne.n	8010c34 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	461a      	mov	r2, r3
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	1ad3      	subs	r3, r2, r3
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	8a7b      	ldrh	r3, [r7, #18]
 8010c12:	4413      	add	r3, r2
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	4619      	mov	r1, r3
 8010c18:	6978      	ldr	r0, [r7, #20]
 8010c1a:	f7ff f8cf 	bl	800fdbc <mem_trim>
 8010c1e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d106      	bne.n	8010c34 <pbuf_realloc+0x110>
 8010c26:	4b0f      	ldr	r3, [pc, #60]	; (8010c64 <pbuf_realloc+0x140>)
 8010c28:	f240 221d 	movw	r2, #541	; 0x21d
 8010c2c:	4913      	ldr	r1, [pc, #76]	; (8010c7c <pbuf_realloc+0x158>)
 8010c2e:	480f      	ldr	r0, [pc, #60]	; (8010c6c <pbuf_realloc+0x148>)
 8010c30:	f007 f838 	bl	8017ca4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	8a7a      	ldrh	r2, [r7, #18]
 8010c38:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	895a      	ldrh	r2, [r3, #10]
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d004      	beq.n	8010c54 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f000 f8dc 	bl	8010e0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	2200      	movs	r2, #0
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	e000      	b.n	8010c5e <pbuf_realloc+0x13a>
    return;
 8010c5c:	bf00      	nop

}
 8010c5e:	3718      	adds	r7, #24
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	0801aa6c 	.word	0x0801aa6c
 8010c68:	0801ac28 	.word	0x0801ac28
 8010c6c:	0801aab8 	.word	0x0801aab8
 8010c70:	0801ac40 	.word	0x0801ac40
 8010c74:	0801ac5c 	.word	0x0801ac5c
 8010c78:	0801ac70 	.word	0x0801ac70
 8010c7c:	0801ac88 	.word	0x0801ac88

08010c80 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	460b      	mov	r3, r1
 8010c8a:	807b      	strh	r3, [r7, #2]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d106      	bne.n	8010ca4 <pbuf_header_impl+0x24>
 8010c96:	4b46      	ldr	r3, [pc, #280]	; (8010db0 <pbuf_header_impl+0x130>)
 8010c98:	f240 223f 	movw	r2, #575	; 0x23f
 8010c9c:	4945      	ldr	r1, [pc, #276]	; (8010db4 <pbuf_header_impl+0x134>)
 8010c9e:	4846      	ldr	r0, [pc, #280]	; (8010db8 <pbuf_header_impl+0x138>)
 8010ca0:	f007 f800 	bl	8017ca4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8010ca4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d002      	beq.n	8010cb2 <pbuf_header_impl+0x32>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d101      	bne.n	8010cb6 <pbuf_header_impl+0x36>
    return 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	e078      	b.n	8010da8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8010cb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	da10      	bge.n	8010ce0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8010cbe:	887b      	ldrh	r3, [r7, #2]
 8010cc0:	425b      	negs	r3, r3
 8010cc2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	895b      	ldrh	r3, [r3, #10]
 8010cc8:	89fa      	ldrh	r2, [r7, #14]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d90a      	bls.n	8010ce4 <pbuf_header_impl+0x64>
 8010cce:	4b38      	ldr	r3, [pc, #224]	; (8010db0 <pbuf_header_impl+0x130>)
 8010cd0:	f240 2247 	movw	r2, #583	; 0x247
 8010cd4:	4939      	ldr	r1, [pc, #228]	; (8010dbc <pbuf_header_impl+0x13c>)
 8010cd6:	4838      	ldr	r0, [pc, #224]	; (8010db8 <pbuf_header_impl+0x138>)
 8010cd8:	f006 ffe4 	bl	8017ca4 <iprintf>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e063      	b.n	8010da8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8010ce0:	887b      	ldrh	r3, [r7, #2]
 8010ce2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	7b1b      	ldrb	r3, [r3, #12]
 8010ce8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8010cf0:	89bb      	ldrh	r3, [r7, #12]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d002      	beq.n	8010cfc <pbuf_header_impl+0x7c>
 8010cf6:	89bb      	ldrh	r3, [r7, #12]
 8010cf8:	2b03      	cmp	r3, #3
 8010cfa:	d112      	bne.n	8010d22 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	685a      	ldr	r2, [r3, #4]
 8010d00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d04:	425b      	negs	r3, r3
 8010d06:	441a      	add	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	685a      	ldr	r2, [r3, #4]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	3310      	adds	r3, #16
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d238      	bcs.n	8010d8a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	68ba      	ldr	r2, [r7, #8]
 8010d1c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e042      	b.n	8010da8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8010d22:	89bb      	ldrh	r3, [r7, #12]
 8010d24:	2b02      	cmp	r3, #2
 8010d26:	d002      	beq.n	8010d2e <pbuf_header_impl+0xae>
 8010d28:	89bb      	ldrh	r3, [r7, #12]
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d124      	bne.n	8010d78 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010d2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	da0d      	bge.n	8010d52 <pbuf_header_impl+0xd2>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	895b      	ldrh	r3, [r3, #10]
 8010d3a:	89fa      	ldrh	r2, [r7, #14]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d808      	bhi.n	8010d52 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	685a      	ldr	r2, [r3, #4]
 8010d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d48:	425b      	negs	r3, r3
 8010d4a:	441a      	add	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	605a      	str	r2, [r3, #4]
 8010d50:	e011      	b.n	8010d76 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8010d52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	dd0b      	ble.n	8010d72 <pbuf_header_impl+0xf2>
 8010d5a:	787b      	ldrb	r3, [r7, #1]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d008      	beq.n	8010d72 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	685a      	ldr	r2, [r3, #4]
 8010d64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d68:	425b      	negs	r3, r3
 8010d6a:	441a      	add	r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	605a      	str	r2, [r3, #4]
 8010d70:	e001      	b.n	8010d76 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010d72:	2301      	movs	r3, #1
 8010d74:	e018      	b.n	8010da8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010d76:	e008      	b.n	8010d8a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010d78:	4b0d      	ldr	r3, [pc, #52]	; (8010db0 <pbuf_header_impl+0x130>)
 8010d7a:	f240 2277 	movw	r2, #631	; 0x277
 8010d7e:	4910      	ldr	r1, [pc, #64]	; (8010dc0 <pbuf_header_impl+0x140>)
 8010d80:	480d      	ldr	r0, [pc, #52]	; (8010db8 <pbuf_header_impl+0x138>)
 8010d82:	f006 ff8f 	bl	8017ca4 <iprintf>
    return 1;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e00e      	b.n	8010da8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	895a      	ldrh	r2, [r3, #10]
 8010d8e:	887b      	ldrh	r3, [r7, #2]
 8010d90:	4413      	add	r3, r2
 8010d92:	b29a      	uxth	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	891a      	ldrh	r2, [r3, #8]
 8010d9c:	887b      	ldrh	r3, [r7, #2]
 8010d9e:	4413      	add	r3, r2
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	0801aa6c 	.word	0x0801aa6c
 8010db4:	0801aca4 	.word	0x0801aca4
 8010db8:	0801aab8 	.word	0x0801aab8
 8010dbc:	0801acb0 	.word	0x0801acb0
 8010dc0:	0801acd0 	.word	0x0801acd0

08010dc4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	460b      	mov	r3, r1
 8010dce:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8010dd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f7ff ff51 	bl	8010c80 <pbuf_header_impl>
 8010dde:	4603      	mov	r3, r0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	460b      	mov	r3, r1
 8010df2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010df4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010df8:	2201      	movs	r2, #1
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7ff ff3f 	bl	8010c80 <pbuf_header_impl>
 8010e02:	4603      	mov	r3, r0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b088      	sub	sp, #32
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10b      	bne.n	8010e32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d106      	bne.n	8010e2e <pbuf_free+0x22>
 8010e20:	4b41      	ldr	r3, [pc, #260]	; (8010f28 <pbuf_free+0x11c>)
 8010e22:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010e26:	4941      	ldr	r1, [pc, #260]	; (8010f2c <pbuf_free+0x120>)
 8010e28:	4841      	ldr	r0, [pc, #260]	; (8010f30 <pbuf_free+0x124>)
 8010e2a:	f006 ff3b 	bl	8017ca4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	e076      	b.n	8010f20 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	7b1b      	ldrb	r3, [r3, #12]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d012      	beq.n	8010e60 <pbuf_free+0x54>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	7b1b      	ldrb	r3, [r3, #12]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d00e      	beq.n	8010e60 <pbuf_free+0x54>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	7b1b      	ldrb	r3, [r3, #12]
 8010e46:	2b02      	cmp	r3, #2
 8010e48:	d00a      	beq.n	8010e60 <pbuf_free+0x54>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	7b1b      	ldrb	r3, [r3, #12]
 8010e4e:	2b03      	cmp	r3, #3
 8010e50:	d006      	beq.n	8010e60 <pbuf_free+0x54>
 8010e52:	4b35      	ldr	r3, [pc, #212]	; (8010f28 <pbuf_free+0x11c>)
 8010e54:	f240 22de 	movw	r2, #734	; 0x2de
 8010e58:	4936      	ldr	r1, [pc, #216]	; (8010f34 <pbuf_free+0x128>)
 8010e5a:	4835      	ldr	r0, [pc, #212]	; (8010f30 <pbuf_free+0x124>)
 8010e5c:	f006 ff22 	bl	8017ca4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8010e60:	2300      	movs	r3, #0
 8010e62:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010e64:	e058      	b.n	8010f18 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010e66:	f006 fe8f 	bl	8017b88 <sys_arch_protect>
 8010e6a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	89db      	ldrh	r3, [r3, #14]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d106      	bne.n	8010e82 <pbuf_free+0x76>
 8010e74:	4b2c      	ldr	r3, [pc, #176]	; (8010f28 <pbuf_free+0x11c>)
 8010e76:	f240 22eb 	movw	r2, #747	; 0x2eb
 8010e7a:	492f      	ldr	r1, [pc, #188]	; (8010f38 <pbuf_free+0x12c>)
 8010e7c:	482c      	ldr	r0, [pc, #176]	; (8010f30 <pbuf_free+0x124>)
 8010e7e:	f006 ff11 	bl	8017ca4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	89db      	ldrh	r3, [r3, #14]
 8010e86:	3b01      	subs	r3, #1
 8010e88:	b29a      	uxth	r2, r3
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	81da      	strh	r2, [r3, #14]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	89db      	ldrh	r3, [r3, #14]
 8010e92:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8010e94:	69b8      	ldr	r0, [r7, #24]
 8010e96:	f006 fe85 	bl	8017ba4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010e9a:	8afb      	ldrh	r3, [r7, #22]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d139      	bne.n	8010f14 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	7b1b      	ldrb	r3, [r3, #12]
 8010eaa:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	7b5b      	ldrb	r3, [r3, #13]
 8010eb0:	f003 0302 	and.w	r3, r3, #2
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d011      	beq.n	8010edc <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d106      	bne.n	8010ed2 <pbuf_free+0xc6>
 8010ec4:	4b18      	ldr	r3, [pc, #96]	; (8010f28 <pbuf_free+0x11c>)
 8010ec6:	f240 22f9 	movw	r2, #761	; 0x2f9
 8010eca:	491c      	ldr	r1, [pc, #112]	; (8010f3c <pbuf_free+0x130>)
 8010ecc:	4818      	ldr	r0, [pc, #96]	; (8010f30 <pbuf_free+0x124>)
 8010ece:	f006 fee9 	bl	8017ca4 <iprintf>
        pc->custom_free_function(p);
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	691b      	ldr	r3, [r3, #16]
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	4798      	blx	r3
 8010eda:	e015      	b.n	8010f08 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8010edc:	89fb      	ldrh	r3, [r7, #14]
 8010ede:	2b03      	cmp	r3, #3
 8010ee0:	d104      	bne.n	8010eec <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8010ee2:	6879      	ldr	r1, [r7, #4]
 8010ee4:	200e      	movs	r0, #14
 8010ee6:	f7ff fa15 	bl	8010314 <memp_free>
 8010eea:	e00d      	b.n	8010f08 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8010eec:	89fb      	ldrh	r3, [r7, #14]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d002      	beq.n	8010ef8 <pbuf_free+0xec>
 8010ef2:	89fb      	ldrh	r3, [r7, #14]
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d104      	bne.n	8010f02 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010ef8:	6879      	ldr	r1, [r7, #4]
 8010efa:	200d      	movs	r0, #13
 8010efc:	f7ff fa0a 	bl	8010314 <memp_free>
 8010f00:	e002      	b.n	8010f08 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7fe feec 	bl	800fce0 <mem_free>
        }
      }
      count++;
 8010f08:	7ffb      	ldrb	r3, [r7, #31]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	607b      	str	r3, [r7, #4]
 8010f12:	e001      	b.n	8010f18 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010f14:	2300      	movs	r3, #0
 8010f16:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1a3      	bne.n	8010e66 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3720      	adds	r7, #32
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	0801aa6c 	.word	0x0801aa6c
 8010f2c:	0801aca4 	.word	0x0801aca4
 8010f30:	0801aab8 	.word	0x0801aab8
 8010f34:	0801ace0 	.word	0x0801ace0
 8010f38:	0801acf8 	.word	0x0801acf8
 8010f3c:	0801ad10 	.word	0x0801ad10

08010f40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010f4c:	e005      	b.n	8010f5a <pbuf_clen+0x1a>
    ++len;
 8010f4e:	89fb      	ldrh	r3, [r7, #14]
 8010f50:	3301      	adds	r3, #1
 8010f52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1f6      	bne.n	8010f4e <pbuf_clen+0xe>
  }
  return len;
 8010f60:	89fb      	ldrh	r3, [r7, #14]
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3714      	adds	r7, #20
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr
	...

08010f70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d016      	beq.n	8010fac <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8010f7e:	f006 fe03 	bl	8017b88 <sys_arch_protect>
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	89db      	ldrh	r3, [r3, #14]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	b29a      	uxth	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	81da      	strh	r2, [r3, #14]
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f006 fe07 	bl	8017ba4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	89db      	ldrh	r3, [r3, #14]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d106      	bne.n	8010fac <pbuf_ref+0x3c>
 8010f9e:	4b05      	ldr	r3, [pc, #20]	; (8010fb4 <pbuf_ref+0x44>)
 8010fa0:	f240 3239 	movw	r2, #825	; 0x339
 8010fa4:	4904      	ldr	r1, [pc, #16]	; (8010fb8 <pbuf_ref+0x48>)
 8010fa6:	4805      	ldr	r0, [pc, #20]	; (8010fbc <pbuf_ref+0x4c>)
 8010fa8:	f006 fe7c 	bl	8017ca4 <iprintf>
  }
}
 8010fac:	bf00      	nop
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	0801aa6c 	.word	0x0801aa6c
 8010fb8:	0801ad34 	.word	0x0801ad34
 8010fbc:	0801aab8 	.word	0x0801aab8

08010fc0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <pbuf_cat+0x16>
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d107      	bne.n	8010fe6 <pbuf_cat+0x26>
 8010fd6:	4b20      	ldr	r3, [pc, #128]	; (8011058 <pbuf_cat+0x98>)
 8010fd8:	f240 324d 	movw	r2, #845	; 0x34d
 8010fdc:	491f      	ldr	r1, [pc, #124]	; (801105c <pbuf_cat+0x9c>)
 8010fde:	4820      	ldr	r0, [pc, #128]	; (8011060 <pbuf_cat+0xa0>)
 8010fe0:	f006 fe60 	bl	8017ca4 <iprintf>
 8010fe4:	e034      	b.n	8011050 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	60fb      	str	r3, [r7, #12]
 8010fea:	e00a      	b.n	8011002 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	891a      	ldrh	r2, [r3, #8]
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	891b      	ldrh	r3, [r3, #8]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	60fb      	str	r3, [r7, #12]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d1f0      	bne.n	8010fec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	891a      	ldrh	r2, [r3, #8]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	895b      	ldrh	r3, [r3, #10]
 8011012:	429a      	cmp	r2, r3
 8011014:	d006      	beq.n	8011024 <pbuf_cat+0x64>
 8011016:	4b10      	ldr	r3, [pc, #64]	; (8011058 <pbuf_cat+0x98>)
 8011018:	f240 3255 	movw	r2, #853	; 0x355
 801101c:	4911      	ldr	r1, [pc, #68]	; (8011064 <pbuf_cat+0xa4>)
 801101e:	4810      	ldr	r0, [pc, #64]	; (8011060 <pbuf_cat+0xa0>)
 8011020:	f006 fe40 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d006      	beq.n	801103a <pbuf_cat+0x7a>
 801102c:	4b0a      	ldr	r3, [pc, #40]	; (8011058 <pbuf_cat+0x98>)
 801102e:	f240 3256 	movw	r2, #854	; 0x356
 8011032:	490d      	ldr	r1, [pc, #52]	; (8011068 <pbuf_cat+0xa8>)
 8011034:	480a      	ldr	r0, [pc, #40]	; (8011060 <pbuf_cat+0xa0>)
 8011036:	f006 fe35 	bl	8017ca4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	891a      	ldrh	r2, [r3, #8]
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	891b      	ldrh	r3, [r3, #8]
 8011042:	4413      	add	r3, r2
 8011044:	b29a      	uxth	r2, r3
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011050:	3710      	adds	r7, #16
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	0801aa6c 	.word	0x0801aa6c
 801105c:	0801ad48 	.word	0x0801ad48
 8011060:	0801aab8 	.word	0x0801aab8
 8011064:	0801ad80 	.word	0x0801ad80
 8011068:	0801adb0 	.word	0x0801adb0

0801106c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011076:	6839      	ldr	r1, [r7, #0]
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f7ff ffa1 	bl	8010fc0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801107e:	6838      	ldr	r0, [r7, #0]
 8011080:	f7ff ff76 	bl	8010f70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011084:	bf00      	nop
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8011096:	2300      	movs	r3, #0
 8011098:	81fb      	strh	r3, [r7, #14]
 801109a:	2300      	movs	r3, #0
 801109c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d008      	beq.n	80110b6 <pbuf_copy+0x2a>
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d005      	beq.n	80110b6 <pbuf_copy+0x2a>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	891a      	ldrh	r2, [r3, #8]
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	891b      	ldrh	r3, [r3, #8]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d209      	bcs.n	80110ca <pbuf_copy+0x3e>
 80110b6:	4b54      	ldr	r3, [pc, #336]	; (8011208 <pbuf_copy+0x17c>)
 80110b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80110bc:	4953      	ldr	r1, [pc, #332]	; (801120c <pbuf_copy+0x180>)
 80110be:	4854      	ldr	r0, [pc, #336]	; (8011210 <pbuf_copy+0x184>)
 80110c0:	f006 fdf0 	bl	8017ca4 <iprintf>
 80110c4:	f06f 030f 	mvn.w	r3, #15
 80110c8:	e099      	b.n	80111fe <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	895b      	ldrh	r3, [r3, #10]
 80110ce:	461a      	mov	r2, r3
 80110d0:	89fb      	ldrh	r3, [r7, #14]
 80110d2:	1ad2      	subs	r2, r2, r3
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	895b      	ldrh	r3, [r3, #10]
 80110d8:	4619      	mov	r1, r3
 80110da:	89bb      	ldrh	r3, [r7, #12]
 80110dc:	1acb      	subs	r3, r1, r3
 80110de:	429a      	cmp	r2, r3
 80110e0:	db05      	blt.n	80110ee <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	895a      	ldrh	r2, [r3, #10]
 80110e6:	89bb      	ldrh	r3, [r7, #12]
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	817b      	strh	r3, [r7, #10]
 80110ec:	e004      	b.n	80110f8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	895a      	ldrh	r2, [r3, #10]
 80110f2:	89fb      	ldrh	r3, [r7, #14]
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	685a      	ldr	r2, [r3, #4]
 80110fc:	89fb      	ldrh	r3, [r7, #14]
 80110fe:	18d0      	adds	r0, r2, r3
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	685a      	ldr	r2, [r3, #4]
 8011104:	89bb      	ldrh	r3, [r7, #12]
 8011106:	4413      	add	r3, r2
 8011108:	897a      	ldrh	r2, [r7, #10]
 801110a:	4619      	mov	r1, r3
 801110c:	f006 fdb7 	bl	8017c7e <memcpy>
    offset_to += len;
 8011110:	89fa      	ldrh	r2, [r7, #14]
 8011112:	897b      	ldrh	r3, [r7, #10]
 8011114:	4413      	add	r3, r2
 8011116:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8011118:	89ba      	ldrh	r2, [r7, #12]
 801111a:	897b      	ldrh	r3, [r7, #10]
 801111c:	4413      	add	r3, r2
 801111e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	895b      	ldrh	r3, [r3, #10]
 8011124:	89fa      	ldrh	r2, [r7, #14]
 8011126:	429a      	cmp	r2, r3
 8011128:	d906      	bls.n	8011138 <pbuf_copy+0xac>
 801112a:	4b37      	ldr	r3, [pc, #220]	; (8011208 <pbuf_copy+0x17c>)
 801112c:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011130:	4938      	ldr	r1, [pc, #224]	; (8011214 <pbuf_copy+0x188>)
 8011132:	4837      	ldr	r0, [pc, #220]	; (8011210 <pbuf_copy+0x184>)
 8011134:	f006 fdb6 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	895b      	ldrh	r3, [r3, #10]
 801113c:	89ba      	ldrh	r2, [r7, #12]
 801113e:	429a      	cmp	r2, r3
 8011140:	d906      	bls.n	8011150 <pbuf_copy+0xc4>
 8011142:	4b31      	ldr	r3, [pc, #196]	; (8011208 <pbuf_copy+0x17c>)
 8011144:	f240 32ce 	movw	r2, #974	; 0x3ce
 8011148:	4933      	ldr	r1, [pc, #204]	; (8011218 <pbuf_copy+0x18c>)
 801114a:	4831      	ldr	r0, [pc, #196]	; (8011210 <pbuf_copy+0x184>)
 801114c:	f006 fdaa 	bl	8017ca4 <iprintf>
    if (offset_from >= p_from->len) {
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	895b      	ldrh	r3, [r3, #10]
 8011154:	89ba      	ldrh	r2, [r7, #12]
 8011156:	429a      	cmp	r2, r3
 8011158:	d304      	bcc.n	8011164 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	895b      	ldrh	r3, [r3, #10]
 8011168:	89fa      	ldrh	r2, [r7, #14]
 801116a:	429a      	cmp	r2, r3
 801116c:	d114      	bne.n	8011198 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d10c      	bne.n	8011198 <pbuf_copy+0x10c>
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d009      	beq.n	8011198 <pbuf_copy+0x10c>
 8011184:	4b20      	ldr	r3, [pc, #128]	; (8011208 <pbuf_copy+0x17c>)
 8011186:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801118a:	4924      	ldr	r1, [pc, #144]	; (801121c <pbuf_copy+0x190>)
 801118c:	4820      	ldr	r0, [pc, #128]	; (8011210 <pbuf_copy+0x184>)
 801118e:	f006 fd89 	bl	8017ca4 <iprintf>
 8011192:	f06f 030f 	mvn.w	r3, #15
 8011196:	e032      	b.n	80111fe <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d013      	beq.n	80111c6 <pbuf_copy+0x13a>
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	895a      	ldrh	r2, [r3, #10]
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	891b      	ldrh	r3, [r3, #8]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d10d      	bne.n	80111c6 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d009      	beq.n	80111c6 <pbuf_copy+0x13a>
 80111b2:	4b15      	ldr	r3, [pc, #84]	; (8011208 <pbuf_copy+0x17c>)
 80111b4:	f240 32de 	movw	r2, #990	; 0x3de
 80111b8:	4919      	ldr	r1, [pc, #100]	; (8011220 <pbuf_copy+0x194>)
 80111ba:	4815      	ldr	r0, [pc, #84]	; (8011210 <pbuf_copy+0x184>)
 80111bc:	f006 fd72 	bl	8017ca4 <iprintf>
 80111c0:	f06f 0305 	mvn.w	r3, #5
 80111c4:	e01b      	b.n	80111fe <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d013      	beq.n	80111f4 <pbuf_copy+0x168>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	895a      	ldrh	r2, [r3, #10]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	891b      	ldrh	r3, [r3, #8]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d10d      	bne.n	80111f4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d009      	beq.n	80111f4 <pbuf_copy+0x168>
 80111e0:	4b09      	ldr	r3, [pc, #36]	; (8011208 <pbuf_copy+0x17c>)
 80111e2:	f240 32e3 	movw	r2, #995	; 0x3e3
 80111e6:	490e      	ldr	r1, [pc, #56]	; (8011220 <pbuf_copy+0x194>)
 80111e8:	4809      	ldr	r0, [pc, #36]	; (8011210 <pbuf_copy+0x184>)
 80111ea:	f006 fd5b 	bl	8017ca4 <iprintf>
 80111ee:	f06f 0305 	mvn.w	r3, #5
 80111f2:	e004      	b.n	80111fe <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	f47f af67 	bne.w	80110ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	0801aa6c 	.word	0x0801aa6c
 801120c:	0801adfc 	.word	0x0801adfc
 8011210:	0801aab8 	.word	0x0801aab8
 8011214:	0801ae2c 	.word	0x0801ae2c
 8011218:	0801ae44 	.word	0x0801ae44
 801121c:	0801ae60 	.word	0x0801ae60
 8011220:	0801ae70 	.word	0x0801ae70

08011224 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b088      	sub	sp, #32
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	4611      	mov	r1, r2
 8011230:	461a      	mov	r2, r3
 8011232:	460b      	mov	r3, r1
 8011234:	80fb      	strh	r3, [r7, #6]
 8011236:	4613      	mov	r3, r2
 8011238:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801123a:	2300      	movs	r3, #0
 801123c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d108      	bne.n	8011256 <pbuf_copy_partial+0x32>
 8011244:	4b30      	ldr	r3, [pc, #192]	; (8011308 <pbuf_copy_partial+0xe4>)
 8011246:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801124a:	4930      	ldr	r1, [pc, #192]	; (801130c <pbuf_copy_partial+0xe8>)
 801124c:	4830      	ldr	r0, [pc, #192]	; (8011310 <pbuf_copy_partial+0xec>)
 801124e:	f006 fd29 	bl	8017ca4 <iprintf>
 8011252:	2300      	movs	r3, #0
 8011254:	e054      	b.n	8011300 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d108      	bne.n	801126e <pbuf_copy_partial+0x4a>
 801125c:	4b2a      	ldr	r3, [pc, #168]	; (8011308 <pbuf_copy_partial+0xe4>)
 801125e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011262:	492c      	ldr	r1, [pc, #176]	; (8011314 <pbuf_copy_partial+0xf0>)
 8011264:	482a      	ldr	r0, [pc, #168]	; (8011310 <pbuf_copy_partial+0xec>)
 8011266:	f006 fd1d 	bl	8017ca4 <iprintf>
 801126a:	2300      	movs	r3, #0
 801126c:	e048      	b.n	8011300 <pbuf_copy_partial+0xdc>

  left = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d002      	beq.n	801127e <pbuf_copy_partial+0x5a>
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d101      	bne.n	8011282 <pbuf_copy_partial+0x5e>
    return 0;
 801127e:	2300      	movs	r3, #0
 8011280:	e03e      	b.n	8011300 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	61fb      	str	r3, [r7, #28]
 8011286:	e034      	b.n	80112f2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8011288:	88bb      	ldrh	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00a      	beq.n	80112a4 <pbuf_copy_partial+0x80>
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	895b      	ldrh	r3, [r3, #10]
 8011292:	88ba      	ldrh	r2, [r7, #4]
 8011294:	429a      	cmp	r2, r3
 8011296:	d305      	bcc.n	80112a4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8011298:	69fb      	ldr	r3, [r7, #28]
 801129a:	895b      	ldrh	r3, [r3, #10]
 801129c:	88ba      	ldrh	r2, [r7, #4]
 801129e:	1ad3      	subs	r3, r2, r3
 80112a0:	80bb      	strh	r3, [r7, #4]
 80112a2:	e023      	b.n	80112ec <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	895a      	ldrh	r2, [r3, #10]
 80112a8:	88bb      	ldrh	r3, [r7, #4]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80112ae:	8b3a      	ldrh	r2, [r7, #24]
 80112b0:	88fb      	ldrh	r3, [r7, #6]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d901      	bls.n	80112ba <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80112b6:	88fb      	ldrh	r3, [r7, #6]
 80112b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80112ba:	8b7b      	ldrh	r3, [r7, #26]
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	18d0      	adds	r0, r2, r3
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	685a      	ldr	r2, [r3, #4]
 80112c4:	88bb      	ldrh	r3, [r7, #4]
 80112c6:	4413      	add	r3, r2
 80112c8:	8b3a      	ldrh	r2, [r7, #24]
 80112ca:	4619      	mov	r1, r3
 80112cc:	f006 fcd7 	bl	8017c7e <memcpy>
      copied_total += buf_copy_len;
 80112d0:	8afa      	ldrh	r2, [r7, #22]
 80112d2:	8b3b      	ldrh	r3, [r7, #24]
 80112d4:	4413      	add	r3, r2
 80112d6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80112d8:	8b7a      	ldrh	r2, [r7, #26]
 80112da:	8b3b      	ldrh	r3, [r7, #24]
 80112dc:	4413      	add	r3, r2
 80112de:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80112e0:	88fa      	ldrh	r2, [r7, #6]
 80112e2:	8b3b      	ldrh	r3, [r7, #24]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80112e8:	2300      	movs	r3, #0
 80112ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	61fb      	str	r3, [r7, #28]
 80112f2:	88fb      	ldrh	r3, [r7, #6]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d002      	beq.n	80112fe <pbuf_copy_partial+0xda>
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d1c4      	bne.n	8011288 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80112fe:	8afb      	ldrh	r3, [r7, #22]
}
 8011300:	4618      	mov	r0, r3
 8011302:	3720      	adds	r7, #32
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	0801aa6c 	.word	0x0801aa6c
 801130c:	0801ae9c 	.word	0x0801ae9c
 8011310:	0801aab8 	.word	0x0801aab8
 8011314:	0801aebc 	.word	0x0801aebc

08011318 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8011318:	b480      	push	{r7}
 801131a:	b087      	sub	sp, #28
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	460b      	mov	r3, r1
 8011322:	607a      	str	r2, [r7, #4]
 8011324:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011326:	897b      	ldrh	r3, [r7, #10]
 8011328:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801132e:	e007      	b.n	8011340 <pbuf_skip_const+0x28>
    offset_left -= q->len;
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	895b      	ldrh	r3, [r3, #10]
 8011334:	8afa      	ldrh	r2, [r7, #22]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d004      	beq.n	8011350 <pbuf_skip_const+0x38>
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	895b      	ldrh	r3, [r3, #10]
 801134a:	8afa      	ldrh	r2, [r7, #22]
 801134c:	429a      	cmp	r2, r3
 801134e:	d2ef      	bcs.n	8011330 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d002      	beq.n	801135c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	8afa      	ldrh	r2, [r7, #22]
 801135a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801135c:	693b      	ldr	r3, [r7, #16]
}
 801135e:	4618      	mov	r0, r3
 8011360:	371c      	adds	r7, #28
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr

0801136a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 801136a:	b580      	push	{r7, lr}
 801136c:	b086      	sub	sp, #24
 801136e:	af00      	add	r7, sp, #0
 8011370:	60f8      	str	r0, [r7, #12]
 8011372:	460b      	mov	r3, r1
 8011374:	607a      	str	r2, [r7, #4]
 8011376:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 8011378:	897b      	ldrh	r3, [r7, #10]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	4619      	mov	r1, r3
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f7ff ffca 	bl	8011318 <pbuf_skip_const>
 8011384:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 8011386:	697b      	ldr	r3, [r7, #20]
}
 8011388:	4618      	mov	r0, r3
 801138a:	3718      	adds	r7, #24
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b088      	sub	sp, #32
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	4613      	mov	r3, r2
 801139c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 801139e:	88fb      	ldrh	r3, [r7, #6]
 80113a0:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d109      	bne.n	80113c0 <pbuf_take+0x30>
 80113ac:	4b3a      	ldr	r3, [pc, #232]	; (8011498 <pbuf_take+0x108>)
 80113ae:	f240 4284 	movw	r2, #1156	; 0x484
 80113b2:	493a      	ldr	r1, [pc, #232]	; (801149c <pbuf_take+0x10c>)
 80113b4:	483a      	ldr	r0, [pc, #232]	; (80114a0 <pbuf_take+0x110>)
 80113b6:	f006 fc75 	bl	8017ca4 <iprintf>
 80113ba:	f06f 030f 	mvn.w	r3, #15
 80113be:	e066      	b.n	801148e <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d109      	bne.n	80113da <pbuf_take+0x4a>
 80113c6:	4b34      	ldr	r3, [pc, #208]	; (8011498 <pbuf_take+0x108>)
 80113c8:	f240 4285 	movw	r2, #1157	; 0x485
 80113cc:	4935      	ldr	r1, [pc, #212]	; (80114a4 <pbuf_take+0x114>)
 80113ce:	4834      	ldr	r0, [pc, #208]	; (80114a0 <pbuf_take+0x110>)
 80113d0:	f006 fc68 	bl	8017ca4 <iprintf>
 80113d4:	f06f 030f 	mvn.w	r3, #15
 80113d8:	e059      	b.n	801148e <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	891b      	ldrh	r3, [r3, #8]
 80113de:	88fa      	ldrh	r2, [r7, #6]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d909      	bls.n	80113f8 <pbuf_take+0x68>
 80113e4:	4b2c      	ldr	r3, [pc, #176]	; (8011498 <pbuf_take+0x108>)
 80113e6:	f240 4286 	movw	r2, #1158	; 0x486
 80113ea:	492f      	ldr	r1, [pc, #188]	; (80114a8 <pbuf_take+0x118>)
 80113ec:	482c      	ldr	r0, [pc, #176]	; (80114a0 <pbuf_take+0x110>)
 80113ee:	f006 fc59 	bl	8017ca4 <iprintf>
 80113f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113f6:	e04a      	b.n	801148e <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d007      	beq.n	801140e <pbuf_take+0x7e>
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d004      	beq.n	801140e <pbuf_take+0x7e>
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	891b      	ldrh	r3, [r3, #8]
 8011408:	88fa      	ldrh	r2, [r7, #6]
 801140a:	429a      	cmp	r2, r3
 801140c:	d902      	bls.n	8011414 <pbuf_take+0x84>
    return ERR_ARG;
 801140e:	f06f 030f 	mvn.w	r3, #15
 8011412:	e03c      	b.n	801148e <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	61fb      	str	r3, [r7, #28]
 8011418:	e027      	b.n	801146a <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d106      	bne.n	801142e <pbuf_take+0x9e>
 8011420:	4b1d      	ldr	r3, [pc, #116]	; (8011498 <pbuf_take+0x108>)
 8011422:	f240 428e 	movw	r2, #1166	; 0x48e
 8011426:	4921      	ldr	r1, [pc, #132]	; (80114ac <pbuf_take+0x11c>)
 8011428:	481d      	ldr	r0, [pc, #116]	; (80114a0 <pbuf_take+0x110>)
 801142a:	f006 fc3b 	bl	8017ca4 <iprintf>
    buf_copy_len = total_copy_len;
 801142e:	8b3b      	ldrh	r3, [r7, #24]
 8011430:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	895b      	ldrh	r3, [r3, #10]
 8011436:	8b7a      	ldrh	r2, [r7, #26]
 8011438:	429a      	cmp	r2, r3
 801143a:	d902      	bls.n	8011442 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	895b      	ldrh	r3, [r3, #10]
 8011440:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	6858      	ldr	r0, [r3, #4]
 8011446:	8afb      	ldrh	r3, [r7, #22]
 8011448:	68ba      	ldr	r2, [r7, #8]
 801144a:	4413      	add	r3, r2
 801144c:	8b7a      	ldrh	r2, [r7, #26]
 801144e:	4619      	mov	r1, r3
 8011450:	f006 fc15 	bl	8017c7e <memcpy>
    total_copy_len -= buf_copy_len;
 8011454:	8b3a      	ldrh	r2, [r7, #24]
 8011456:	8b7b      	ldrh	r3, [r7, #26]
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 801145c:	8afa      	ldrh	r2, [r7, #22]
 801145e:	8b7b      	ldrh	r3, [r7, #26]
 8011460:	4413      	add	r3, r2
 8011462:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	61fb      	str	r3, [r7, #28]
 801146a:	8b3b      	ldrh	r3, [r7, #24]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d1d4      	bne.n	801141a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011470:	8b3b      	ldrh	r3, [r7, #24]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d103      	bne.n	801147e <pbuf_take+0xee>
 8011476:	8afa      	ldrh	r2, [r7, #22]
 8011478:	88fb      	ldrh	r3, [r7, #6]
 801147a:	429a      	cmp	r2, r3
 801147c:	d006      	beq.n	801148c <pbuf_take+0xfc>
 801147e:	4b06      	ldr	r3, [pc, #24]	; (8011498 <pbuf_take+0x108>)
 8011480:	f240 4299 	movw	r2, #1177	; 0x499
 8011484:	490a      	ldr	r1, [pc, #40]	; (80114b0 <pbuf_take+0x120>)
 8011486:	4806      	ldr	r0, [pc, #24]	; (80114a0 <pbuf_take+0x110>)
 8011488:	f006 fc0c 	bl	8017ca4 <iprintf>
  return ERR_OK;
 801148c:	2300      	movs	r3, #0
}
 801148e:	4618      	mov	r0, r3
 8011490:	3720      	adds	r7, #32
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	0801aa6c 	.word	0x0801aa6c
 801149c:	0801aee0 	.word	0x0801aee0
 80114a0:	0801aab8 	.word	0x0801aab8
 80114a4:	0801aef8 	.word	0x0801aef8
 80114a8:	0801af14 	.word	0x0801af14
 80114ac:	0801af34 	.word	0x0801af34
 80114b0:	0801af4c 	.word	0x0801af4c

080114b4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b088      	sub	sp, #32
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	4611      	mov	r1, r2
 80114c0:	461a      	mov	r2, r3
 80114c2:	460b      	mov	r3, r1
 80114c4:	80fb      	strh	r3, [r7, #6]
 80114c6:	4613      	mov	r3, r2
 80114c8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 80114ca:	f107 0210 	add.w	r2, r7, #16
 80114ce:	88bb      	ldrh	r3, [r7, #4]
 80114d0:	4619      	mov	r1, r3
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f7ff ff49 	bl	801136a <pbuf_skip>
 80114d8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d035      	beq.n	801154c <pbuf_take_at+0x98>
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	891b      	ldrh	r3, [r3, #8]
 80114e4:	461a      	mov	r2, r3
 80114e6:	8a3b      	ldrh	r3, [r7, #16]
 80114e8:	4619      	mov	r1, r3
 80114ea:	88fb      	ldrh	r3, [r7, #6]
 80114ec:	440b      	add	r3, r1
 80114ee:	429a      	cmp	r2, r3
 80114f0:	db2c      	blt.n	801154c <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 80114f2:	88fb      	ldrh	r3, [r7, #6]
 80114f4:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 80114fa:	88fa      	ldrh	r2, [r7, #6]
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	895b      	ldrh	r3, [r3, #10]
 8011500:	4619      	mov	r1, r3
 8011502:	8a3b      	ldrh	r3, [r7, #16]
 8011504:	1acb      	subs	r3, r1, r3
 8011506:	4293      	cmp	r3, r2
 8011508:	bfa8      	it	ge
 801150a:	4613      	movge	r3, r2
 801150c:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	8a3a      	ldrh	r2, [r7, #16]
 8011514:	4413      	add	r3, r2
 8011516:	8a7a      	ldrh	r2, [r7, #18]
 8011518:	68b9      	ldr	r1, [r7, #8]
 801151a:	4618      	mov	r0, r3
 801151c:	f006 fbaf 	bl	8017c7e <memcpy>
    remaining_len -= first_copy_len;
 8011520:	8b7a      	ldrh	r2, [r7, #26]
 8011522:	8a7b      	ldrh	r3, [r7, #18]
 8011524:	1ad3      	subs	r3, r2, r3
 8011526:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8011528:	8a7b      	ldrh	r3, [r7, #18]
 801152a:	697a      	ldr	r2, [r7, #20]
 801152c:	4413      	add	r3, r2
 801152e:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8011530:	8b7b      	ldrh	r3, [r7, #26]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d008      	beq.n	8011548 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	8b7a      	ldrh	r2, [r7, #26]
 801153c:	6979      	ldr	r1, [r7, #20]
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff ff26 	bl	8011390 <pbuf_take>
 8011544:	4603      	mov	r3, r0
 8011546:	e003      	b.n	8011550 <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 8011548:	2300      	movs	r3, #0
 801154a:	e001      	b.n	8011550 <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 801154c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011550:	4618      	mov	r0, r3
 8011552:	3720      	adds	r7, #32
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	460b      	mov	r3, r1
 8011562:	807b      	strh	r3, [r7, #2]
 8011564:	4613      	mov	r3, r2
 8011566:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
 8011568:	f107 020a 	add.w	r2, r7, #10
 801156c:	887b      	ldrh	r3, [r7, #2]
 801156e:	4619      	mov	r1, r3
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f7ff fefa 	bl	801136a <pbuf_skip>
 8011576:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d00a      	beq.n	8011594 <pbuf_put_at+0x3c>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	895a      	ldrh	r2, [r3, #10]
 8011582:	897b      	ldrh	r3, [r7, #10]
 8011584:	429a      	cmp	r2, r3
 8011586:	d905      	bls.n	8011594 <pbuf_put_at+0x3c>
    ((u8_t*)q->payload)[q_idx] = data;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	897a      	ldrh	r2, [r7, #10]
 801158e:	4413      	add	r3, r2
 8011590:	787a      	ldrb	r2, [r7, #1]
 8011592:	701a      	strb	r2, [r3, #0]
  }
}
 8011594:	bf00      	nop
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801159c:	b480      	push	{r7}
 801159e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80115a0:	bf00      	nop
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
	...

080115ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80115b0:	f000 ffbc 	bl	801252c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80115b4:	4b07      	ldr	r3, [pc, #28]	; (80115d4 <tcp_tmr+0x28>)
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	3301      	adds	r3, #1
 80115ba:	b2da      	uxtb	r2, r3
 80115bc:	4b05      	ldr	r3, [pc, #20]	; (80115d4 <tcp_tmr+0x28>)
 80115be:	701a      	strb	r2, [r3, #0]
 80115c0:	4b04      	ldr	r3, [pc, #16]	; (80115d4 <tcp_tmr+0x28>)
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	f003 0301 	and.w	r3, r3, #1
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80115cc:	f000 fcee 	bl	8011fac <tcp_slowtmr>
  }
}
 80115d0:	bf00      	nop
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	20019f99 	.word	0x20019f99

080115d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	60fb      	str	r3, [r7, #12]
 80115e6:	e00a      	b.n	80115fe <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d102      	bne.n	80115f8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	60fb      	str	r3, [r7, #12]
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d1f1      	bne.n	80115e8 <tcp_remove_listener+0x10>
      }
   }
}
 8011604:	bf00      	nop
 8011606:	3714      	adds	r7, #20
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr

08011610 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d105      	bne.n	801162a <tcp_listen_closed+0x1a>
 801161e:	4b13      	ldr	r3, [pc, #76]	; (801166c <tcp_listen_closed+0x5c>)
 8011620:	22c0      	movs	r2, #192	; 0xc0
 8011622:	4913      	ldr	r1, [pc, #76]	; (8011670 <tcp_listen_closed+0x60>)
 8011624:	4813      	ldr	r0, [pc, #76]	; (8011674 <tcp_listen_closed+0x64>)
 8011626:	f006 fb3d 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	7d1b      	ldrb	r3, [r3, #20]
 801162e:	2b01      	cmp	r3, #1
 8011630:	d005      	beq.n	801163e <tcp_listen_closed+0x2e>
 8011632:	4b0e      	ldr	r3, [pc, #56]	; (801166c <tcp_listen_closed+0x5c>)
 8011634:	22c1      	movs	r2, #193	; 0xc1
 8011636:	4910      	ldr	r1, [pc, #64]	; (8011678 <tcp_listen_closed+0x68>)
 8011638:	480e      	ldr	r0, [pc, #56]	; (8011674 <tcp_listen_closed+0x64>)
 801163a:	f006 fb33 	bl	8017ca4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801163e:	2301      	movs	r3, #1
 8011640:	60fb      	str	r3, [r7, #12]
 8011642:	e00b      	b.n	801165c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8011644:	4a0d      	ldr	r2, [pc, #52]	; (801167c <tcp_listen_closed+0x6c>)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	6879      	ldr	r1, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff ffc1 	bl	80115d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	3301      	adds	r3, #1
 801165a:	60fb      	str	r3, [r7, #12]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2b03      	cmp	r3, #3
 8011660:	d9f0      	bls.n	8011644 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011662:	bf00      	nop
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	0801aff0 	.word	0x0801aff0
 8011670:	0801b020 	.word	0x0801b020
 8011674:	0801b02c 	.word	0x0801b02c
 8011678:	0801b054 	.word	0x0801b054
 801167c:	0801bfa4 	.word	0x0801bfa4

08011680 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011680:	b5b0      	push	{r4, r5, r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af02      	add	r7, sp, #8
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	460b      	mov	r3, r1
 801168a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801168c:	78fb      	ldrb	r3, [r7, #3]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d075      	beq.n	801177e <tcp_close_shutdown+0xfe>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	7d1b      	ldrb	r3, [r3, #20]
 8011696:	2b04      	cmp	r3, #4
 8011698:	d003      	beq.n	80116a2 <tcp_close_shutdown+0x22>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	7d1b      	ldrb	r3, [r3, #20]
 801169e:	2b07      	cmp	r3, #7
 80116a0:	d16d      	bne.n	801177e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d104      	bne.n	80116b4 <tcp_close_shutdown+0x34>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80116b2:	d064      	beq.n	801177e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	7e9b      	ldrb	r3, [r3, #26]
 80116b8:	f003 0310 	and.w	r3, r3, #16
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d106      	bne.n	80116ce <tcp_close_shutdown+0x4e>
 80116c0:	4b59      	ldr	r3, [pc, #356]	; (8011828 <tcp_close_shutdown+0x1a8>)
 80116c2:	f240 120f 	movw	r2, #271	; 0x10f
 80116c6:	4959      	ldr	r1, [pc, #356]	; (801182c <tcp_close_shutdown+0x1ac>)
 80116c8:	4859      	ldr	r0, [pc, #356]	; (8011830 <tcp_close_shutdown+0x1b0>)
 80116ca:	f006 faeb 	bl	8017ca4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80116d6:	687c      	ldr	r4, [r7, #4]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	1d1d      	adds	r5, r3, #4
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	8adb      	ldrh	r3, [r3, #22]
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	8b12      	ldrh	r2, [r2, #24]
 80116e4:	9201      	str	r2, [sp, #4]
 80116e6:	9300      	str	r3, [sp, #0]
 80116e8:	462b      	mov	r3, r5
 80116ea:	4622      	mov	r2, r4
 80116ec:	f004 ffa2 	bl	8016634 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f001 fa53 	bl	8012b9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80116f6:	4b4f      	ldr	r3, [pc, #316]	; (8011834 <tcp_close_shutdown+0x1b4>)
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d105      	bne.n	801170c <tcp_close_shutdown+0x8c>
 8011700:	4b4c      	ldr	r3, [pc, #304]	; (8011834 <tcp_close_shutdown+0x1b4>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	4a4b      	ldr	r2, [pc, #300]	; (8011834 <tcp_close_shutdown+0x1b4>)
 8011708:	6013      	str	r3, [r2, #0]
 801170a:	e013      	b.n	8011734 <tcp_close_shutdown+0xb4>
 801170c:	4b49      	ldr	r3, [pc, #292]	; (8011834 <tcp_close_shutdown+0x1b4>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	60fb      	str	r3, [r7, #12]
 8011712:	e00c      	b.n	801172e <tcp_close_shutdown+0xae>
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	68da      	ldr	r2, [r3, #12]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	429a      	cmp	r2, r3
 801171c:	d104      	bne.n	8011728 <tcp_close_shutdown+0xa8>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	68da      	ldr	r2, [r3, #12]
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	60da      	str	r2, [r3, #12]
 8011726:	e005      	b.n	8011734 <tcp_close_shutdown+0xb4>
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d1ef      	bne.n	8011714 <tcp_close_shutdown+0x94>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	60da      	str	r2, [r3, #12]
 801173a:	4b3f      	ldr	r3, [pc, #252]	; (8011838 <tcp_close_shutdown+0x1b8>)
 801173c:	2201      	movs	r2, #1
 801173e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	7d1b      	ldrb	r3, [r3, #20]
 8011744:	2b04      	cmp	r3, #4
 8011746:	d10c      	bne.n	8011762 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	220a      	movs	r2, #10
 801174c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801174e:	4b3b      	ldr	r3, [pc, #236]	; (801183c <tcp_close_shutdown+0x1bc>)
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	60da      	str	r2, [r3, #12]
 8011756:	4a39      	ldr	r2, [pc, #228]	; (801183c <tcp_close_shutdown+0x1bc>)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6013      	str	r3, [r2, #0]
 801175c:	f005 f9ba 	bl	8016ad4 <tcp_timer_needed>
 8011760:	e00b      	b.n	801177a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8011762:	4b37      	ldr	r3, [pc, #220]	; (8011840 <tcp_close_shutdown+0x1c0>)
 8011764:	681a      	ldr	r2, [r3, #0]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	429a      	cmp	r2, r3
 801176a:	d102      	bne.n	8011772 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 801176c:	f003 fdf8 	bl	8015360 <tcp_trigger_input_pcb_close>
 8011770:	e003      	b.n	801177a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8011772:	6879      	ldr	r1, [r7, #4]
 8011774:	2001      	movs	r0, #1
 8011776:	f7fe fdcd 	bl	8010314 <memp_free>
        }
      }
      return ERR_OK;
 801177a:	2300      	movs	r3, #0
 801177c:	e050      	b.n	8011820 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7d1b      	ldrb	r3, [r3, #20]
 8011782:	2b01      	cmp	r3, #1
 8011784:	d02e      	beq.n	80117e4 <tcp_close_shutdown+0x164>
 8011786:	2b02      	cmp	r3, #2
 8011788:	d038      	beq.n	80117fc <tcp_close_shutdown+0x17c>
 801178a:	2b00      	cmp	r3, #0
 801178c:	d142      	bne.n	8011814 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	8adb      	ldrh	r3, [r3, #22]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d021      	beq.n	80117da <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8011796:	4b2b      	ldr	r3, [pc, #172]	; (8011844 <tcp_close_shutdown+0x1c4>)
 8011798:	681a      	ldr	r2, [r3, #0]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	429a      	cmp	r2, r3
 801179e:	d105      	bne.n	80117ac <tcp_close_shutdown+0x12c>
 80117a0:	4b28      	ldr	r3, [pc, #160]	; (8011844 <tcp_close_shutdown+0x1c4>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	4a27      	ldr	r2, [pc, #156]	; (8011844 <tcp_close_shutdown+0x1c4>)
 80117a8:	6013      	str	r3, [r2, #0]
 80117aa:	e013      	b.n	80117d4 <tcp_close_shutdown+0x154>
 80117ac:	4b25      	ldr	r3, [pc, #148]	; (8011844 <tcp_close_shutdown+0x1c4>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	60bb      	str	r3, [r7, #8]
 80117b2:	e00c      	b.n	80117ce <tcp_close_shutdown+0x14e>
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	68da      	ldr	r2, [r3, #12]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d104      	bne.n	80117c8 <tcp_close_shutdown+0x148>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	68da      	ldr	r2, [r3, #12]
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	60da      	str	r2, [r3, #12]
 80117c6:	e005      	b.n	80117d4 <tcp_close_shutdown+0x154>
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	60bb      	str	r3, [r7, #8]
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d1ef      	bne.n	80117b4 <tcp_close_shutdown+0x134>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2200      	movs	r2, #0
 80117d8:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80117da:	6879      	ldr	r1, [r7, #4]
 80117dc:	2001      	movs	r0, #1
 80117de:	f7fe fd99 	bl	8010314 <memp_free>
    break;
 80117e2:	e01c      	b.n	801181e <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f7ff ff13 	bl	8011610 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80117ea:	6879      	ldr	r1, [r7, #4]
 80117ec:	4816      	ldr	r0, [pc, #88]	; (8011848 <tcp_close_shutdown+0x1c8>)
 80117ee:	f001 fa17 	bl	8012c20 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80117f2:	6879      	ldr	r1, [r7, #4]
 80117f4:	2002      	movs	r0, #2
 80117f6:	f7fe fd8d 	bl	8010314 <memp_free>
    break;
 80117fa:	e010      	b.n	801181e <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80117fc:	6879      	ldr	r1, [r7, #4]
 80117fe:	480d      	ldr	r0, [pc, #52]	; (8011834 <tcp_close_shutdown+0x1b4>)
 8011800:	f001 fa0e 	bl	8012c20 <tcp_pcb_remove>
 8011804:	4b0c      	ldr	r3, [pc, #48]	; (8011838 <tcp_close_shutdown+0x1b8>)
 8011806:	2201      	movs	r2, #1
 8011808:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801180a:	6879      	ldr	r1, [r7, #4]
 801180c:	2001      	movs	r0, #1
 801180e:	f7fe fd81 	bl	8010314 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8011812:	e004      	b.n	801181e <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f000 f819 	bl	801184c <tcp_close_shutdown_fin>
 801181a:	4603      	mov	r3, r0
 801181c:	e000      	b.n	8011820 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 801181e:	2300      	movs	r3, #0
}
 8011820:	4618      	mov	r0, r3
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bdb0      	pop	{r4, r5, r7, pc}
 8011828:	0801aff0 	.word	0x0801aff0
 801182c:	0801b06c 	.word	0x0801b06c
 8011830:	0801b02c 	.word	0x0801b02c
 8011834:	20020bcc 	.word	0x20020bcc
 8011838:	20020bc8 	.word	0x20020bc8
 801183c:	20020bdc 	.word	0x20020bdc
 8011840:	20020be0 	.word	0x20020be0
 8011844:	20020bd8 	.word	0x20020bd8
 8011848:	20020bd4 	.word	0x20020bd4

0801184c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d106      	bne.n	8011868 <tcp_close_shutdown_fin+0x1c>
 801185a:	4b2c      	ldr	r3, [pc, #176]	; (801190c <tcp_close_shutdown_fin+0xc0>)
 801185c:	f240 124d 	movw	r2, #333	; 0x14d
 8011860:	492b      	ldr	r1, [pc, #172]	; (8011910 <tcp_close_shutdown_fin+0xc4>)
 8011862:	482c      	ldr	r0, [pc, #176]	; (8011914 <tcp_close_shutdown_fin+0xc8>)
 8011864:	f006 fa1e 	bl	8017ca4 <iprintf>

  switch (pcb->state) {
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	7d1b      	ldrb	r3, [r3, #20]
 801186c:	2b04      	cmp	r3, #4
 801186e:	d010      	beq.n	8011892 <tcp_close_shutdown_fin+0x46>
 8011870:	2b07      	cmp	r3, #7
 8011872:	d01b      	beq.n	80118ac <tcp_close_shutdown_fin+0x60>
 8011874:	2b03      	cmp	r3, #3
 8011876:	d126      	bne.n	80118c6 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f003 fdfd 	bl	8015478 <tcp_send_fin>
 801187e:	4603      	mov	r3, r0
 8011880:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d11f      	bne.n	80118ca <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2205      	movs	r2, #5
 801188e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8011890:	e01b      	b.n	80118ca <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f003 fdf0 	bl	8015478 <tcp_send_fin>
 8011898:	4603      	mov	r3, r0
 801189a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801189c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d114      	bne.n	80118ce <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2205      	movs	r2, #5
 80118a8:	751a      	strb	r2, [r3, #20]
    }
    break;
 80118aa:	e010      	b.n	80118ce <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f003 fde3 	bl	8015478 <tcp_send_fin>
 80118b2:	4603      	mov	r3, r0
 80118b4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80118b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d109      	bne.n	80118d2 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2209      	movs	r2, #9
 80118c2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80118c4:	e005      	b.n	80118d2 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80118c6:	2300      	movs	r3, #0
 80118c8:	e01c      	b.n	8011904 <tcp_close_shutdown_fin+0xb8>
    break;
 80118ca:	bf00      	nop
 80118cc:	e002      	b.n	80118d4 <tcp_close_shutdown_fin+0x88>
    break;
 80118ce:	bf00      	nop
 80118d0:	e000      	b.n	80118d4 <tcp_close_shutdown_fin+0x88>
    break;
 80118d2:	bf00      	nop
  }

  if (err == ERR_OK) {
 80118d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d103      	bne.n	80118e4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f004 fc21 	bl	8016124 <tcp_output>
 80118e2:	e00d      	b.n	8011900 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80118e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118ec:	d108      	bne.n	8011900 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	7e9b      	ldrb	r3, [r3, #26]
 80118f2:	f043 0308 	orr.w	r3, r3, #8
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80118fc:	2300      	movs	r3, #0
 80118fe:	e001      	b.n	8011904 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8011900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	0801aff0 	.word	0x0801aff0
 8011910:	0801b020 	.word	0x0801b020
 8011914:	0801b02c 	.word	0x0801b02c

08011918 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	7d1b      	ldrb	r3, [r3, #20]
 8011924:	4618      	mov	r0, r3
 8011926:	f001 faa3 	bl	8012e70 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	7d1b      	ldrb	r3, [r3, #20]
 801192e:	2b01      	cmp	r3, #1
 8011930:	d006      	beq.n	8011940 <tcp_close+0x28>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	7e9b      	ldrb	r3, [r3, #26]
 8011936:	f043 0310 	orr.w	r3, r3, #16
 801193a:	b2da      	uxtb	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011940:	2101      	movs	r1, #1
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7ff fe9c 	bl	8011680 <tcp_close_shutdown>
 8011948:	4603      	mov	r3, r0
}
 801194a:	4618      	mov	r0, r3
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	60f8      	str	r0, [r7, #12]
 801195a:	60b9      	str	r1, [r7, #8]
 801195c:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	7d1b      	ldrb	r3, [r3, #20]
 8011962:	2b01      	cmp	r3, #1
 8011964:	d102      	bne.n	801196c <tcp_shutdown+0x1a>
    return ERR_CONN;
 8011966:	f06f 030a 	mvn.w	r3, #10
 801196a:	e035      	b.n	80119d8 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d01b      	beq.n	80119aa <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	7e9b      	ldrb	r3, [r3, #26]
 8011976:	f043 0310 	orr.w	r3, r3, #16
 801197a:	b2da      	uxtb	r2, r3
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d005      	beq.n	8011992 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011986:	2101      	movs	r1, #1
 8011988:	68f8      	ldr	r0, [r7, #12]
 801198a:	f7ff fe79 	bl	8011680 <tcp_close_shutdown>
 801198e:	4603      	mov	r3, r0
 8011990:	e022      	b.n	80119d8 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011996:	2b00      	cmp	r3, #0
 8011998:	d007      	beq.n	80119aa <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801199e:	4618      	mov	r0, r3
 80119a0:	f7ff fa34 	bl	8010e0c <pbuf_free>
      pcb->refused_data = NULL;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2200      	movs	r2, #0
 80119a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d012      	beq.n	80119d6 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	2b03      	cmp	r3, #3
 80119b6:	db0b      	blt.n	80119d0 <tcp_shutdown+0x7e>
 80119b8:	2b04      	cmp	r3, #4
 80119ba:	dd01      	ble.n	80119c0 <tcp_shutdown+0x6e>
 80119bc:	2b07      	cmp	r3, #7
 80119be:	d107      	bne.n	80119d0 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	4619      	mov	r1, r3
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f7ff fe5a 	bl	8011680 <tcp_close_shutdown>
 80119cc:	4603      	mov	r3, r0
 80119ce:	e003      	b.n	80119d8 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 80119d0:	f06f 030a 	mvn.w	r3, #10
 80119d4:	e000      	b.n	80119d8 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b08c      	sub	sp, #48	; 0x30
 80119e4:	af02      	add	r7, sp, #8
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	7d1b      	ldrb	r3, [r3, #20]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d106      	bne.n	8011a00 <tcp_abandon+0x20>
 80119f2:	4b4d      	ldr	r3, [pc, #308]	; (8011b28 <tcp_abandon+0x148>)
 80119f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80119f8:	494c      	ldr	r1, [pc, #304]	; (8011b2c <tcp_abandon+0x14c>)
 80119fa:	484d      	ldr	r0, [pc, #308]	; (8011b30 <tcp_abandon+0x150>)
 80119fc:	f006 f952 	bl	8017ca4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	7d1b      	ldrb	r3, [r3, #20]
 8011a04:	2b0a      	cmp	r3, #10
 8011a06:	d108      	bne.n	8011a1a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011a08:	6879      	ldr	r1, [r7, #4]
 8011a0a:	484a      	ldr	r0, [pc, #296]	; (8011b34 <tcp_abandon+0x154>)
 8011a0c:	f001 f908 	bl	8012c20 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	2001      	movs	r0, #1
 8011a14:	f7fe fc7e 	bl	8010314 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8011a18:	e081      	b.n	8011b1e <tcp_abandon+0x13e>
    int send_rst = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a26:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a34:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	691b      	ldr	r3, [r3, #16]
 8011a3a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d126      	bne.n	8011a92 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	8adb      	ldrh	r3, [r3, #22]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d02e      	beq.n	8011aaa <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011a4c:	4b3a      	ldr	r3, [pc, #232]	; (8011b38 <tcp_abandon+0x158>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d105      	bne.n	8011a62 <tcp_abandon+0x82>
 8011a56:	4b38      	ldr	r3, [pc, #224]	; (8011b38 <tcp_abandon+0x158>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	4a36      	ldr	r2, [pc, #216]	; (8011b38 <tcp_abandon+0x158>)
 8011a5e:	6013      	str	r3, [r2, #0]
 8011a60:	e013      	b.n	8011a8a <tcp_abandon+0xaa>
 8011a62:	4b35      	ldr	r3, [pc, #212]	; (8011b38 <tcp_abandon+0x158>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	61fb      	str	r3, [r7, #28]
 8011a68:	e00c      	b.n	8011a84 <tcp_abandon+0xa4>
 8011a6a:	69fb      	ldr	r3, [r7, #28]
 8011a6c:	68da      	ldr	r2, [r3, #12]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d104      	bne.n	8011a7e <tcp_abandon+0x9e>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	68da      	ldr	r2, [r3, #12]
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	60da      	str	r2, [r3, #12]
 8011a7c:	e005      	b.n	8011a8a <tcp_abandon+0xaa>
 8011a7e:	69fb      	ldr	r3, [r7, #28]
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	61fb      	str	r3, [r7, #28]
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d1ef      	bne.n	8011a6a <tcp_abandon+0x8a>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	60da      	str	r2, [r3, #12]
 8011a90:	e00b      	b.n	8011aaa <tcp_abandon+0xca>
      send_rst = reset;
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	8adb      	ldrh	r3, [r3, #22]
 8011a9a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011a9c:	6879      	ldr	r1, [r7, #4]
 8011a9e:	4827      	ldr	r0, [pc, #156]	; (8011b3c <tcp_abandon+0x15c>)
 8011aa0:	f001 f8be 	bl	8012c20 <tcp_pcb_remove>
 8011aa4:	4b26      	ldr	r3, [pc, #152]	; (8011b40 <tcp_abandon+0x160>)
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d004      	beq.n	8011abc <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f000 fe05 	bl	80126c6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d004      	beq.n	8011ace <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 fdfc 	bl	80126c6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d004      	beq.n	8011ae0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ada:	4618      	mov	r0, r3
 8011adc:	f000 fdf3 	bl	80126c6 <tcp_segs_free>
    if (send_rst) {
 8011ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00c      	beq.n	8011b00 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	1d19      	adds	r1, r3, #4
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	8b1b      	ldrh	r3, [r3, #24]
 8011af0:	9301      	str	r3, [sp, #4]
 8011af2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011af4:	9300      	str	r3, [sp, #0]
 8011af6:	460b      	mov	r3, r1
 8011af8:	6979      	ldr	r1, [r7, #20]
 8011afa:	69b8      	ldr	r0, [r7, #24]
 8011afc:	f004 fd9a 	bl	8016634 <tcp_rst>
    last_state = pcb->state;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	7d1b      	ldrb	r3, [r3, #20]
 8011b04:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8011b06:	6879      	ldr	r1, [r7, #4]
 8011b08:	2001      	movs	r0, #1
 8011b0a:	f7fe fc03 	bl	8010314 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d004      	beq.n	8011b1e <tcp_abandon+0x13e>
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	f06f 010c 	mvn.w	r1, #12
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	4798      	blx	r3
}
 8011b1e:	bf00      	nop
 8011b20:	3728      	adds	r7, #40	; 0x28
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	0801aff0 	.word	0x0801aff0
 8011b2c:	0801b088 	.word	0x0801b088
 8011b30:	0801b02c 	.word	0x0801b02c
 8011b34:	20020bdc 	.word	0x20020bdc
 8011b38:	20020bd8 	.word	0x20020bd8
 8011b3c:	20020bcc 	.word	0x20020bcc
 8011b40:	20020bc8 	.word	0x20020bc8

08011b44 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011b4c:	2101      	movs	r1, #1
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7ff ff46 	bl	80119e0 <tcp_abandon>
}
 8011b54:	bf00      	nop
 8011b56:	3708      	adds	r7, #8
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b088      	sub	sp, #32
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	4613      	mov	r3, r2
 8011b68:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011b6a:	2304      	movs	r3, #4
 8011b6c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d101      	bne.n	8011b78 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011b74:	4b3c      	ldr	r3, [pc, #240]	; (8011c68 <tcp_bind+0x10c>)
 8011b76:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d002      	beq.n	8011b84 <tcp_bind+0x28>
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d102      	bne.n	8011b8a <tcp_bind+0x2e>
    return ERR_VAL;
 8011b84:	f06f 0305 	mvn.w	r3, #5
 8011b88:	e06a      	b.n	8011c60 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	7d1b      	ldrb	r3, [r3, #20]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d009      	beq.n	8011ba6 <tcp_bind+0x4a>
 8011b92:	4b36      	ldr	r3, [pc, #216]	; (8011c6c <tcp_bind+0x110>)
 8011b94:	f44f 7211 	mov.w	r2, #580	; 0x244
 8011b98:	4935      	ldr	r1, [pc, #212]	; (8011c70 <tcp_bind+0x114>)
 8011b9a:	4836      	ldr	r0, [pc, #216]	; (8011c74 <tcp_bind+0x118>)
 8011b9c:	f006 f882 	bl	8017ca4 <iprintf>
 8011ba0:	f06f 0305 	mvn.w	r3, #5
 8011ba4:	e05c      	b.n	8011c60 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8011ba6:	88fb      	ldrh	r3, [r7, #6]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d109      	bne.n	8011bc0 <tcp_bind+0x64>
    port = tcp_new_port();
 8011bac:	f000 f9ba 	bl	8011f24 <tcp_new_port>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011bb4:	88fb      	ldrh	r3, [r7, #6]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d135      	bne.n	8011c26 <tcp_bind+0xca>
      return ERR_BUF;
 8011bba:	f06f 0301 	mvn.w	r3, #1
 8011bbe:	e04f      	b.n	8011c60 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	61fb      	str	r3, [r7, #28]
 8011bc4:	e02b      	b.n	8011c1e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011bc6:	4a2c      	ldr	r2, [pc, #176]	; (8011c78 <tcp_bind+0x11c>)
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	61bb      	str	r3, [r7, #24]
 8011bd2:	e01e      	b.n	8011c12 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	8adb      	ldrh	r3, [r3, #22]
 8011bd8:	88fa      	ldrh	r2, [r7, #6]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d116      	bne.n	8011c0c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011bde:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d010      	beq.n	8011c06 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011be4:	69bb      	ldr	r3, [r7, #24]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d00c      	beq.n	8011c06 <tcp_bind+0xaa>
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d009      	beq.n	8011c06 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d005      	beq.n	8011c06 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d102      	bne.n	8011c0c <tcp_bind+0xb0>
              return ERR_USE;
 8011c06:	f06f 0307 	mvn.w	r3, #7
 8011c0a:	e029      	b.n	8011c60 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	61bb      	str	r3, [r7, #24]
 8011c12:	69bb      	ldr	r3, [r7, #24]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d1dd      	bne.n	8011bd4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	61fb      	str	r3, [r7, #28]
 8011c1e:	69fa      	ldr	r2, [r7, #28]
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	dbcf      	blt.n	8011bc6 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d00c      	beq.n	8011c46 <tcp_bind+0xea>
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d008      	beq.n	8011c46 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d002      	beq.n	8011c40 <tcp_bind+0xe4>
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	e000      	b.n	8011c42 <tcp_bind+0xe6>
 8011c40:	2300      	movs	r3, #0
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	88fa      	ldrh	r2, [r7, #6]
 8011c4a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011c4c:	4b0b      	ldr	r3, [pc, #44]	; (8011c7c <tcp_bind+0x120>)
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	60da      	str	r2, [r3, #12]
 8011c54:	4a09      	ldr	r2, [pc, #36]	; (8011c7c <tcp_bind+0x120>)
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	6013      	str	r3, [r2, #0]
 8011c5a:	f004 ff3b 	bl	8016ad4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011c5e:	2300      	movs	r3, #0
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3720      	adds	r7, #32
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	0801be94 	.word	0x0801be94
 8011c6c:	0801aff0 	.word	0x0801aff0
 8011c70:	0801b0bc 	.word	0x0801b0bc
 8011c74:	0801b02c 	.word	0x0801b02c
 8011c78:	0801bfa4 	.word	0x0801bfa4
 8011c7c:	20020bd8 	.word	0x20020bd8

08011c80 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8011c8e:	68b8      	ldr	r0, [r7, #8]
 8011c90:	f7ff ff58 	bl	8011b44 <tcp_abort>

  return ERR_ABRT;
 8011c94:	f06f 030c 	mvn.w	r3, #12
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3710      	adds	r7, #16
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b088      	sub	sp, #32
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	460b      	mov	r3, r1
 8011caa:	607a      	str	r2, [r7, #4]
 8011cac:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	7d1b      	ldrb	r3, [r3, #20]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d009      	beq.n	8011cce <tcp_listen_with_backlog_and_err+0x2e>
 8011cba:	4b3f      	ldr	r3, [pc, #252]	; (8011db8 <tcp_listen_with_backlog_and_err+0x118>)
 8011cbc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8011cc0:	493e      	ldr	r1, [pc, #248]	; (8011dbc <tcp_listen_with_backlog_and_err+0x11c>)
 8011cc2:	483f      	ldr	r0, [pc, #252]	; (8011dc0 <tcp_listen_with_backlog_and_err+0x120>)
 8011cc4:	f005 ffee 	bl	8017ca4 <iprintf>
 8011cc8:	23f1      	movs	r3, #241	; 0xf1
 8011cca:	76fb      	strb	r3, [r7, #27]
 8011ccc:	e069      	b.n	8011da2 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	7d1b      	ldrb	r3, [r3, #20]
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d104      	bne.n	8011ce0 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011cda:	23f7      	movs	r3, #247	; 0xf7
 8011cdc:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011cde:	e060      	b.n	8011da2 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011ce0:	2002      	movs	r0, #2
 8011ce2:	f7fe fac5 	bl	8010270 <memp_malloc>
 8011ce6:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011ce8:	69fb      	ldr	r3, [r7, #28]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d102      	bne.n	8011cf4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8011cee:	23ff      	movs	r3, #255	; 0xff
 8011cf0:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011cf2:	e056      	b.n	8011da2 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	691a      	ldr	r2, [r3, #16]
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	8ada      	ldrh	r2, [r3, #22]
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	2201      	movs	r2, #1
 8011d08:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	7d5a      	ldrb	r2, [r3, #21]
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	7a1a      	ldrb	r2, [r3, #8]
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	7a9a      	ldrb	r2, [r3, #10]
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	7a5a      	ldrb	r2, [r3, #9]
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681a      	ldr	r2, [r3, #0]
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	8adb      	ldrh	r3, [r3, #22]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d021      	beq.n	8011d7e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d3a:	4b22      	ldr	r3, [pc, #136]	; (8011dc4 <tcp_listen_with_backlog_and_err+0x124>)
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d105      	bne.n	8011d50 <tcp_listen_with_backlog_and_err+0xb0>
 8011d44:	4b1f      	ldr	r3, [pc, #124]	; (8011dc4 <tcp_listen_with_backlog_and_err+0x124>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	4a1e      	ldr	r2, [pc, #120]	; (8011dc4 <tcp_listen_with_backlog_and_err+0x124>)
 8011d4c:	6013      	str	r3, [r2, #0]
 8011d4e:	e013      	b.n	8011d78 <tcp_listen_with_backlog_and_err+0xd8>
 8011d50:	4b1c      	ldr	r3, [pc, #112]	; (8011dc4 <tcp_listen_with_backlog_and_err+0x124>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	617b      	str	r3, [r7, #20]
 8011d56:	e00c      	b.n	8011d72 <tcp_listen_with_backlog_and_err+0xd2>
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	68da      	ldr	r2, [r3, #12]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d104      	bne.n	8011d6c <tcp_listen_with_backlog_and_err+0xcc>
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	68da      	ldr	r2, [r3, #12]
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	60da      	str	r2, [r3, #12]
 8011d6a:	e005      	b.n	8011d78 <tcp_listen_with_backlog_and_err+0xd8>
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	617b      	str	r3, [r7, #20]
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d1ef      	bne.n	8011d58 <tcp_listen_with_backlog_and_err+0xb8>
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8011d7e:	68f9      	ldr	r1, [r7, #12]
 8011d80:	2001      	movs	r0, #1
 8011d82:	f7fe fac7 	bl	8010314 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	4a0f      	ldr	r2, [pc, #60]	; (8011dc8 <tcp_listen_with_backlog_and_err+0x128>)
 8011d8a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8011d8c:	4b0f      	ldr	r3, [pc, #60]	; (8011dcc <tcp_listen_with_backlog_and_err+0x12c>)
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	60da      	str	r2, [r3, #12]
 8011d94:	4a0d      	ldr	r2, [pc, #52]	; (8011dcc <tcp_listen_with_backlog_and_err+0x12c>)
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	6013      	str	r3, [r2, #0]
 8011d9a:	f004 fe9b 	bl	8016ad4 <tcp_timer_needed>
  res = ERR_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	7efa      	ldrb	r2, [r7, #27]
 8011dac:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011dae:	69fb      	ldr	r3, [r7, #28]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3720      	adds	r7, #32
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	0801aff0 	.word	0x0801aff0
 8011dbc:	0801b0e4 	.word	0x0801b0e4
 8011dc0:	0801b02c 	.word	0x0801b02c
 8011dc4:	20020bd8 	.word	0x20020bd8
 8011dc8:	08011c81 	.word	0x08011c81
 8011dcc:	20020bd4 	.word	0x20020bd4

08011dd0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011de0:	4413      	add	r3, r2
 8011de2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011dec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011df0:	d802      	bhi.n	8011df8 <tcp_update_rcv_ann_wnd+0x28>
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011df6:	e001      	b.n	8011dfc <tcp_update_rcv_ann_wnd+0x2c>
 8011df8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011dfc:	4413      	add	r3, r2
 8011dfe:	68fa      	ldr	r2, [r7, #12]
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	db08      	blt.n	8011e18 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	1ad3      	subs	r3, r2, r3
 8011e16:	e020      	b.n	8011e5a <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e20:	1ad3      	subs	r3, r2, r3
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	dd03      	ble.n	8011e2e <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011e2c:	e014      	b.n	8011e58 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e40:	d306      	bcc.n	8011e50 <tcp_update_rcv_ann_wnd+0x80>
 8011e42:	4b08      	ldr	r3, [pc, #32]	; (8011e64 <tcp_update_rcv_ann_wnd+0x94>)
 8011e44:	f44f 7242 	mov.w	r2, #776	; 0x308
 8011e48:	4907      	ldr	r1, [pc, #28]	; (8011e68 <tcp_update_rcv_ann_wnd+0x98>)
 8011e4a:	4808      	ldr	r0, [pc, #32]	; (8011e6c <tcp_update_rcv_ann_wnd+0x9c>)
 8011e4c:	f005 ff2a 	bl	8017ca4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	b29a      	uxth	r2, r3
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011e58:	2300      	movs	r3, #0
  }
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3710      	adds	r7, #16
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	0801aff0 	.word	0x0801aff0
 8011e68:	0801b108 	.word	0x0801b108
 8011e6c:	0801b02c 	.word	0x0801b02c

08011e70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	460b      	mov	r3, r1
 8011e7a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	7d1b      	ldrb	r3, [r3, #20]
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d106      	bne.n	8011e92 <tcp_recved+0x22>
 8011e84:	4b23      	ldr	r3, [pc, #140]	; (8011f14 <tcp_recved+0xa4>)
 8011e86:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011e8a:	4923      	ldr	r1, [pc, #140]	; (8011f18 <tcp_recved+0xa8>)
 8011e8c:	4823      	ldr	r0, [pc, #140]	; (8011f1c <tcp_recved+0xac>)
 8011e8e:	f005 ff09 	bl	8017ca4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e96:	887b      	ldrh	r3, [r7, #2]
 8011e98:	4413      	add	r3, r2
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ea4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011ea8:	d904      	bls.n	8011eb4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011eb0:	851a      	strh	r2, [r3, #40]	; 0x28
 8011eb2:	e017      	b.n	8011ee4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d113      	bne.n	8011ee4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	7d1b      	ldrb	r3, [r3, #20]
 8011ec0:	2b07      	cmp	r3, #7
 8011ec2:	d003      	beq.n	8011ecc <tcp_recved+0x5c>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	7d1b      	ldrb	r3, [r3, #20]
 8011ec8:	2b09      	cmp	r3, #9
 8011eca:	d104      	bne.n	8011ed6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011ed2:	851a      	strh	r2, [r3, #40]	; 0x28
 8011ed4:	e006      	b.n	8011ee4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8011ed6:	4b0f      	ldr	r3, [pc, #60]	; (8011f14 <tcp_recved+0xa4>)
 8011ed8:	f240 322d 	movw	r2, #813	; 0x32d
 8011edc:	4910      	ldr	r1, [pc, #64]	; (8011f20 <tcp_recved+0xb0>)
 8011ede:	480f      	ldr	r0, [pc, #60]	; (8011f1c <tcp_recved+0xac>)
 8011ee0:	f005 fee0 	bl	8017ca4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7ff ff73 	bl	8011dd0 <tcp_update_rcv_ann_wnd>
 8011eea:	4603      	mov	r3, r0
 8011eec:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011ef4:	db09      	blt.n	8011f0a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	7e9b      	ldrb	r3, [r3, #26]
 8011efa:	f043 0302 	orr.w	r3, r3, #2
 8011efe:	b2da      	uxtb	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f004 f90d 	bl	8016124 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011f0a:	bf00      	nop
 8011f0c:	3710      	adds	r7, #16
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	0801aff0 	.word	0x0801aff0
 8011f18:	0801b124 	.word	0x0801b124
 8011f1c:	0801b02c 	.word	0x0801b02c
 8011f20:	0801b14c 	.word	0x0801b14c

08011f24 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8011f2e:	4b1d      	ldr	r3, [pc, #116]	; (8011fa4 <tcp_new_port+0x80>)
 8011f30:	881b      	ldrh	r3, [r3, #0]
 8011f32:	1c5a      	adds	r2, r3, #1
 8011f34:	b291      	uxth	r1, r2
 8011f36:	4a1b      	ldr	r2, [pc, #108]	; (8011fa4 <tcp_new_port+0x80>)
 8011f38:	8011      	strh	r1, [r2, #0]
 8011f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d103      	bne.n	8011f4a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011f42:	4b18      	ldr	r3, [pc, #96]	; (8011fa4 <tcp_new_port+0x80>)
 8011f44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011f48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	71fb      	strb	r3, [r7, #7]
 8011f4e:	e01e      	b.n	8011f8e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011f50:	79fb      	ldrb	r3, [r7, #7]
 8011f52:	4a15      	ldr	r2, [pc, #84]	; (8011fa8 <tcp_new_port+0x84>)
 8011f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	603b      	str	r3, [r7, #0]
 8011f5c:	e011      	b.n	8011f82 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	8ada      	ldrh	r2, [r3, #22]
 8011f62:	4b10      	ldr	r3, [pc, #64]	; (8011fa4 <tcp_new_port+0x80>)
 8011f64:	881b      	ldrh	r3, [r3, #0]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d108      	bne.n	8011f7c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011f6a:	88bb      	ldrh	r3, [r7, #4]
 8011f6c:	3301      	adds	r3, #1
 8011f6e:	80bb      	strh	r3, [r7, #4]
 8011f70:	88bb      	ldrh	r3, [r7, #4]
 8011f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f76:	d3da      	bcc.n	8011f2e <tcp_new_port+0xa>
          return 0;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	e00d      	b.n	8011f98 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	603b      	str	r3, [r7, #0]
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1ea      	bne.n	8011f5e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011f88:	79fb      	ldrb	r3, [r7, #7]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	71fb      	strb	r3, [r7, #7]
 8011f8e:	79fb      	ldrb	r3, [r7, #7]
 8011f90:	2b03      	cmp	r3, #3
 8011f92:	d9dd      	bls.n	8011f50 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011f94:	4b03      	ldr	r3, [pc, #12]	; (8011fa4 <tcp_new_port+0x80>)
 8011f96:	881b      	ldrh	r3, [r3, #0]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	370c      	adds	r7, #12
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr
 8011fa4:	20000014 	.word	0x20000014
 8011fa8:	0801bfa4 	.word	0x0801bfa4

08011fac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011fac:	b5b0      	push	{r4, r5, r7, lr}
 8011fae:	b08c      	sub	sp, #48	; 0x30
 8011fb0:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8011fb6:	4b97      	ldr	r3, [pc, #604]	; (8012214 <tcp_slowtmr+0x268>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	4a95      	ldr	r2, [pc, #596]	; (8012214 <tcp_slowtmr+0x268>)
 8011fbe:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011fc0:	4b95      	ldr	r3, [pc, #596]	; (8012218 <tcp_slowtmr+0x26c>)
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	b2da      	uxtb	r2, r3
 8011fc8:	4b93      	ldr	r3, [pc, #588]	; (8012218 <tcp_slowtmr+0x26c>)
 8011fca:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8011fd0:	4b92      	ldr	r3, [pc, #584]	; (801221c <tcp_slowtmr+0x270>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011fd6:	e227      	b.n	8012428 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fda:	7d1b      	ldrb	r3, [r3, #20]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d106      	bne.n	8011fee <tcp_slowtmr+0x42>
 8011fe0:	4b8f      	ldr	r3, [pc, #572]	; (8012220 <tcp_slowtmr+0x274>)
 8011fe2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8011fe6:	498f      	ldr	r1, [pc, #572]	; (8012224 <tcp_slowtmr+0x278>)
 8011fe8:	488f      	ldr	r0, [pc, #572]	; (8012228 <tcp_slowtmr+0x27c>)
 8011fea:	f005 fe5b 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff0:	7d1b      	ldrb	r3, [r3, #20]
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d106      	bne.n	8012004 <tcp_slowtmr+0x58>
 8011ff6:	4b8a      	ldr	r3, [pc, #552]	; (8012220 <tcp_slowtmr+0x274>)
 8011ff8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011ffc:	498b      	ldr	r1, [pc, #556]	; (801222c <tcp_slowtmr+0x280>)
 8011ffe:	488a      	ldr	r0, [pc, #552]	; (8012228 <tcp_slowtmr+0x27c>)
 8012000:	f005 fe50 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012006:	7d1b      	ldrb	r3, [r3, #20]
 8012008:	2b0a      	cmp	r3, #10
 801200a:	d106      	bne.n	801201a <tcp_slowtmr+0x6e>
 801200c:	4b84      	ldr	r3, [pc, #528]	; (8012220 <tcp_slowtmr+0x274>)
 801200e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8012012:	4987      	ldr	r1, [pc, #540]	; (8012230 <tcp_slowtmr+0x284>)
 8012014:	4884      	ldr	r0, [pc, #528]	; (8012228 <tcp_slowtmr+0x27c>)
 8012016:	f005 fe45 	bl	8017ca4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201c:	7f5a      	ldrb	r2, [r3, #29]
 801201e:	4b7e      	ldr	r3, [pc, #504]	; (8012218 <tcp_slowtmr+0x26c>)
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	429a      	cmp	r2, r3
 8012024:	d103      	bne.n	801202e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8012026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 801202c:	e1fc      	b.n	8012428 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801202e:	4b7a      	ldr	r3, [pc, #488]	; (8012218 <tcp_slowtmr+0x26c>)
 8012030:	781a      	ldrb	r2, [r3, #0]
 8012032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012034:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8012036:	2300      	movs	r3, #0
 8012038:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 801203a:	2300      	movs	r3, #0
 801203c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012040:	7d1b      	ldrb	r3, [r3, #20]
 8012042:	2b02      	cmp	r3, #2
 8012044:	d108      	bne.n	8012058 <tcp_slowtmr+0xac>
 8012046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801204c:	2b05      	cmp	r3, #5
 801204e:	d903      	bls.n	8012058 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8012050:	7ffb      	ldrb	r3, [r7, #31]
 8012052:	3301      	adds	r3, #1
 8012054:	77fb      	strb	r3, [r7, #31]
 8012056:	e0a2      	b.n	801219e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801205e:	2b0b      	cmp	r3, #11
 8012060:	d903      	bls.n	801206a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012062:	7ffb      	ldrb	r3, [r7, #31]
 8012064:	3301      	adds	r3, #1
 8012066:	77fb      	strb	r3, [r7, #31]
 8012068:	e099      	b.n	801219e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012070:	2b00      	cmp	r3, #0
 8012072:	d032      	beq.n	80120da <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801207a:	3b01      	subs	r3, #1
 801207c:	4a6d      	ldr	r2, [pc, #436]	; (8012234 <tcp_slowtmr+0x288>)
 801207e:	5cd3      	ldrb	r3, [r2, r3]
 8012080:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 8012082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012084:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012088:	7f3a      	ldrb	r2, [r7, #28]
 801208a:	429a      	cmp	r2, r3
 801208c:	d907      	bls.n	801209e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012090:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012094:	3301      	adds	r3, #1
 8012096:	b2da      	uxtb	r2, r3
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80120a4:	7f3a      	ldrb	r2, [r7, #28]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d879      	bhi.n	801219e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80120aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ac:	f004 fc52 	bl	8016954 <tcp_zero_window_probe>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d173      	bne.n	801219e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80120b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80120be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80120c4:	2b06      	cmp	r3, #6
 80120c6:	d86a      	bhi.n	801219e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80120c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ca:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80120ce:	3301      	adds	r3, #1
 80120d0:	b2da      	uxtb	r2, r3
 80120d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80120d8:	e061      	b.n	801219e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	db08      	blt.n	80120f6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80120e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	3301      	adds	r3, #1
 80120ee:	b29b      	uxth	r3, r3
 80120f0:	b21a      	sxth	r2, r3
 80120f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d04f      	beq.n	801219e <tcp_slowtmr+0x1f2>
 80120fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012100:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801210a:	429a      	cmp	r2, r3
 801210c:	db47      	blt.n	801219e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012110:	7d1b      	ldrb	r3, [r3, #20]
 8012112:	2b02      	cmp	r3, #2
 8012114:	d018      	beq.n	8012148 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012118:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801211c:	2b0c      	cmp	r3, #12
 801211e:	bf28      	it	cs
 8012120:	230c      	movcs	r3, #12
 8012122:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801212a:	10db      	asrs	r3, r3, #3
 801212c:	b21b      	sxth	r3, r3
 801212e:	461a      	mov	r2, r3
 8012130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012132:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012136:	4413      	add	r3, r2
 8012138:	7efa      	ldrb	r2, [r7, #27]
 801213a:	493f      	ldr	r1, [pc, #252]	; (8012238 <tcp_slowtmr+0x28c>)
 801213c:	5c8a      	ldrb	r2, [r1, r2]
 801213e:	4093      	lsls	r3, r2
 8012140:	b21a      	sxth	r2, r3
 8012142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8012148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214a:	2200      	movs	r2, #0
 801214c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012150:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012156:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801215a:	4293      	cmp	r3, r2
 801215c:	bf28      	it	cs
 801215e:	4613      	movcs	r3, r2
 8012160:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 8012162:	8b3b      	ldrh	r3, [r7, #24]
 8012164:	085b      	lsrs	r3, r3, #1
 8012166:	b29a      	uxth	r2, r3
 8012168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012170:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012178:	005b      	lsls	r3, r3, #1
 801217a:	b29b      	uxth	r3, r3
 801217c:	429a      	cmp	r2, r3
 801217e:	d206      	bcs.n	801218e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8012180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	b29a      	uxth	r2, r3
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012190:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012194:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8012198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801219a:	f004 fac1 	bl	8016720 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a0:	7d1b      	ldrb	r3, [r3, #20]
 80121a2:	2b06      	cmp	r3, #6
 80121a4:	d10f      	bne.n	80121c6 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a8:	7e9b      	ldrb	r3, [r3, #26]
 80121aa:	f003 0310 	and.w	r3, r3, #16
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d009      	beq.n	80121c6 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80121b2:	4b18      	ldr	r3, [pc, #96]	; (8012214 <tcp_slowtmr+0x268>)
 80121b4:	681a      	ldr	r2, [r3, #0]
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	6a1b      	ldr	r3, [r3, #32]
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	2b28      	cmp	r3, #40	; 0x28
 80121be:	d902      	bls.n	80121c6 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80121c0:	7ffb      	ldrb	r3, [r7, #31]
 80121c2:	3301      	adds	r3, #1
 80121c4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80121c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c8:	7a1b      	ldrb	r3, [r3, #8]
 80121ca:	f003 0308 	and.w	r3, r3, #8
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d05d      	beq.n	801228e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80121d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80121d6:	2b04      	cmp	r3, #4
 80121d8:	d003      	beq.n	80121e2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80121da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121dc:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80121de:	2b07      	cmp	r3, #7
 80121e0:	d155      	bne.n	801228e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80121e2:	4b0c      	ldr	r3, [pc, #48]	; (8012214 <tcp_slowtmr+0x268>)
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e8:	6a1b      	ldr	r3, [r3, #32]
 80121ea:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80121ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121f2:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80121f6:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80121fa:	4910      	ldr	r1, [pc, #64]	; (801223c <tcp_slowtmr+0x290>)
 80121fc:	fba1 1303 	umull	r1, r3, r1, r3
 8012200:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012202:	429a      	cmp	r2, r3
 8012204:	d91c      	bls.n	8012240 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012206:	7ffb      	ldrb	r3, [r7, #31]
 8012208:	3301      	adds	r3, #1
 801220a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 801220c:	7fbb      	ldrb	r3, [r7, #30]
 801220e:	3301      	adds	r3, #1
 8012210:	77bb      	strb	r3, [r7, #30]
 8012212:	e03c      	b.n	801228e <tcp_slowtmr+0x2e2>
 8012214:	20020bd0 	.word	0x20020bd0
 8012218:	20019f9a 	.word	0x20019f9a
 801221c:	20020bcc 	.word	0x20020bcc
 8012220:	0801aff0 	.word	0x0801aff0
 8012224:	0801b1a0 	.word	0x0801b1a0
 8012228:	0801b02c 	.word	0x0801b02c
 801222c:	0801b1cc 	.word	0x0801b1cc
 8012230:	0801b1f8 	.word	0x0801b1f8
 8012234:	0801bf9c 	.word	0x0801bf9c
 8012238:	0801bf8c 	.word	0x0801bf8c
 801223c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012240:	4b97      	ldr	r3, [pc, #604]	; (80124a0 <tcp_slowtmr+0x4f4>)
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012246:	6a1b      	ldr	r3, [r3, #32]
 8012248:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8012250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012252:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012256:	4618      	mov	r0, r3
 8012258:	4b92      	ldr	r3, [pc, #584]	; (80124a4 <tcp_slowtmr+0x4f8>)
 801225a:	fb03 f300 	mul.w	r3, r3, r0
 801225e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8012260:	4991      	ldr	r1, [pc, #580]	; (80124a8 <tcp_slowtmr+0x4fc>)
 8012262:	fba1 1303 	umull	r1, r3, r1, r3
 8012266:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012268:	429a      	cmp	r2, r3
 801226a:	d910      	bls.n	801228e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 801226c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801226e:	f004 fb34 	bl	80168da <tcp_keepalive>
 8012272:	4603      	mov	r3, r0
 8012274:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8012276:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d107      	bne.n	801228e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012280:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012284:	3301      	adds	r3, #1
 8012286:	b2da      	uxtb	r2, r3
 8012288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012292:	2b00      	cmp	r3, #0
 8012294:	d016      	beq.n	80122c4 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8012296:	4b82      	ldr	r3, [pc, #520]	; (80124a0 <tcp_slowtmr+0x4f4>)
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229c:	6a1b      	ldr	r3, [r3, #32]
 801229e:	1ad2      	subs	r2, r2, r3
 80122a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80122a6:	4619      	mov	r1, r3
 80122a8:	460b      	mov	r3, r1
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	440b      	add	r3, r1
 80122ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d307      	bcc.n	80122c4 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80122b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122b8:	4618      	mov	r0, r3
 80122ba:	f000 fa04 	bl	80126c6 <tcp_segs_free>
      pcb->ooseq = NULL;
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	2200      	movs	r2, #0
 80122c2:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	7d1b      	ldrb	r3, [r3, #20]
 80122c8:	2b03      	cmp	r3, #3
 80122ca:	d109      	bne.n	80122e0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80122cc:	4b74      	ldr	r3, [pc, #464]	; (80124a0 <tcp_slowtmr+0x4f4>)
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d2:	6a1b      	ldr	r3, [r3, #32]
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	2b28      	cmp	r3, #40	; 0x28
 80122d8:	d902      	bls.n	80122e0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80122da:	7ffb      	ldrb	r3, [r7, #31]
 80122dc:	3301      	adds	r3, #1
 80122de:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	7d1b      	ldrb	r3, [r3, #20]
 80122e4:	2b09      	cmp	r3, #9
 80122e6:	d109      	bne.n	80122fc <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80122e8:	4b6d      	ldr	r3, [pc, #436]	; (80124a0 <tcp_slowtmr+0x4f4>)
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ee:	6a1b      	ldr	r3, [r3, #32]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	2bf0      	cmp	r3, #240	; 0xf0
 80122f4:	d902      	bls.n	80122fc <tcp_slowtmr+0x350>
        ++pcb_remove;
 80122f6:	7ffb      	ldrb	r3, [r7, #31]
 80122f8:	3301      	adds	r3, #1
 80122fa:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80122fc:	7ffb      	ldrb	r3, [r7, #31]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d05d      	beq.n	80123be <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012308:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801230a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801230c:	f000 fc46 	bl	8012b9c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012310:	6a3b      	ldr	r3, [r7, #32]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d010      	beq.n	8012338 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012316:	4b65      	ldr	r3, [pc, #404]	; (80124ac <tcp_slowtmr+0x500>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801231c:	429a      	cmp	r2, r3
 801231e:	d106      	bne.n	801232e <tcp_slowtmr+0x382>
 8012320:	4b63      	ldr	r3, [pc, #396]	; (80124b0 <tcp_slowtmr+0x504>)
 8012322:	f240 4289 	movw	r2, #1161	; 0x489
 8012326:	4963      	ldr	r1, [pc, #396]	; (80124b4 <tcp_slowtmr+0x508>)
 8012328:	4863      	ldr	r0, [pc, #396]	; (80124b8 <tcp_slowtmr+0x50c>)
 801232a:	f005 fcbb 	bl	8017ca4 <iprintf>
        prev->next = pcb->next;
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	68da      	ldr	r2, [r3, #12]
 8012332:	6a3b      	ldr	r3, [r7, #32]
 8012334:	60da      	str	r2, [r3, #12]
 8012336:	e00f      	b.n	8012358 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012338:	4b5c      	ldr	r3, [pc, #368]	; (80124ac <tcp_slowtmr+0x500>)
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233e:	429a      	cmp	r2, r3
 8012340:	d006      	beq.n	8012350 <tcp_slowtmr+0x3a4>
 8012342:	4b5b      	ldr	r3, [pc, #364]	; (80124b0 <tcp_slowtmr+0x504>)
 8012344:	f240 428d 	movw	r2, #1165	; 0x48d
 8012348:	495c      	ldr	r1, [pc, #368]	; (80124bc <tcp_slowtmr+0x510>)
 801234a:	485b      	ldr	r0, [pc, #364]	; (80124b8 <tcp_slowtmr+0x50c>)
 801234c:	f005 fcaa 	bl	8017ca4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	4a55      	ldr	r2, [pc, #340]	; (80124ac <tcp_slowtmr+0x500>)
 8012356:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012358:	7fbb      	ldrb	r3, [r7, #30]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d010      	beq.n	8012380 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012360:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012364:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012366:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	1d1d      	adds	r5, r3, #4
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	8adb      	ldrh	r3, [r3, #22]
 8012370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012372:	8b12      	ldrh	r2, [r2, #24]
 8012374:	9201      	str	r2, [sp, #4]
 8012376:	9300      	str	r3, [sp, #0]
 8012378:	462b      	mov	r3, r5
 801237a:	4622      	mov	r2, r4
 801237c:	f004 f95a 	bl	8016634 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012382:	691b      	ldr	r3, [r3, #16]
 8012384:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 8012386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012388:	7d1b      	ldrb	r3, [r3, #20]
 801238a:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 801238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238e:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 8012390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8012396:	68b9      	ldr	r1, [r7, #8]
 8012398:	2001      	movs	r0, #1
 801239a:	f7fd ffbb 	bl	8010314 <memp_free>

      tcp_active_pcbs_changed = 0;
 801239e:	4b48      	ldr	r3, [pc, #288]	; (80124c0 <tcp_slowtmr+0x514>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d004      	beq.n	80123b4 <tcp_slowtmr+0x408>
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	f06f 010c 	mvn.w	r1, #12
 80123b0:	6938      	ldr	r0, [r7, #16]
 80123b2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80123b4:	4b42      	ldr	r3, [pc, #264]	; (80124c0 <tcp_slowtmr+0x514>)
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d035      	beq.n	8012428 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80123bc:	e606      	b.n	8011fcc <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80123be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c0:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80123c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80123c8:	6a3b      	ldr	r3, [r7, #32]
 80123ca:	7edb      	ldrb	r3, [r3, #27]
 80123cc:	3301      	adds	r3, #1
 80123ce:	b2da      	uxtb	r2, r3
 80123d0:	6a3b      	ldr	r3, [r7, #32]
 80123d2:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80123d4:	6a3b      	ldr	r3, [r7, #32]
 80123d6:	7eda      	ldrb	r2, [r3, #27]
 80123d8:	6a3b      	ldr	r3, [r7, #32]
 80123da:	7f1b      	ldrb	r3, [r3, #28]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d323      	bcc.n	8012428 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80123e0:	6a3b      	ldr	r3, [r7, #32]
 80123e2:	2200      	movs	r2, #0
 80123e4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80123e6:	4b36      	ldr	r3, [pc, #216]	; (80124c0 <tcp_slowtmr+0x514>)
 80123e8:	2200      	movs	r2, #0
 80123ea:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80123ec:	6a3b      	ldr	r3, [r7, #32]
 80123ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d00a      	beq.n	801240c <tcp_slowtmr+0x460>
 80123f6:	6a3b      	ldr	r3, [r7, #32]
 80123f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123fc:	6a3a      	ldr	r2, [r7, #32]
 80123fe:	6912      	ldr	r2, [r2, #16]
 8012400:	6a39      	ldr	r1, [r7, #32]
 8012402:	4610      	mov	r0, r2
 8012404:	4798      	blx	r3
 8012406:	4603      	mov	r3, r0
 8012408:	777b      	strb	r3, [r7, #29]
 801240a:	e001      	b.n	8012410 <tcp_slowtmr+0x464>
 801240c:	2300      	movs	r3, #0
 801240e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8012410:	4b2b      	ldr	r3, [pc, #172]	; (80124c0 <tcp_slowtmr+0x514>)
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d000      	beq.n	801241a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8012418:	e5d8      	b.n	8011fcc <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801241a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d102      	bne.n	8012428 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8012422:	6a38      	ldr	r0, [r7, #32]
 8012424:	f003 fe7e 	bl	8016124 <tcp_output>
  while (pcb != NULL) {
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	2b00      	cmp	r3, #0
 801242c:	f47f add4 	bne.w	8011fd8 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012430:	2300      	movs	r3, #0
 8012432:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8012434:	4b23      	ldr	r3, [pc, #140]	; (80124c4 <tcp_slowtmr+0x518>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801243a:	e068      	b.n	801250e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243e:	7d1b      	ldrb	r3, [r3, #20]
 8012440:	2b0a      	cmp	r3, #10
 8012442:	d006      	beq.n	8012452 <tcp_slowtmr+0x4a6>
 8012444:	4b1a      	ldr	r3, [pc, #104]	; (80124b0 <tcp_slowtmr+0x504>)
 8012446:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801244a:	491f      	ldr	r1, [pc, #124]	; (80124c8 <tcp_slowtmr+0x51c>)
 801244c:	481a      	ldr	r0, [pc, #104]	; (80124b8 <tcp_slowtmr+0x50c>)
 801244e:	f005 fc29 	bl	8017ca4 <iprintf>
    pcb_remove = 0;
 8012452:	2300      	movs	r3, #0
 8012454:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012456:	4b12      	ldr	r3, [pc, #72]	; (80124a0 <tcp_slowtmr+0x4f4>)
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245c:	6a1b      	ldr	r3, [r3, #32]
 801245e:	1ad3      	subs	r3, r2, r3
 8012460:	2bf0      	cmp	r3, #240	; 0xf0
 8012462:	d902      	bls.n	801246a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8012464:	7ffb      	ldrb	r3, [r7, #31]
 8012466:	3301      	adds	r3, #1
 8012468:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801246a:	7ffb      	ldrb	r3, [r7, #31]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d049      	beq.n	8012504 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012472:	f000 fb93 	bl	8012b9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012476:	6a3b      	ldr	r3, [r7, #32]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d029      	beq.n	80124d0 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801247c:	4b11      	ldr	r3, [pc, #68]	; (80124c4 <tcp_slowtmr+0x518>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012482:	429a      	cmp	r2, r3
 8012484:	d106      	bne.n	8012494 <tcp_slowtmr+0x4e8>
 8012486:	4b0a      	ldr	r3, [pc, #40]	; (80124b0 <tcp_slowtmr+0x504>)
 8012488:	f240 42cb 	movw	r2, #1227	; 0x4cb
 801248c:	490f      	ldr	r1, [pc, #60]	; (80124cc <tcp_slowtmr+0x520>)
 801248e:	480a      	ldr	r0, [pc, #40]	; (80124b8 <tcp_slowtmr+0x50c>)
 8012490:	f005 fc08 	bl	8017ca4 <iprintf>
        prev->next = pcb->next;
 8012494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012496:	68da      	ldr	r2, [r3, #12]
 8012498:	6a3b      	ldr	r3, [r7, #32]
 801249a:	60da      	str	r2, [r3, #12]
 801249c:	e028      	b.n	80124f0 <tcp_slowtmr+0x544>
 801249e:	bf00      	nop
 80124a0:	20020bd0 	.word	0x20020bd0
 80124a4:	000124f8 	.word	0x000124f8
 80124a8:	10624dd3 	.word	0x10624dd3
 80124ac:	20020bcc 	.word	0x20020bcc
 80124b0:	0801aff0 	.word	0x0801aff0
 80124b4:	0801b228 	.word	0x0801b228
 80124b8:	0801b02c 	.word	0x0801b02c
 80124bc:	0801b254 	.word	0x0801b254
 80124c0:	20020bc8 	.word	0x20020bc8
 80124c4:	20020bdc 	.word	0x20020bdc
 80124c8:	0801b280 	.word	0x0801b280
 80124cc:	0801b2b0 	.word	0x0801b2b0
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80124d0:	4b12      	ldr	r3, [pc, #72]	; (801251c <tcp_slowtmr+0x570>)
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d006      	beq.n	80124e8 <tcp_slowtmr+0x53c>
 80124da:	4b11      	ldr	r3, [pc, #68]	; (8012520 <tcp_slowtmr+0x574>)
 80124dc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80124e0:	4910      	ldr	r1, [pc, #64]	; (8012524 <tcp_slowtmr+0x578>)
 80124e2:	4811      	ldr	r0, [pc, #68]	; (8012528 <tcp_slowtmr+0x57c>)
 80124e4:	f005 fbde 	bl	8017ca4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	4a0b      	ldr	r2, [pc, #44]	; (801251c <tcp_slowtmr+0x570>)
 80124ee:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 80124f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80124fa:	6879      	ldr	r1, [r7, #4]
 80124fc:	2001      	movs	r0, #1
 80124fe:	f7fd ff09 	bl	8010314 <memp_free>
 8012502:	e004      	b.n	801250e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8012508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250a:	68db      	ldr	r3, [r3, #12]
 801250c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012510:	2b00      	cmp	r3, #0
 8012512:	d193      	bne.n	801243c <tcp_slowtmr+0x490>
    }
  }
}
 8012514:	bf00      	nop
 8012516:	3728      	adds	r7, #40	; 0x28
 8012518:	46bd      	mov	sp, r7
 801251a:	bdb0      	pop	{r4, r5, r7, pc}
 801251c:	20020bdc 	.word	0x20020bdc
 8012520:	0801aff0 	.word	0x0801aff0
 8012524:	0801b2d8 	.word	0x0801b2d8
 8012528:	0801b02c 	.word	0x0801b02c

0801252c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012532:	4b2d      	ldr	r3, [pc, #180]	; (80125e8 <tcp_fasttmr+0xbc>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	3301      	adds	r3, #1
 8012538:	b2da      	uxtb	r2, r3
 801253a:	4b2b      	ldr	r3, [pc, #172]	; (80125e8 <tcp_fasttmr+0xbc>)
 801253c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801253e:	4b2b      	ldr	r3, [pc, #172]	; (80125ec <tcp_fasttmr+0xc0>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012544:	e048      	b.n	80125d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	7f5a      	ldrb	r2, [r3, #29]
 801254a:	4b27      	ldr	r3, [pc, #156]	; (80125e8 <tcp_fasttmr+0xbc>)
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	429a      	cmp	r2, r3
 8012550:	d03f      	beq.n	80125d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012552:	4b25      	ldr	r3, [pc, #148]	; (80125e8 <tcp_fasttmr+0xbc>)
 8012554:	781a      	ldrb	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	7e9b      	ldrb	r3, [r3, #26]
 801255e:	f003 0301 	and.w	r3, r3, #1
 8012562:	2b00      	cmp	r3, #0
 8012564:	d010      	beq.n	8012588 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	7e9b      	ldrb	r3, [r3, #26]
 801256a:	f043 0302 	orr.w	r3, r3, #2
 801256e:	b2da      	uxtb	r2, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f003 fdd5 	bl	8016124 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	7e9b      	ldrb	r3, [r3, #26]
 801257e:	f023 0303 	bic.w	r3, r3, #3
 8012582:	b2da      	uxtb	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	7e9b      	ldrb	r3, [r3, #26]
 801258c:	f003 0308 	and.w	r3, r3, #8
 8012590:	2b00      	cmp	r3, #0
 8012592:	d009      	beq.n	80125a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	7e9b      	ldrb	r3, [r3, #26]
 8012598:	f023 0308 	bic.w	r3, r3, #8
 801259c:	b2da      	uxtb	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7ff f952 	bl	801184c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00a      	beq.n	80125cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80125b6:	4b0e      	ldr	r3, [pc, #56]	; (80125f0 <tcp_fasttmr+0xc4>)
 80125b8:	2200      	movs	r2, #0
 80125ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f000 f819 	bl	80125f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80125c2:	4b0b      	ldr	r3, [pc, #44]	; (80125f0 <tcp_fasttmr+0xc4>)
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d000      	beq.n	80125cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80125ca:	e7b8      	b.n	801253e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	607b      	str	r3, [r7, #4]
 80125d0:	e002      	b.n	80125d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d1b3      	bne.n	8012546 <tcp_fasttmr+0x1a>
    }
  }
}
 80125de:	bf00      	nop
 80125e0:	3708      	adds	r7, #8
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	20019f9a 	.word	0x20019f9a
 80125ec:	20020bcc 	.word	0x20020bcc
 80125f0:	20020bc8 	.word	0x20020bc8

080125f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b085      	sub	sp, #20
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012600:	7b5b      	ldrb	r3, [r3, #13]
 8012602:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012608:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2200      	movs	r2, #0
 801260e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012616:	2b00      	cmp	r3, #0
 8012618:	d00b      	beq.n	8012632 <tcp_process_refused_data+0x3e>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6918      	ldr	r0, [r3, #16]
 8012624:	2300      	movs	r3, #0
 8012626:	68ba      	ldr	r2, [r7, #8]
 8012628:	6879      	ldr	r1, [r7, #4]
 801262a:	47a0      	blx	r4
 801262c:	4603      	mov	r3, r0
 801262e:	73fb      	strb	r3, [r7, #15]
 8012630:	e007      	b.n	8012642 <tcp_process_refused_data+0x4e>
 8012632:	2300      	movs	r3, #0
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	6879      	ldr	r1, [r7, #4]
 8012638:	2000      	movs	r0, #0
 801263a:	f000 f88f 	bl	801275c <tcp_recv_null>
 801263e:	4603      	mov	r3, r0
 8012640:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d12a      	bne.n	80126a0 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801264a:	7bbb      	ldrb	r3, [r7, #14]
 801264c:	f003 0320 	and.w	r3, r3, #32
 8012650:	2b00      	cmp	r3, #0
 8012652:	d033      	beq.n	80126bc <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012658:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801265c:	d005      	beq.n	801266a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012662:	3301      	adds	r3, #1
 8012664:	b29a      	uxth	r2, r3
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012670:	2b00      	cmp	r3, #0
 8012672:	d00b      	beq.n	801268c <tcp_process_refused_data+0x98>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6918      	ldr	r0, [r3, #16]
 801267e:	2300      	movs	r3, #0
 8012680:	2200      	movs	r2, #0
 8012682:	6879      	ldr	r1, [r7, #4]
 8012684:	47a0      	blx	r4
 8012686:	4603      	mov	r3, r0
 8012688:	73fb      	strb	r3, [r7, #15]
 801268a:	e001      	b.n	8012690 <tcp_process_refused_data+0x9c>
 801268c:	2300      	movs	r3, #0
 801268e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012694:	f113 0f0d 	cmn.w	r3, #13
 8012698:	d110      	bne.n	80126bc <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 801269a:	f06f 030c 	mvn.w	r3, #12
 801269e:	e00e      	b.n	80126be <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80126a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126a4:	f113 0f0d 	cmn.w	r3, #13
 80126a8:	d102      	bne.n	80126b0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80126aa:	f06f 030c 	mvn.w	r3, #12
 80126ae:	e006      	b.n	80126be <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68ba      	ldr	r2, [r7, #8]
 80126b4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80126b6:	f06f 0304 	mvn.w	r3, #4
 80126ba:	e000      	b.n	80126be <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3714      	adds	r7, #20
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd90      	pop	{r4, r7, pc}

080126c6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80126ce:	e007      	b.n	80126e0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f809 	bl	80126ee <tcp_seg_free>
    seg = next;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d1f4      	bne.n	80126d0 <tcp_segs_free+0xa>
  }
}
 80126e6:	bf00      	nop
 80126e8:	3710      	adds	r7, #16
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b082      	sub	sp, #8
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d00f      	beq.n	801271c <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d007      	beq.n	8012714 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	4618      	mov	r0, r3
 801270a:	f7fe fb7f 	bl	8010e0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2200      	movs	r2, #0
 8012712:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012714:	6879      	ldr	r1, [r7, #4]
 8012716:	2003      	movs	r0, #3
 8012718:	f7fd fdfc 	bl	8010314 <memp_free>
  }
}
 801271c:	bf00      	nop
 801271e:	3708      	adds	r7, #8
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b084      	sub	sp, #16
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801272c:	2003      	movs	r0, #3
 801272e:	f7fd fd9f 	bl	8010270 <memp_malloc>
 8012732:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d101      	bne.n	801273e <tcp_seg_copy+0x1a>
    return NULL;
 801273a:	2300      	movs	r3, #0
 801273c:	e00a      	b.n	8012754 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801273e:	2210      	movs	r2, #16
 8012740:	6879      	ldr	r1, [r7, #4]
 8012742:	68f8      	ldr	r0, [r7, #12]
 8012744:	f005 fa9b 	bl	8017c7e <memcpy>
  pbuf_ref(cseg->p);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	f7fe fc0f 	bl	8010f70 <pbuf_ref>
  return cseg;
 8012752:	68fb      	ldr	r3, [r7, #12]
}
 8012754:	4618      	mov	r0, r3
 8012756:	3710      	adds	r7, #16
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
 8012768:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d009      	beq.n	8012784 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	891b      	ldrh	r3, [r3, #8]
 8012774:	4619      	mov	r1, r3
 8012776:	68b8      	ldr	r0, [r7, #8]
 8012778:	f7ff fb7a 	bl	8011e70 <tcp_recved>
    pbuf_free(p);
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7fe fb45 	bl	8010e0c <pbuf_free>
 8012782:	e008      	b.n	8012796 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8012784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d104      	bne.n	8012796 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 801278c:	68b8      	ldr	r0, [r7, #8]
 801278e:	f7ff f8c3 	bl	8011918 <tcp_close>
 8012792:	4603      	mov	r3, r0
 8012794:	e000      	b.n	8012798 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8012796:	2300      	movs	r3, #0
}
 8012798:	4618      	mov	r0, r3
 801279a:	3710      	adds	r7, #16
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}

080127a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b086      	sub	sp, #24
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	4603      	mov	r3, r0
 80127a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80127aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	db01      	blt.n	80127b6 <tcp_kill_prio+0x16>
 80127b2:	79fb      	ldrb	r3, [r7, #7]
 80127b4:	e000      	b.n	80127b8 <tcp_kill_prio+0x18>
 80127b6:	237f      	movs	r3, #127	; 0x7f
 80127b8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80127ba:	2300      	movs	r3, #0
 80127bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80127be:	2300      	movs	r3, #0
 80127c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80127c2:	4b16      	ldr	r3, [pc, #88]	; (801281c <tcp_kill_prio+0x7c>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	617b      	str	r3, [r7, #20]
 80127c8:	e01a      	b.n	8012800 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	7d5b      	ldrb	r3, [r3, #21]
 80127ce:	7afa      	ldrb	r2, [r7, #11]
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d312      	bcc.n	80127fa <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80127d4:	4b12      	ldr	r3, [pc, #72]	; (8012820 <tcp_kill_prio+0x80>)
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	6a1b      	ldr	r3, [r3, #32]
 80127dc:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d30a      	bcc.n	80127fa <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80127e4:	4b0e      	ldr	r3, [pc, #56]	; (8012820 <tcp_kill_prio+0x80>)
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	6a1b      	ldr	r3, [r3, #32]
 80127ec:	1ad3      	subs	r3, r2, r3
 80127ee:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	7d5b      	ldrb	r3, [r3, #21]
 80127f8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	617b      	str	r3, [r7, #20]
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1e1      	bne.n	80127ca <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d002      	beq.n	8012812 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801280c:	6938      	ldr	r0, [r7, #16]
 801280e:	f7ff f999 	bl	8011b44 <tcp_abort>
  }
}
 8012812:	bf00      	nop
 8012814:	3718      	adds	r7, #24
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	20020bcc 	.word	0x20020bcc
 8012820:	20020bd0 	.word	0x20020bd0

08012824 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b086      	sub	sp, #24
 8012828:	af00      	add	r7, sp, #0
 801282a:	4603      	mov	r3, r0
 801282c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801282e:	79fb      	ldrb	r3, [r7, #7]
 8012830:	2b08      	cmp	r3, #8
 8012832:	d009      	beq.n	8012848 <tcp_kill_state+0x24>
 8012834:	79fb      	ldrb	r3, [r7, #7]
 8012836:	2b09      	cmp	r3, #9
 8012838:	d006      	beq.n	8012848 <tcp_kill_state+0x24>
 801283a:	4b1a      	ldr	r3, [pc, #104]	; (80128a4 <tcp_kill_state+0x80>)
 801283c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012840:	4919      	ldr	r1, [pc, #100]	; (80128a8 <tcp_kill_state+0x84>)
 8012842:	481a      	ldr	r0, [pc, #104]	; (80128ac <tcp_kill_state+0x88>)
 8012844:	f005 fa2e 	bl	8017ca4 <iprintf>

  inactivity = 0;
 8012848:	2300      	movs	r3, #0
 801284a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801284c:	2300      	movs	r3, #0
 801284e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012850:	4b17      	ldr	r3, [pc, #92]	; (80128b0 <tcp_kill_state+0x8c>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	617b      	str	r3, [r7, #20]
 8012856:	e017      	b.n	8012888 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	7d1b      	ldrb	r3, [r3, #20]
 801285c:	79fa      	ldrb	r2, [r7, #7]
 801285e:	429a      	cmp	r2, r3
 8012860:	d10f      	bne.n	8012882 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012862:	4b14      	ldr	r3, [pc, #80]	; (80128b4 <tcp_kill_state+0x90>)
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	6a1b      	ldr	r3, [r3, #32]
 801286a:	1ad2      	subs	r2, r2, r3
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	429a      	cmp	r2, r3
 8012870:	d307      	bcc.n	8012882 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012872:	4b10      	ldr	r3, [pc, #64]	; (80128b4 <tcp_kill_state+0x90>)
 8012874:	681a      	ldr	r2, [r3, #0]
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	6a1b      	ldr	r3, [r3, #32]
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	68db      	ldr	r3, [r3, #12]
 8012886:	617b      	str	r3, [r7, #20]
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d1e4      	bne.n	8012858 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d003      	beq.n	801289c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012894:	2100      	movs	r1, #0
 8012896:	6938      	ldr	r0, [r7, #16]
 8012898:	f7ff f8a2 	bl	80119e0 <tcp_abandon>
  }
}
 801289c:	bf00      	nop
 801289e:	3718      	adds	r7, #24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	0801aff0 	.word	0x0801aff0
 80128a8:	0801b300 	.word	0x0801b300
 80128ac:	0801b02c 	.word	0x0801b02c
 80128b0:	20020bcc 	.word	0x20020bcc
 80128b4:	20020bd0 	.word	0x20020bd0

080128b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80128be:	2300      	movs	r3, #0
 80128c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80128c2:	2300      	movs	r3, #0
 80128c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80128c6:	4b12      	ldr	r3, [pc, #72]	; (8012910 <tcp_kill_timewait+0x58>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	60fb      	str	r3, [r7, #12]
 80128cc:	e012      	b.n	80128f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80128ce:	4b11      	ldr	r3, [pc, #68]	; (8012914 <tcp_kill_timewait+0x5c>)
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6a1b      	ldr	r3, [r3, #32]
 80128d6:	1ad2      	subs	r2, r2, r3
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	429a      	cmp	r2, r3
 80128dc:	d307      	bcc.n	80128ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80128de:	4b0d      	ldr	r3, [pc, #52]	; (8012914 <tcp_kill_timewait+0x5c>)
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	6a1b      	ldr	r3, [r3, #32]
 80128e6:	1ad3      	subs	r3, r2, r3
 80128e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	60fb      	str	r3, [r7, #12]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1e9      	bne.n	80128ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d002      	beq.n	8012906 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012900:	68b8      	ldr	r0, [r7, #8]
 8012902:	f7ff f91f 	bl	8011b44 <tcp_abort>
  }
}
 8012906:	bf00      	nop
 8012908:	3710      	adds	r7, #16
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	20020bdc 	.word	0x20020bdc
 8012914:	20020bd0 	.word	0x20020bd0

08012918 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012922:	2001      	movs	r0, #1
 8012924:	f7fd fca4 	bl	8010270 <memp_malloc>
 8012928:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d124      	bne.n	801297a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012930:	f7ff ffc2 	bl	80128b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012934:	2001      	movs	r0, #1
 8012936:	f7fd fc9b 	bl	8010270 <memp_malloc>
 801293a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d11b      	bne.n	801297a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012942:	2009      	movs	r0, #9
 8012944:	f7ff ff6e 	bl	8012824 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012948:	2001      	movs	r0, #1
 801294a:	f7fd fc91 	bl	8010270 <memp_malloc>
 801294e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d111      	bne.n	801297a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012956:	2008      	movs	r0, #8
 8012958:	f7ff ff64 	bl	8012824 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801295c:	2001      	movs	r0, #1
 801295e:	f7fd fc87 	bl	8010270 <memp_malloc>
 8012962:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d107      	bne.n	801297a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801296a:	79fb      	ldrb	r3, [r7, #7]
 801296c:	4618      	mov	r0, r3
 801296e:	f7ff ff17 	bl	80127a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012972:	2001      	movs	r0, #1
 8012974:	f7fd fc7c 	bl	8010270 <memp_malloc>
 8012978:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d03f      	beq.n	8012a00 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012980:	2298      	movs	r2, #152	; 0x98
 8012982:	2100      	movs	r1, #0
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f005 f985 	bl	8017c94 <memset>
    pcb->prio = prio;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	79fa      	ldrb	r2, [r7, #7]
 801298e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012996:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80129a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	22ff      	movs	r2, #255	; 0xff
 80129ae:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80129b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2206      	movs	r2, #6
 80129bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2206      	movs	r2, #6
 80129c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2201      	movs	r2, #1
 80129d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80129d6:	4b0d      	ldr	r3, [pc, #52]	; (8012a0c <tcp_alloc+0xf4>)
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80129de:	4b0c      	ldr	r3, [pc, #48]	; (8012a10 <tcp_alloc+0xf8>)
 80129e0:	781a      	ldrb	r2, [r3, #0]
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80129ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	4a08      	ldr	r2, [pc, #32]	; (8012a14 <tcp_alloc+0xfc>)
 80129f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	4a07      	ldr	r2, [pc, #28]	; (8012a18 <tcp_alloc+0x100>)
 80129fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012a00:	68fb      	ldr	r3, [r7, #12]
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3710      	adds	r7, #16
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	20020bd0 	.word	0x20020bd0
 8012a10:	20019f9a 	.word	0x20019f9a
 8012a14:	0801275d 	.word	0x0801275d
 8012a18:	006ddd00 	.word	0x006ddd00

08012a1c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	4603      	mov	r3, r0
 8012a24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012a26:	2040      	movs	r0, #64	; 0x40
 8012a28:	f7ff ff76 	bl	8012918 <tcp_alloc>
 8012a2c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3710      	adds	r7, #16
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	683a      	ldr	r2, [r7, #0]
 8012a4c:	611a      	str	r2, [r3, #16]
  }
}
 8012a4e:	bf00      	nop
 8012a50:	370c      	adds	r7, #12
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr
	...

08012a5c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00e      	beq.n	8012a8a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	7d1b      	ldrb	r3, [r3, #20]
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d106      	bne.n	8012a82 <tcp_recv+0x26>
 8012a74:	4b07      	ldr	r3, [pc, #28]	; (8012a94 <tcp_recv+0x38>)
 8012a76:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8012a7a:	4907      	ldr	r1, [pc, #28]	; (8012a98 <tcp_recv+0x3c>)
 8012a7c:	4807      	ldr	r0, [pc, #28]	; (8012a9c <tcp_recv+0x40>)
 8012a7e:	f005 f911 	bl	8017ca4 <iprintf>
    pcb->recv = recv;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	683a      	ldr	r2, [r7, #0]
 8012a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012a8a:	bf00      	nop
 8012a8c:	3708      	adds	r7, #8
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	0801aff0 	.word	0x0801aff0
 8012a98:	0801b310 	.word	0x0801b310
 8012a9c:	0801b02c 	.word	0x0801b02c

08012aa0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00d      	beq.n	8012acc <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	7d1b      	ldrb	r3, [r3, #20]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d106      	bne.n	8012ac6 <tcp_sent+0x26>
 8012ab8:	4b06      	ldr	r3, [pc, #24]	; (8012ad4 <tcp_sent+0x34>)
 8012aba:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8012abe:	4906      	ldr	r1, [pc, #24]	; (8012ad8 <tcp_sent+0x38>)
 8012ac0:	4806      	ldr	r0, [pc, #24]	; (8012adc <tcp_sent+0x3c>)
 8012ac2:	f005 f8ef 	bl	8017ca4 <iprintf>
    pcb->sent = sent;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	683a      	ldr	r2, [r7, #0]
 8012aca:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8012acc:	bf00      	nop
 8012ace:	3708      	adds	r7, #8
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	0801aff0 	.word	0x0801aff0
 8012ad8:	0801b338 	.word	0x0801b338
 8012adc:	0801b02c 	.word	0x0801b02c

08012ae0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d00e      	beq.n	8012b0e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	7d1b      	ldrb	r3, [r3, #20]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d106      	bne.n	8012b06 <tcp_err+0x26>
 8012af8:	4b07      	ldr	r3, [pc, #28]	; (8012b18 <tcp_err+0x38>)
 8012afa:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8012afe:	4907      	ldr	r1, [pc, #28]	; (8012b1c <tcp_err+0x3c>)
 8012b00:	4807      	ldr	r0, [pc, #28]	; (8012b20 <tcp_err+0x40>)
 8012b02:	f005 f8cf 	bl	8017ca4 <iprintf>
    pcb->errf = err;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	683a      	ldr	r2, [r7, #0]
 8012b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8012b0e:	bf00      	nop
 8012b10:	3708      	adds	r7, #8
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	0801aff0 	.word	0x0801aff0
 8012b1c:	0801b360 	.word	0x0801b360
 8012b20:	0801b02c 	.word	0x0801b02c

08012b24 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012b24:	b480      	push	{r7}
 8012b26:	b085      	sub	sp, #20
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d008      	beq.n	8012b46 <tcp_accept+0x22>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	7d1b      	ldrb	r3, [r3, #20]
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d104      	bne.n	8012b46 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	683a      	ldr	r2, [r7, #0]
 8012b44:	619a      	str	r2, [r3, #24]
  }
}
 8012b46:	bf00      	nop
 8012b48:	3714      	adds	r7, #20
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr
	...

08012b54 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	7d1b      	ldrb	r3, [r3, #20]
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d106      	bne.n	8012b78 <tcp_poll+0x24>
 8012b6a:	4b09      	ldr	r3, [pc, #36]	; (8012b90 <tcp_poll+0x3c>)
 8012b6c:	f240 7203 	movw	r2, #1795	; 0x703
 8012b70:	4908      	ldr	r1, [pc, #32]	; (8012b94 <tcp_poll+0x40>)
 8012b72:	4809      	ldr	r0, [pc, #36]	; (8012b98 <tcp_poll+0x44>)
 8012b74:	f005 f896 	bl	8017ca4 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	68ba      	ldr	r2, [r7, #8]
 8012b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	79fa      	ldrb	r2, [r7, #7]
 8012b84:	771a      	strb	r2, [r3, #28]
}
 8012b86:	bf00      	nop
 8012b88:	3710      	adds	r7, #16
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	0801aff0 	.word	0x0801aff0
 8012b94:	0801b388 	.word	0x0801b388
 8012b98:	0801b02c 	.word	0x0801b02c

08012b9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	7d1b      	ldrb	r3, [r3, #20]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d034      	beq.n	8012c16 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012bb0:	2b0a      	cmp	r3, #10
 8012bb2:	d030      	beq.n	8012c16 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d02c      	beq.n	8012c16 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d007      	beq.n	8012bd4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fe f91f 	bl	8010e0c <pbuf_free>
      pcb->refused_data = NULL;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7ff fd74 	bl	80126c6 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2200      	movs	r2, #0
 8012be2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7ff fd68 	bl	80126c6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7ff fd63 	bl	80126c6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2200      	movs	r2, #0
 8012c04:	669a      	str	r2, [r3, #104]	; 0x68
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2200      	movs	r2, #0
 8012c12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8012c16:	bf00      	nop
 8012c18:	3708      	adds	r7, #8
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
	...

08012c20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d105      	bne.n	8012c40 <tcp_pcb_remove+0x20>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	68da      	ldr	r2, [r3, #12]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	601a      	str	r2, [r3, #0]
 8012c3e:	e013      	b.n	8012c68 <tcp_pcb_remove+0x48>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	60fb      	str	r3, [r7, #12]
 8012c46:	e00c      	b.n	8012c62 <tcp_pcb_remove+0x42>
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	68da      	ldr	r2, [r3, #12]
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d104      	bne.n	8012c5c <tcp_pcb_remove+0x3c>
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	68da      	ldr	r2, [r3, #12]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	60da      	str	r2, [r3, #12]
 8012c5a:	e005      	b.n	8012c68 <tcp_pcb_remove+0x48>
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	60fb      	str	r3, [r7, #12]
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d1ef      	bne.n	8012c48 <tcp_pcb_remove+0x28>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012c6e:	6838      	ldr	r0, [r7, #0]
 8012c70:	f7ff ff94 	bl	8012b9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	7d1b      	ldrb	r3, [r3, #20]
 8012c78:	2b0a      	cmp	r3, #10
 8012c7a:	d013      	beq.n	8012ca4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d00f      	beq.n	8012ca4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	7e9b      	ldrb	r3, [r3, #26]
 8012c88:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d009      	beq.n	8012ca4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	7e9b      	ldrb	r3, [r3, #26]
 8012c94:	f043 0302 	orr.w	r3, r3, #2
 8012c98:	b2da      	uxtb	r2, r3
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012c9e:	6838      	ldr	r0, [r7, #0]
 8012ca0:	f003 fa40 	bl	8016124 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	7d1b      	ldrb	r3, [r3, #20]
 8012ca8:	2b01      	cmp	r3, #1
 8012caa:	d020      	beq.n	8012cee <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d006      	beq.n	8012cc2 <tcp_pcb_remove+0xa2>
 8012cb4:	4b19      	ldr	r3, [pc, #100]	; (8012d1c <tcp_pcb_remove+0xfc>)
 8012cb6:	f240 7253 	movw	r2, #1875	; 0x753
 8012cba:	4919      	ldr	r1, [pc, #100]	; (8012d20 <tcp_pcb_remove+0x100>)
 8012cbc:	4819      	ldr	r0, [pc, #100]	; (8012d24 <tcp_pcb_remove+0x104>)
 8012cbe:	f004 fff1 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d006      	beq.n	8012cd8 <tcp_pcb_remove+0xb8>
 8012cca:	4b14      	ldr	r3, [pc, #80]	; (8012d1c <tcp_pcb_remove+0xfc>)
 8012ccc:	f240 7254 	movw	r2, #1876	; 0x754
 8012cd0:	4915      	ldr	r1, [pc, #84]	; (8012d28 <tcp_pcb_remove+0x108>)
 8012cd2:	4814      	ldr	r0, [pc, #80]	; (8012d24 <tcp_pcb_remove+0x104>)
 8012cd4:	f004 ffe6 	bl	8017ca4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d006      	beq.n	8012cee <tcp_pcb_remove+0xce>
 8012ce0:	4b0e      	ldr	r3, [pc, #56]	; (8012d1c <tcp_pcb_remove+0xfc>)
 8012ce2:	f240 7256 	movw	r2, #1878	; 0x756
 8012ce6:	4911      	ldr	r1, [pc, #68]	; (8012d2c <tcp_pcb_remove+0x10c>)
 8012ce8:	480e      	ldr	r0, [pc, #56]	; (8012d24 <tcp_pcb_remove+0x104>)
 8012cea:	f004 ffdb 	bl	8017ca4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 8012cfa:	f000 f8c5 	bl	8012e88 <tcp_pcbs_sane>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d106      	bne.n	8012d12 <tcp_pcb_remove+0xf2>
 8012d04:	4b05      	ldr	r3, [pc, #20]	; (8012d1c <tcp_pcb_remove+0xfc>)
 8012d06:	f240 725e 	movw	r2, #1886	; 0x75e
 8012d0a:	4909      	ldr	r1, [pc, #36]	; (8012d30 <tcp_pcb_remove+0x110>)
 8012d0c:	4805      	ldr	r0, [pc, #20]	; (8012d24 <tcp_pcb_remove+0x104>)
 8012d0e:	f004 ffc9 	bl	8017ca4 <iprintf>
}
 8012d12:	bf00      	nop
 8012d14:	3710      	adds	r7, #16
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	0801aff0 	.word	0x0801aff0
 8012d20:	0801b3a8 	.word	0x0801b3a8
 8012d24:	0801b02c 	.word	0x0801b02c
 8012d28:	0801b3c0 	.word	0x0801b3c0
 8012d2c:	0801b3dc 	.word	0x0801b3dc
 8012d30:	0801b3f4 	.word	0x0801b3f4

08012d34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012d3c:	4b07      	ldr	r3, [pc, #28]	; (8012d5c <tcp_next_iss+0x28>)
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	4b07      	ldr	r3, [pc, #28]	; (8012d60 <tcp_next_iss+0x2c>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4413      	add	r3, r2
 8012d46:	4a05      	ldr	r2, [pc, #20]	; (8012d5c <tcp_next_iss+0x28>)
 8012d48:	6013      	str	r3, [r2, #0]
  return iss;
 8012d4a:	4b04      	ldr	r3, [pc, #16]	; (8012d5c <tcp_next_iss+0x28>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	370c      	adds	r7, #12
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop
 8012d5c:	20000018 	.word	0x20000018
 8012d60:	20020bd0 	.word	0x20020bd0

08012d64 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	6039      	str	r1, [r7, #0]
 8012d6e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8012d70:	6838      	ldr	r0, [r7, #0]
 8012d72:	f7fb fd5f 	bl	800e834 <ip4_route>
 8012d76:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d101      	bne.n	8012d82 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8012d7e:	88fb      	ldrh	r3, [r7, #6]
 8012d80:	e010      	b.n	8012da4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012d86:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012d88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d008      	beq.n	8012da2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8012d90:	897b      	ldrh	r3, [r7, #10]
 8012d92:	3b28      	subs	r3, #40	; 0x28
 8012d94:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012d96:	893a      	ldrh	r2, [r7, #8]
 8012d98:	88fb      	ldrh	r3, [r7, #6]
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	bf28      	it	cs
 8012d9e:	4613      	movcs	r3, r2
 8012da0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8012da2:	88fb      	ldrh	r3, [r7, #6]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3710      	adds	r7, #16
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012dba:	e011      	b.n	8012de0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d108      	bne.n	8012dda <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f7fe feb8 	bl	8011b44 <tcp_abort>
      pcb = next;
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	60fb      	str	r3, [r7, #12]
 8012dd8:	e002      	b.n	8012de0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d1ea      	bne.n	8012dbc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8012de6:	bf00      	nop
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
	...

08012df0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d02c      	beq.n	8012e5a <tcp_netif_ip_addr_changed+0x6a>
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d028      	beq.n	8012e5a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012e08:	4b16      	ldr	r3, [pc, #88]	; (8012e64 <tcp_netif_ip_addr_changed+0x74>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7ff ffcc 	bl	8012dac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012e14:	4b14      	ldr	r3, [pc, #80]	; (8012e68 <tcp_netif_ip_addr_changed+0x78>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4619      	mov	r1, r3
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7ff ffc6 	bl	8012dac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d019      	beq.n	8012e5a <tcp_netif_ip_addr_changed+0x6a>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d015      	beq.n	8012e5a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8012e2e:	4b0f      	ldr	r3, [pc, #60]	; (8012e6c <tcp_netif_ip_addr_changed+0x7c>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	e00e      	b.n	8012e54 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	68db      	ldr	r3, [r3, #12]
 8012e3a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d103      	bne.n	8012e50 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	681a      	ldr	r2, [r3, #0]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	60fb      	str	r3, [r7, #12]
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d1ed      	bne.n	8012e36 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012e5a:	bf00      	nop
 8012e5c:	3710      	adds	r7, #16
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	20020bcc 	.word	0x20020bcc
 8012e68:	20020bd8 	.word	0x20020bd8
 8012e6c:	20020bd4 	.word	0x20020bd4

08012e70 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	4603      	mov	r3, r0
 8012e78:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
}
 8012e7a:	bf00      	nop
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr
	...

08012e88 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e8e:	4b22      	ldr	r3, [pc, #136]	; (8012f18 <tcp_pcbs_sane+0x90>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	607b      	str	r3, [r7, #4]
 8012e94:	e023      	b.n	8012ede <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	7d1b      	ldrb	r3, [r3, #20]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d106      	bne.n	8012eac <tcp_pcbs_sane+0x24>
 8012e9e:	4b1f      	ldr	r3, [pc, #124]	; (8012f1c <tcp_pcbs_sane+0x94>)
 8012ea0:	f640 026e 	movw	r2, #2158	; 0x86e
 8012ea4:	491e      	ldr	r1, [pc, #120]	; (8012f20 <tcp_pcbs_sane+0x98>)
 8012ea6:	481f      	ldr	r0, [pc, #124]	; (8012f24 <tcp_pcbs_sane+0x9c>)
 8012ea8:	f004 fefc 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	7d1b      	ldrb	r3, [r3, #20]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d106      	bne.n	8012ec2 <tcp_pcbs_sane+0x3a>
 8012eb4:	4b19      	ldr	r3, [pc, #100]	; (8012f1c <tcp_pcbs_sane+0x94>)
 8012eb6:	f640 026f 	movw	r2, #2159	; 0x86f
 8012eba:	491b      	ldr	r1, [pc, #108]	; (8012f28 <tcp_pcbs_sane+0xa0>)
 8012ebc:	4819      	ldr	r0, [pc, #100]	; (8012f24 <tcp_pcbs_sane+0x9c>)
 8012ebe:	f004 fef1 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	7d1b      	ldrb	r3, [r3, #20]
 8012ec6:	2b0a      	cmp	r3, #10
 8012ec8:	d106      	bne.n	8012ed8 <tcp_pcbs_sane+0x50>
 8012eca:	4b14      	ldr	r3, [pc, #80]	; (8012f1c <tcp_pcbs_sane+0x94>)
 8012ecc:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8012ed0:	4916      	ldr	r1, [pc, #88]	; (8012f2c <tcp_pcbs_sane+0xa4>)
 8012ed2:	4814      	ldr	r0, [pc, #80]	; (8012f24 <tcp_pcbs_sane+0x9c>)
 8012ed4:	f004 fee6 	bl	8017ca4 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	68db      	ldr	r3, [r3, #12]
 8012edc:	607b      	str	r3, [r7, #4]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d1d8      	bne.n	8012e96 <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ee4:	4b12      	ldr	r3, [pc, #72]	; (8012f30 <tcp_pcbs_sane+0xa8>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	607b      	str	r3, [r7, #4]
 8012eea:	e00d      	b.n	8012f08 <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	7d1b      	ldrb	r3, [r3, #20]
 8012ef0:	2b0a      	cmp	r3, #10
 8012ef2:	d006      	beq.n	8012f02 <tcp_pcbs_sane+0x7a>
 8012ef4:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <tcp_pcbs_sane+0x94>)
 8012ef6:	f640 0273 	movw	r2, #2163	; 0x873
 8012efa:	490e      	ldr	r1, [pc, #56]	; (8012f34 <tcp_pcbs_sane+0xac>)
 8012efc:	4809      	ldr	r0, [pc, #36]	; (8012f24 <tcp_pcbs_sane+0x9c>)
 8012efe:	f004 fed1 	bl	8017ca4 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	607b      	str	r3, [r7, #4]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d1ee      	bne.n	8012eec <tcp_pcbs_sane+0x64>
  }
  return 1;
 8012f0e:	2301      	movs	r3, #1
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3708      	adds	r7, #8
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	20020bcc 	.word	0x20020bcc
 8012f1c:	0801aff0 	.word	0x0801aff0
 8012f20:	0801b414 	.word	0x0801b414
 8012f24:	0801b02c 	.word	0x0801b02c
 8012f28:	0801b440 	.word	0x0801b440
 8012f2c:	0801b46c 	.word	0x0801b46c
 8012f30:	20020bdc 	.word	0x20020bdc
 8012f34:	0801b49c 	.word	0x0801b49c

08012f38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012f38:	b590      	push	{r4, r7, lr}
 8012f3a:	b08b      	sub	sp, #44	; 0x2c
 8012f3c:	af02      	add	r7, sp, #8
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	4a82      	ldr	r2, [pc, #520]	; (8013150 <tcp_input+0x218>)
 8012f48:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	895b      	ldrh	r3, [r3, #10]
 8012f4e:	2b13      	cmp	r3, #19
 8012f50:	f240 8394 	bls.w	801367c <tcp_input+0x744>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012f54:	4b7f      	ldr	r3, [pc, #508]	; (8013154 <tcp_input+0x21c>)
 8012f56:	695a      	ldr	r2, [r3, #20]
 8012f58:	4b7e      	ldr	r3, [pc, #504]	; (8013154 <tcp_input+0x21c>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	4610      	mov	r0, r2
 8012f60:	f7fb ffcd 	bl	800eefe <ip4_addr_isbroadcast_u32>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f040 838b 	bne.w	8013682 <tcp_input+0x74a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012f6c:	4b79      	ldr	r3, [pc, #484]	; (8013154 <tcp_input+0x21c>)
 8012f6e:	695b      	ldr	r3, [r3, #20]
 8012f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012f74:	2be0      	cmp	r3, #224	; 0xe0
 8012f76:	f000 8384 	beq.w	8013682 <tcp_input+0x74a>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8012f7a:	4b75      	ldr	r3, [pc, #468]	; (8013150 <tcp_input+0x218>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	899b      	ldrh	r3, [r3, #12]
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7f7 fe8c 	bl	800aca0 <lwip_htons>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	0b1b      	lsrs	r3, r3, #12
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012f94:	7cbb      	ldrb	r3, [r7, #18]
 8012f96:	2b13      	cmp	r3, #19
 8012f98:	f240 8373 	bls.w	8013682 <tcp_input+0x74a>
 8012f9c:	7cbb      	ldrb	r3, [r7, #18]
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	891b      	ldrh	r3, [r3, #8]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	f200 836c 	bhi.w	8013682 <tcp_input+0x74a>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8012faa:	7cbb      	ldrb	r3, [r7, #18]
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	3b14      	subs	r3, #20
 8012fb0:	b29a      	uxth	r2, r3
 8012fb2:	4b69      	ldr	r3, [pc, #420]	; (8013158 <tcp_input+0x220>)
 8012fb4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012fb6:	4b69      	ldr	r3, [pc, #420]	; (801315c <tcp_input+0x224>)
 8012fb8:	2200      	movs	r2, #0
 8012fba:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	895a      	ldrh	r2, [r3, #10]
 8012fc0:	7cbb      	ldrb	r3, [r7, #18]
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d30d      	bcc.n	8012fe4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012fc8:	4b63      	ldr	r3, [pc, #396]	; (8013158 <tcp_input+0x220>)
 8012fca:	881a      	ldrh	r2, [r3, #0]
 8012fcc:	4b64      	ldr	r3, [pc, #400]	; (8013160 <tcp_input+0x228>)
 8012fce:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8012fd0:	7cbb      	ldrb	r3, [r7, #18]
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	425b      	negs	r3, r3
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	b21b      	sxth	r3, r3
 8012fda:	4619      	mov	r1, r3
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7fd fef1 	bl	8010dc4 <pbuf_header>
 8012fe2:	e055      	b.n	8013090 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d105      	bne.n	8012ff8 <tcp_input+0xc0>
 8012fec:	4b5d      	ldr	r3, [pc, #372]	; (8013164 <tcp_input+0x22c>)
 8012fee:	22b2      	movs	r2, #178	; 0xb2
 8012ff0:	495d      	ldr	r1, [pc, #372]	; (8013168 <tcp_input+0x230>)
 8012ff2:	485e      	ldr	r0, [pc, #376]	; (801316c <tcp_input+0x234>)
 8012ff4:	f004 fe56 	bl	8017ca4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8012ff8:	f06f 0113 	mvn.w	r1, #19
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f7fd fee1 	bl	8010dc4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	895a      	ldrh	r2, [r3, #10]
 8013006:	4b56      	ldr	r3, [pc, #344]	; (8013160 <tcp_input+0x228>)
 8013008:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801300a:	4b53      	ldr	r3, [pc, #332]	; (8013158 <tcp_input+0x220>)
 801300c:	881a      	ldrh	r2, [r3, #0]
 801300e:	4b54      	ldr	r3, [pc, #336]	; (8013160 <tcp_input+0x228>)
 8013010:	881b      	ldrh	r3, [r3, #0]
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8013016:	4b52      	ldr	r3, [pc, #328]	; (8013160 <tcp_input+0x228>)
 8013018:	881b      	ldrh	r3, [r3, #0]
 801301a:	425b      	negs	r3, r3
 801301c:	b29b      	uxth	r3, r3
 801301e:	b21b      	sxth	r3, r3
 8013020:	4619      	mov	r1, r3
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7fd fece 	bl	8010dc4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	895b      	ldrh	r3, [r3, #10]
 801302e:	8a3a      	ldrh	r2, [r7, #16]
 8013030:	429a      	cmp	r2, r3
 8013032:	f200 8325 	bhi.w	8013680 <tcp_input+0x748>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	4a47      	ldr	r2, [pc, #284]	; (801315c <tcp_input+0x224>)
 801303e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	8a3b      	ldrh	r3, [r7, #16]
 8013046:	425b      	negs	r3, r3
 8013048:	b29b      	uxth	r3, r3
 801304a:	b21b      	sxth	r3, r3
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f7fd feb8 	bl	8010dc4 <pbuf_header>
    p->tot_len -= opt2len;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	891a      	ldrh	r2, [r3, #8]
 8013058:	8a3b      	ldrh	r3, [r7, #16]
 801305a:	1ad3      	subs	r3, r2, r3
 801305c:	b29a      	uxth	r2, r3
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	895b      	ldrh	r3, [r3, #10]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d005      	beq.n	8013076 <tcp_input+0x13e>
 801306a:	4b3e      	ldr	r3, [pc, #248]	; (8013164 <tcp_input+0x22c>)
 801306c:	22cf      	movs	r2, #207	; 0xcf
 801306e:	4940      	ldr	r1, [pc, #256]	; (8013170 <tcp_input+0x238>)
 8013070:	483e      	ldr	r0, [pc, #248]	; (801316c <tcp_input+0x234>)
 8013072:	f004 fe17 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	891a      	ldrh	r2, [r3, #8]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	891b      	ldrh	r3, [r3, #8]
 8013080:	429a      	cmp	r2, r3
 8013082:	d005      	beq.n	8013090 <tcp_input+0x158>
 8013084:	4b37      	ldr	r3, [pc, #220]	; (8013164 <tcp_input+0x22c>)
 8013086:	22d0      	movs	r2, #208	; 0xd0
 8013088:	493a      	ldr	r1, [pc, #232]	; (8013174 <tcp_input+0x23c>)
 801308a:	4838      	ldr	r0, [pc, #224]	; (801316c <tcp_input+0x234>)
 801308c:	f004 fe0a 	bl	8017ca4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013090:	4b2f      	ldr	r3, [pc, #188]	; (8013150 <tcp_input+0x218>)
 8013092:	681c      	ldr	r4, [r3, #0]
 8013094:	4b2e      	ldr	r3, [pc, #184]	; (8013150 <tcp_input+0x218>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	881b      	ldrh	r3, [r3, #0]
 801309a:	b29b      	uxth	r3, r3
 801309c:	4618      	mov	r0, r3
 801309e:	f7f7 fdff 	bl	800aca0 <lwip_htons>
 80130a2:	4603      	mov	r3, r0
 80130a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80130a6:	4b2a      	ldr	r3, [pc, #168]	; (8013150 <tcp_input+0x218>)
 80130a8:	681c      	ldr	r4, [r3, #0]
 80130aa:	4b29      	ldr	r3, [pc, #164]	; (8013150 <tcp_input+0x218>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	885b      	ldrh	r3, [r3, #2]
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7f7 fdf4 	bl	800aca0 <lwip_htons>
 80130b8:	4603      	mov	r3, r0
 80130ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80130bc:	4b24      	ldr	r3, [pc, #144]	; (8013150 <tcp_input+0x218>)
 80130be:	681c      	ldr	r4, [r3, #0]
 80130c0:	4b23      	ldr	r3, [pc, #140]	; (8013150 <tcp_input+0x218>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7f7 fdf8 	bl	800acbc <lwip_htonl>
 80130cc:	4603      	mov	r3, r0
 80130ce:	6063      	str	r3, [r4, #4]
 80130d0:	6863      	ldr	r3, [r4, #4]
 80130d2:	4a29      	ldr	r2, [pc, #164]	; (8013178 <tcp_input+0x240>)
 80130d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80130d6:	4b1e      	ldr	r3, [pc, #120]	; (8013150 <tcp_input+0x218>)
 80130d8:	681c      	ldr	r4, [r3, #0]
 80130da:	4b1d      	ldr	r3, [pc, #116]	; (8013150 <tcp_input+0x218>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	689b      	ldr	r3, [r3, #8]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7f7 fdeb 	bl	800acbc <lwip_htonl>
 80130e6:	4603      	mov	r3, r0
 80130e8:	60a3      	str	r3, [r4, #8]
 80130ea:	68a3      	ldr	r3, [r4, #8]
 80130ec:	4a23      	ldr	r2, [pc, #140]	; (801317c <tcp_input+0x244>)
 80130ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80130f0:	4b17      	ldr	r3, [pc, #92]	; (8013150 <tcp_input+0x218>)
 80130f2:	681c      	ldr	r4, [r3, #0]
 80130f4:	4b16      	ldr	r3, [pc, #88]	; (8013150 <tcp_input+0x218>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	89db      	ldrh	r3, [r3, #14]
 80130fa:	b29b      	uxth	r3, r3
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7f7 fdcf 	bl	800aca0 <lwip_htons>
 8013102:	4603      	mov	r3, r0
 8013104:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013106:	4b12      	ldr	r3, [pc, #72]	; (8013150 <tcp_input+0x218>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	899b      	ldrh	r3, [r3, #12]
 801310c:	b29b      	uxth	r3, r3
 801310e:	4618      	mov	r0, r3
 8013110:	f7f7 fdc6 	bl	800aca0 <lwip_htons>
 8013114:	4603      	mov	r3, r0
 8013116:	b2db      	uxtb	r3, r3
 8013118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801311c:	b2da      	uxtb	r2, r3
 801311e:	4b18      	ldr	r3, [pc, #96]	; (8013180 <tcp_input+0x248>)
 8013120:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	891a      	ldrh	r2, [r3, #8]
 8013126:	4b16      	ldr	r3, [pc, #88]	; (8013180 <tcp_input+0x248>)
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	f003 0303 	and.w	r3, r3, #3
 801312e:	2b00      	cmp	r3, #0
 8013130:	bf14      	ite	ne
 8013132:	2301      	movne	r3, #1
 8013134:	2300      	moveq	r3, #0
 8013136:	b2db      	uxtb	r3, r3
 8013138:	b29b      	uxth	r3, r3
 801313a:	4413      	add	r3, r2
 801313c:	b29a      	uxth	r2, r3
 801313e:	4b11      	ldr	r3, [pc, #68]	; (8013184 <tcp_input+0x24c>)
 8013140:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013142:	2300      	movs	r3, #0
 8013144:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013146:	4b10      	ldr	r3, [pc, #64]	; (8013188 <tcp_input+0x250>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	61fb      	str	r3, [r7, #28]
 801314c:	e082      	b.n	8013254 <tcp_input+0x31c>
 801314e:	bf00      	nop
 8013150:	20019fac 	.word	0x20019fac
 8013154:	2001d26c 	.word	0x2001d26c
 8013158:	20019fb0 	.word	0x20019fb0
 801315c:	20019fb4 	.word	0x20019fb4
 8013160:	20019fb2 	.word	0x20019fb2
 8013164:	0801b4c8 	.word	0x0801b4c8
 8013168:	0801b4fc 	.word	0x0801b4fc
 801316c:	0801b50c 	.word	0x0801b50c
 8013170:	0801b534 	.word	0x0801b534
 8013174:	0801b540 	.word	0x0801b540
 8013178:	20019fbc 	.word	0x20019fbc
 801317c:	20019fc0 	.word	0x20019fc0
 8013180:	20019fc8 	.word	0x20019fc8
 8013184:	20019fc6 	.word	0x20019fc6
 8013188:	20020bcc 	.word	0x20020bcc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	7d1b      	ldrb	r3, [r3, #20]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d105      	bne.n	80131a0 <tcp_input+0x268>
 8013194:	4b8f      	ldr	r3, [pc, #572]	; (80133d4 <tcp_input+0x49c>)
 8013196:	22e2      	movs	r2, #226	; 0xe2
 8013198:	498f      	ldr	r1, [pc, #572]	; (80133d8 <tcp_input+0x4a0>)
 801319a:	4890      	ldr	r0, [pc, #576]	; (80133dc <tcp_input+0x4a4>)
 801319c:	f004 fd82 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80131a0:	69fb      	ldr	r3, [r7, #28]
 80131a2:	7d1b      	ldrb	r3, [r3, #20]
 80131a4:	2b0a      	cmp	r3, #10
 80131a6:	d105      	bne.n	80131b4 <tcp_input+0x27c>
 80131a8:	4b8a      	ldr	r3, [pc, #552]	; (80133d4 <tcp_input+0x49c>)
 80131aa:	22e3      	movs	r2, #227	; 0xe3
 80131ac:	498c      	ldr	r1, [pc, #560]	; (80133e0 <tcp_input+0x4a8>)
 80131ae:	488b      	ldr	r0, [pc, #556]	; (80133dc <tcp_input+0x4a4>)
 80131b0:	f004 fd78 	bl	8017ca4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80131b4:	69fb      	ldr	r3, [r7, #28]
 80131b6:	7d1b      	ldrb	r3, [r3, #20]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d105      	bne.n	80131c8 <tcp_input+0x290>
 80131bc:	4b85      	ldr	r3, [pc, #532]	; (80133d4 <tcp_input+0x49c>)
 80131be:	22e4      	movs	r2, #228	; 0xe4
 80131c0:	4988      	ldr	r1, [pc, #544]	; (80133e4 <tcp_input+0x4ac>)
 80131c2:	4886      	ldr	r0, [pc, #536]	; (80133dc <tcp_input+0x4a4>)
 80131c4:	f004 fd6e 	bl	8017ca4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	8b1a      	ldrh	r2, [r3, #24]
 80131cc:	4b86      	ldr	r3, [pc, #536]	; (80133e8 <tcp_input+0x4b0>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	881b      	ldrh	r3, [r3, #0]
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d138      	bne.n	801324a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	8ada      	ldrh	r2, [r3, #22]
 80131dc:	4b82      	ldr	r3, [pc, #520]	; (80133e8 <tcp_input+0x4b0>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	885b      	ldrh	r3, [r3, #2]
 80131e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d130      	bne.n	801324a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	685a      	ldr	r2, [r3, #4]
 80131ec:	4b7f      	ldr	r3, [pc, #508]	; (80133ec <tcp_input+0x4b4>)
 80131ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d12a      	bne.n	801324a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	4b7c      	ldr	r3, [pc, #496]	; (80133ec <tcp_input+0x4b4>)
 80131fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d124      	bne.n	801324a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	68da      	ldr	r2, [r3, #12]
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	429a      	cmp	r2, r3
 8013208:	d105      	bne.n	8013216 <tcp_input+0x2de>
 801320a:	4b72      	ldr	r3, [pc, #456]	; (80133d4 <tcp_input+0x49c>)
 801320c:	22ec      	movs	r2, #236	; 0xec
 801320e:	4978      	ldr	r1, [pc, #480]	; (80133f0 <tcp_input+0x4b8>)
 8013210:	4872      	ldr	r0, [pc, #456]	; (80133dc <tcp_input+0x4a4>)
 8013212:	f004 fd47 	bl	8017ca4 <iprintf>
      if (prev != NULL) {
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00a      	beq.n	8013232 <tcp_input+0x2fa>
        prev->next = pcb->next;
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	68da      	ldr	r2, [r3, #12]
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013224:	4b73      	ldr	r3, [pc, #460]	; (80133f4 <tcp_input+0x4bc>)
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801322c:	4a71      	ldr	r2, [pc, #452]	; (80133f4 <tcp_input+0x4bc>)
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	68da      	ldr	r2, [r3, #12]
 8013236:	69fb      	ldr	r3, [r7, #28]
 8013238:	429a      	cmp	r2, r3
 801323a:	d10f      	bne.n	801325c <tcp_input+0x324>
 801323c:	4b65      	ldr	r3, [pc, #404]	; (80133d4 <tcp_input+0x49c>)
 801323e:	22f4      	movs	r2, #244	; 0xf4
 8013240:	496d      	ldr	r1, [pc, #436]	; (80133f8 <tcp_input+0x4c0>)
 8013242:	4866      	ldr	r0, [pc, #408]	; (80133dc <tcp_input+0x4a4>)
 8013244:	f004 fd2e 	bl	8017ca4 <iprintf>
      break;
 8013248:	e008      	b.n	801325c <tcp_input+0x324>
    }
    prev = pcb;
 801324a:	69fb      	ldr	r3, [r7, #28]
 801324c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	68db      	ldr	r3, [r3, #12]
 8013252:	61fb      	str	r3, [r7, #28]
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d198      	bne.n	801318c <tcp_input+0x254>
 801325a:	e000      	b.n	801325e <tcp_input+0x326>
      break;
 801325c:	bf00      	nop
  }

  if (pcb == NULL) {
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d173      	bne.n	801334c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013264:	4b65      	ldr	r3, [pc, #404]	; (80133fc <tcp_input+0x4c4>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	61fb      	str	r3, [r7, #28]
 801326a:	e02f      	b.n	80132cc <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	7d1b      	ldrb	r3, [r3, #20]
 8013270:	2b0a      	cmp	r3, #10
 8013272:	d005      	beq.n	8013280 <tcp_input+0x348>
 8013274:	4b57      	ldr	r3, [pc, #348]	; (80133d4 <tcp_input+0x49c>)
 8013276:	22fe      	movs	r2, #254	; 0xfe
 8013278:	4961      	ldr	r1, [pc, #388]	; (8013400 <tcp_input+0x4c8>)
 801327a:	4858      	ldr	r0, [pc, #352]	; (80133dc <tcp_input+0x4a4>)
 801327c:	f004 fd12 	bl	8017ca4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	8b1a      	ldrh	r2, [r3, #24]
 8013284:	4b58      	ldr	r3, [pc, #352]	; (80133e8 <tcp_input+0x4b0>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	881b      	ldrh	r3, [r3, #0]
 801328a:	b29b      	uxth	r3, r3
 801328c:	429a      	cmp	r2, r3
 801328e:	d11a      	bne.n	80132c6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	8ada      	ldrh	r2, [r3, #22]
 8013294:	4b54      	ldr	r3, [pc, #336]	; (80133e8 <tcp_input+0x4b0>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	885b      	ldrh	r3, [r3, #2]
 801329a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801329c:	429a      	cmp	r2, r3
 801329e:	d112      	bne.n	80132c6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	685a      	ldr	r2, [r3, #4]
 80132a4:	4b51      	ldr	r3, [pc, #324]	; (80133ec <tcp_input+0x4b4>)
 80132a6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d10c      	bne.n	80132c6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	4b4e      	ldr	r3, [pc, #312]	; (80133ec <tcp_input+0x4b4>)
 80132b2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d106      	bne.n	80132c6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80132b8:	69f8      	ldr	r0, [r7, #28]
 80132ba:	f000 fb1f 	bl	80138fc <tcp_timewait_input>
        pbuf_free(p);
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f7fd fda4 	bl	8010e0c <pbuf_free>
        return;
 80132c4:	e1e2      	b.n	801368c <tcp_input+0x754>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80132c6:	69fb      	ldr	r3, [r7, #28]
 80132c8:	68db      	ldr	r3, [r3, #12]
 80132ca:	61fb      	str	r3, [r7, #28]
 80132cc:	69fb      	ldr	r3, [r7, #28]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1cc      	bne.n	801326c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80132d2:	2300      	movs	r3, #0
 80132d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80132d6:	4b4b      	ldr	r3, [pc, #300]	; (8013404 <tcp_input+0x4cc>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	617b      	str	r3, [r7, #20]
 80132dc:	e019      	b.n	8013312 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	8ada      	ldrh	r2, [r3, #22]
 80132e2:	4b41      	ldr	r3, [pc, #260]	; (80133e8 <tcp_input+0x4b0>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	885b      	ldrh	r3, [r3, #2]
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d10c      	bne.n	8013308 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	4b3e      	ldr	r3, [pc, #248]	; (80133ec <tcp_input+0x4b4>)
 80132f4:	695b      	ldr	r3, [r3, #20]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d00f      	beq.n	801331a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00d      	beq.n	801331c <tcp_input+0x3e4>
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d009      	beq.n	801331c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	617b      	str	r3, [r7, #20]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d1e2      	bne.n	80132de <tcp_input+0x3a6>
 8013318:	e000      	b.n	801331c <tcp_input+0x3e4>
            break;
 801331a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d014      	beq.n	801334c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d00a      	beq.n	801333e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	68da      	ldr	r2, [r3, #12]
 801332c:	69bb      	ldr	r3, [r7, #24]
 801332e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013330:	4b34      	ldr	r3, [pc, #208]	; (8013404 <tcp_input+0x4cc>)
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013338:	4a32      	ldr	r2, [pc, #200]	; (8013404 <tcp_input+0x4cc>)
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 801333e:	6978      	ldr	r0, [r7, #20]
 8013340:	f000 f9fa 	bl	8013738 <tcp_listen_input>
      pbuf_free(p);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7fd fd61 	bl	8010e0c <pbuf_free>
      return;
 801334a:	e19f      	b.n	801368c <tcp_input+0x754>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 801334c:	69fb      	ldr	r3, [r7, #28]
 801334e:	2b00      	cmp	r3, #0
 8013350:	f000 8162 	beq.w	8013618 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013354:	4b2c      	ldr	r3, [pc, #176]	; (8013408 <tcp_input+0x4d0>)
 8013356:	2200      	movs	r2, #0
 8013358:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	891a      	ldrh	r2, [r3, #8]
 801335e:	4b2a      	ldr	r3, [pc, #168]	; (8013408 <tcp_input+0x4d0>)
 8013360:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013362:	4a29      	ldr	r2, [pc, #164]	; (8013408 <tcp_input+0x4d0>)
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013368:	4b1f      	ldr	r3, [pc, #124]	; (80133e8 <tcp_input+0x4b0>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4a26      	ldr	r2, [pc, #152]	; (8013408 <tcp_input+0x4d0>)
 801336e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013370:	4b26      	ldr	r3, [pc, #152]	; (801340c <tcp_input+0x4d4>)
 8013372:	2200      	movs	r2, #0
 8013374:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013376:	4b26      	ldr	r3, [pc, #152]	; (8013410 <tcp_input+0x4d8>)
 8013378:	2200      	movs	r2, #0
 801337a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801337c:	4b25      	ldr	r3, [pc, #148]	; (8013414 <tcp_input+0x4dc>)
 801337e:	2200      	movs	r2, #0
 8013380:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013382:	4b25      	ldr	r3, [pc, #148]	; (8013418 <tcp_input+0x4e0>)
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	f003 0308 	and.w	r3, r3, #8
 801338a:	2b00      	cmp	r3, #0
 801338c:	d006      	beq.n	801339c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	7b5b      	ldrb	r3, [r3, #13]
 8013392:	f043 0301 	orr.w	r3, r3, #1
 8013396:	b2da      	uxtb	r2, r3
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801339c:	69fb      	ldr	r3, [r7, #28]
 801339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d03d      	beq.n	8013420 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80133a4:	69f8      	ldr	r0, [r7, #28]
 80133a6:	f7ff f925 	bl	80125f4 <tcp_process_refused_data>
 80133aa:	4603      	mov	r3, r0
 80133ac:	f113 0f0d 	cmn.w	r3, #13
 80133b0:	d007      	beq.n	80133c2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80133b2:	69fb      	ldr	r3, [r7, #28]
 80133b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d032      	beq.n	8013420 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80133ba:	4b18      	ldr	r3, [pc, #96]	; (801341c <tcp_input+0x4e4>)
 80133bc:	881b      	ldrh	r3, [r3, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d02e      	beq.n	8013420 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f040 8108 	bne.w	80135dc <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80133cc:	69f8      	ldr	r0, [r7, #28]
 80133ce:	f002 fe4d 	bl	801606c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80133d2:	e103      	b.n	80135dc <tcp_input+0x6a4>
 80133d4:	0801b4c8 	.word	0x0801b4c8
 80133d8:	0801b560 	.word	0x0801b560
 80133dc:	0801b50c 	.word	0x0801b50c
 80133e0:	0801b588 	.word	0x0801b588
 80133e4:	0801b5b4 	.word	0x0801b5b4
 80133e8:	20019fac 	.word	0x20019fac
 80133ec:	2001d26c 	.word	0x2001d26c
 80133f0:	0801b5dc 	.word	0x0801b5dc
 80133f4:	20020bcc 	.word	0x20020bcc
 80133f8:	0801b608 	.word	0x0801b608
 80133fc:	20020bdc 	.word	0x20020bdc
 8013400:	0801b634 	.word	0x0801b634
 8013404:	20020bd4 	.word	0x20020bd4
 8013408:	20019f9c 	.word	0x20019f9c
 801340c:	20019fcc 	.word	0x20019fcc
 8013410:	20019fc9 	.word	0x20019fc9
 8013414:	20019fc4 	.word	0x20019fc4
 8013418:	20019fc8 	.word	0x20019fc8
 801341c:	20019fc6 	.word	0x20019fc6
      }
    }
    tcp_input_pcb = pcb;
 8013420:	4a9c      	ldr	r2, [pc, #624]	; (8013694 <tcp_input+0x75c>)
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013426:	69f8      	ldr	r0, [r7, #28]
 8013428:	f000 fad0 	bl	80139cc <tcp_process>
 801342c:	4603      	mov	r3, r0
 801342e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013434:	f113 0f0d 	cmn.w	r3, #13
 8013438:	f000 80db 	beq.w	80135f2 <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 801343c:	4b96      	ldr	r3, [pc, #600]	; (8013698 <tcp_input+0x760>)
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	f003 0308 	and.w	r3, r3, #8
 8013444:	2b00      	cmp	r3, #0
 8013446:	d016      	beq.n	8013476 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801344e:	2b00      	cmp	r3, #0
 8013450:	d008      	beq.n	8013464 <tcp_input+0x52c>
 8013452:	69fb      	ldr	r3, [r7, #28]
 8013454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013458:	69fa      	ldr	r2, [r7, #28]
 801345a:	6912      	ldr	r2, [r2, #16]
 801345c:	f06f 010d 	mvn.w	r1, #13
 8013460:	4610      	mov	r0, r2
 8013462:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013464:	69f9      	ldr	r1, [r7, #28]
 8013466:	488d      	ldr	r0, [pc, #564]	; (801369c <tcp_input+0x764>)
 8013468:	f7ff fbda 	bl	8012c20 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801346c:	69f9      	ldr	r1, [r7, #28]
 801346e:	2001      	movs	r0, #1
 8013470:	f7fc ff50 	bl	8010314 <memp_free>
 8013474:	e0bd      	b.n	80135f2 <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 8013476:	2300      	movs	r3, #0
 8013478:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801347a:	4b89      	ldr	r3, [pc, #548]	; (80136a0 <tcp_input+0x768>)
 801347c:	881b      	ldrh	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d01b      	beq.n	80134ba <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013482:	4b87      	ldr	r3, [pc, #540]	; (80136a0 <tcp_input+0x768>)
 8013484:	881b      	ldrh	r3, [r3, #0]
 8013486:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013488:	69fb      	ldr	r3, [r7, #28]
 801348a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801348c:	2b00      	cmp	r3, #0
 801348e:	d009      	beq.n	80134a4 <tcp_input+0x56c>
 8013490:	69fb      	ldr	r3, [r7, #28]
 8013492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013494:	69fa      	ldr	r2, [r7, #28]
 8013496:	6910      	ldr	r0, [r2, #16]
 8013498:	89fa      	ldrh	r2, [r7, #14]
 801349a:	69f9      	ldr	r1, [r7, #28]
 801349c:	4798      	blx	r3
 801349e:	4603      	mov	r3, r0
 80134a0:	74fb      	strb	r3, [r7, #19]
 80134a2:	e001      	b.n	80134a8 <tcp_input+0x570>
 80134a4:	2300      	movs	r3, #0
 80134a6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80134a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80134ac:	f113 0f0d 	cmn.w	r3, #13
 80134b0:	f000 8096 	beq.w	80135e0 <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 80134b4:	4b7a      	ldr	r3, [pc, #488]	; (80136a0 <tcp_input+0x768>)
 80134b6:	2200      	movs	r2, #0
 80134b8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80134ba:	69f8      	ldr	r0, [r7, #28]
 80134bc:	f000 f90a 	bl	80136d4 <tcp_input_delayed_close>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f040 808e 	bne.w	80135e4 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80134c8:	4b76      	ldr	r3, [pc, #472]	; (80136a4 <tcp_input+0x76c>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d041      	beq.n	8013554 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80134d0:	69fb      	ldr	r3, [r7, #28]
 80134d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d006      	beq.n	80134e6 <tcp_input+0x5ae>
 80134d8:	4b73      	ldr	r3, [pc, #460]	; (80136a8 <tcp_input+0x770>)
 80134da:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80134de:	4973      	ldr	r1, [pc, #460]	; (80136ac <tcp_input+0x774>)
 80134e0:	4873      	ldr	r0, [pc, #460]	; (80136b0 <tcp_input+0x778>)
 80134e2:	f004 fbdf 	bl	8017ca4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	7e9b      	ldrb	r3, [r3, #26]
 80134ea:	f003 0310 	and.w	r3, r3, #16
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d008      	beq.n	8013504 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80134f2:	4b6c      	ldr	r3, [pc, #432]	; (80136a4 <tcp_input+0x76c>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fd fc88 	bl	8010e0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80134fc:	69f8      	ldr	r0, [r7, #28]
 80134fe:	f7fe fb21 	bl	8011b44 <tcp_abort>
            goto aborted;
 8013502:	e076      	b.n	80135f2 <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00c      	beq.n	8013528 <tcp_input+0x5f0>
 801350e:	69fb      	ldr	r3, [r7, #28]
 8013510:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8013514:	69fb      	ldr	r3, [r7, #28]
 8013516:	6918      	ldr	r0, [r3, #16]
 8013518:	4b62      	ldr	r3, [pc, #392]	; (80136a4 <tcp_input+0x76c>)
 801351a:	681a      	ldr	r2, [r3, #0]
 801351c:	2300      	movs	r3, #0
 801351e:	69f9      	ldr	r1, [r7, #28]
 8013520:	47a0      	blx	r4
 8013522:	4603      	mov	r3, r0
 8013524:	74fb      	strb	r3, [r7, #19]
 8013526:	e008      	b.n	801353a <tcp_input+0x602>
 8013528:	4b5e      	ldr	r3, [pc, #376]	; (80136a4 <tcp_input+0x76c>)
 801352a:	681a      	ldr	r2, [r3, #0]
 801352c:	2300      	movs	r3, #0
 801352e:	69f9      	ldr	r1, [r7, #28]
 8013530:	2000      	movs	r0, #0
 8013532:	f7ff f913 	bl	801275c <tcp_recv_null>
 8013536:	4603      	mov	r3, r0
 8013538:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801353a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801353e:	f113 0f0d 	cmn.w	r3, #13
 8013542:	d051      	beq.n	80135e8 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013544:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d003      	beq.n	8013554 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801354c:	4b55      	ldr	r3, [pc, #340]	; (80136a4 <tcp_input+0x76c>)
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013554:	4b50      	ldr	r3, [pc, #320]	; (8013698 <tcp_input+0x760>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	f003 0320 	and.w	r3, r3, #32
 801355c:	2b00      	cmp	r3, #0
 801355e:	d030      	beq.n	80135c2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013564:	2b00      	cmp	r3, #0
 8013566:	d009      	beq.n	801357c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801356c:	69fa      	ldr	r2, [r7, #28]
 801356e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8013570:	7b52      	ldrb	r2, [r2, #13]
 8013572:	f042 0220 	orr.w	r2, r2, #32
 8013576:	b2d2      	uxtb	r2, r2
 8013578:	735a      	strb	r2, [r3, #13]
 801357a:	e022      	b.n	80135c2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013580:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013584:	d005      	beq.n	8013592 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8013586:	69fb      	ldr	r3, [r7, #28]
 8013588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801358a:	3301      	adds	r3, #1
 801358c:	b29a      	uxth	r2, r3
 801358e:	69fb      	ldr	r3, [r7, #28]
 8013590:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013592:	69fb      	ldr	r3, [r7, #28]
 8013594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00b      	beq.n	80135b4 <tcp_input+0x67c>
 801359c:	69fb      	ldr	r3, [r7, #28]
 801359e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80135a2:	69fb      	ldr	r3, [r7, #28]
 80135a4:	6918      	ldr	r0, [r3, #16]
 80135a6:	2300      	movs	r3, #0
 80135a8:	2200      	movs	r2, #0
 80135aa:	69f9      	ldr	r1, [r7, #28]
 80135ac:	47a0      	blx	r4
 80135ae:	4603      	mov	r3, r0
 80135b0:	74fb      	strb	r3, [r7, #19]
 80135b2:	e001      	b.n	80135b8 <tcp_input+0x680>
 80135b4:	2300      	movs	r3, #0
 80135b6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80135b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80135bc:	f113 0f0d 	cmn.w	r3, #13
 80135c0:	d014      	beq.n	80135ec <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80135c2:	4b34      	ldr	r3, [pc, #208]	; (8013694 <tcp_input+0x75c>)
 80135c4:	2200      	movs	r2, #0
 80135c6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80135c8:	69f8      	ldr	r0, [r7, #28]
 80135ca:	f000 f883 	bl	80136d4 <tcp_input_delayed_close>
 80135ce:	4603      	mov	r3, r0
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d10d      	bne.n	80135f0 <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80135d4:	69f8      	ldr	r0, [r7, #28]
 80135d6:	f002 fda5 	bl	8016124 <tcp_output>
 80135da:	e00a      	b.n	80135f2 <tcp_input+0x6ba>
        goto aborted;
 80135dc:	bf00      	nop
 80135de:	e008      	b.n	80135f2 <tcp_input+0x6ba>
              goto aborted;
 80135e0:	bf00      	nop
 80135e2:	e006      	b.n	80135f2 <tcp_input+0x6ba>
          goto aborted;
 80135e4:	bf00      	nop
 80135e6:	e004      	b.n	80135f2 <tcp_input+0x6ba>
            goto aborted;
 80135e8:	bf00      	nop
 80135ea:	e002      	b.n	80135f2 <tcp_input+0x6ba>
              goto aborted;
 80135ec:	bf00      	nop
 80135ee:	e000      	b.n	80135f2 <tcp_input+0x6ba>
          goto aborted;
 80135f0:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 80135f2:	4b28      	ldr	r3, [pc, #160]	; (8013694 <tcp_input+0x75c>)
 80135f4:	2200      	movs	r2, #0
 80135f6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80135f8:	4b2a      	ldr	r3, [pc, #168]	; (80136a4 <tcp_input+0x76c>)
 80135fa:	2200      	movs	r2, #0
 80135fc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80135fe:	4b2d      	ldr	r3, [pc, #180]	; (80136b4 <tcp_input+0x77c>)
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d02d      	beq.n	8013662 <tcp_input+0x72a>
    {
      pbuf_free(inseg.p);
 8013606:	4b2b      	ldr	r3, [pc, #172]	; (80136b4 <tcp_input+0x77c>)
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	4618      	mov	r0, r3
 801360c:	f7fd fbfe 	bl	8010e0c <pbuf_free>
      inseg.p = NULL;
 8013610:	4b28      	ldr	r3, [pc, #160]	; (80136b4 <tcp_input+0x77c>)
 8013612:	2200      	movs	r2, #0
 8013614:	605a      	str	r2, [r3, #4]
 8013616:	e024      	b.n	8013662 <tcp_input+0x72a>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013618:	4b27      	ldr	r3, [pc, #156]	; (80136b8 <tcp_input+0x780>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	899b      	ldrh	r3, [r3, #12]
 801361e:	b29b      	uxth	r3, r3
 8013620:	4618      	mov	r0, r3
 8013622:	f7f7 fb3d 	bl	800aca0 <lwip_htons>
 8013626:	4603      	mov	r3, r0
 8013628:	f003 0304 	and.w	r3, r3, #4
 801362c:	2b00      	cmp	r3, #0
 801362e:	d115      	bne.n	801365c <tcp_input+0x724>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013630:	4b22      	ldr	r3, [pc, #136]	; (80136bc <tcp_input+0x784>)
 8013632:	6818      	ldr	r0, [r3, #0]
 8013634:	4b22      	ldr	r3, [pc, #136]	; (80136c0 <tcp_input+0x788>)
 8013636:	881b      	ldrh	r3, [r3, #0]
 8013638:	461a      	mov	r2, r3
 801363a:	4b22      	ldr	r3, [pc, #136]	; (80136c4 <tcp_input+0x78c>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013640:	4b1d      	ldr	r3, [pc, #116]	; (80136b8 <tcp_input+0x780>)
 8013642:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013644:	885b      	ldrh	r3, [r3, #2]
 8013646:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013648:	4a1b      	ldr	r2, [pc, #108]	; (80136b8 <tcp_input+0x780>)
 801364a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801364c:	8812      	ldrh	r2, [r2, #0]
 801364e:	b292      	uxth	r2, r2
 8013650:	9201      	str	r2, [sp, #4]
 8013652:	9300      	str	r3, [sp, #0]
 8013654:	4b1c      	ldr	r3, [pc, #112]	; (80136c8 <tcp_input+0x790>)
 8013656:	4a1d      	ldr	r2, [pc, #116]	; (80136cc <tcp_input+0x794>)
 8013658:	f002 ffec 	bl	8016634 <tcp_rst>
    }
    pbuf_free(p);
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7fd fbd5 	bl	8010e0c <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 8013662:	f7ff fc11 	bl	8012e88 <tcp_pcbs_sane>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d10e      	bne.n	801368a <tcp_input+0x752>
 801366c:	4b0e      	ldr	r3, [pc, #56]	; (80136a8 <tcp_input+0x770>)
 801366e:	f240 2209 	movw	r2, #521	; 0x209
 8013672:	4917      	ldr	r1, [pc, #92]	; (80136d0 <tcp_input+0x798>)
 8013674:	480e      	ldr	r0, [pc, #56]	; (80136b0 <tcp_input+0x778>)
 8013676:	f004 fb15 	bl	8017ca4 <iprintf>
  PERF_STOP("tcp_input");
  return;
 801367a:	e006      	b.n	801368a <tcp_input+0x752>
    goto dropped;
 801367c:	bf00      	nop
 801367e:	e000      	b.n	8013682 <tcp_input+0x74a>
      goto dropped;
 8013680:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f7fd fbc2 	bl	8010e0c <pbuf_free>
 8013688:	e000      	b.n	801368c <tcp_input+0x754>
  return;
 801368a:	bf00      	nop
}
 801368c:	3724      	adds	r7, #36	; 0x24
 801368e:	46bd      	mov	sp, r7
 8013690:	bd90      	pop	{r4, r7, pc}
 8013692:	bf00      	nop
 8013694:	20020be0 	.word	0x20020be0
 8013698:	20019fc9 	.word	0x20019fc9
 801369c:	20020bcc 	.word	0x20020bcc
 80136a0:	20019fc4 	.word	0x20019fc4
 80136a4:	20019fcc 	.word	0x20019fcc
 80136a8:	0801b4c8 	.word	0x0801b4c8
 80136ac:	0801b664 	.word	0x0801b664
 80136b0:	0801b50c 	.word	0x0801b50c
 80136b4:	20019f9c 	.word	0x20019f9c
 80136b8:	20019fac 	.word	0x20019fac
 80136bc:	20019fc0 	.word	0x20019fc0
 80136c0:	20019fc6 	.word	0x20019fc6
 80136c4:	20019fbc 	.word	0x20019fbc
 80136c8:	2001d27c 	.word	0x2001d27c
 80136cc:	2001d280 	.word	0x2001d280
 80136d0:	0801b680 	.word	0x0801b680

080136d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80136dc:	4b14      	ldr	r3, [pc, #80]	; (8013730 <tcp_input_delayed_close+0x5c>)
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	f003 0310 	and.w	r3, r3, #16
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d01d      	beq.n	8013724 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	7e9b      	ldrb	r3, [r3, #26]
 80136ec:	f003 0310 	and.w	r3, r3, #16
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d10d      	bne.n	8013710 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d008      	beq.n	8013710 <tcp_input_delayed_close+0x3c>
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	6912      	ldr	r2, [r2, #16]
 8013708:	f06f 010e 	mvn.w	r1, #14
 801370c:	4610      	mov	r0, r2
 801370e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	4808      	ldr	r0, [pc, #32]	; (8013734 <tcp_input_delayed_close+0x60>)
 8013714:	f7ff fa84 	bl	8012c20 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8013718:	6879      	ldr	r1, [r7, #4]
 801371a:	2001      	movs	r0, #1
 801371c:	f7fc fdfa 	bl	8010314 <memp_free>
    return 1;
 8013720:	2301      	movs	r3, #1
 8013722:	e000      	b.n	8013726 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8013724:	2300      	movs	r3, #0
}
 8013726:	4618      	mov	r0, r3
 8013728:	3708      	adds	r7, #8
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
 801372e:	bf00      	nop
 8013730:	20019fc9 	.word	0x20019fc9
 8013734:	20020bcc 	.word	0x20020bcc

08013738 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b088      	sub	sp, #32
 801373c:	af02      	add	r7, sp, #8
 801373e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013740:	4b64      	ldr	r3, [pc, #400]	; (80138d4 <tcp_listen_input+0x19c>)
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	f003 0304 	and.w	r3, r3, #4
 8013748:	2b00      	cmp	r3, #0
 801374a:	f040 80bc 	bne.w	80138c6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801374e:	4b61      	ldr	r3, [pc, #388]	; (80138d4 <tcp_listen_input+0x19c>)
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	f003 0310 	and.w	r3, r3, #16
 8013756:	2b00      	cmp	r3, #0
 8013758:	d016      	beq.n	8013788 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801375a:	4b5f      	ldr	r3, [pc, #380]	; (80138d8 <tcp_listen_input+0x1a0>)
 801375c:	6818      	ldr	r0, [r3, #0]
 801375e:	4b5f      	ldr	r3, [pc, #380]	; (80138dc <tcp_listen_input+0x1a4>)
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	461a      	mov	r2, r3
 8013764:	4b5e      	ldr	r3, [pc, #376]	; (80138e0 <tcp_listen_input+0x1a8>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801376a:	4b5e      	ldr	r3, [pc, #376]	; (80138e4 <tcp_listen_input+0x1ac>)
 801376c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801376e:	885b      	ldrh	r3, [r3, #2]
 8013770:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013772:	4a5c      	ldr	r2, [pc, #368]	; (80138e4 <tcp_listen_input+0x1ac>)
 8013774:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013776:	8812      	ldrh	r2, [r2, #0]
 8013778:	b292      	uxth	r2, r2
 801377a:	9201      	str	r2, [sp, #4]
 801377c:	9300      	str	r3, [sp, #0]
 801377e:	4b5a      	ldr	r3, [pc, #360]	; (80138e8 <tcp_listen_input+0x1b0>)
 8013780:	4a5a      	ldr	r2, [pc, #360]	; (80138ec <tcp_listen_input+0x1b4>)
 8013782:	f002 ff57 	bl	8016634 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013786:	e0a0      	b.n	80138ca <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8013788:	4b52      	ldr	r3, [pc, #328]	; (80138d4 <tcp_listen_input+0x19c>)
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	f003 0302 	and.w	r3, r3, #2
 8013790:	2b00      	cmp	r3, #0
 8013792:	f000 809a 	beq.w	80138ca <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	7d5b      	ldrb	r3, [r3, #21]
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff f8bc 	bl	8012918 <tcp_alloc>
 80137a0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d111      	bne.n	80137cc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	699b      	ldr	r3, [r3, #24]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d00a      	beq.n	80137c6 <tcp_listen_input+0x8e>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	699b      	ldr	r3, [r3, #24]
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	6910      	ldr	r0, [r2, #16]
 80137b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80137bc:	2100      	movs	r1, #0
 80137be:	4798      	blx	r3
 80137c0:	4603      	mov	r3, r0
 80137c2:	74fb      	strb	r3, [r7, #19]
      return;
 80137c4:	e082      	b.n	80138cc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80137c6:	23f0      	movs	r3, #240	; 0xf0
 80137c8:	74fb      	strb	r3, [r7, #19]
      return;
 80137ca:	e07f      	b.n	80138cc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80137cc:	4b48      	ldr	r3, [pc, #288]	; (80138f0 <tcp_listen_input+0x1b8>)
 80137ce:	695a      	ldr	r2, [r3, #20]
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80137d4:	4b46      	ldr	r3, [pc, #280]	; (80138f0 <tcp_listen_input+0x1b8>)
 80137d6:	691a      	ldr	r2, [r3, #16]
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	8ada      	ldrh	r2, [r3, #22]
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80137e4:	4b3f      	ldr	r3, [pc, #252]	; (80138e4 <tcp_listen_input+0x1ac>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	881b      	ldrh	r3, [r3, #0]
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	2203      	movs	r2, #3
 80137f4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80137f6:	4b3a      	ldr	r3, [pc, #232]	; (80138e0 <tcp_listen_input+0x1a8>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	1c5a      	adds	r2, r3, #1
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013808:	6978      	ldr	r0, [r7, #20]
 801380a:	f7ff fa93 	bl	8012d34 <tcp_next_iss>
 801380e:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	68fa      	ldr	r2, [r7, #12]
 8013814:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	68fa      	ldr	r2, [r7, #12]
 801381a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	68fa      	ldr	r2, [r7, #12]
 8013820:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	68fa      	ldr	r2, [r7, #12]
 8013826:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013828:	4b2d      	ldr	r3, [pc, #180]	; (80138e0 <tcp_listen_input+0x1a8>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	1e5a      	subs	r2, r3, #1
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	691a      	ldr	r2, [r3, #16]
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	7a1b      	ldrb	r3, [r3, #8]
 8013844:	f003 030c 	and.w	r3, r3, #12
 8013848:	b2da      	uxtb	r2, r3
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801384e:	4b29      	ldr	r3, [pc, #164]	; (80138f4 <tcp_listen_input+0x1bc>)
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	60da      	str	r2, [r3, #12]
 8013856:	4a27      	ldr	r2, [pc, #156]	; (80138f4 <tcp_listen_input+0x1bc>)
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	6013      	str	r3, [r2, #0]
 801385c:	f003 f93a 	bl	8016ad4 <tcp_timer_needed>
 8013860:	4b25      	ldr	r3, [pc, #148]	; (80138f8 <tcp_listen_input+0x1c0>)
 8013862:	2201      	movs	r2, #1
 8013864:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013866:	6978      	ldr	r0, [r7, #20]
 8013868:	f001 fd16 	bl	8015298 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801386c:	4b1d      	ldr	r3, [pc, #116]	; (80138e4 <tcp_listen_input+0x1ac>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	89db      	ldrh	r3, [r3, #14]
 8013872:	b29a      	uxth	r2, r3
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	3304      	adds	r3, #4
 801388e:	4619      	mov	r1, r3
 8013890:	4610      	mov	r0, r2
 8013892:	f7ff fa67 	bl	8012d64 <tcp_eff_send_mss_impl>
 8013896:	4603      	mov	r3, r0
 8013898:	461a      	mov	r2, r3
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801389e:	2112      	movs	r1, #18
 80138a0:	6978      	ldr	r0, [r7, #20]
 80138a2:	f002 fae5 	bl	8015e70 <tcp_enqueue_flags>
 80138a6:	4603      	mov	r3, r0
 80138a8:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 80138aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d004      	beq.n	80138bc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 80138b2:	2100      	movs	r1, #0
 80138b4:	6978      	ldr	r0, [r7, #20]
 80138b6:	f7fe f893 	bl	80119e0 <tcp_abandon>
      return;
 80138ba:	e007      	b.n	80138cc <tcp_listen_input+0x194>
    tcp_output(npcb);
 80138bc:	6978      	ldr	r0, [r7, #20]
 80138be:	f002 fc31 	bl	8016124 <tcp_output>
  return;
 80138c2:	bf00      	nop
 80138c4:	e001      	b.n	80138ca <tcp_listen_input+0x192>
    return;
 80138c6:	bf00      	nop
 80138c8:	e000      	b.n	80138cc <tcp_listen_input+0x194>
  return;
 80138ca:	bf00      	nop
}
 80138cc:	3718      	adds	r7, #24
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	bf00      	nop
 80138d4:	20019fc8 	.word	0x20019fc8
 80138d8:	20019fc0 	.word	0x20019fc0
 80138dc:	20019fc6 	.word	0x20019fc6
 80138e0:	20019fbc 	.word	0x20019fbc
 80138e4:	20019fac 	.word	0x20019fac
 80138e8:	2001d27c 	.word	0x2001d27c
 80138ec:	2001d280 	.word	0x2001d280
 80138f0:	2001d26c 	.word	0x2001d26c
 80138f4:	20020bcc 	.word	0x20020bcc
 80138f8:	20020bc8 	.word	0x20020bc8

080138fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b084      	sub	sp, #16
 8013900:	af02      	add	r7, sp, #8
 8013902:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013904:	4b29      	ldr	r3, [pc, #164]	; (80139ac <tcp_timewait_input+0xb0>)
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	f003 0304 	and.w	r3, r3, #4
 801390c:	2b00      	cmp	r3, #0
 801390e:	d147      	bne.n	80139a0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013910:	4b26      	ldr	r3, [pc, #152]	; (80139ac <tcp_timewait_input+0xb0>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	f003 0302 	and.w	r3, r3, #2
 8013918:	2b00      	cmp	r3, #0
 801391a:	d027      	beq.n	801396c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801391c:	4b24      	ldr	r3, [pc, #144]	; (80139b0 <tcp_timewait_input+0xb4>)
 801391e:	681a      	ldr	r2, [r3, #0]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	2b00      	cmp	r3, #0
 8013928:	db2a      	blt.n	8013980 <tcp_timewait_input+0x84>
 801392a:	4b21      	ldr	r3, [pc, #132]	; (80139b0 <tcp_timewait_input+0xb4>)
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013932:	6879      	ldr	r1, [r7, #4]
 8013934:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013936:	440b      	add	r3, r1
 8013938:	1ad3      	subs	r3, r2, r3
 801393a:	2b00      	cmp	r3, #0
 801393c:	dc20      	bgt.n	8013980 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801393e:	4b1d      	ldr	r3, [pc, #116]	; (80139b4 <tcp_timewait_input+0xb8>)
 8013940:	6818      	ldr	r0, [r3, #0]
 8013942:	4b1d      	ldr	r3, [pc, #116]	; (80139b8 <tcp_timewait_input+0xbc>)
 8013944:	881b      	ldrh	r3, [r3, #0]
 8013946:	461a      	mov	r2, r3
 8013948:	4b19      	ldr	r3, [pc, #100]	; (80139b0 <tcp_timewait_input+0xb4>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801394e:	4b1b      	ldr	r3, [pc, #108]	; (80139bc <tcp_timewait_input+0xc0>)
 8013950:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013952:	885b      	ldrh	r3, [r3, #2]
 8013954:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013956:	4a19      	ldr	r2, [pc, #100]	; (80139bc <tcp_timewait_input+0xc0>)
 8013958:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801395a:	8812      	ldrh	r2, [r2, #0]
 801395c:	b292      	uxth	r2, r2
 801395e:	9201      	str	r2, [sp, #4]
 8013960:	9300      	str	r3, [sp, #0]
 8013962:	4b17      	ldr	r3, [pc, #92]	; (80139c0 <tcp_timewait_input+0xc4>)
 8013964:	4a17      	ldr	r2, [pc, #92]	; (80139c4 <tcp_timewait_input+0xc8>)
 8013966:	f002 fe65 	bl	8016634 <tcp_rst>
      return;
 801396a:	e01c      	b.n	80139a6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 801396c:	4b0f      	ldr	r3, [pc, #60]	; (80139ac <tcp_timewait_input+0xb0>)
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	f003 0301 	and.w	r3, r3, #1
 8013974:	2b00      	cmp	r3, #0
 8013976:	d003      	beq.n	8013980 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013978:	4b13      	ldr	r3, [pc, #76]	; (80139c8 <tcp_timewait_input+0xcc>)
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013980:	4b0d      	ldr	r3, [pc, #52]	; (80139b8 <tcp_timewait_input+0xbc>)
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d00d      	beq.n	80139a4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	7e9b      	ldrb	r3, [r3, #26]
 801398c:	f043 0302 	orr.w	r3, r3, #2
 8013990:	b2da      	uxtb	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f002 fbc4 	bl	8016124 <tcp_output>
  }
  return;
 801399c:	bf00      	nop
 801399e:	e001      	b.n	80139a4 <tcp_timewait_input+0xa8>
    return;
 80139a0:	bf00      	nop
 80139a2:	e000      	b.n	80139a6 <tcp_timewait_input+0xaa>
  return;
 80139a4:	bf00      	nop
}
 80139a6:	3708      	adds	r7, #8
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	20019fc8 	.word	0x20019fc8
 80139b0:	20019fbc 	.word	0x20019fbc
 80139b4:	20019fc0 	.word	0x20019fc0
 80139b8:	20019fc6 	.word	0x20019fc6
 80139bc:	20019fac 	.word	0x20019fac
 80139c0:	2001d27c 	.word	0x2001d27c
 80139c4:	2001d280 	.word	0x2001d280
 80139c8:	20020bd0 	.word	0x20020bd0

080139cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b08a      	sub	sp, #40	; 0x28
 80139d0:	af02      	add	r7, sp, #8
 80139d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80139d4:	2300      	movs	r3, #0
 80139d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80139d8:	2300      	movs	r3, #0
 80139da:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80139dc:	4ba4      	ldr	r3, [pc, #656]	; (8013c70 <tcp_process+0x2a4>)
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	f003 0304 	and.w	r3, r3, #4
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d04e      	beq.n	8013a86 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	7d1b      	ldrb	r3, [r3, #20]
 80139ec:	2b02      	cmp	r3, #2
 80139ee:	d108      	bne.n	8013a02 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139f4:	4b9f      	ldr	r3, [pc, #636]	; (8013c74 <tcp_process+0x2a8>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d123      	bne.n	8013a44 <tcp_process+0x78>
        acceptable = 1;
 80139fc:	2301      	movs	r3, #1
 80139fe:	76fb      	strb	r3, [r7, #27]
 8013a00:	e020      	b.n	8013a44 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a06:	4b9c      	ldr	r3, [pc, #624]	; (8013c78 <tcp_process+0x2ac>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d102      	bne.n	8013a14 <tcp_process+0x48>
        acceptable = 1;
 8013a0e:	2301      	movs	r3, #1
 8013a10:	76fb      	strb	r3, [r7, #27]
 8013a12:	e017      	b.n	8013a44 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013a14:	4b98      	ldr	r3, [pc, #608]	; (8013c78 <tcp_process+0x2ac>)
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	db10      	blt.n	8013a44 <tcp_process+0x78>
 8013a22:	4b95      	ldr	r3, [pc, #596]	; (8013c78 <tcp_process+0x2ac>)
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a2a:	6879      	ldr	r1, [r7, #4]
 8013a2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013a2e:	440b      	add	r3, r1
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	dc06      	bgt.n	8013a44 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	7e9b      	ldrb	r3, [r3, #26]
 8013a3a:	f043 0302 	orr.w	r3, r3, #2
 8013a3e:	b2da      	uxtb	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013a44:	7efb      	ldrb	r3, [r7, #27]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d01b      	beq.n	8013a82 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	7d1b      	ldrb	r3, [r3, #20]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d106      	bne.n	8013a60 <tcp_process+0x94>
 8013a52:	4b8a      	ldr	r3, [pc, #552]	; (8013c7c <tcp_process+0x2b0>)
 8013a54:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013a58:	4989      	ldr	r1, [pc, #548]	; (8013c80 <tcp_process+0x2b4>)
 8013a5a:	488a      	ldr	r0, [pc, #552]	; (8013c84 <tcp_process+0x2b8>)
 8013a5c:	f004 f922 	bl	8017ca4 <iprintf>
      recv_flags |= TF_RESET;
 8013a60:	4b89      	ldr	r3, [pc, #548]	; (8013c88 <tcp_process+0x2bc>)
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	f043 0308 	orr.w	r3, r3, #8
 8013a68:	b2da      	uxtb	r2, r3
 8013a6a:	4b87      	ldr	r3, [pc, #540]	; (8013c88 <tcp_process+0x2bc>)
 8013a6c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	7e9b      	ldrb	r3, [r3, #26]
 8013a72:	f023 0301 	bic.w	r3, r3, #1
 8013a76:	b2da      	uxtb	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8013a7c:	f06f 030d 	mvn.w	r3, #13
 8013a80:	e34d      	b.n	801411e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013a82:	2300      	movs	r3, #0
 8013a84:	e34b      	b.n	801411e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013a86:	4b7a      	ldr	r3, [pc, #488]	; (8013c70 <tcp_process+0x2a4>)
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	f003 0302 	and.w	r3, r3, #2
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d010      	beq.n	8013ab4 <tcp_process+0xe8>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	7d1b      	ldrb	r3, [r3, #20]
 8013a96:	2b02      	cmp	r3, #2
 8013a98:	d00c      	beq.n	8013ab4 <tcp_process+0xe8>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	7d1b      	ldrb	r3, [r3, #20]
 8013a9e:	2b03      	cmp	r3, #3
 8013aa0:	d008      	beq.n	8013ab4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	7e9b      	ldrb	r3, [r3, #26]
 8013aa6:	f043 0302 	orr.w	r3, r3, #2
 8013aaa:	b2da      	uxtb	r2, r3
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	e334      	b.n	801411e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	7e9b      	ldrb	r3, [r3, #26]
 8013ab8:	f003 0310 	and.w	r3, r3, #16
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d103      	bne.n	8013ac8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013ac0:	4b72      	ldr	r3, [pc, #456]	; (8013c8c <tcp_process+0x2c0>)
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2200      	movs	r2, #0
 8013acc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f001 fbe1 	bl	8015298 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	7d1b      	ldrb	r3, [r3, #20]
 8013ada:	3b02      	subs	r3, #2
 8013adc:	2b07      	cmp	r3, #7
 8013ade:	f200 830e 	bhi.w	80140fe <tcp_process+0x732>
 8013ae2:	a201      	add	r2, pc, #4	; (adr r2, 8013ae8 <tcp_process+0x11c>)
 8013ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ae8:	08013b09 	.word	0x08013b09
 8013aec:	08013d01 	.word	0x08013d01
 8013af0:	08013e59 	.word	0x08013e59
 8013af4:	08013e83 	.word	0x08013e83
 8013af8:	08013fad 	.word	0x08013fad
 8013afc:	08013e59 	.word	0x08013e59
 8013b00:	08014039 	.word	0x08014039
 8013b04:	080140c9 	.word	0x080140c9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013b08:	4b59      	ldr	r3, [pc, #356]	; (8013c70 <tcp_process+0x2a4>)
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	f003 0310 	and.w	r3, r3, #16
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f000 80cb 	beq.w	8013cac <tcp_process+0x2e0>
 8013b16:	4b56      	ldr	r3, [pc, #344]	; (8013c70 <tcp_process+0x2a4>)
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	f003 0302 	and.w	r3, r3, #2
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	f000 80c4 	beq.w	8013cac <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b28:	1c5a      	adds	r2, r3, #1
 8013b2a:	4b52      	ldr	r3, [pc, #328]	; (8013c74 <tcp_process+0x2a8>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	f040 80bc 	bne.w	8013cac <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8013b34:	4b50      	ldr	r3, [pc, #320]	; (8013c78 <tcp_process+0x2ac>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	1c5a      	adds	r2, r3, #1
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8013b46:	4b4b      	ldr	r3, [pc, #300]	; (8013c74 <tcp_process+0x2a8>)
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8013b4e:	4b50      	ldr	r3, [pc, #320]	; (8013c90 <tcp_process+0x2c4>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	89db      	ldrh	r3, [r3, #14]
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013b68:	4b43      	ldr	r3, [pc, #268]	; (8013c78 <tcp_process+0x2ac>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	1e5a      	subs	r2, r3, #1
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2204      	movs	r2, #4
 8013b76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	3304      	adds	r3, #4
 8013b80:	4619      	mov	r1, r3
 8013b82:	4610      	mov	r0, r2
 8013b84:	f7ff f8ee 	bl	8012d64 <tcp_eff_send_mss_impl>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b94:	005b      	lsls	r3, r3, #1
 8013b96:	f241 121c 	movw	r2, #4380	; 0x111c
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	bf38      	it	cc
 8013b9e:	461a      	movcc	r2, r3
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	4293      	cmp	r3, r2
 8013ba8:	bf28      	it	cs
 8013baa:	4613      	movcs	r3, r2
 8013bac:	b29a      	uxth	r2, r3
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d106      	bne.n	8013bcc <tcp_process+0x200>
 8013bbe:	4b2f      	ldr	r3, [pc, #188]	; (8013c7c <tcp_process+0x2b0>)
 8013bc0:	f240 321a 	movw	r2, #794	; 0x31a
 8013bc4:	4933      	ldr	r1, [pc, #204]	; (8013c94 <tcp_process+0x2c8>)
 8013bc6:	482f      	ldr	r0, [pc, #188]	; (8013c84 <tcp_process+0x2b8>)
 8013bc8:	f004 f86c 	bl	8017ca4 <iprintf>
      --pcb->snd_queuelen;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013bd2:	3b01      	subs	r3, #1
 8013bd4:	b29a      	uxth	r2, r3
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d111      	bne.n	8013c0c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013bec:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8013bee:	69fb      	ldr	r3, [r7, #28]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d106      	bne.n	8013c02 <tcp_process+0x236>
 8013bf4:	4b21      	ldr	r3, [pc, #132]	; (8013c7c <tcp_process+0x2b0>)
 8013bf6:	f240 3222 	movw	r2, #802	; 0x322
 8013bfa:	4927      	ldr	r1, [pc, #156]	; (8013c98 <tcp_process+0x2cc>)
 8013bfc:	4821      	ldr	r0, [pc, #132]	; (8013c84 <tcp_process+0x2b8>)
 8013bfe:	f004 f851 	bl	8017ca4 <iprintf>
        pcb->unsent = rseg->next;
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	669a      	str	r2, [r3, #104]	; 0x68
 8013c0a:	e003      	b.n	8013c14 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8013c14:	69f8      	ldr	r0, [r7, #28]
 8013c16:	f7fe fd6a 	bl	80126ee <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d104      	bne.n	8013c2c <tcp_process+0x260>
        pcb->rtime = -1;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c28:	861a      	strh	r2, [r3, #48]	; 0x30
 8013c2a:	e006      	b.n	8013c3a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2200      	movs	r2, #0
 8013c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d00a      	beq.n	8013c5a <tcp_process+0x28e>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	6910      	ldr	r0, [r2, #16]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	6879      	ldr	r1, [r7, #4]
 8013c52:	4798      	blx	r3
 8013c54:	4603      	mov	r3, r0
 8013c56:	76bb      	strb	r3, [r7, #26]
 8013c58:	e001      	b.n	8013c5e <tcp_process+0x292>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8013c5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013c62:	f113 0f0d 	cmn.w	r3, #13
 8013c66:	d119      	bne.n	8013c9c <tcp_process+0x2d0>
        return ERR_ABRT;
 8013c68:	f06f 030c 	mvn.w	r3, #12
 8013c6c:	e257      	b.n	801411e <tcp_process+0x752>
 8013c6e:	bf00      	nop
 8013c70:	20019fc8 	.word	0x20019fc8
 8013c74:	20019fc0 	.word	0x20019fc0
 8013c78:	20019fbc 	.word	0x20019fbc
 8013c7c:	0801b4c8 	.word	0x0801b4c8
 8013c80:	0801b69c 	.word	0x0801b69c
 8013c84:	0801b50c 	.word	0x0801b50c
 8013c88:	20019fc9 	.word	0x20019fc9
 8013c8c:	20020bd0 	.word	0x20020bd0
 8013c90:	20019fac 	.word	0x20019fac
 8013c94:	0801b6bc 	.word	0x0801b6bc
 8013c98:	0801b6d4 	.word	0x0801b6d4
      }
      tcp_ack_now(pcb);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	7e9b      	ldrb	r3, [r3, #26]
 8013ca0:	f043 0302 	orr.w	r3, r3, #2
 8013ca4:	b2da      	uxtb	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8013caa:	e22a      	b.n	8014102 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8013cac:	4b9f      	ldr	r3, [pc, #636]	; (8013f2c <tcp_process+0x560>)
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	f003 0310 	and.w	r3, r3, #16
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f000 8224 	beq.w	8014102 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cba:	4b9d      	ldr	r3, [pc, #628]	; (8013f30 <tcp_process+0x564>)
 8013cbc:	6818      	ldr	r0, [r3, #0]
 8013cbe:	4b9d      	ldr	r3, [pc, #628]	; (8013f34 <tcp_process+0x568>)
 8013cc0:	881b      	ldrh	r3, [r3, #0]
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	4b9c      	ldr	r3, [pc, #624]	; (8013f38 <tcp_process+0x56c>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013cca:	4b9c      	ldr	r3, [pc, #624]	; (8013f3c <tcp_process+0x570>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cce:	885b      	ldrh	r3, [r3, #2]
 8013cd0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013cd2:	4a9a      	ldr	r2, [pc, #616]	; (8013f3c <tcp_process+0x570>)
 8013cd4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cd6:	8812      	ldrh	r2, [r2, #0]
 8013cd8:	b292      	uxth	r2, r2
 8013cda:	9201      	str	r2, [sp, #4]
 8013cdc:	9300      	str	r3, [sp, #0]
 8013cde:	4b98      	ldr	r3, [pc, #608]	; (8013f40 <tcp_process+0x574>)
 8013ce0:	4a98      	ldr	r2, [pc, #608]	; (8013f44 <tcp_process+0x578>)
 8013ce2:	f002 fca7 	bl	8016634 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cec:	2b05      	cmp	r3, #5
 8013cee:	f200 8208 	bhi.w	8014102 <tcp_process+0x736>
        pcb->rtime = 0;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f002 fd11 	bl	8016720 <tcp_rexmit_rto>
    break;
 8013cfe:	e200      	b.n	8014102 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8013d00:	4b8a      	ldr	r3, [pc, #552]	; (8013f2c <tcp_process+0x560>)
 8013d02:	781b      	ldrb	r3, [r3, #0]
 8013d04:	f003 0310 	and.w	r3, r3, #16
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	f000 8091 	beq.w	8013e30 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8013d0e:	4b88      	ldr	r3, [pc, #544]	; (8013f30 <tcp_process+0x564>)
 8013d10:	681a      	ldr	r2, [r3, #0]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	3b01      	subs	r3, #1
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	db71      	blt.n	8013e02 <tcp_process+0x436>
 8013d1e:	4b84      	ldr	r3, [pc, #528]	; (8013f30 <tcp_process+0x564>)
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d26:	1ad3      	subs	r3, r2, r3
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	dc6a      	bgt.n	8013e02 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2204      	movs	r2, #4
 8013d30:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d00b      	beq.n	8013d52 <tcp_process+0x386>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d3e:	699b      	ldr	r3, [r3, #24]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d106      	bne.n	8013d52 <tcp_process+0x386>
 8013d44:	4b80      	ldr	r3, [pc, #512]	; (8013f48 <tcp_process+0x57c>)
 8013d46:	f240 3251 	movw	r2, #849	; 0x351
 8013d4a:	4980      	ldr	r1, [pc, #512]	; (8013f4c <tcp_process+0x580>)
 8013d4c:	4880      	ldr	r0, [pc, #512]	; (8013f50 <tcp_process+0x584>)
 8013d4e:	f003 ffa9 	bl	8017ca4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d102      	bne.n	8013d60 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8013d5a:	23fa      	movs	r3, #250	; 0xfa
 8013d5c:	76bb      	strb	r3, [r7, #26]
 8013d5e:	e011      	b.n	8013d84 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d64:	699b      	ldr	r3, [r3, #24]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d00a      	beq.n	8013d80 <tcp_process+0x3b4>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d6e:	699b      	ldr	r3, [r3, #24]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	6910      	ldr	r0, [r2, #16]
 8013d74:	2200      	movs	r2, #0
 8013d76:	6879      	ldr	r1, [r7, #4]
 8013d78:	4798      	blx	r3
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	76bb      	strb	r3, [r7, #26]
 8013d7e:	e001      	b.n	8013d84 <tcp_process+0x3b8>
 8013d80:	23f0      	movs	r3, #240	; 0xf0
 8013d82:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8013d84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d00a      	beq.n	8013da2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8013d8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013d90:	f113 0f0d 	cmn.w	r3, #13
 8013d94:	d002      	beq.n	8013d9c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f7fd fed4 	bl	8011b44 <tcp_abort>
          }
          return ERR_ABRT;
 8013d9c:	f06f 030c 	mvn.w	r3, #12
 8013da0:	e1bd      	b.n	801411e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 fa42 	bl	801422c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8013da8:	4b6a      	ldr	r3, [pc, #424]	; (8013f54 <tcp_process+0x588>)
 8013daa:	881b      	ldrh	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d005      	beq.n	8013dbc <tcp_process+0x3f0>
          recv_acked--;
 8013db0:	4b68      	ldr	r3, [pc, #416]	; (8013f54 <tcp_process+0x588>)
 8013db2:	881b      	ldrh	r3, [r3, #0]
 8013db4:	3b01      	subs	r3, #1
 8013db6:	b29a      	uxth	r2, r3
 8013db8:	4b66      	ldr	r3, [pc, #408]	; (8013f54 <tcp_process+0x588>)
 8013dba:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	f241 121c 	movw	r2, #4380	; 0x111c
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	bf38      	it	cc
 8013dca:	461a      	movcc	r2, r3
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	bf28      	it	cs
 8013dd6:	4613      	movcs	r3, r2
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8013de0:	4b5d      	ldr	r3, [pc, #372]	; (8013f58 <tcp_process+0x58c>)
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	f003 0320 	and.w	r3, r3, #32
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d034      	beq.n	8013e56 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	7e9b      	ldrb	r3, [r3, #26]
 8013df0:	f043 0302 	orr.w	r3, r3, #2
 8013df4:	b2da      	uxtb	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2207      	movs	r2, #7
 8013dfe:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8013e00:	e029      	b.n	8013e56 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e02:	4b4b      	ldr	r3, [pc, #300]	; (8013f30 <tcp_process+0x564>)
 8013e04:	6818      	ldr	r0, [r3, #0]
 8013e06:	4b4b      	ldr	r3, [pc, #300]	; (8013f34 <tcp_process+0x568>)
 8013e08:	881b      	ldrh	r3, [r3, #0]
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	4b4a      	ldr	r3, [pc, #296]	; (8013f38 <tcp_process+0x56c>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e12:	4b4a      	ldr	r3, [pc, #296]	; (8013f3c <tcp_process+0x570>)
 8013e14:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e16:	885b      	ldrh	r3, [r3, #2]
 8013e18:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e1a:	4a48      	ldr	r2, [pc, #288]	; (8013f3c <tcp_process+0x570>)
 8013e1c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e1e:	8812      	ldrh	r2, [r2, #0]
 8013e20:	b292      	uxth	r2, r2
 8013e22:	9201      	str	r2, [sp, #4]
 8013e24:	9300      	str	r3, [sp, #0]
 8013e26:	4b46      	ldr	r3, [pc, #280]	; (8013f40 <tcp_process+0x574>)
 8013e28:	4a46      	ldr	r2, [pc, #280]	; (8013f44 <tcp_process+0x578>)
 8013e2a:	f002 fc03 	bl	8016634 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8013e2e:	e16a      	b.n	8014106 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013e30:	4b3e      	ldr	r3, [pc, #248]	; (8013f2c <tcp_process+0x560>)
 8013e32:	781b      	ldrb	r3, [r3, #0]
 8013e34:	f003 0302 	and.w	r3, r3, #2
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f000 8164 	beq.w	8014106 <tcp_process+0x73a>
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e42:	1e5a      	subs	r2, r3, #1
 8013e44:	4b3c      	ldr	r3, [pc, #240]	; (8013f38 <tcp_process+0x56c>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	f040 815c 	bne.w	8014106 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f002 fc9c 	bl	801678c <tcp_rexmit>
    break;
 8013e54:	e157      	b.n	8014106 <tcp_process+0x73a>
 8013e56:	e156      	b.n	8014106 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f000 f9e7 	bl	801422c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013e5e:	4b3e      	ldr	r3, [pc, #248]	; (8013f58 <tcp_process+0x58c>)
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	f003 0320 	and.w	r3, r3, #32
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	f000 814f 	beq.w	801410a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	7e9b      	ldrb	r3, [r3, #26]
 8013e70:	f043 0302 	orr.w	r3, r3, #2
 8013e74:	b2da      	uxtb	r2, r3
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2207      	movs	r2, #7
 8013e7e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8013e80:	e143      	b.n	801410a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 f9d2 	bl	801422c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013e88:	4b33      	ldr	r3, [pc, #204]	; (8013f58 <tcp_process+0x58c>)
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	f003 0320 	and.w	r3, r3, #32
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d074      	beq.n	8013f7e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013e94:	4b25      	ldr	r3, [pc, #148]	; (8013f2c <tcp_process+0x560>)
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	f003 0310 	and.w	r3, r3, #16
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d063      	beq.n	8013f68 <tcp_process+0x59c>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ea4:	4b22      	ldr	r3, [pc, #136]	; (8013f30 <tcp_process+0x564>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d15d      	bne.n	8013f68 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d159      	bne.n	8013f68 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	7e9b      	ldrb	r3, [r3, #26]
 8013eb8:	f043 0302 	orr.w	r3, r3, #2
 8013ebc:	b2da      	uxtb	r2, r3
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f7fe fe6a 	bl	8012b9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013ec8:	4b24      	ldr	r3, [pc, #144]	; (8013f5c <tcp_process+0x590>)
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d105      	bne.n	8013ede <tcp_process+0x512>
 8013ed2:	4b22      	ldr	r3, [pc, #136]	; (8013f5c <tcp_process+0x590>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	68db      	ldr	r3, [r3, #12]
 8013ed8:	4a20      	ldr	r2, [pc, #128]	; (8013f5c <tcp_process+0x590>)
 8013eda:	6013      	str	r3, [r2, #0]
 8013edc:	e013      	b.n	8013f06 <tcp_process+0x53a>
 8013ede:	4b1f      	ldr	r3, [pc, #124]	; (8013f5c <tcp_process+0x590>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	617b      	str	r3, [r7, #20]
 8013ee4:	e00c      	b.n	8013f00 <tcp_process+0x534>
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	68da      	ldr	r2, [r3, #12]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d104      	bne.n	8013efa <tcp_process+0x52e>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	68da      	ldr	r2, [r3, #12]
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	60da      	str	r2, [r3, #12]
 8013ef8:	e005      	b.n	8013f06 <tcp_process+0x53a>
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	68db      	ldr	r3, [r3, #12]
 8013efe:	617b      	str	r3, [r7, #20]
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d1ef      	bne.n	8013ee6 <tcp_process+0x51a>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	60da      	str	r2, [r3, #12]
 8013f0c:	4b14      	ldr	r3, [pc, #80]	; (8013f60 <tcp_process+0x594>)
 8013f0e:	2201      	movs	r2, #1
 8013f10:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	220a      	movs	r2, #10
 8013f16:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013f18:	4b12      	ldr	r3, [pc, #72]	; (8013f64 <tcp_process+0x598>)
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	60da      	str	r2, [r3, #12]
 8013f20:	4a10      	ldr	r2, [pc, #64]	; (8013f64 <tcp_process+0x598>)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6013      	str	r3, [r2, #0]
 8013f26:	f002 fdd5 	bl	8016ad4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8013f2a:	e0f0      	b.n	801410e <tcp_process+0x742>
 8013f2c:	20019fc8 	.word	0x20019fc8
 8013f30:	20019fc0 	.word	0x20019fc0
 8013f34:	20019fc6 	.word	0x20019fc6
 8013f38:	20019fbc 	.word	0x20019fbc
 8013f3c:	20019fac 	.word	0x20019fac
 8013f40:	2001d27c 	.word	0x2001d27c
 8013f44:	2001d280 	.word	0x2001d280
 8013f48:	0801b4c8 	.word	0x0801b4c8
 8013f4c:	0801b6e8 	.word	0x0801b6e8
 8013f50:	0801b50c 	.word	0x0801b50c
 8013f54:	20019fc4 	.word	0x20019fc4
 8013f58:	20019fc9 	.word	0x20019fc9
 8013f5c:	20020bcc 	.word	0x20020bcc
 8013f60:	20020bc8 	.word	0x20020bc8
 8013f64:	20020bdc 	.word	0x20020bdc
        tcp_ack_now(pcb);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	7e9b      	ldrb	r3, [r3, #26]
 8013f6c:	f043 0302 	orr.w	r3, r3, #2
 8013f70:	b2da      	uxtb	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2208      	movs	r2, #8
 8013f7a:	751a      	strb	r2, [r3, #20]
    break;
 8013f7c:	e0c7      	b.n	801410e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f7e:	4b6a      	ldr	r3, [pc, #424]	; (8014128 <tcp_process+0x75c>)
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	f003 0310 	and.w	r3, r3, #16
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f000 80c1 	beq.w	801410e <tcp_process+0x742>
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013f90:	4b66      	ldr	r3, [pc, #408]	; (801412c <tcp_process+0x760>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	429a      	cmp	r2, r3
 8013f96:	f040 80ba 	bne.w	801410e <tcp_process+0x742>
               pcb->unsent == NULL) {
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	f040 80b5 	bne.w	801410e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2206      	movs	r2, #6
 8013fa8:	751a      	strb	r2, [r3, #20]
    break;
 8013faa:	e0b0      	b.n	801410e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f000 f93d 	bl	801422c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013fb2:	4b5f      	ldr	r3, [pc, #380]	; (8014130 <tcp_process+0x764>)
 8013fb4:	781b      	ldrb	r3, [r3, #0]
 8013fb6:	f003 0320 	and.w	r3, r3, #32
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f000 80a9 	beq.w	8014112 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	7e9b      	ldrb	r3, [r3, #26]
 8013fc4:	f043 0302 	orr.w	r3, r3, #2
 8013fc8:	b2da      	uxtb	r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f7fe fde4 	bl	8012b9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013fd4:	4b57      	ldr	r3, [pc, #348]	; (8014134 <tcp_process+0x768>)
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d105      	bne.n	8013fea <tcp_process+0x61e>
 8013fde:	4b55      	ldr	r3, [pc, #340]	; (8014134 <tcp_process+0x768>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	4a53      	ldr	r2, [pc, #332]	; (8014134 <tcp_process+0x768>)
 8013fe6:	6013      	str	r3, [r2, #0]
 8013fe8:	e013      	b.n	8014012 <tcp_process+0x646>
 8013fea:	4b52      	ldr	r3, [pc, #328]	; (8014134 <tcp_process+0x768>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	613b      	str	r3, [r7, #16]
 8013ff0:	e00c      	b.n	801400c <tcp_process+0x640>
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	68da      	ldr	r2, [r3, #12]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d104      	bne.n	8014006 <tcp_process+0x63a>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	68da      	ldr	r2, [r3, #12]
 8014000:	693b      	ldr	r3, [r7, #16]
 8014002:	60da      	str	r2, [r3, #12]
 8014004:	e005      	b.n	8014012 <tcp_process+0x646>
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	613b      	str	r3, [r7, #16]
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d1ef      	bne.n	8013ff2 <tcp_process+0x626>
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2200      	movs	r2, #0
 8014016:	60da      	str	r2, [r3, #12]
 8014018:	4b47      	ldr	r3, [pc, #284]	; (8014138 <tcp_process+0x76c>)
 801401a:	2201      	movs	r2, #1
 801401c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	220a      	movs	r2, #10
 8014022:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8014024:	4b45      	ldr	r3, [pc, #276]	; (801413c <tcp_process+0x770>)
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	60da      	str	r2, [r3, #12]
 801402c:	4a43      	ldr	r2, [pc, #268]	; (801413c <tcp_process+0x770>)
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6013      	str	r3, [r2, #0]
 8014032:	f002 fd4f 	bl	8016ad4 <tcp_timer_needed>
    }
    break;
 8014036:	e06c      	b.n	8014112 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 f8f7 	bl	801422c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801403e:	4b3a      	ldr	r3, [pc, #232]	; (8014128 <tcp_process+0x75c>)
 8014040:	781b      	ldrb	r3, [r3, #0]
 8014042:	f003 0310 	and.w	r3, r3, #16
 8014046:	2b00      	cmp	r3, #0
 8014048:	d065      	beq.n	8014116 <tcp_process+0x74a>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801404e:	4b37      	ldr	r3, [pc, #220]	; (801412c <tcp_process+0x760>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	429a      	cmp	r2, r3
 8014054:	d15f      	bne.n	8014116 <tcp_process+0x74a>
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801405a:	2b00      	cmp	r3, #0
 801405c:	d15b      	bne.n	8014116 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7fe fd9c 	bl	8012b9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014064:	4b33      	ldr	r3, [pc, #204]	; (8014134 <tcp_process+0x768>)
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	429a      	cmp	r2, r3
 801406c:	d105      	bne.n	801407a <tcp_process+0x6ae>
 801406e:	4b31      	ldr	r3, [pc, #196]	; (8014134 <tcp_process+0x768>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	4a2f      	ldr	r2, [pc, #188]	; (8014134 <tcp_process+0x768>)
 8014076:	6013      	str	r3, [r2, #0]
 8014078:	e013      	b.n	80140a2 <tcp_process+0x6d6>
 801407a:	4b2e      	ldr	r3, [pc, #184]	; (8014134 <tcp_process+0x768>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	60fb      	str	r3, [r7, #12]
 8014080:	e00c      	b.n	801409c <tcp_process+0x6d0>
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	68da      	ldr	r2, [r3, #12]
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	429a      	cmp	r2, r3
 801408a:	d104      	bne.n	8014096 <tcp_process+0x6ca>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	68da      	ldr	r2, [r3, #12]
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	60da      	str	r2, [r3, #12]
 8014094:	e005      	b.n	80140a2 <tcp_process+0x6d6>
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	60fb      	str	r3, [r7, #12]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d1ef      	bne.n	8014082 <tcp_process+0x6b6>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2200      	movs	r2, #0
 80140a6:	60da      	str	r2, [r3, #12]
 80140a8:	4b23      	ldr	r3, [pc, #140]	; (8014138 <tcp_process+0x76c>)
 80140aa:	2201      	movs	r2, #1
 80140ac:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	220a      	movs	r2, #10
 80140b2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80140b4:	4b21      	ldr	r3, [pc, #132]	; (801413c <tcp_process+0x770>)
 80140b6:	681a      	ldr	r2, [r3, #0]
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	60da      	str	r2, [r3, #12]
 80140bc:	4a1f      	ldr	r2, [pc, #124]	; (801413c <tcp_process+0x770>)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6013      	str	r3, [r2, #0]
 80140c2:	f002 fd07 	bl	8016ad4 <tcp_timer_needed>
    }
    break;
 80140c6:	e026      	b.n	8014116 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f000 f8af 	bl	801422c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80140ce:	4b16      	ldr	r3, [pc, #88]	; (8014128 <tcp_process+0x75c>)
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	f003 0310 	and.w	r3, r3, #16
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d01f      	beq.n	801411a <tcp_process+0x74e>
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80140de:	4b13      	ldr	r3, [pc, #76]	; (801412c <tcp_process+0x760>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d119      	bne.n	801411a <tcp_process+0x74e>
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d115      	bne.n	801411a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80140ee:	4b10      	ldr	r3, [pc, #64]	; (8014130 <tcp_process+0x764>)
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	f043 0310 	orr.w	r3, r3, #16
 80140f6:	b2da      	uxtb	r2, r3
 80140f8:	4b0d      	ldr	r3, [pc, #52]	; (8014130 <tcp_process+0x764>)
 80140fa:	701a      	strb	r2, [r3, #0]
    }
    break;
 80140fc:	e00d      	b.n	801411a <tcp_process+0x74e>
  default:
    break;
 80140fe:	bf00      	nop
 8014100:	e00c      	b.n	801411c <tcp_process+0x750>
    break;
 8014102:	bf00      	nop
 8014104:	e00a      	b.n	801411c <tcp_process+0x750>
    break;
 8014106:	bf00      	nop
 8014108:	e008      	b.n	801411c <tcp_process+0x750>
    break;
 801410a:	bf00      	nop
 801410c:	e006      	b.n	801411c <tcp_process+0x750>
    break;
 801410e:	bf00      	nop
 8014110:	e004      	b.n	801411c <tcp_process+0x750>
    break;
 8014112:	bf00      	nop
 8014114:	e002      	b.n	801411c <tcp_process+0x750>
    break;
 8014116:	bf00      	nop
 8014118:	e000      	b.n	801411c <tcp_process+0x750>
    break;
 801411a:	bf00      	nop
  }
  return ERR_OK;
 801411c:	2300      	movs	r3, #0
}
 801411e:	4618      	mov	r0, r3
 8014120:	3720      	adds	r7, #32
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	20019fc8 	.word	0x20019fc8
 801412c:	20019fc0 	.word	0x20019fc0
 8014130:	20019fc9 	.word	0x20019fc9
 8014134:	20020bcc 	.word	0x20020bcc
 8014138:	20020bc8 	.word	0x20020bc8
 801413c:	20020bdc 	.word	0x20020bdc

08014140 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014140:	b5b0      	push	{r4, r5, r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	68db      	ldr	r3, [r3, #12]
 801414e:	899b      	ldrh	r3, [r3, #12]
 8014150:	b29b      	uxth	r3, r3
 8014152:	4618      	mov	r0, r3
 8014154:	f7f6 fda4 	bl	800aca0 <lwip_htons>
 8014158:	4603      	mov	r3, r0
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d026      	beq.n	80141b0 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014162:	6838      	ldr	r0, [r7, #0]
 8014164:	f7fe faaf 	bl	80126c6 <tcp_segs_free>
    next = NULL;
 8014168:	2300      	movs	r3, #0
 801416a:	603b      	str	r3, [r7, #0]
 801416c:	e054      	b.n	8014218 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	899b      	ldrh	r3, [r3, #12]
 8014174:	b29b      	uxth	r3, r3
 8014176:	4618      	mov	r0, r3
 8014178:	f7f6 fd92 	bl	800aca0 <lwip_htons>
 801417c:	4603      	mov	r3, r0
 801417e:	f003 0301 	and.w	r3, r3, #1
 8014182:	2b00      	cmp	r3, #0
 8014184:	d00c      	beq.n	80141a0 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	68dc      	ldr	r4, [r3, #12]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	68db      	ldr	r3, [r3, #12]
 801418e:	899b      	ldrh	r3, [r3, #12]
 8014190:	b29d      	uxth	r5, r3
 8014192:	2001      	movs	r0, #1
 8014194:	f7f6 fd84 	bl	800aca0 <lwip_htons>
 8014198:	4603      	mov	r3, r0
 801419a:	432b      	orrs	r3, r5
 801419c:	b29b      	uxth	r3, r3
 801419e:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80141aa:	68f8      	ldr	r0, [r7, #12]
 80141ac:	f7fe fa9f 	bl	80126ee <tcp_seg_free>
    while (next &&
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d00e      	beq.n	80141d4 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	891b      	ldrh	r3, [r3, #8]
 80141ba:	461a      	mov	r2, r3
 80141bc:	4b1a      	ldr	r3, [pc, #104]	; (8014228 <tcp_oos_insert_segment+0xe8>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	441a      	add	r2, r3
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	6839      	ldr	r1, [r7, #0]
 80141ca:	8909      	ldrh	r1, [r1, #8]
 80141cc:	440b      	add	r3, r1
 80141ce:	1ad3      	subs	r3, r2, r3
    while (next &&
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	dacc      	bge.n	801416e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d01e      	beq.n	8014218 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	891b      	ldrh	r3, [r3, #8]
 80141de:	461a      	mov	r2, r3
 80141e0:	4b11      	ldr	r3, [pc, #68]	; (8014228 <tcp_oos_insert_segment+0xe8>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	441a      	add	r2, r3
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	68db      	ldr	r3, [r3, #12]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	1ad3      	subs	r3, r2, r3
    if (next &&
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	dd12      	ble.n	8014218 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	4b0b      	ldr	r3, [pc, #44]	; (8014228 <tcp_oos_insert_segment+0xe8>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	685a      	ldr	r2, [r3, #4]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	891b      	ldrh	r3, [r3, #8]
 8014210:	4619      	mov	r1, r3
 8014212:	4610      	mov	r0, r2
 8014214:	f7fc fc86 	bl	8010b24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	683a      	ldr	r2, [r7, #0]
 801421c:	601a      	str	r2, [r3, #0]
}
 801421e:	bf00      	nop
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bdb0      	pop	{r4, r5, r7, pc}
 8014226:	bf00      	nop
 8014228:	20019fbc 	.word	0x20019fbc

0801422c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801422c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801422e:	b08d      	sub	sp, #52	; 0x34
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8014234:	2300      	movs	r3, #0
 8014236:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	7d1b      	ldrb	r3, [r3, #20]
 801423c:	2b03      	cmp	r3, #3
 801423e:	d806      	bhi.n	801424e <tcp_receive+0x22>
 8014240:	4b9a      	ldr	r3, [pc, #616]	; (80144ac <tcp_receive+0x280>)
 8014242:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8014246:	499a      	ldr	r1, [pc, #616]	; (80144b0 <tcp_receive+0x284>)
 8014248:	489a      	ldr	r0, [pc, #616]	; (80144b4 <tcp_receive+0x288>)
 801424a:	f003 fd2b 	bl	8017ca4 <iprintf>

  if (flags & TCP_ACK) {
 801424e:	4b9a      	ldr	r3, [pc, #616]	; (80144b8 <tcp_receive+0x28c>)
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	f003 0310 	and.w	r3, r3, #16
 8014256:	2b00      	cmp	r3, #0
 8014258:	f000 82c5 	beq.w	80147e6 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014262:	461a      	mov	r2, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014268:	4413      	add	r3, r2
 801426a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014270:	4b92      	ldr	r3, [pc, #584]	; (80144bc <tcp_receive+0x290>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	1ad3      	subs	r3, r2, r3
 8014276:	2b00      	cmp	r3, #0
 8014278:	db1b      	blt.n	80142b2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801427e:	4b8f      	ldr	r3, [pc, #572]	; (80144bc <tcp_receive+0x290>)
 8014280:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014282:	429a      	cmp	r2, r3
 8014284:	d106      	bne.n	8014294 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801428a:	4b8d      	ldr	r3, [pc, #564]	; (80144c0 <tcp_receive+0x294>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	1ad3      	subs	r3, r2, r3
 8014290:	2b00      	cmp	r3, #0
 8014292:	db0e      	blt.n	80142b2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014298:	4b89      	ldr	r3, [pc, #548]	; (80144c0 <tcp_receive+0x294>)
 801429a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801429c:	429a      	cmp	r2, r3
 801429e:	d141      	bne.n	8014324 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80142a0:	4b88      	ldr	r3, [pc, #544]	; (80144c4 <tcp_receive+0x298>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	89db      	ldrh	r3, [r3, #14]
 80142a6:	b29a      	uxth	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d938      	bls.n	8014324 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80142b2:	4b84      	ldr	r3, [pc, #528]	; (80144c4 <tcp_receive+0x298>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	89db      	ldrh	r3, [r3, #14]
 80142b8:	b29a      	uxth	r2, r3
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d205      	bcs.n	80142dc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80142dc:	4b77      	ldr	r3, [pc, #476]	; (80144bc <tcp_receive+0x290>)
 80142de:	681a      	ldr	r2, [r3, #0]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80142e4:	4b76      	ldr	r3, [pc, #472]	; (80144c0 <tcp_receive+0x294>)
 80142e6:	681a      	ldr	r2, [r3, #0]
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d10d      	bne.n	8014312 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d111      	bne.n	8014324 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2201      	movs	r2, #1
 801430c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8014310:	e008      	b.n	8014324 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8014318:	2b00      	cmp	r3, #0
 801431a:	d003      	beq.n	8014324 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2200      	movs	r2, #0
 8014320:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014324:	4b66      	ldr	r3, [pc, #408]	; (80144c0 <tcp_receive+0x294>)
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801432c:	1ad3      	subs	r3, r2, r3
 801432e:	2b00      	cmp	r3, #0
 8014330:	dc58      	bgt.n	80143e4 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 8014332:	4b65      	ldr	r3, [pc, #404]	; (80144c8 <tcp_receive+0x29c>)
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d14b      	bne.n	80143d2 <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801433e:	687a      	ldr	r2, [r7, #4]
 8014340:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8014344:	441a      	add	r2, r3
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	429a      	cmp	r2, r3
 801434a:	d142      	bne.n	80143d2 <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014352:	2b00      	cmp	r3, #0
 8014354:	db3d      	blt.n	80143d2 <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801435a:	4b59      	ldr	r3, [pc, #356]	; (80144c0 <tcp_receive+0x294>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	429a      	cmp	r2, r3
 8014360:	d137      	bne.n	80143d2 <tcp_receive+0x1a6>
              found_dupack = 1;
 8014362:	2301      	movs	r3, #1
 8014364:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801436c:	3301      	adds	r3, #1
 801436e:	b2da      	uxtb	r2, r3
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014376:	429a      	cmp	r2, r3
 8014378:	d907      	bls.n	801438a <tcp_receive+0x15e>
                ++pcb->dupacks;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014380:	3301      	adds	r3, #1
 8014382:	b2da      	uxtb	r2, r3
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014390:	2b03      	cmp	r3, #3
 8014392:	d916      	bls.n	80143c2 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801439e:	4413      	add	r3, r2
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d912      	bls.n	80143d2 <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143b6:	4413      	add	r3, r2
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80143c0:	e007      	b.n	80143d2 <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80143c8:	2b03      	cmp	r3, #3
 80143ca:	d102      	bne.n	80143d2 <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f002 fa2d 	bl	801682c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	f040 8169 	bne.w	80146ac <tcp_receive+0x480>
        pcb->dupacks = 0;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2200      	movs	r2, #0
 80143de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80143e2:	e163      	b.n	80146ac <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80143e4:	4b36      	ldr	r3, [pc, #216]	; (80144c0 <tcp_receive+0x294>)
 80143e6:	681a      	ldr	r2, [r3, #0]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ec:	1ad3      	subs	r3, r2, r3
 80143ee:	3b01      	subs	r3, #1
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	f2c0 8107 	blt.w	8014604 <tcp_receive+0x3d8>
 80143f6:	4b32      	ldr	r3, [pc, #200]	; (80144c0 <tcp_receive+0x294>)
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143fe:	1ad3      	subs	r3, r2, r3
 8014400:	2b00      	cmp	r3, #0
 8014402:	f300 80ff 	bgt.w	8014604 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	7e9b      	ldrb	r3, [r3, #26]
 801440a:	f003 0304 	and.w	r3, r3, #4
 801440e:	2b00      	cmp	r3, #0
 8014410:	d00c      	beq.n	801442c <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	7e9b      	ldrb	r3, [r3, #26]
 8014416:	f023 0304 	bic.w	r3, r3, #4
 801441a:	b2da      	uxtb	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2200      	movs	r2, #0
 8014430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801443a:	10db      	asrs	r3, r3, #3
 801443c:	b21b      	sxth	r3, r3
 801443e:	b29a      	uxth	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014446:	b29b      	uxth	r3, r3
 8014448:	4413      	add	r3, r2
 801444a:	b29b      	uxth	r3, r3
 801444c:	b21a      	sxth	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801445c:	4b18      	ldr	r3, [pc, #96]	; (80144c0 <tcp_receive+0x294>)
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	7d1b      	ldrb	r3, [r3, #20]
 8014468:	2b03      	cmp	r3, #3
 801446a:	f240 8094 	bls.w	8014596 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801447a:	429a      	cmp	r2, r3
 801447c:	d226      	bcs.n	80144cc <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014488:	4413      	add	r3, r2
 801448a:	b29a      	uxth	r2, r3
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014492:	429a      	cmp	r2, r3
 8014494:	d97f      	bls.n	8014596 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144a0:	4413      	add	r3, r2
 80144a2:	b29a      	uxth	r2, r3
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80144aa:	e074      	b.n	8014596 <tcp_receive+0x36a>
 80144ac:	0801b4c8 	.word	0x0801b4c8
 80144b0:	0801b708 	.word	0x0801b708
 80144b4:	0801b50c 	.word	0x0801b50c
 80144b8:	20019fc8 	.word	0x20019fc8
 80144bc:	20019fbc 	.word	0x20019fbc
 80144c0:	20019fc0 	.word	0x20019fc0
 80144c4:	20019fac 	.word	0x20019fac
 80144c8:	20019fc6 	.word	0x20019fc6
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144d6:	4619      	mov	r1, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144dc:	fb03 f301 	mul.w	r3, r3, r1
 80144e0:	6879      	ldr	r1, [r7, #4]
 80144e2:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80144e6:	fb93 f3f1 	sdiv	r3, r3, r1
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	4413      	add	r3, r2
 80144ee:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80144f6:	8a7a      	ldrh	r2, [r7, #18]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d94c      	bls.n	8014596 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	8a7a      	ldrh	r2, [r7, #18]
 8014500:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8014504:	e047      	b.n	8014596 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801450a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014510:	681a      	ldr	r2, [r3, #0]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 801451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	4618      	mov	r0, r3
 8014522:	f7fc fd0d 	bl	8010f40 <pbuf_clen>
 8014526:	4603      	mov	r3, r0
 8014528:	429c      	cmp	r4, r3
 801452a:	d206      	bcs.n	801453a <tcp_receive+0x30e>
 801452c:	4b70      	ldr	r3, [pc, #448]	; (80146f0 <tcp_receive+0x4c4>)
 801452e:	f240 429e 	movw	r2, #1182	; 0x49e
 8014532:	4970      	ldr	r1, [pc, #448]	; (80146f4 <tcp_receive+0x4c8>)
 8014534:	4870      	ldr	r0, [pc, #448]	; (80146f8 <tcp_receive+0x4cc>)
 8014536:	f003 fbb5 	bl	8017ca4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 801453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	4618      	mov	r0, r3
 8014540:	f7fc fcfe 	bl	8010f40 <pbuf_clen>
 8014544:	4603      	mov	r3, r0
 8014546:	461a      	mov	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801454e:	1a9b      	subs	r3, r3, r2
 8014550:	b29a      	uxth	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8014558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455a:	891a      	ldrh	r2, [r3, #8]
 801455c:	4b67      	ldr	r3, [pc, #412]	; (80146fc <tcp_receive+0x4d0>)
 801455e:	881b      	ldrh	r3, [r3, #0]
 8014560:	4413      	add	r3, r2
 8014562:	b29a      	uxth	r2, r3
 8014564:	4b65      	ldr	r3, [pc, #404]	; (80146fc <tcp_receive+0x4d0>)
 8014566:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8014568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801456a:	f7fe f8c0 	bl	80126ee <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014574:	2b00      	cmp	r3, #0
 8014576:	d00e      	beq.n	8014596 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801457c:	2b00      	cmp	r3, #0
 801457e:	d10a      	bne.n	8014596 <tcp_receive+0x36a>
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014584:	2b00      	cmp	r3, #0
 8014586:	d106      	bne.n	8014596 <tcp_receive+0x36a>
 8014588:	4b59      	ldr	r3, [pc, #356]	; (80146f0 <tcp_receive+0x4c4>)
 801458a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 801458e:	495c      	ldr	r1, [pc, #368]	; (8014700 <tcp_receive+0x4d4>)
 8014590:	4859      	ldr	r0, [pc, #356]	; (80146f8 <tcp_receive+0x4cc>)
 8014592:	f003 fb87 	bl	8017ca4 <iprintf>
      while (pcb->unacked != NULL &&
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801459a:	2b00      	cmp	r3, #0
 801459c:	d022      	beq.n	80145e4 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7f6 fb88 	bl	800acbc <lwip_htonl>
 80145ac:	4604      	mov	r4, r0
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145b2:	891b      	ldrh	r3, [r3, #8]
 80145b4:	461d      	mov	r5, r3
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	899b      	ldrh	r3, [r3, #12]
 80145be:	b29b      	uxth	r3, r3
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7f6 fb6d 	bl	800aca0 <lwip_htons>
 80145c6:	4603      	mov	r3, r0
 80145c8:	f003 0303 	and.w	r3, r3, #3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d001      	beq.n	80145d4 <tcp_receive+0x3a8>
 80145d0:	2301      	movs	r3, #1
 80145d2:	e000      	b.n	80145d6 <tcp_receive+0x3aa>
 80145d4:	2300      	movs	r3, #0
 80145d6:	442b      	add	r3, r5
 80145d8:	18e2      	adds	r2, r4, r3
 80145da:	4b4a      	ldr	r3, [pc, #296]	; (8014704 <tcp_receive+0x4d8>)
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	dd90      	ble.n	8014506 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d104      	bne.n	80145f6 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145f2:	861a      	strh	r2, [r3, #48]	; 0x30
 80145f4:	e002      	b.n	80145fc <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2200      	movs	r2, #0
 80145fa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2200      	movs	r2, #0
 8014600:	76da      	strb	r2, [r3, #27]
 8014602:	e002      	b.n	801460a <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f001 fd31 	bl	801606c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 801460a:	e04f      	b.n	80146ac <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014610:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014616:	681a      	ldr	r2, [r3, #0]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014620:	2b00      	cmp	r3, #0
 8014622:	d103      	bne.n	801462c <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2200      	movs	r2, #0
 8014628:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8014632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	4618      	mov	r0, r3
 8014638:	f7fc fc82 	bl	8010f40 <pbuf_clen>
 801463c:	4603      	mov	r3, r0
 801463e:	429c      	cmp	r4, r3
 8014640:	d206      	bcs.n	8014650 <tcp_receive+0x424>
 8014642:	4b2b      	ldr	r3, [pc, #172]	; (80146f0 <tcp_receive+0x4c4>)
 8014644:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8014648:	492a      	ldr	r1, [pc, #168]	; (80146f4 <tcp_receive+0x4c8>)
 801464a:	482b      	ldr	r0, [pc, #172]	; (80146f8 <tcp_receive+0x4cc>)
 801464c:	f003 fb2a 	bl	8017ca4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8014650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014652:	685b      	ldr	r3, [r3, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	f7fc fc73 	bl	8010f40 <pbuf_clen>
 801465a:	4603      	mov	r3, r0
 801465c:	461a      	mov	r2, r3
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014664:	1a9b      	subs	r3, r3, r2
 8014666:	b29a      	uxth	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 801466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014670:	891a      	ldrh	r2, [r3, #8]
 8014672:	4b22      	ldr	r3, [pc, #136]	; (80146fc <tcp_receive+0x4d0>)
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	4413      	add	r3, r2
 8014678:	b29a      	uxth	r2, r3
 801467a:	4b20      	ldr	r3, [pc, #128]	; (80146fc <tcp_receive+0x4d0>)
 801467c:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 801467e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014680:	f7fe f835 	bl	80126ee <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801468a:	2b00      	cmp	r3, #0
 801468c:	d00e      	beq.n	80146ac <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014692:	2b00      	cmp	r3, #0
 8014694:	d10a      	bne.n	80146ac <tcp_receive+0x480>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801469a:	2b00      	cmp	r3, #0
 801469c:	d106      	bne.n	80146ac <tcp_receive+0x480>
 801469e:	4b14      	ldr	r3, [pc, #80]	; (80146f0 <tcp_receive+0x4c4>)
 80146a0:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80146a4:	4916      	ldr	r1, [pc, #88]	; (8014700 <tcp_receive+0x4d4>)
 80146a6:	4814      	ldr	r0, [pc, #80]	; (80146f8 <tcp_receive+0x4cc>)
 80146a8:	f003 fafc 	bl	8017ca4 <iprintf>
    while (pcb->unsent != NULL &&
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d037      	beq.n	8014724 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80146b4:	4b13      	ldr	r3, [pc, #76]	; (8014704 <tcp_receive+0x4d8>)
 80146b6:	681c      	ldr	r4, [r3, #0]
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7f6 fafb 	bl	800acbc <lwip_htonl>
 80146c6:	4605      	mov	r5, r0
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146cc:	891b      	ldrh	r3, [r3, #8]
 80146ce:	461e      	mov	r6, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	899b      	ldrh	r3, [r3, #12]
 80146d8:	b29b      	uxth	r3, r3
 80146da:	4618      	mov	r0, r3
 80146dc:	f7f6 fae0 	bl	800aca0 <lwip_htons>
 80146e0:	4603      	mov	r3, r0
 80146e2:	f003 0303 	and.w	r3, r3, #3
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d00e      	beq.n	8014708 <tcp_receive+0x4dc>
 80146ea:	2301      	movs	r3, #1
 80146ec:	e00d      	b.n	801470a <tcp_receive+0x4de>
 80146ee:	bf00      	nop
 80146f0:	0801b4c8 	.word	0x0801b4c8
 80146f4:	0801b724 	.word	0x0801b724
 80146f8:	0801b50c 	.word	0x0801b50c
 80146fc:	20019fc4 	.word	0x20019fc4
 8014700:	0801b74c 	.word	0x0801b74c
 8014704:	20019fc0 	.word	0x20019fc0
 8014708:	2300      	movs	r3, #0
 801470a:	4433      	add	r3, r6
 801470c:	442b      	add	r3, r5
 801470e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8014710:	2b00      	cmp	r3, #0
 8014712:	db07      	blt.n	8014724 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014714:	4b8d      	ldr	r3, [pc, #564]	; (801494c <tcp_receive+0x720>)
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801471c:	1ad3      	subs	r3, r2, r3
 801471e:	2b00      	cmp	r3, #0
 8014720:	f77f af74 	ble.w	801460c <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801472a:	4b89      	ldr	r3, [pc, #548]	; (8014950 <tcp_receive+0x724>)
 801472c:	881b      	ldrh	r3, [r3, #0]
 801472e:	4413      	add	r3, r2
 8014730:	b29a      	uxth	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801473c:	2b00      	cmp	r3, #0
 801473e:	d052      	beq.n	80147e6 <tcp_receive+0x5ba>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014744:	4b81      	ldr	r3, [pc, #516]	; (801494c <tcp_receive+0x720>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	1ad3      	subs	r3, r2, r3
 801474a:	2b00      	cmp	r3, #0
 801474c:	da4b      	bge.n	80147e6 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801474e:	4b81      	ldr	r3, [pc, #516]	; (8014954 <tcp_receive+0x728>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	b29a      	uxth	r2, r3
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014758:	b29b      	uxth	r3, r3
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	b29b      	uxth	r3, r3
 801475e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8014760:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014768:	10db      	asrs	r3, r3, #3
 801476a:	b21b      	sxth	r3, r3
 801476c:	b29b      	uxth	r3, r3
 801476e:	1ad3      	subs	r3, r2, r3
 8014770:	b29b      	uxth	r3, r3
 8014772:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801477a:	b29a      	uxth	r2, r3
 801477c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801477e:	4413      	add	r3, r2
 8014780:	b29b      	uxth	r3, r3
 8014782:	b21a      	sxth	r2, r3
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014788:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801478c:	2b00      	cmp	r3, #0
 801478e:	da03      	bge.n	8014798 <tcp_receive+0x56c>
        m = -m;
 8014790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014792:	425b      	negs	r3, r3
 8014794:	b29b      	uxth	r3, r3
 8014796:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8014798:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147a0:	109b      	asrs	r3, r3, #2
 80147a2:	b21b      	sxth	r3, r3
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147b2:	b29a      	uxth	r2, r3
 80147b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147b6:	4413      	add	r3, r2
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	b21a      	sxth	r2, r3
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80147c6:	10db      	asrs	r3, r3, #3
 80147c8:	b21b      	sxth	r3, r3
 80147ca:	b29a      	uxth	r2, r3
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	4413      	add	r3, r2
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	b21a      	sxth	r2, r3
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2200      	movs	r2, #0
 80147e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80147e6:	4b5c      	ldr	r3, [pc, #368]	; (8014958 <tcp_receive+0x72c>)
 80147e8:	881b      	ldrh	r3, [r3, #0]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f000 84ee 	beq.w	80151cc <tcp_receive+0xfa0>
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	7d1b      	ldrb	r3, [r3, #20]
 80147f4:	2b06      	cmp	r3, #6
 80147f6:	f200 84e9 	bhi.w	80151cc <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147fe:	4b57      	ldr	r3, [pc, #348]	; (801495c <tcp_receive+0x730>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	1ad3      	subs	r3, r2, r3
 8014804:	3b01      	subs	r3, #1
 8014806:	2b00      	cmp	r3, #0
 8014808:	f2c0 80b8 	blt.w	801497c <tcp_receive+0x750>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014810:	4b51      	ldr	r3, [pc, #324]	; (8014958 <tcp_receive+0x72c>)
 8014812:	881b      	ldrh	r3, [r3, #0]
 8014814:	4619      	mov	r1, r3
 8014816:	4b51      	ldr	r3, [pc, #324]	; (801495c <tcp_receive+0x730>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	440b      	add	r3, r1
 801481c:	1ad3      	subs	r3, r2, r3
 801481e:	3301      	adds	r3, #1
 8014820:	2b00      	cmp	r3, #0
 8014822:	f300 80ab 	bgt.w	801497c <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014826:	4b4e      	ldr	r3, [pc, #312]	; (8014960 <tcp_receive+0x734>)
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014830:	4b4a      	ldr	r3, [pc, #296]	; (801495c <tcp_receive+0x730>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	1ad3      	subs	r3, r2, r3
 8014836:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014838:	4b49      	ldr	r3, [pc, #292]	; (8014960 <tcp_receive+0x734>)
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d106      	bne.n	801484e <tcp_receive+0x622>
 8014840:	4b48      	ldr	r3, [pc, #288]	; (8014964 <tcp_receive+0x738>)
 8014842:	f240 523c 	movw	r2, #1340	; 0x53c
 8014846:	4948      	ldr	r1, [pc, #288]	; (8014968 <tcp_receive+0x73c>)
 8014848:	4848      	ldr	r0, [pc, #288]	; (801496c <tcp_receive+0x740>)
 801484a:	f003 fa2b 	bl	8017ca4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014850:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014854:	4293      	cmp	r3, r2
 8014856:	dd06      	ble.n	8014866 <tcp_receive+0x63a>
 8014858:	4b42      	ldr	r3, [pc, #264]	; (8014964 <tcp_receive+0x738>)
 801485a:	f240 523d 	movw	r2, #1341	; 0x53d
 801485e:	4944      	ldr	r1, [pc, #272]	; (8014970 <tcp_receive+0x744>)
 8014860:	4842      	ldr	r0, [pc, #264]	; (801496c <tcp_receive+0x740>)
 8014862:	f003 fa1f 	bl	8017ca4 <iprintf>
      if (inseg.p->len < off) {
 8014866:	4b3e      	ldr	r3, [pc, #248]	; (8014960 <tcp_receive+0x734>)
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	895b      	ldrh	r3, [r3, #10]
 801486c:	461a      	mov	r2, r3
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	429a      	cmp	r2, r3
 8014872:	da3e      	bge.n	80148f2 <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014874:	4b3a      	ldr	r3, [pc, #232]	; (8014960 <tcp_receive+0x734>)
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	891b      	ldrh	r3, [r3, #8]
 801487a:	461a      	mov	r2, r3
 801487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487e:	429a      	cmp	r2, r3
 8014880:	da06      	bge.n	8014890 <tcp_receive+0x664>
 8014882:	4b38      	ldr	r3, [pc, #224]	; (8014964 <tcp_receive+0x738>)
 8014884:	f240 523f 	movw	r2, #1343	; 0x53f
 8014888:	493a      	ldr	r1, [pc, #232]	; (8014974 <tcp_receive+0x748>)
 801488a:	4838      	ldr	r0, [pc, #224]	; (801496c <tcp_receive+0x740>)
 801488c:	f003 fa0a 	bl	8017ca4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014890:	4b33      	ldr	r3, [pc, #204]	; (8014960 <tcp_receive+0x734>)
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	891a      	ldrh	r2, [r3, #8]
 8014896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014898:	b29b      	uxth	r3, r3
 801489a:	1ad3      	subs	r3, r2, r3
 801489c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 801489e:	e00e      	b.n	80148be <tcp_receive+0x692>
          off -= p->len;
 80148a0:	69bb      	ldr	r3, [r7, #24]
 80148a2:	895b      	ldrh	r3, [r3, #10]
 80148a4:	461a      	mov	r2, r3
 80148a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a8:	1a9b      	subs	r3, r3, r2
 80148aa:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80148ac:	69bb      	ldr	r3, [r7, #24]
 80148ae:	8a3a      	ldrh	r2, [r7, #16]
 80148b0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	2200      	movs	r2, #0
 80148b6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80148b8:	69bb      	ldr	r3, [r7, #24]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	895b      	ldrh	r3, [r3, #10]
 80148c2:	461a      	mov	r2, r3
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	429a      	cmp	r2, r3
 80148c8:	dbea      	blt.n	80148a0 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80148ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	425b      	negs	r3, r3
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	b21b      	sxth	r3, r3
 80148d4:	4619      	mov	r1, r3
 80148d6:	69b8      	ldr	r0, [r7, #24]
 80148d8:	f7fc fa74 	bl	8010dc4 <pbuf_header>
 80148dc:	4603      	mov	r3, r0
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d01c      	beq.n	801491c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80148e2:	4b20      	ldr	r3, [pc, #128]	; (8014964 <tcp_receive+0x738>)
 80148e4:	f240 524c 	movw	r2, #1356	; 0x54c
 80148e8:	4923      	ldr	r1, [pc, #140]	; (8014978 <tcp_receive+0x74c>)
 80148ea:	4820      	ldr	r0, [pc, #128]	; (801496c <tcp_receive+0x740>)
 80148ec:	f003 f9da 	bl	8017ca4 <iprintf>
 80148f0:	e014      	b.n	801491c <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80148f2:	4b1b      	ldr	r3, [pc, #108]	; (8014960 <tcp_receive+0x734>)
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148f8:	b292      	uxth	r2, r2
 80148fa:	4252      	negs	r2, r2
 80148fc:	b292      	uxth	r2, r2
 80148fe:	b212      	sxth	r2, r2
 8014900:	4611      	mov	r1, r2
 8014902:	4618      	mov	r0, r3
 8014904:	f7fc fa5e 	bl	8010dc4 <pbuf_header>
 8014908:	4603      	mov	r3, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d006      	beq.n	801491c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801490e:	4b15      	ldr	r3, [pc, #84]	; (8014964 <tcp_receive+0x738>)
 8014910:	f240 5251 	movw	r2, #1361	; 0x551
 8014914:	4918      	ldr	r1, [pc, #96]	; (8014978 <tcp_receive+0x74c>)
 8014916:	4815      	ldr	r0, [pc, #84]	; (801496c <tcp_receive+0x740>)
 8014918:	f003 f9c4 	bl	8017ca4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801491c:	4b10      	ldr	r3, [pc, #64]	; (8014960 <tcp_receive+0x734>)
 801491e:	891a      	ldrh	r2, [r3, #8]
 8014920:	4b0e      	ldr	r3, [pc, #56]	; (801495c <tcp_receive+0x730>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	b299      	uxth	r1, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801492a:	b29b      	uxth	r3, r3
 801492c:	1acb      	subs	r3, r1, r3
 801492e:	b29b      	uxth	r3, r3
 8014930:	4413      	add	r3, r2
 8014932:	b29a      	uxth	r2, r3
 8014934:	4b0a      	ldr	r3, [pc, #40]	; (8014960 <tcp_receive+0x734>)
 8014936:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014938:	4b09      	ldr	r3, [pc, #36]	; (8014960 <tcp_receive+0x734>)
 801493a:	68db      	ldr	r3, [r3, #12]
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014940:	4906      	ldr	r1, [pc, #24]	; (801495c <tcp_receive+0x730>)
 8014942:	600a      	str	r2, [r1, #0]
 8014944:	4a05      	ldr	r2, [pc, #20]	; (801495c <tcp_receive+0x730>)
 8014946:	6812      	ldr	r2, [r2, #0]
 8014948:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801494a:	e025      	b.n	8014998 <tcp_receive+0x76c>
 801494c:	20019fc0 	.word	0x20019fc0
 8014950:	20019fc4 	.word	0x20019fc4
 8014954:	20020bd0 	.word	0x20020bd0
 8014958:	20019fc6 	.word	0x20019fc6
 801495c:	20019fbc 	.word	0x20019fbc
 8014960:	20019f9c 	.word	0x20019f9c
 8014964:	0801b4c8 	.word	0x0801b4c8
 8014968:	0801b76c 	.word	0x0801b76c
 801496c:	0801b50c 	.word	0x0801b50c
 8014970:	0801b77c 	.word	0x0801b77c
 8014974:	0801b78c 	.word	0x0801b78c
 8014978:	0801b79c 	.word	0x0801b79c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801497c:	4b86      	ldr	r3, [pc, #536]	; (8014b98 <tcp_receive+0x96c>)
 801497e:	681a      	ldr	r2, [r3, #0]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014984:	1ad3      	subs	r3, r2, r3
 8014986:	2b00      	cmp	r3, #0
 8014988:	da06      	bge.n	8014998 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	7e9b      	ldrb	r3, [r3, #26]
 801498e:	f043 0302 	orr.w	r3, r3, #2
 8014992:	b2da      	uxtb	r2, r3
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014998:	4b7f      	ldr	r3, [pc, #508]	; (8014b98 <tcp_receive+0x96c>)
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149a0:	1ad3      	subs	r3, r2, r3
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f2c0 840d 	blt.w	80151c2 <tcp_receive+0xf96>
 80149a8:	4b7b      	ldr	r3, [pc, #492]	; (8014b98 <tcp_receive+0x96c>)
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b0:	6879      	ldr	r1, [r7, #4]
 80149b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80149b4:	440b      	add	r3, r1
 80149b6:	1ad3      	subs	r3, r2, r3
 80149b8:	3301      	adds	r3, #1
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	f300 8401 	bgt.w	80151c2 <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149c4:	4b74      	ldr	r3, [pc, #464]	; (8014b98 <tcp_receive+0x96c>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	429a      	cmp	r2, r3
 80149ca:	f040 8285 	bne.w	8014ed8 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80149ce:	4b73      	ldr	r3, [pc, #460]	; (8014b9c <tcp_receive+0x970>)
 80149d0:	891c      	ldrh	r4, [r3, #8]
 80149d2:	4b72      	ldr	r3, [pc, #456]	; (8014b9c <tcp_receive+0x970>)
 80149d4:	68db      	ldr	r3, [r3, #12]
 80149d6:	899b      	ldrh	r3, [r3, #12]
 80149d8:	b29b      	uxth	r3, r3
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f6 f960 	bl	800aca0 <lwip_htons>
 80149e0:	4603      	mov	r3, r0
 80149e2:	f003 0303 	and.w	r3, r3, #3
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d001      	beq.n	80149ee <tcp_receive+0x7c2>
 80149ea:	2301      	movs	r3, #1
 80149ec:	e000      	b.n	80149f0 <tcp_receive+0x7c4>
 80149ee:	2300      	movs	r3, #0
 80149f0:	4423      	add	r3, r4
 80149f2:	b29a      	uxth	r2, r3
 80149f4:	4b6a      	ldr	r3, [pc, #424]	; (8014ba0 <tcp_receive+0x974>)
 80149f6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149fc:	4b68      	ldr	r3, [pc, #416]	; (8014ba0 <tcp_receive+0x974>)
 80149fe:	881b      	ldrh	r3, [r3, #0]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d26d      	bcs.n	8014ae0 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014a04:	4b65      	ldr	r3, [pc, #404]	; (8014b9c <tcp_receive+0x970>)
 8014a06:	68db      	ldr	r3, [r3, #12]
 8014a08:	899b      	ldrh	r3, [r3, #12]
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7f6 f947 	bl	800aca0 <lwip_htons>
 8014a12:	4603      	mov	r3, r0
 8014a14:	f003 0301 	and.w	r3, r3, #1
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01a      	beq.n	8014a52 <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014a1c:	4b5f      	ldr	r3, [pc, #380]	; (8014b9c <tcp_receive+0x970>)
 8014a1e:	68dc      	ldr	r4, [r3, #12]
 8014a20:	4b5e      	ldr	r3, [pc, #376]	; (8014b9c <tcp_receive+0x970>)
 8014a22:	68db      	ldr	r3, [r3, #12]
 8014a24:	899b      	ldrh	r3, [r3, #12]
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014a2c:	b29d      	uxth	r5, r3
 8014a2e:	4b5b      	ldr	r3, [pc, #364]	; (8014b9c <tcp_receive+0x970>)
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	899b      	ldrh	r3, [r3, #12]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7f6 f932 	bl	800aca0 <lwip_htons>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014a42:	b29b      	uxth	r3, r3
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7f6 f92b 	bl	800aca0 <lwip_htons>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	432b      	orrs	r3, r5
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a56:	4b51      	ldr	r3, [pc, #324]	; (8014b9c <tcp_receive+0x970>)
 8014a58:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014a5a:	4b50      	ldr	r3, [pc, #320]	; (8014b9c <tcp_receive+0x970>)
 8014a5c:	68db      	ldr	r3, [r3, #12]
 8014a5e:	899b      	ldrh	r3, [r3, #12]
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7f6 f91c 	bl	800aca0 <lwip_htons>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	f003 0302 	and.w	r3, r3, #2
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d005      	beq.n	8014a7e <tcp_receive+0x852>
            inseg.len -= 1;
 8014a72:	4b4a      	ldr	r3, [pc, #296]	; (8014b9c <tcp_receive+0x970>)
 8014a74:	891b      	ldrh	r3, [r3, #8]
 8014a76:	3b01      	subs	r3, #1
 8014a78:	b29a      	uxth	r2, r3
 8014a7a:	4b48      	ldr	r3, [pc, #288]	; (8014b9c <tcp_receive+0x970>)
 8014a7c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014a7e:	4b47      	ldr	r3, [pc, #284]	; (8014b9c <tcp_receive+0x970>)
 8014a80:	685a      	ldr	r2, [r3, #4]
 8014a82:	4b46      	ldr	r3, [pc, #280]	; (8014b9c <tcp_receive+0x970>)
 8014a84:	891b      	ldrh	r3, [r3, #8]
 8014a86:	4619      	mov	r1, r3
 8014a88:	4610      	mov	r0, r2
 8014a8a:	f7fc f84b 	bl	8010b24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014a8e:	4b43      	ldr	r3, [pc, #268]	; (8014b9c <tcp_receive+0x970>)
 8014a90:	891c      	ldrh	r4, [r3, #8]
 8014a92:	4b42      	ldr	r3, [pc, #264]	; (8014b9c <tcp_receive+0x970>)
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	899b      	ldrh	r3, [r3, #12]
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7f6 f900 	bl	800aca0 <lwip_htons>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	f003 0303 	and.w	r3, r3, #3
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <tcp_receive+0x882>
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e000      	b.n	8014ab0 <tcp_receive+0x884>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	4423      	add	r3, r4
 8014ab2:	b29a      	uxth	r2, r3
 8014ab4:	4b3a      	ldr	r3, [pc, #232]	; (8014ba0 <tcp_receive+0x974>)
 8014ab6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014ab8:	4b39      	ldr	r3, [pc, #228]	; (8014ba0 <tcp_receive+0x974>)
 8014aba:	881b      	ldrh	r3, [r3, #0]
 8014abc:	461a      	mov	r2, r3
 8014abe:	4b36      	ldr	r3, [pc, #216]	; (8014b98 <tcp_receive+0x96c>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	441a      	add	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac8:	6879      	ldr	r1, [r7, #4]
 8014aca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014acc:	440b      	add	r3, r1
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d006      	beq.n	8014ae0 <tcp_receive+0x8b4>
 8014ad2:	4b34      	ldr	r3, [pc, #208]	; (8014ba4 <tcp_receive+0x978>)
 8014ad4:	f240 527f 	movw	r2, #1407	; 0x57f
 8014ad8:	4933      	ldr	r1, [pc, #204]	; (8014ba8 <tcp_receive+0x97c>)
 8014ada:	4834      	ldr	r0, [pc, #208]	; (8014bac <tcp_receive+0x980>)
 8014adc:	f003 f8e2 	bl	8017ca4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f000 80e0 	beq.w	8014caa <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014aea:	4b2c      	ldr	r3, [pc, #176]	; (8014b9c <tcp_receive+0x970>)
 8014aec:	68db      	ldr	r3, [r3, #12]
 8014aee:	899b      	ldrh	r3, [r3, #12]
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7f6 f8d4 	bl	800aca0 <lwip_htons>
 8014af8:	4603      	mov	r3, r0
 8014afa:	f003 0301 	and.w	r3, r3, #1
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d010      	beq.n	8014b24 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014b02:	e00a      	b.n	8014b1a <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8014b14:	68f8      	ldr	r0, [r7, #12]
 8014b16:	f7fd fdea 	bl	80126ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d1f0      	bne.n	8014b04 <tcp_receive+0x8d8>
 8014b22:	e0c2      	b.n	8014caa <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b28:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014b2a:	e04e      	b.n	8014bca <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2e:	68db      	ldr	r3, [r3, #12]
 8014b30:	899b      	ldrh	r3, [r3, #12]
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7f6 f8b3 	bl	800aca0 <lwip_htons>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	f003 0301 	and.w	r3, r3, #1
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d03a      	beq.n	8014bba <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014b44:	4b15      	ldr	r3, [pc, #84]	; (8014b9c <tcp_receive+0x970>)
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	899b      	ldrh	r3, [r3, #12]
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7f6 f8a7 	bl	800aca0 <lwip_htons>
 8014b52:	4603      	mov	r3, r0
 8014b54:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d12e      	bne.n	8014bba <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014b5c:	4b0f      	ldr	r3, [pc, #60]	; (8014b9c <tcp_receive+0x970>)
 8014b5e:	68dc      	ldr	r4, [r3, #12]
 8014b60:	4b0e      	ldr	r3, [pc, #56]	; (8014b9c <tcp_receive+0x970>)
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	899b      	ldrh	r3, [r3, #12]
 8014b66:	b29d      	uxth	r5, r3
 8014b68:	2001      	movs	r0, #1
 8014b6a:	f7f6 f899 	bl	800aca0 <lwip_htons>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	432b      	orrs	r3, r5
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014b76:	4b09      	ldr	r3, [pc, #36]	; (8014b9c <tcp_receive+0x970>)
 8014b78:	891c      	ldrh	r4, [r3, #8]
 8014b7a:	4b08      	ldr	r3, [pc, #32]	; (8014b9c <tcp_receive+0x970>)
 8014b7c:	68db      	ldr	r3, [r3, #12]
 8014b7e:	899b      	ldrh	r3, [r3, #12]
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7f6 f88c 	bl	800aca0 <lwip_htons>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	f003 0303 	and.w	r3, r3, #3
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d00e      	beq.n	8014bb0 <tcp_receive+0x984>
 8014b92:	2301      	movs	r3, #1
 8014b94:	e00d      	b.n	8014bb2 <tcp_receive+0x986>
 8014b96:	bf00      	nop
 8014b98:	20019fbc 	.word	0x20019fbc
 8014b9c:	20019f9c 	.word	0x20019f9c
 8014ba0:	20019fc6 	.word	0x20019fc6
 8014ba4:	0801b4c8 	.word	0x0801b4c8
 8014ba8:	0801b7b0 	.word	0x0801b7b0
 8014bac:	0801b50c 	.word	0x0801b50c
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	4423      	add	r3, r4
 8014bb4:	b29a      	uxth	r2, r3
 8014bb6:	4b95      	ldr	r3, [pc, #596]	; (8014e0c <tcp_receive+0xbe0>)
 8014bb8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8014bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bbc:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8014bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8014bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bc6:	f7fd fd92 	bl	80126ee <tcp_seg_free>
            while (next &&
 8014bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d00e      	beq.n	8014bee <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014bd0:	4b8e      	ldr	r3, [pc, #568]	; (8014e0c <tcp_receive+0xbe0>)
 8014bd2:	881b      	ldrh	r3, [r3, #0]
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	4b8e      	ldr	r3, [pc, #568]	; (8014e10 <tcp_receive+0xbe4>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	441a      	add	r2, r3
 8014bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	685b      	ldr	r3, [r3, #4]
 8014be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014be4:	8909      	ldrh	r1, [r1, #8]
 8014be6:	440b      	add	r3, r1
 8014be8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	da9e      	bge.n	8014b2c <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d057      	beq.n	8014ca4 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 8014bf4:	4b85      	ldr	r3, [pc, #532]	; (8014e0c <tcp_receive+0xbe0>)
 8014bf6:	881b      	ldrh	r3, [r3, #0]
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	4b85      	ldr	r3, [pc, #532]	; (8014e10 <tcp_receive+0xbe4>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	441a      	add	r2, r3
 8014c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c02:	68db      	ldr	r3, [r3, #12]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	dd4b      	ble.n	8014ca4 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0e:	68db      	ldr	r3, [r3, #12]
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	4b7e      	ldr	r3, [pc, #504]	; (8014e10 <tcp_receive+0xbe4>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	1ad3      	subs	r3, r2, r3
 8014c1c:	b29a      	uxth	r2, r3
 8014c1e:	4b7d      	ldr	r3, [pc, #500]	; (8014e14 <tcp_receive+0xbe8>)
 8014c20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014c22:	4b7c      	ldr	r3, [pc, #496]	; (8014e14 <tcp_receive+0xbe8>)
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	899b      	ldrh	r3, [r3, #12]
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7f6 f838 	bl	800aca0 <lwip_htons>
 8014c30:	4603      	mov	r3, r0
 8014c32:	f003 0302 	and.w	r3, r3, #2
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d005      	beq.n	8014c46 <tcp_receive+0xa1a>
                inseg.len -= 1;
 8014c3a:	4b76      	ldr	r3, [pc, #472]	; (8014e14 <tcp_receive+0xbe8>)
 8014c3c:	891b      	ldrh	r3, [r3, #8]
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	4b74      	ldr	r3, [pc, #464]	; (8014e14 <tcp_receive+0xbe8>)
 8014c44:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014c46:	4b73      	ldr	r3, [pc, #460]	; (8014e14 <tcp_receive+0xbe8>)
 8014c48:	685a      	ldr	r2, [r3, #4]
 8014c4a:	4b72      	ldr	r3, [pc, #456]	; (8014e14 <tcp_receive+0xbe8>)
 8014c4c:	891b      	ldrh	r3, [r3, #8]
 8014c4e:	4619      	mov	r1, r3
 8014c50:	4610      	mov	r0, r2
 8014c52:	f7fb ff67 	bl	8010b24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014c56:	4b6f      	ldr	r3, [pc, #444]	; (8014e14 <tcp_receive+0xbe8>)
 8014c58:	891c      	ldrh	r4, [r3, #8]
 8014c5a:	4b6e      	ldr	r3, [pc, #440]	; (8014e14 <tcp_receive+0xbe8>)
 8014c5c:	68db      	ldr	r3, [r3, #12]
 8014c5e:	899b      	ldrh	r3, [r3, #12]
 8014c60:	b29b      	uxth	r3, r3
 8014c62:	4618      	mov	r0, r3
 8014c64:	f7f6 f81c 	bl	800aca0 <lwip_htons>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	f003 0303 	and.w	r3, r3, #3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d001      	beq.n	8014c76 <tcp_receive+0xa4a>
 8014c72:	2301      	movs	r3, #1
 8014c74:	e000      	b.n	8014c78 <tcp_receive+0xa4c>
 8014c76:	2300      	movs	r3, #0
 8014c78:	4423      	add	r3, r4
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	4b63      	ldr	r3, [pc, #396]	; (8014e0c <tcp_receive+0xbe0>)
 8014c7e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014c80:	4b62      	ldr	r3, [pc, #392]	; (8014e0c <tcp_receive+0xbe0>)
 8014c82:	881b      	ldrh	r3, [r3, #0]
 8014c84:	461a      	mov	r2, r3
 8014c86:	4b62      	ldr	r3, [pc, #392]	; (8014e10 <tcp_receive+0xbe4>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	441a      	add	r2, r3
 8014c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d006      	beq.n	8014ca4 <tcp_receive+0xa78>
 8014c96:	4b60      	ldr	r3, [pc, #384]	; (8014e18 <tcp_receive+0xbec>)
 8014c98:	f240 52af 	movw	r2, #1455	; 0x5af
 8014c9c:	495f      	ldr	r1, [pc, #380]	; (8014e1c <tcp_receive+0xbf0>)
 8014c9e:	4860      	ldr	r0, [pc, #384]	; (8014e20 <tcp_receive+0xbf4>)
 8014ca0:	f003 f800 	bl	8017ca4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ca8:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014caa:	4b58      	ldr	r3, [pc, #352]	; (8014e0c <tcp_receive+0xbe0>)
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	4b57      	ldr	r3, [pc, #348]	; (8014e10 <tcp_receive+0xbe4>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	441a      	add	r2, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014cbe:	4b53      	ldr	r3, [pc, #332]	; (8014e0c <tcp_receive+0xbe0>)
 8014cc0:	881b      	ldrh	r3, [r3, #0]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d206      	bcs.n	8014cd4 <tcp_receive+0xaa8>
 8014cc6:	4b54      	ldr	r3, [pc, #336]	; (8014e18 <tcp_receive+0xbec>)
 8014cc8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014ccc:	4955      	ldr	r1, [pc, #340]	; (8014e24 <tcp_receive+0xbf8>)
 8014cce:	4854      	ldr	r0, [pc, #336]	; (8014e20 <tcp_receive+0xbf4>)
 8014cd0:	f002 ffe8 	bl	8017ca4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014cd8:	4b4c      	ldr	r3, [pc, #304]	; (8014e0c <tcp_receive+0xbe0>)
 8014cda:	881b      	ldrh	r3, [r3, #0]
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	b29a      	uxth	r2, r3
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f7fd f873 	bl	8011dd0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014cea:	4b4a      	ldr	r3, [pc, #296]	; (8014e14 <tcp_receive+0xbe8>)
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	891b      	ldrh	r3, [r3, #8]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d006      	beq.n	8014d02 <tcp_receive+0xad6>
          recv_data = inseg.p;
 8014cf4:	4b47      	ldr	r3, [pc, #284]	; (8014e14 <tcp_receive+0xbe8>)
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	4a4b      	ldr	r2, [pc, #300]	; (8014e28 <tcp_receive+0xbfc>)
 8014cfa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014cfc:	4b45      	ldr	r3, [pc, #276]	; (8014e14 <tcp_receive+0xbe8>)
 8014cfe:	2200      	movs	r2, #0
 8014d00:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014d02:	4b44      	ldr	r3, [pc, #272]	; (8014e14 <tcp_receive+0xbe8>)
 8014d04:	68db      	ldr	r3, [r3, #12]
 8014d06:	899b      	ldrh	r3, [r3, #12]
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7f5 ffc8 	bl	800aca0 <lwip_htons>
 8014d10:	4603      	mov	r3, r0
 8014d12:	f003 0301 	and.w	r3, r3, #1
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	f000 80b4 	beq.w	8014e84 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014d1c:	4b43      	ldr	r3, [pc, #268]	; (8014e2c <tcp_receive+0xc00>)
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	f043 0320 	orr.w	r3, r3, #32
 8014d24:	b2da      	uxtb	r2, r3
 8014d26:	4b41      	ldr	r3, [pc, #260]	; (8014e2c <tcp_receive+0xc00>)
 8014d28:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014d2a:	e0ab      	b.n	8014e84 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d30:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	4a35      	ldr	r2, [pc, #212]	; (8014e10 <tcp_receive+0xbe4>)
 8014d3c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	891b      	ldrh	r3, [r3, #8]
 8014d42:	461c      	mov	r4, r3
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	68db      	ldr	r3, [r3, #12]
 8014d48:	899b      	ldrh	r3, [r3, #12]
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7f5 ffa7 	bl	800aca0 <lwip_htons>
 8014d52:	4603      	mov	r3, r0
 8014d54:	f003 0303 	and.w	r3, r3, #3
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d001      	beq.n	8014d60 <tcp_receive+0xb34>
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	e000      	b.n	8014d62 <tcp_receive+0xb36>
 8014d60:	2300      	movs	r3, #0
 8014d62:	4423      	add	r3, r4
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014d68:	441a      	add	r2, r3
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d72:	461c      	mov	r4, r3
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	891b      	ldrh	r3, [r3, #8]
 8014d78:	461d      	mov	r5, r3
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	899b      	ldrh	r3, [r3, #12]
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7f5 ff8c 	bl	800aca0 <lwip_htons>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	f003 0303 	and.w	r3, r3, #3
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d001      	beq.n	8014d96 <tcp_receive+0xb6a>
 8014d92:	2301      	movs	r3, #1
 8014d94:	e000      	b.n	8014d98 <tcp_receive+0xb6c>
 8014d96:	2300      	movs	r3, #0
 8014d98:	442b      	add	r3, r5
 8014d9a:	429c      	cmp	r4, r3
 8014d9c:	d206      	bcs.n	8014dac <tcp_receive+0xb80>
 8014d9e:	4b1e      	ldr	r3, [pc, #120]	; (8014e18 <tcp_receive+0xbec>)
 8014da0:	f240 52de 	movw	r2, #1502	; 0x5de
 8014da4:	4922      	ldr	r1, [pc, #136]	; (8014e30 <tcp_receive+0xc04>)
 8014da6:	481e      	ldr	r0, [pc, #120]	; (8014e20 <tcp_receive+0xbf4>)
 8014da8:	f002 ff7c 	bl	8017ca4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	891b      	ldrh	r3, [r3, #8]
 8014db0:	461c      	mov	r4, r3
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	899b      	ldrh	r3, [r3, #12]
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7f5 ff70 	bl	800aca0 <lwip_htons>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	f003 0303 	and.w	r3, r3, #3
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d001      	beq.n	8014dce <tcp_receive+0xba2>
 8014dca:	2301      	movs	r3, #1
 8014dcc:	e000      	b.n	8014dd0 <tcp_receive+0xba4>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	18e1      	adds	r1, r4, r3
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014dd6:	b28b      	uxth	r3, r1
 8014dd8:	1ad3      	subs	r3, r2, r3
 8014dda:	b29a      	uxth	r2, r3
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f7fc fff5 	bl	8011dd0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	685b      	ldr	r3, [r3, #4]
 8014dea:	891b      	ldrh	r3, [r3, #8]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d028      	beq.n	8014e42 <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014df0:	4b0d      	ldr	r3, [pc, #52]	; (8014e28 <tcp_receive+0xbfc>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d01d      	beq.n	8014e34 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 8014df8:	4b0b      	ldr	r3, [pc, #44]	; (8014e28 <tcp_receive+0xbfc>)
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	685b      	ldr	r3, [r3, #4]
 8014e00:	4619      	mov	r1, r3
 8014e02:	4610      	mov	r0, r2
 8014e04:	f7fc f8dc 	bl	8010fc0 <pbuf_cat>
 8014e08:	e018      	b.n	8014e3c <tcp_receive+0xc10>
 8014e0a:	bf00      	nop
 8014e0c:	20019fc6 	.word	0x20019fc6
 8014e10:	20019fbc 	.word	0x20019fbc
 8014e14:	20019f9c 	.word	0x20019f9c
 8014e18:	0801b4c8 	.word	0x0801b4c8
 8014e1c:	0801b7e8 	.word	0x0801b7e8
 8014e20:	0801b50c 	.word	0x0801b50c
 8014e24:	0801b824 	.word	0x0801b824
 8014e28:	20019fcc 	.word	0x20019fcc
 8014e2c:	20019fc9 	.word	0x20019fc9
 8014e30:	0801b844 	.word	0x0801b844
            } else {
              recv_data = cseg->p;
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	4a71      	ldr	r2, [pc, #452]	; (8015000 <tcp_receive+0xdd4>)
 8014e3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	899b      	ldrh	r3, [r3, #12]
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7f5 ff28 	bl	800aca0 <lwip_htons>
 8014e50:	4603      	mov	r3, r0
 8014e52:	f003 0301 	and.w	r3, r3, #1
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d00d      	beq.n	8014e76 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014e5a:	4b6a      	ldr	r3, [pc, #424]	; (8015004 <tcp_receive+0xdd8>)
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	f043 0320 	orr.w	r3, r3, #32
 8014e62:	b2da      	uxtb	r2, r3
 8014e64:	4b67      	ldr	r3, [pc, #412]	; (8015004 <tcp_receive+0xdd8>)
 8014e66:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	7d1b      	ldrb	r3, [r3, #20]
 8014e6c:	2b04      	cmp	r3, #4
 8014e6e:	d102      	bne.n	8014e76 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2207      	movs	r2, #7
 8014e74:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	681a      	ldr	r2, [r3, #0]
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8014e7e:	68b8      	ldr	r0, [r7, #8]
 8014e80:	f7fd fc35 	bl	80126ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d008      	beq.n	8014e9e <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e90:	68db      	ldr	r3, [r3, #12]
 8014e92:	685a      	ldr	r2, [r3, #4]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	f43f af47 	beq.w	8014d2c <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	7e9b      	ldrb	r3, [r3, #26]
 8014ea2:	f003 0301 	and.w	r3, r3, #1
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d00e      	beq.n	8014ec8 <tcp_receive+0xc9c>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	7e9b      	ldrb	r3, [r3, #26]
 8014eae:	f023 0301 	bic.w	r3, r3, #1
 8014eb2:	b2da      	uxtb	r2, r3
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	769a      	strb	r2, [r3, #26]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	7e9b      	ldrb	r3, [r3, #26]
 8014ebc:	f043 0302 	orr.w	r3, r3, #2
 8014ec0:	b2da      	uxtb	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ec6:	e180      	b.n	80151ca <tcp_receive+0xf9e>
        tcp_ack(pcb);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	7e9b      	ldrb	r3, [r3, #26]
 8014ecc:	f043 0301 	orr.w	r3, r3, #1
 8014ed0:	b2da      	uxtb	r2, r3
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ed6:	e178      	b.n	80151ca <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f001 f8c7 	bl	801606c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d106      	bne.n	8014ef4 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014ee6:	4848      	ldr	r0, [pc, #288]	; (8015008 <tcp_receive+0xddc>)
 8014ee8:	f7fd fc1c 	bl	8012724 <tcp_seg_copy>
 8014eec:	4602      	mov	r2, r0
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8014ef2:	e16a      	b.n	80151ca <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014efe:	e14f      	b.n	80151a0 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 8014f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f02:	68db      	ldr	r3, [r3, #12]
 8014f04:	685a      	ldr	r2, [r3, #4]
 8014f06:	4b41      	ldr	r3, [pc, #260]	; (801500c <tcp_receive+0xde0>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d11d      	bne.n	8014f4a <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014f0e:	4b3e      	ldr	r3, [pc, #248]	; (8015008 <tcp_receive+0xddc>)
 8014f10:	891a      	ldrh	r2, [r3, #8]
 8014f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f14:	891b      	ldrh	r3, [r3, #8]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	f240 8147 	bls.w	80151aa <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8014f1c:	483a      	ldr	r0, [pc, #232]	; (8015008 <tcp_receive+0xddc>)
 8014f1e:	f7fd fc01 	bl	8012724 <tcp_seg_copy>
 8014f22:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	f000 8141 	beq.w	80151ae <tcp_receive+0xf82>
                  if (prev != NULL) {
 8014f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d003      	beq.n	8014f3a <tcp_receive+0xd0e>
                    prev->next = cseg;
 8014f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f34:	68ba      	ldr	r2, [r7, #8]
 8014f36:	601a      	str	r2, [r3, #0]
 8014f38:	e002      	b.n	8014f40 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	68ba      	ldr	r2, [r7, #8]
 8014f3e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f42:	68b8      	ldr	r0, [r7, #8]
 8014f44:	f7ff f8fc 	bl	8014140 <tcp_oos_insert_segment>
                }
                break;
 8014f48:	e131      	b.n	80151ae <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d117      	bne.n	8014f80 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014f50:	4b2e      	ldr	r3, [pc, #184]	; (801500c <tcp_receive+0xde0>)
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	1ad3      	subs	r3, r2, r3
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	da57      	bge.n	8015010 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8014f60:	4829      	ldr	r0, [pc, #164]	; (8015008 <tcp_receive+0xddc>)
 8014f62:	f7fd fbdf 	bl	8012724 <tcp_seg_copy>
 8014f66:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	f000 8121 	beq.w	80151b2 <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	68ba      	ldr	r2, [r7, #8]
 8014f74:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8014f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f78:	68b8      	ldr	r0, [r7, #8]
 8014f7a:	f7ff f8e1 	bl	8014140 <tcp_oos_insert_segment>
                  }
                  break;
 8014f7e:	e118      	b.n	80151b2 <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8014f80:	4b22      	ldr	r3, [pc, #136]	; (801500c <tcp_receive+0xde0>)
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	1ad3      	subs	r3, r2, r3
 8014f8c:	3b01      	subs	r3, #1
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	db3e      	blt.n	8015010 <tcp_receive+0xde4>
 8014f92:	4b1e      	ldr	r3, [pc, #120]	; (801500c <tcp_receive+0xde0>)
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	1ad3      	subs	r3, r2, r3
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	dc35      	bgt.n	8015010 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8014fa4:	4818      	ldr	r0, [pc, #96]	; (8015008 <tcp_receive+0xddc>)
 8014fa6:	f7fd fbbd 	bl	8012724 <tcp_seg_copy>
 8014faa:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f000 8101 	beq.w	80151b6 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fbc:	8912      	ldrh	r2, [r2, #8]
 8014fbe:	441a      	add	r2, r3
 8014fc0:	4b12      	ldr	r3, [pc, #72]	; (801500c <tcp_receive+0xde0>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	1ad3      	subs	r3, r2, r3
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	dd12      	ble.n	8014ff0 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014fca:	4b10      	ldr	r3, [pc, #64]	; (801500c <tcp_receive+0xde0>)
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fd2:	68db      	ldr	r3, [r3, #12]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	b29b      	uxth	r3, r3
 8014fd8:	1ad3      	subs	r3, r2, r3
 8014fda:	b29a      	uxth	r2, r3
 8014fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fde:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe2:	685a      	ldr	r2, [r3, #4]
 8014fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe6:	891b      	ldrh	r3, [r3, #8]
 8014fe8:	4619      	mov	r1, r3
 8014fea:	4610      	mov	r0, r2
 8014fec:	f7fb fd9a 	bl	8010b24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff2:	68ba      	ldr	r2, [r7, #8]
 8014ff4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ff8:	68b8      	ldr	r0, [r7, #8]
 8014ffa:	f7ff f8a1 	bl	8014140 <tcp_oos_insert_segment>
                  }
                  break;
 8014ffe:	e0da      	b.n	80151b6 <tcp_receive+0xf8a>
 8015000:	20019fcc 	.word	0x20019fcc
 8015004:	20019fc9 	.word	0x20019fc9
 8015008:	20019f9c 	.word	0x20019f9c
 801500c:	20019fbc 	.word	0x20019fbc
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	f040 80be 	bne.w	8015196 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801501a:	4b7b      	ldr	r3, [pc, #492]	; (8015208 <tcp_receive+0xfdc>)
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015026:	2b00      	cmp	r3, #0
 8015028:	f340 80b5 	ble.w	8015196 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502e:	68db      	ldr	r3, [r3, #12]
 8015030:	899b      	ldrh	r3, [r3, #12]
 8015032:	b29b      	uxth	r3, r3
 8015034:	4618      	mov	r0, r3
 8015036:	f7f5 fe33 	bl	800aca0 <lwip_htons>
 801503a:	4603      	mov	r3, r0
 801503c:	f003 0301 	and.w	r3, r3, #1
 8015040:	2b00      	cmp	r3, #0
 8015042:	f040 80ba 	bne.w	80151ba <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015046:	4871      	ldr	r0, [pc, #452]	; (801520c <tcp_receive+0xfe0>)
 8015048:	f7fd fb6c 	bl	8012724 <tcp_seg_copy>
 801504c:	4602      	mov	r2, r0
 801504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015050:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	f000 80b1 	beq.w	80151be <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	685b      	ldr	r3, [r3, #4]
 8015062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015064:	8912      	ldrh	r2, [r2, #8]
 8015066:	441a      	add	r2, r3
 8015068:	4b67      	ldr	r3, [pc, #412]	; (8015208 <tcp_receive+0xfdc>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	2b00      	cmp	r3, #0
 8015070:	dd12      	ble.n	8015098 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015072:	4b65      	ldr	r3, [pc, #404]	; (8015208 <tcp_receive+0xfdc>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	b29a      	uxth	r2, r3
 8015078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	b29b      	uxth	r3, r3
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	b29a      	uxth	r2, r3
 8015084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015086:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801508a:	685a      	ldr	r2, [r3, #4]
 801508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801508e:	891b      	ldrh	r3, [r3, #8]
 8015090:	4619      	mov	r1, r3
 8015092:	4610      	mov	r0, r2
 8015094:	f7fb fd46 	bl	8010b24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015098:	4b5d      	ldr	r3, [pc, #372]	; (8015210 <tcp_receive+0xfe4>)
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	461a      	mov	r2, r3
 801509e:	4b5a      	ldr	r3, [pc, #360]	; (8015208 <tcp_receive+0xfdc>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	441a      	add	r2, r3
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150a8:	6879      	ldr	r1, [r7, #4]
 80150aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80150ac:	440b      	add	r3, r1
 80150ae:	1ad3      	subs	r3, r2, r3
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	f340 8084 	ble.w	80151be <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80150b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	899b      	ldrh	r3, [r3, #12]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f5 fded 	bl	800aca0 <lwip_htons>
 80150c6:	4603      	mov	r3, r0
 80150c8:	f003 0301 	and.w	r3, r3, #1
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d01d      	beq.n	801510c <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80150d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	68dc      	ldr	r4, [r3, #12]
 80150d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	68db      	ldr	r3, [r3, #12]
 80150dc:	899b      	ldrh	r3, [r3, #12]
 80150de:	b29b      	uxth	r3, r3
 80150e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80150e4:	b29d      	uxth	r5, r3
 80150e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	899b      	ldrh	r3, [r3, #12]
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7f5 fdd5 	bl	800aca0 <lwip_htons>
 80150f6:	4603      	mov	r3, r0
 80150f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	4618      	mov	r0, r3
 8015100:	f7f5 fdce 	bl	800aca0 <lwip_htons>
 8015104:	4603      	mov	r3, r0
 8015106:	432b      	orrs	r3, r5
 8015108:	b29b      	uxth	r3, r3
 801510a:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	687a      	ldr	r2, [r7, #4]
 8015112:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015114:	b291      	uxth	r1, r2
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801511a:	440a      	add	r2, r1
 801511c:	b291      	uxth	r1, r2
 801511e:	4a3a      	ldr	r2, [pc, #232]	; (8015208 <tcp_receive+0xfdc>)
 8015120:	6812      	ldr	r2, [r2, #0]
 8015122:	b292      	uxth	r2, r2
 8015124:	1a8a      	subs	r2, r1, r2
 8015126:	b292      	uxth	r2, r2
 8015128:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	685a      	ldr	r2, [r3, #4]
 8015130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	891b      	ldrh	r3, [r3, #8]
 8015136:	4619      	mov	r1, r3
 8015138:	4610      	mov	r0, r2
 801513a:	f7fb fcf3 	bl	8010b24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	891c      	ldrh	r4, [r3, #8]
 8015144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	68db      	ldr	r3, [r3, #12]
 801514a:	899b      	ldrh	r3, [r3, #12]
 801514c:	b29b      	uxth	r3, r3
 801514e:	4618      	mov	r0, r3
 8015150:	f7f5 fda6 	bl	800aca0 <lwip_htons>
 8015154:	4603      	mov	r3, r0
 8015156:	f003 0303 	and.w	r3, r3, #3
 801515a:	2b00      	cmp	r3, #0
 801515c:	d001      	beq.n	8015162 <tcp_receive+0xf36>
 801515e:	2301      	movs	r3, #1
 8015160:	e000      	b.n	8015164 <tcp_receive+0xf38>
 8015162:	2300      	movs	r3, #0
 8015164:	4423      	add	r3, r4
 8015166:	b29a      	uxth	r2, r3
 8015168:	4b29      	ldr	r3, [pc, #164]	; (8015210 <tcp_receive+0xfe4>)
 801516a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801516c:	4b28      	ldr	r3, [pc, #160]	; (8015210 <tcp_receive+0xfe4>)
 801516e:	881b      	ldrh	r3, [r3, #0]
 8015170:	461a      	mov	r2, r3
 8015172:	4b25      	ldr	r3, [pc, #148]	; (8015208 <tcp_receive+0xfdc>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	441a      	add	r2, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801517c:	6879      	ldr	r1, [r7, #4]
 801517e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015180:	440b      	add	r3, r1
 8015182:	429a      	cmp	r2, r3
 8015184:	d01b      	beq.n	80151be <tcp_receive+0xf92>
 8015186:	4b23      	ldr	r3, [pc, #140]	; (8015214 <tcp_receive+0xfe8>)
 8015188:	f240 627b 	movw	r2, #1659	; 0x67b
 801518c:	4922      	ldr	r1, [pc, #136]	; (8015218 <tcp_receive+0xfec>)
 801518e:	4823      	ldr	r0, [pc, #140]	; (801521c <tcp_receive+0xff0>)
 8015190:	f002 fd88 	bl	8017ca4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015194:	e013      	b.n	80151be <tcp_receive+0xf92>
              }
            }
            prev = next;
 8015196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015198:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80151a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	f47f aeac 	bne.w	8014f00 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 80151a8:	e00f      	b.n	80151ca <tcp_receive+0xf9e>
                break;
 80151aa:	bf00      	nop
 80151ac:	e00d      	b.n	80151ca <tcp_receive+0xf9e>
                break;
 80151ae:	bf00      	nop
 80151b0:	e00b      	b.n	80151ca <tcp_receive+0xf9e>
                  break;
 80151b2:	bf00      	nop
 80151b4:	e009      	b.n	80151ca <tcp_receive+0xf9e>
                  break;
 80151b6:	bf00      	nop
 80151b8:	e007      	b.n	80151ca <tcp_receive+0xf9e>
                  break;
 80151ba:	bf00      	nop
 80151bc:	e005      	b.n	80151ca <tcp_receive+0xf9e>
                break;
 80151be:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80151c0:	e003      	b.n	80151ca <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f000 ff52 	bl	801606c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80151c8:	e01a      	b.n	8015200 <tcp_receive+0xfd4>
 80151ca:	e019      	b.n	8015200 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80151cc:	4b0e      	ldr	r3, [pc, #56]	; (8015208 <tcp_receive+0xfdc>)
 80151ce:	681a      	ldr	r2, [r3, #0]
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d4:	1ad3      	subs	r3, r2, r3
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	db0a      	blt.n	80151f0 <tcp_receive+0xfc4>
 80151da:	4b0b      	ldr	r3, [pc, #44]	; (8015208 <tcp_receive+0xfdc>)
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e2:	6879      	ldr	r1, [r7, #4]
 80151e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80151e6:	440b      	add	r3, r1
 80151e8:	1ad3      	subs	r3, r2, r3
 80151ea:	3301      	adds	r3, #1
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	dd07      	ble.n	8015200 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	7e9b      	ldrb	r3, [r3, #26]
 80151f4:	f043 0302 	orr.w	r3, r3, #2
 80151f8:	b2da      	uxtb	r2, r3
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80151fe:	e7ff      	b.n	8015200 <tcp_receive+0xfd4>
 8015200:	bf00      	nop
 8015202:	3734      	adds	r7, #52	; 0x34
 8015204:	46bd      	mov	sp, r7
 8015206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015208:	20019fbc 	.word	0x20019fbc
 801520c:	20019f9c 	.word	0x20019f9c
 8015210:	20019fc6 	.word	0x20019fc6
 8015214:	0801b4c8 	.word	0x0801b4c8
 8015218:	0801b7b0 	.word	0x0801b7b0
 801521c:	0801b50c 	.word	0x0801b50c

08015220 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8015220:	b480      	push	{r7}
 8015222:	b083      	sub	sp, #12
 8015224:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8015226:	4b18      	ldr	r3, [pc, #96]	; (8015288 <tcp_getoptbyte+0x68>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d005      	beq.n	801523a <tcp_getoptbyte+0x1a>
 801522e:	4b17      	ldr	r3, [pc, #92]	; (801528c <tcp_getoptbyte+0x6c>)
 8015230:	881a      	ldrh	r2, [r3, #0]
 8015232:	4b17      	ldr	r3, [pc, #92]	; (8015290 <tcp_getoptbyte+0x70>)
 8015234:	881b      	ldrh	r3, [r3, #0]
 8015236:	429a      	cmp	r2, r3
 8015238:	d20e      	bcs.n	8015258 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801523a:	4b16      	ldr	r3, [pc, #88]	; (8015294 <tcp_getoptbyte+0x74>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	3314      	adds	r3, #20
 8015240:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8015242:	4b12      	ldr	r3, [pc, #72]	; (801528c <tcp_getoptbyte+0x6c>)
 8015244:	881b      	ldrh	r3, [r3, #0]
 8015246:	1c5a      	adds	r2, r3, #1
 8015248:	b291      	uxth	r1, r2
 801524a:	4a10      	ldr	r2, [pc, #64]	; (801528c <tcp_getoptbyte+0x6c>)
 801524c:	8011      	strh	r1, [r2, #0]
 801524e:	461a      	mov	r2, r3
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	4413      	add	r3, r2
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	e010      	b.n	801527a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8015258:	4b0c      	ldr	r3, [pc, #48]	; (801528c <tcp_getoptbyte+0x6c>)
 801525a:	881b      	ldrh	r3, [r3, #0]
 801525c:	1c5a      	adds	r2, r3, #1
 801525e:	b291      	uxth	r1, r2
 8015260:	4a0a      	ldr	r2, [pc, #40]	; (801528c <tcp_getoptbyte+0x6c>)
 8015262:	8011      	strh	r1, [r2, #0]
 8015264:	b2da      	uxtb	r2, r3
 8015266:	4b0a      	ldr	r3, [pc, #40]	; (8015290 <tcp_getoptbyte+0x70>)
 8015268:	881b      	ldrh	r3, [r3, #0]
 801526a:	b2db      	uxtb	r3, r3
 801526c:	1ad3      	subs	r3, r2, r3
 801526e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8015270:	4b05      	ldr	r3, [pc, #20]	; (8015288 <tcp_getoptbyte+0x68>)
 8015272:	681a      	ldr	r2, [r3, #0]
 8015274:	79fb      	ldrb	r3, [r7, #7]
 8015276:	4413      	add	r3, r2
 8015278:	781b      	ldrb	r3, [r3, #0]
  }
}
 801527a:	4618      	mov	r0, r3
 801527c:	370c      	adds	r7, #12
 801527e:	46bd      	mov	sp, r7
 8015280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015284:	4770      	bx	lr
 8015286:	bf00      	nop
 8015288:	20019fb4 	.word	0x20019fb4
 801528c:	20019fb8 	.word	0x20019fb8
 8015290:	20019fb2 	.word	0x20019fb2
 8015294:	20019fac 	.word	0x20019fac

08015298 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80152a0:	4b2d      	ldr	r3, [pc, #180]	; (8015358 <tcp_parseopt+0xc0>)
 80152a2:	881b      	ldrh	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d053      	beq.n	8015350 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80152a8:	4b2c      	ldr	r3, [pc, #176]	; (801535c <tcp_parseopt+0xc4>)
 80152aa:	2200      	movs	r2, #0
 80152ac:	801a      	strh	r2, [r3, #0]
 80152ae:	e043      	b.n	8015338 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80152b0:	f7ff ffb6 	bl	8015220 <tcp_getoptbyte>
 80152b4:	4603      	mov	r3, r0
 80152b6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80152b8:	7bfb      	ldrb	r3, [r7, #15]
 80152ba:	2b01      	cmp	r3, #1
 80152bc:	d03c      	beq.n	8015338 <tcp_parseopt+0xa0>
 80152be:	2b02      	cmp	r3, #2
 80152c0:	d002      	beq.n	80152c8 <tcp_parseopt+0x30>
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d03f      	beq.n	8015346 <tcp_parseopt+0xae>
 80152c6:	e026      	b.n	8015316 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80152c8:	f7ff ffaa 	bl	8015220 <tcp_getoptbyte>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b04      	cmp	r3, #4
 80152d0:	d13b      	bne.n	801534a <tcp_parseopt+0xb2>
 80152d2:	4b22      	ldr	r3, [pc, #136]	; (801535c <tcp_parseopt+0xc4>)
 80152d4:	881b      	ldrh	r3, [r3, #0]
 80152d6:	3302      	adds	r3, #2
 80152d8:	4a1f      	ldr	r2, [pc, #124]	; (8015358 <tcp_parseopt+0xc0>)
 80152da:	8812      	ldrh	r2, [r2, #0]
 80152dc:	4293      	cmp	r3, r2
 80152de:	dc34      	bgt.n	801534a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80152e0:	f7ff ff9e 	bl	8015220 <tcp_getoptbyte>
 80152e4:	4603      	mov	r3, r0
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	021b      	lsls	r3, r3, #8
 80152ea:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80152ec:	f7ff ff98 	bl	8015220 <tcp_getoptbyte>
 80152f0:	4603      	mov	r3, r0
 80152f2:	b29a      	uxth	r2, r3
 80152f4:	89bb      	ldrh	r3, [r7, #12]
 80152f6:	4313      	orrs	r3, r2
 80152f8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80152fa:	89bb      	ldrh	r3, [r7, #12]
 80152fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015300:	d804      	bhi.n	801530c <tcp_parseopt+0x74>
 8015302:	89bb      	ldrh	r3, [r7, #12]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d001      	beq.n	801530c <tcp_parseopt+0x74>
 8015308:	89ba      	ldrh	r2, [r7, #12]
 801530a:	e001      	b.n	8015310 <tcp_parseopt+0x78>
 801530c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8015314:	e010      	b.n	8015338 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8015316:	f7ff ff83 	bl	8015220 <tcp_getoptbyte>
 801531a:	4603      	mov	r3, r0
 801531c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801531e:	7afb      	ldrb	r3, [r7, #11]
 8015320:	2b01      	cmp	r3, #1
 8015322:	d914      	bls.n	801534e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8015324:	7afb      	ldrb	r3, [r7, #11]
 8015326:	b29a      	uxth	r2, r3
 8015328:	4b0c      	ldr	r3, [pc, #48]	; (801535c <tcp_parseopt+0xc4>)
 801532a:	881b      	ldrh	r3, [r3, #0]
 801532c:	4413      	add	r3, r2
 801532e:	b29b      	uxth	r3, r3
 8015330:	3b02      	subs	r3, #2
 8015332:	b29a      	uxth	r2, r3
 8015334:	4b09      	ldr	r3, [pc, #36]	; (801535c <tcp_parseopt+0xc4>)
 8015336:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015338:	4b08      	ldr	r3, [pc, #32]	; (801535c <tcp_parseopt+0xc4>)
 801533a:	881a      	ldrh	r2, [r3, #0]
 801533c:	4b06      	ldr	r3, [pc, #24]	; (8015358 <tcp_parseopt+0xc0>)
 801533e:	881b      	ldrh	r3, [r3, #0]
 8015340:	429a      	cmp	r2, r3
 8015342:	d3b5      	bcc.n	80152b0 <tcp_parseopt+0x18>
 8015344:	e004      	b.n	8015350 <tcp_parseopt+0xb8>
        return;
 8015346:	bf00      	nop
 8015348:	e002      	b.n	8015350 <tcp_parseopt+0xb8>
          return;
 801534a:	bf00      	nop
 801534c:	e000      	b.n	8015350 <tcp_parseopt+0xb8>
          return;
 801534e:	bf00      	nop
      }
    }
  }
}
 8015350:	3710      	adds	r7, #16
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}
 8015356:	bf00      	nop
 8015358:	20019fb0 	.word	0x20019fb0
 801535c:	20019fb8 	.word	0x20019fb8

08015360 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015360:	b480      	push	{r7}
 8015362:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015364:	4b05      	ldr	r3, [pc, #20]	; (801537c <tcp_trigger_input_pcb_close+0x1c>)
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	f043 0310 	orr.w	r3, r3, #16
 801536c:	b2da      	uxtb	r2, r3
 801536e:	4b03      	ldr	r3, [pc, #12]	; (801537c <tcp_trigger_input_pcb_close+0x1c>)
 8015370:	701a      	strb	r2, [r3, #0]
}
 8015372:	bf00      	nop
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr
 801537c:	20019fc9 	.word	0x20019fc9

08015380 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b086      	sub	sp, #24
 8015384:	af00      	add	r7, sp, #0
 8015386:	60f8      	str	r0, [r7, #12]
 8015388:	607b      	str	r3, [r7, #4]
 801538a:	460b      	mov	r3, r1
 801538c:	817b      	strh	r3, [r7, #10]
 801538e:	4613      	mov	r3, r2
 8015390:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015392:	897a      	ldrh	r2, [r7, #10]
 8015394:	893b      	ldrh	r3, [r7, #8]
 8015396:	4413      	add	r3, r2
 8015398:	b29b      	uxth	r3, r3
 801539a:	3314      	adds	r3, #20
 801539c:	b29b      	uxth	r3, r3
 801539e:	2200      	movs	r2, #0
 80153a0:	4619      	mov	r1, r3
 80153a2:	2001      	movs	r0, #1
 80153a4:	f7fb f9c0 	bl	8010728 <pbuf_alloc>
 80153a8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d057      	beq.n	8015460 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	895b      	ldrh	r3, [r3, #10]
 80153b4:	461a      	mov	r2, r3
 80153b6:	897b      	ldrh	r3, [r7, #10]
 80153b8:	3314      	adds	r3, #20
 80153ba:	429a      	cmp	r2, r3
 80153bc:	da05      	bge.n	80153ca <tcp_output_alloc_header+0x4a>
 80153be:	4b2b      	ldr	r3, [pc, #172]	; (801546c <tcp_output_alloc_header+0xec>)
 80153c0:	2273      	movs	r2, #115	; 0x73
 80153c2:	492b      	ldr	r1, [pc, #172]	; (8015470 <tcp_output_alloc_header+0xf0>)
 80153c4:	482b      	ldr	r0, [pc, #172]	; (8015474 <tcp_output_alloc_header+0xf4>)
 80153c6:	f002 fc6d 	bl	8017ca4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	8adb      	ldrh	r3, [r3, #22]
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7f5 fc63 	bl	800aca0 <lwip_htons>
 80153da:	4603      	mov	r3, r0
 80153dc:	461a      	mov	r2, r3
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	8b1b      	ldrh	r3, [r3, #24]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7f5 fc5a 	bl	800aca0 <lwip_htons>
 80153ec:	4603      	mov	r3, r0
 80153ee:	461a      	mov	r2, r3
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153fe:	4618      	mov	r0, r3
 8015400:	f7f5 fc5c 	bl	800acbc <lwip_htonl>
 8015404:	4602      	mov	r2, r0
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801540a:	897b      	ldrh	r3, [r7, #10]
 801540c:	089b      	lsrs	r3, r3, #2
 801540e:	b29b      	uxth	r3, r3
 8015410:	3305      	adds	r3, #5
 8015412:	b29b      	uxth	r3, r3
 8015414:	031b      	lsls	r3, r3, #12
 8015416:	b29b      	uxth	r3, r3
 8015418:	f043 0310 	orr.w	r3, r3, #16
 801541c:	b29b      	uxth	r3, r3
 801541e:	4618      	mov	r0, r3
 8015420:	f7f5 fc3e 	bl	800aca0 <lwip_htons>
 8015424:	4603      	mov	r3, r0
 8015426:	461a      	mov	r2, r3
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015430:	4618      	mov	r0, r3
 8015432:	f7f5 fc35 	bl	800aca0 <lwip_htons>
 8015436:	4603      	mov	r3, r0
 8015438:	461a      	mov	r2, r3
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	2200      	movs	r2, #0
 8015442:	741a      	strb	r2, [r3, #16]
 8015444:	2200      	movs	r2, #0
 8015446:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	2200      	movs	r2, #0
 801544c:	749a      	strb	r2, [r3, #18]
 801544e:	2200      	movs	r2, #0
 8015450:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015456:	68fa      	ldr	r2, [r7, #12]
 8015458:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801545a:	441a      	add	r2, r3
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015460:	697b      	ldr	r3, [r7, #20]
}
 8015462:	4618      	mov	r0, r3
 8015464:	3718      	adds	r7, #24
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	0801b86c 	.word	0x0801b86c
 8015470:	0801b8a0 	.word	0x0801b8a0
 8015474:	0801b8d0 	.word	0x0801b8d0

08015478 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015478:	b5b0      	push	{r4, r5, r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015484:	2b00      	cmp	r3, #0
 8015486:	d02c      	beq.n	80154e2 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801548c:	60fb      	str	r3, [r7, #12]
 801548e:	e002      	b.n	8015496 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d1f8      	bne.n	8015490 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	68db      	ldr	r3, [r3, #12]
 80154a2:	899b      	ldrh	r3, [r3, #12]
 80154a4:	b29b      	uxth	r3, r3
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7f5 fbfa 	bl	800aca0 <lwip_htons>
 80154ac:	4603      	mov	r3, r0
 80154ae:	f003 0307 	and.w	r3, r3, #7
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d115      	bne.n	80154e2 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	68dc      	ldr	r4, [r3, #12]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	68db      	ldr	r3, [r3, #12]
 80154be:	899b      	ldrh	r3, [r3, #12]
 80154c0:	b29d      	uxth	r5, r3
 80154c2:	2001      	movs	r0, #1
 80154c4:	f7f5 fbec 	bl	800aca0 <lwip_htons>
 80154c8:	4603      	mov	r3, r0
 80154ca:	432b      	orrs	r3, r5
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	7e9b      	ldrb	r3, [r3, #26]
 80154d4:	f043 0320 	orr.w	r3, r3, #32
 80154d8:	b2da      	uxtb	r2, r3
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80154de:	2300      	movs	r3, #0
 80154e0:	e004      	b.n	80154ec <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80154e2:	2101      	movs	r1, #1
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f000 fcc3 	bl	8015e70 <tcp_enqueue_flags>
 80154ea:	4603      	mov	r3, r0
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3710      	adds	r7, #16
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bdb0      	pop	{r4, r5, r7, pc}

080154f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80154f4:	b590      	push	{r4, r7, lr}
 80154f6:	b087      	sub	sp, #28
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	603b      	str	r3, [r7, #0]
 8015500:	4613      	mov	r3, r2
 8015502:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015504:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015508:	f003 0301 	and.w	r3, r3, #1
 801550c:	2b00      	cmp	r3, #0
 801550e:	d001      	beq.n	8015514 <tcp_create_segment+0x20>
 8015510:	2304      	movs	r3, #4
 8015512:	e000      	b.n	8015516 <tcp_create_segment+0x22>
 8015514:	2300      	movs	r3, #0
 8015516:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015518:	2003      	movs	r0, #3
 801551a:	f7fa fea9 	bl	8010270 <memp_malloc>
 801551e:	6138      	str	r0, [r7, #16]
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d104      	bne.n	8015530 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015526:	68b8      	ldr	r0, [r7, #8]
 8015528:	f7fb fc70 	bl	8010e0c <pbuf_free>
    return NULL;
 801552c:	2300      	movs	r3, #0
 801552e:	e061      	b.n	80155f4 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015536:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	2200      	movs	r2, #0
 801553c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	68ba      	ldr	r2, [r7, #8]
 8015542:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	891a      	ldrh	r2, [r3, #8]
 8015548:	7dfb      	ldrb	r3, [r7, #23]
 801554a:	b29b      	uxth	r3, r3
 801554c:	429a      	cmp	r2, r3
 801554e:	d205      	bcs.n	801555c <tcp_create_segment+0x68>
 8015550:	4b2a      	ldr	r3, [pc, #168]	; (80155fc <tcp_create_segment+0x108>)
 8015552:	22ba      	movs	r2, #186	; 0xba
 8015554:	492a      	ldr	r1, [pc, #168]	; (8015600 <tcp_create_segment+0x10c>)
 8015556:	482b      	ldr	r0, [pc, #172]	; (8015604 <tcp_create_segment+0x110>)
 8015558:	f002 fba4 	bl	8017ca4 <iprintf>
  seg->len = p->tot_len - optlen;
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	891a      	ldrh	r2, [r3, #8]
 8015560:	7dfb      	ldrb	r3, [r7, #23]
 8015562:	b29b      	uxth	r3, r3
 8015564:	1ad3      	subs	r3, r2, r3
 8015566:	b29a      	uxth	r2, r3
 8015568:	693b      	ldr	r3, [r7, #16]
 801556a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801556c:	2114      	movs	r1, #20
 801556e:	68b8      	ldr	r0, [r7, #8]
 8015570:	f7fb fc28 	bl	8010dc4 <pbuf_header>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	d004      	beq.n	8015584 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801557a:	6938      	ldr	r0, [r7, #16]
 801557c:	f7fd f8b7 	bl	80126ee <tcp_seg_free>
    return NULL;
 8015580:	2300      	movs	r3, #0
 8015582:	e037      	b.n	80155f4 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	685a      	ldr	r2, [r3, #4]
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	68dc      	ldr	r4, [r3, #12]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	8adb      	ldrh	r3, [r3, #22]
 8015596:	4618      	mov	r0, r3
 8015598:	f7f5 fb82 	bl	800aca0 <lwip_htons>
 801559c:	4603      	mov	r3, r0
 801559e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	68dc      	ldr	r4, [r3, #12]
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	8b1b      	ldrh	r3, [r3, #24]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7f5 fb79 	bl	800aca0 <lwip_htons>
 80155ae:	4603      	mov	r3, r0
 80155b0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	68dc      	ldr	r4, [r3, #12]
 80155b6:	6838      	ldr	r0, [r7, #0]
 80155b8:	f7f5 fb80 	bl	800acbc <lwip_htonl>
 80155bc:	4603      	mov	r3, r0
 80155be:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	68dc      	ldr	r4, [r3, #12]
 80155c4:	7dfb      	ldrb	r3, [r7, #23]
 80155c6:	089b      	lsrs	r3, r3, #2
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	3305      	adds	r3, #5
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	031b      	lsls	r3, r3, #12
 80155d2:	b29a      	uxth	r2, r3
 80155d4:	79fb      	ldrb	r3, [r7, #7]
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	4313      	orrs	r3, r2
 80155da:	b29b      	uxth	r3, r3
 80155dc:	4618      	mov	r0, r3
 80155de:	f7f5 fb5f 	bl	800aca0 <lwip_htons>
 80155e2:	4603      	mov	r3, r0
 80155e4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	2200      	movs	r2, #0
 80155ec:	749a      	strb	r2, [r3, #18]
 80155ee:	2200      	movs	r2, #0
 80155f0:	74da      	strb	r2, [r3, #19]
  return seg;
 80155f2:	693b      	ldr	r3, [r7, #16]
}
 80155f4:	4618      	mov	r0, r3
 80155f6:	371c      	adds	r7, #28
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd90      	pop	{r4, r7, pc}
 80155fc:	0801b86c 	.word	0x0801b86c
 8015600:	0801b8f8 	.word	0x0801b8f8
 8015604:	0801b8d0 	.word	0x0801b8d0

08015608 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b086      	sub	sp, #24
 801560c:	af00      	add	r7, sp, #0
 801560e:	607b      	str	r3, [r7, #4]
 8015610:	4603      	mov	r3, r0
 8015612:	73fb      	strb	r3, [r7, #15]
 8015614:	460b      	mov	r3, r1
 8015616:	81bb      	strh	r3, [r7, #12]
 8015618:	4613      	mov	r3, r2
 801561a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801561c:	89bb      	ldrh	r3, [r7, #12]
 801561e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015620:	89ba      	ldrh	r2, [r7, #12]
 8015622:	897b      	ldrh	r3, [r7, #10]
 8015624:	429a      	cmp	r2, r3
 8015626:	d221      	bcs.n	801566c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801562c:	f003 0302 	and.w	r3, r3, #2
 8015630:	2b00      	cmp	r3, #0
 8015632:	d111      	bne.n	8015658 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8015634:	6a3b      	ldr	r3, [r7, #32]
 8015636:	7e9b      	ldrb	r3, [r3, #26]
 8015638:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801563c:	2b00      	cmp	r3, #0
 801563e:	d115      	bne.n	801566c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8015640:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015644:	2b00      	cmp	r3, #0
 8015646:	d007      	beq.n	8015658 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015648:	6a3b      	ldr	r3, [r7, #32]
 801564a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 801564c:	2b00      	cmp	r3, #0
 801564e:	d103      	bne.n	8015658 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8015650:	6a3b      	ldr	r3, [r7, #32]
 8015652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8015654:	2b00      	cmp	r3, #0
 8015656:	d009      	beq.n	801566c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015658:	89bb      	ldrh	r3, [r7, #12]
 801565a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801565e:	f023 0203 	bic.w	r2, r3, #3
 8015662:	897b      	ldrh	r3, [r7, #10]
 8015664:	4293      	cmp	r3, r2
 8015666:	bf28      	it	cs
 8015668:	4613      	movcs	r3, r2
 801566a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801566c:	8af9      	ldrh	r1, [r7, #22]
 801566e:	7bfb      	ldrb	r3, [r7, #15]
 8015670:	2200      	movs	r2, #0
 8015672:	4618      	mov	r0, r3
 8015674:	f7fb f858 	bl	8010728 <pbuf_alloc>
 8015678:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d101      	bne.n	8015684 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8015680:	2300      	movs	r3, #0
 8015682:	e019      	b.n	80156b8 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d006      	beq.n	801569a <tcp_pbuf_prealloc+0x92>
 801568c:	4b0c      	ldr	r3, [pc, #48]	; (80156c0 <tcp_pbuf_prealloc+0xb8>)
 801568e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015692:	490c      	ldr	r1, [pc, #48]	; (80156c4 <tcp_pbuf_prealloc+0xbc>)
 8015694:	480c      	ldr	r0, [pc, #48]	; (80156c8 <tcp_pbuf_prealloc+0xc0>)
 8015696:	f002 fb05 	bl	8017ca4 <iprintf>
  *oversize = p->len - length;
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	895a      	ldrh	r2, [r3, #10]
 801569e:	89bb      	ldrh	r3, [r7, #12]
 80156a0:	1ad3      	subs	r3, r2, r3
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	89ba      	ldrh	r2, [r7, #12]
 80156ac:	811a      	strh	r2, [r3, #8]
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	891a      	ldrh	r2, [r3, #8]
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	815a      	strh	r2, [r3, #10]
  return p;
 80156b6:	693b      	ldr	r3, [r7, #16]
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3718      	adds	r7, #24
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	0801b86c 	.word	0x0801b86c
 80156c4:	0801b910 	.word	0x0801b910
 80156c8:	0801b8d0 	.word	0x0801b8d0

080156cc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	460b      	mov	r3, r1
 80156d6:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	7d1b      	ldrb	r3, [r3, #20]
 80156dc:	2b04      	cmp	r3, #4
 80156de:	d00e      	beq.n	80156fe <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80156e4:	2b07      	cmp	r3, #7
 80156e6:	d00a      	beq.n	80156fe <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	d006      	beq.n	80156fe <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80156f4:	2b03      	cmp	r3, #3
 80156f6:	d002      	beq.n	80156fe <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80156f8:	f06f 030a 	mvn.w	r3, #10
 80156fc:	e04f      	b.n	801579e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80156fe:	887b      	ldrh	r3, [r7, #2]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d101      	bne.n	8015708 <tcp_write_checks+0x3c>
    return ERR_OK;
 8015704:	2300      	movs	r3, #0
 8015706:	e04a      	b.n	801579e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801570e:	887a      	ldrh	r2, [r7, #2]
 8015710:	429a      	cmp	r2, r3
 8015712:	d909      	bls.n	8015728 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	7e9b      	ldrb	r3, [r3, #26]
 8015718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801571c:	b2da      	uxtb	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015726:	e03a      	b.n	801579e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801572e:	2b08      	cmp	r3, #8
 8015730:	d806      	bhi.n	8015740 <tcp_write_checks+0x74>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015738:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801573c:	4293      	cmp	r3, r2
 801573e:	d909      	bls.n	8015754 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	7e9b      	ldrb	r3, [r3, #26]
 8015744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015748:	b2da      	uxtb	r2, r3
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801574e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015752:	e024      	b.n	801579e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801575a:	2b00      	cmp	r3, #0
 801575c:	d00f      	beq.n	801577e <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015762:	2b00      	cmp	r3, #0
 8015764:	d11a      	bne.n	801579c <tcp_write_checks+0xd0>
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801576a:	2b00      	cmp	r3, #0
 801576c:	d116      	bne.n	801579c <tcp_write_checks+0xd0>
 801576e:	4b0e      	ldr	r3, [pc, #56]	; (80157a8 <tcp_write_checks+0xdc>)
 8015770:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8015774:	490d      	ldr	r1, [pc, #52]	; (80157ac <tcp_write_checks+0xe0>)
 8015776:	480e      	ldr	r0, [pc, #56]	; (80157b0 <tcp_write_checks+0xe4>)
 8015778:	f002 fa94 	bl	8017ca4 <iprintf>
 801577c:	e00e      	b.n	801579c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015782:	2b00      	cmp	r3, #0
 8015784:	d103      	bne.n	801578e <tcp_write_checks+0xc2>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801578a:	2b00      	cmp	r3, #0
 801578c:	d006      	beq.n	801579c <tcp_write_checks+0xd0>
 801578e:	4b06      	ldr	r3, [pc, #24]	; (80157a8 <tcp_write_checks+0xdc>)
 8015790:	f240 1259 	movw	r2, #345	; 0x159
 8015794:	4907      	ldr	r1, [pc, #28]	; (80157b4 <tcp_write_checks+0xe8>)
 8015796:	4806      	ldr	r0, [pc, #24]	; (80157b0 <tcp_write_checks+0xe4>)
 8015798:	f002 fa84 	bl	8017ca4 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801579c:	2300      	movs	r3, #0
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	0801b86c 	.word	0x0801b86c
 80157ac:	0801b924 	.word	0x0801b924
 80157b0:	0801b8d0 	.word	0x0801b8d0
 80157b4:	0801b960 	.word	0x0801b960

080157b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80157b8:	b5b0      	push	{r4, r5, r7, lr}
 80157ba:	b09a      	sub	sp, #104	; 0x68
 80157bc:	af04      	add	r7, sp, #16
 80157be:	60f8      	str	r0, [r7, #12]
 80157c0:	60b9      	str	r1, [r7, #8]
 80157c2:	4611      	mov	r1, r2
 80157c4:	461a      	mov	r2, r3
 80157c6:	460b      	mov	r3, r1
 80157c8:	80fb      	strh	r3, [r7, #6]
 80157ca:	4613      	mov	r3, r2
 80157cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80157ce:	2300      	movs	r3, #0
 80157d0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80157d2:	2300      	movs	r3, #0
 80157d4:	653b      	str	r3, [r7, #80]	; 0x50
 80157d6:	2300      	movs	r3, #0
 80157d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80157da:	2300      	movs	r3, #0
 80157dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80157de:	2300      	movs	r3, #0
 80157e0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80157e2:	2300      	movs	r3, #0
 80157e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80157e8:	2300      	movs	r3, #0
 80157ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80157ee:	2300      	movs	r3, #0
 80157f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80157f4:	2300      	movs	r3, #0
 80157f6:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80157f8:	2300      	movs	r3, #0
 80157fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80157fc:	2300      	movs	r3, #0
 80157fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015806:	085b      	lsrs	r3, r3, #1
 8015808:	b29a      	uxth	r2, r3
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801580e:	4293      	cmp	r3, r2
 8015810:	bf28      	it	cs
 8015812:	4613      	movcs	r3, r2
 8015814:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015818:	2b00      	cmp	r3, #0
 801581a:	d102      	bne.n	8015822 <tcp_write+0x6a>
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015820:	e000      	b.n	8015824 <tcp_write+0x6c>
 8015822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015824:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d109      	bne.n	8015840 <tcp_write+0x88>
 801582c:	4b94      	ldr	r3, [pc, #592]	; (8015a80 <tcp_write+0x2c8>)
 801582e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8015832:	4994      	ldr	r1, [pc, #592]	; (8015a84 <tcp_write+0x2cc>)
 8015834:	4894      	ldr	r0, [pc, #592]	; (8015a88 <tcp_write+0x2d0>)
 8015836:	f002 fa35 	bl	8017ca4 <iprintf>
 801583a:	f06f 030f 	mvn.w	r3, #15
 801583e:	e30d      	b.n	8015e5c <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015840:	88fb      	ldrh	r3, [r7, #6]
 8015842:	4619      	mov	r1, r3
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	f7ff ff41 	bl	80156cc <tcp_write_checks>
 801584a:	4603      	mov	r3, r0
 801584c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015850:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015854:	2b00      	cmp	r3, #0
 8015856:	d002      	beq.n	801585e <tcp_write+0xa6>
    return err;
 8015858:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801585c:	e2fe      	b.n	8015e5c <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015864:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801586c:	2b00      	cmp	r3, #0
 801586e:	f000 80f8 	beq.w	8015a62 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015876:	653b      	str	r3, [r7, #80]	; 0x50
 8015878:	e002      	b.n	8015880 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801587a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d1f8      	bne.n	801587a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8015888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801588a:	7a9b      	ldrb	r3, [r3, #10]
 801588c:	f003 0301 	and.w	r3, r3, #1
 8015890:	2b00      	cmp	r3, #0
 8015892:	d001      	beq.n	8015898 <tcp_write+0xe0>
 8015894:	2304      	movs	r3, #4
 8015896:	e000      	b.n	801589a <tcp_write+0xe2>
 8015898:	2300      	movs	r3, #0
 801589a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801589c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801589e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158a0:	891b      	ldrh	r3, [r3, #8]
 80158a2:	4619      	mov	r1, r3
 80158a4:	8c3b      	ldrh	r3, [r7, #32]
 80158a6:	440b      	add	r3, r1
 80158a8:	429a      	cmp	r2, r3
 80158aa:	da06      	bge.n	80158ba <tcp_write+0x102>
 80158ac:	4b74      	ldr	r3, [pc, #464]	; (8015a80 <tcp_write+0x2c8>)
 80158ae:	f240 12c7 	movw	r2, #455	; 0x1c7
 80158b2:	4976      	ldr	r1, [pc, #472]	; (8015a8c <tcp_write+0x2d4>)
 80158b4:	4874      	ldr	r0, [pc, #464]	; (8015a88 <tcp_write+0x2d0>)
 80158b6:	f002 f9f5 	bl	8017ca4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80158ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158bc:	891a      	ldrh	r2, [r3, #8]
 80158be:	8c3b      	ldrh	r3, [r7, #32]
 80158c0:	4413      	add	r3, r2
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80158c6:	1ad3      	subs	r3, r2, r3
 80158c8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80158d0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80158d2:	8a7b      	ldrh	r3, [r7, #18]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d027      	beq.n	8015928 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80158d8:	8a7b      	ldrh	r3, [r7, #18]
 80158da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80158dc:	429a      	cmp	r2, r3
 80158de:	d206      	bcs.n	80158ee <tcp_write+0x136>
 80158e0:	4b67      	ldr	r3, [pc, #412]	; (8015a80 <tcp_write+0x2c8>)
 80158e2:	f240 12d9 	movw	r2, #473	; 0x1d9
 80158e6:	496a      	ldr	r1, [pc, #424]	; (8015a90 <tcp_write+0x2d8>)
 80158e8:	4867      	ldr	r0, [pc, #412]	; (8015a88 <tcp_write+0x2d0>)
 80158ea:	f002 f9db 	bl	8017ca4 <iprintf>
      seg = last_unsent;
 80158ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80158f2:	8a7b      	ldrh	r3, [r7, #18]
 80158f4:	88fa      	ldrh	r2, [r7, #6]
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d901      	bls.n	80158fe <tcp_write+0x146>
 80158fa:	8a7b      	ldrh	r3, [r7, #18]
 80158fc:	e000      	b.n	8015900 <tcp_write+0x148>
 80158fe:	88fb      	ldrh	r3, [r7, #6]
 8015900:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015902:	4293      	cmp	r3, r2
 8015904:	bfa8      	it	ge
 8015906:	4613      	movge	r3, r2
 8015908:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801590a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801590e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015910:	4413      	add	r3, r2
 8015912:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015916:	8a7a      	ldrh	r2, [r7, #18]
 8015918:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801591a:	1ad3      	subs	r3, r2, r3
 801591c:	b29b      	uxth	r3, r3
 801591e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015920:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015922:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015924:	1ad3      	subs	r3, r2, r3
 8015926:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015928:	8a7b      	ldrh	r3, [r7, #18]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d00b      	beq.n	8015946 <tcp_write+0x18e>
 801592e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015932:	88fb      	ldrh	r3, [r7, #6]
 8015934:	429a      	cmp	r2, r3
 8015936:	d006      	beq.n	8015946 <tcp_write+0x18e>
 8015938:	4b51      	ldr	r3, [pc, #324]	; (8015a80 <tcp_write+0x2c8>)
 801593a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801593e:	4955      	ldr	r1, [pc, #340]	; (8015a94 <tcp_write+0x2dc>)
 8015940:	4851      	ldr	r0, [pc, #324]	; (8015a88 <tcp_write+0x2d0>)
 8015942:	f002 f9af 	bl	8017ca4 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015946:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801594a:	88fb      	ldrh	r3, [r7, #6]
 801594c:	429a      	cmp	r2, r3
 801594e:	f080 8169 	bcs.w	8015c24 <tcp_write+0x46c>
 8015952:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015954:	2b00      	cmp	r3, #0
 8015956:	f000 8165 	beq.w	8015c24 <tcp_write+0x46c>
 801595a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801595c:	891b      	ldrh	r3, [r3, #8]
 801595e:	2b00      	cmp	r3, #0
 8015960:	f000 8160 	beq.w	8015c24 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015964:	88fa      	ldrh	r2, [r7, #6]
 8015966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801596a:	1ad2      	subs	r2, r2, r3
 801596c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801596e:	4293      	cmp	r3, r2
 8015970:	bfa8      	it	ge
 8015972:	4613      	movge	r3, r2
 8015974:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015978:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801597a:	797b      	ldrb	r3, [r7, #5]
 801597c:	f003 0301 	and.w	r3, r3, #1
 8015980:	2b00      	cmp	r3, #0
 8015982:	d027      	beq.n	80159d4 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015984:	f107 0012 	add.w	r0, r7, #18
 8015988:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801598a:	8bf9      	ldrh	r1, [r7, #30]
 801598c:	2301      	movs	r3, #1
 801598e:	9302      	str	r3, [sp, #8]
 8015990:	797b      	ldrb	r3, [r7, #5]
 8015992:	9301      	str	r3, [sp, #4]
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	9300      	str	r3, [sp, #0]
 8015998:	4603      	mov	r3, r0
 801599a:	2004      	movs	r0, #4
 801599c:	f7ff fe34 	bl	8015608 <tcp_pbuf_prealloc>
 80159a0:	6578      	str	r0, [r7, #84]	; 0x54
 80159a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	f000 8227 	beq.w	8015df8 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80159aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159ac:	6858      	ldr	r0, [r3, #4]
 80159ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159b2:	68ba      	ldr	r2, [r7, #8]
 80159b4:	4413      	add	r3, r2
 80159b6:	8bfa      	ldrh	r2, [r7, #30]
 80159b8:	4619      	mov	r1, r3
 80159ba:	f002 f960 	bl	8017c7e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80159be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80159c0:	f7fb fabe 	bl	8010f40 <pbuf_clen>
 80159c4:	4603      	mov	r3, r0
 80159c6:	461a      	mov	r2, r3
 80159c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80159cc:	4413      	add	r3, r2
 80159ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80159d2:	e03f      	b.n	8015a54 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80159d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	637b      	str	r3, [r7, #52]	; 0x34
 80159da:	e002      	b.n	80159e2 <tcp_write+0x22a>
 80159dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	637b      	str	r3, [r7, #52]	; 0x34
 80159e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d1f8      	bne.n	80159dc <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80159ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159ec:	7b1b      	ldrb	r3, [r3, #12]
 80159ee:	2b01      	cmp	r3, #1
 80159f0:	d115      	bne.n	8015a1e <tcp_write+0x266>
 80159f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159f8:	8952      	ldrh	r2, [r2, #10]
 80159fa:	441a      	add	r2, r3
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d10d      	bne.n	8015a1e <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015a02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d006      	beq.n	8015a18 <tcp_write+0x260>
 8015a0a:	4b1d      	ldr	r3, [pc, #116]	; (8015a80 <tcp_write+0x2c8>)
 8015a0c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015a10:	4921      	ldr	r1, [pc, #132]	; (8015a98 <tcp_write+0x2e0>)
 8015a12:	481d      	ldr	r0, [pc, #116]	; (8015a88 <tcp_write+0x2d0>)
 8015a14:	f002 f946 	bl	8017ca4 <iprintf>
          extendlen = seglen;
 8015a18:	8bfb      	ldrh	r3, [r7, #30]
 8015a1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015a1c:	e01a      	b.n	8015a54 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015a1e:	8bfb      	ldrh	r3, [r7, #30]
 8015a20:	2201      	movs	r2, #1
 8015a22:	4619      	mov	r1, r3
 8015a24:	2004      	movs	r0, #4
 8015a26:	f7fa fe7f 	bl	8010728 <pbuf_alloc>
 8015a2a:	6578      	str	r0, [r7, #84]	; 0x54
 8015a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	f000 81e4 	beq.w	8015dfc <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8015a34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a38:	68ba      	ldr	r2, [r7, #8]
 8015a3a:	441a      	add	r2, r3
 8015a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a3e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015a40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015a42:	f7fb fa7d 	bl	8010f40 <pbuf_clen>
 8015a46:	4603      	mov	r3, r0
 8015a48:	461a      	mov	r2, r3
 8015a4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015a4e:	4413      	add	r3, r2
 8015a50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8015a54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015a58:	8bfb      	ldrh	r3, [r7, #30]
 8015a5a:	4413      	add	r3, r2
 8015a5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015a60:	e0e0      	b.n	8015c24 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	f000 80db 	beq.w	8015c24 <tcp_write+0x46c>
 8015a6e:	4b04      	ldr	r3, [pc, #16]	; (8015a80 <tcp_write+0x2c8>)
 8015a70:	f240 2225 	movw	r2, #549	; 0x225
 8015a74:	4909      	ldr	r1, [pc, #36]	; (8015a9c <tcp_write+0x2e4>)
 8015a76:	4804      	ldr	r0, [pc, #16]	; (8015a88 <tcp_write+0x2d0>)
 8015a78:	f002 f914 	bl	8017ca4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015a7c:	e0d2      	b.n	8015c24 <tcp_write+0x46c>
 8015a7e:	bf00      	nop
 8015a80:	0801b86c 	.word	0x0801b86c
 8015a84:	0801b994 	.word	0x0801b994
 8015a88:	0801b8d0 	.word	0x0801b8d0
 8015a8c:	0801b9c8 	.word	0x0801b9c8
 8015a90:	0801b9e0 	.word	0x0801b9e0
 8015a94:	0801ba00 	.word	0x0801ba00
 8015a98:	0801ba20 	.word	0x0801ba20
 8015a9c:	0801ba4c 	.word	0x0801ba4c
    struct pbuf *p;
    u16_t left = len - pos;
 8015aa0:	88fa      	ldrh	r2, [r7, #6]
 8015aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015aa6:	1ad3      	subs	r3, r2, r3
 8015aa8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ab2:	1ad3      	subs	r3, r2, r3
 8015ab4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015ab6:	8b7a      	ldrh	r2, [r7, #26]
 8015ab8:	8bbb      	ldrh	r3, [r7, #28]
 8015aba:	4293      	cmp	r3, r2
 8015abc:	bf28      	it	cs
 8015abe:	4613      	movcs	r3, r2
 8015ac0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015ac2:	797b      	ldrb	r3, [r7, #5]
 8015ac4:	f003 0301 	and.w	r3, r3, #1
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d036      	beq.n	8015b3a <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	8b3b      	ldrh	r3, [r7, #24]
 8015ad4:	4413      	add	r3, r2
 8015ad6:	b299      	uxth	r1, r3
 8015ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	bf0c      	ite	eq
 8015ade:	2301      	moveq	r3, #1
 8015ae0:	2300      	movne	r3, #0
 8015ae2:	b2db      	uxtb	r3, r3
 8015ae4:	f107 0012 	add.w	r0, r7, #18
 8015ae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015aea:	9302      	str	r3, [sp, #8]
 8015aec:	797b      	ldrb	r3, [r7, #5]
 8015aee:	9301      	str	r3, [sp, #4]
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	9300      	str	r3, [sp, #0]
 8015af4:	4603      	mov	r3, r0
 8015af6:	2000      	movs	r0, #0
 8015af8:	f7ff fd86 	bl	8015608 <tcp_pbuf_prealloc>
 8015afc:	6338      	str	r0, [r7, #48]	; 0x30
 8015afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	f000 817d 	beq.w	8015e00 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b08:	895b      	ldrh	r3, [r3, #10]
 8015b0a:	8b3a      	ldrh	r2, [r7, #24]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d906      	bls.n	8015b1e <tcp_write+0x366>
 8015b10:	4b8f      	ldr	r3, [pc, #572]	; (8015d50 <tcp_write+0x598>)
 8015b12:	f240 2241 	movw	r2, #577	; 0x241
 8015b16:	498f      	ldr	r1, [pc, #572]	; (8015d54 <tcp_write+0x59c>)
 8015b18:	488f      	ldr	r0, [pc, #572]	; (8015d58 <tcp_write+0x5a0>)
 8015b1a:	f002 f8c3 	bl	8017ca4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b20:	685a      	ldr	r2, [r3, #4]
 8015b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b26:	18d0      	adds	r0, r2, r3
 8015b28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b2c:	68ba      	ldr	r2, [r7, #8]
 8015b2e:	4413      	add	r3, r2
 8015b30:	8b3a      	ldrh	r2, [r7, #24]
 8015b32:	4619      	mov	r1, r3
 8015b34:	f002 f8a3 	bl	8017c7e <memcpy>
 8015b38:	e02e      	b.n	8015b98 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015b3a:	8a7b      	ldrh	r3, [r7, #18]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d006      	beq.n	8015b4e <tcp_write+0x396>
 8015b40:	4b83      	ldr	r3, [pc, #524]	; (8015d50 <tcp_write+0x598>)
 8015b42:	f240 224b 	movw	r2, #587	; 0x24b
 8015b46:	4985      	ldr	r1, [pc, #532]	; (8015d5c <tcp_write+0x5a4>)
 8015b48:	4883      	ldr	r0, [pc, #524]	; (8015d58 <tcp_write+0x5a0>)
 8015b4a:	f002 f8ab 	bl	8017ca4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015b4e:	8b3b      	ldrh	r3, [r7, #24]
 8015b50:	2201      	movs	r2, #1
 8015b52:	4619      	mov	r1, r3
 8015b54:	2000      	movs	r0, #0
 8015b56:	f7fa fde7 	bl	8010728 <pbuf_alloc>
 8015b5a:	6178      	str	r0, [r7, #20]
 8015b5c:	697b      	ldr	r3, [r7, #20]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	f000 8150 	beq.w	8015e04 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8015b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b68:	68ba      	ldr	r2, [r7, #8]
 8015b6a:	441a      	add	r2, r3
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b74:	b29b      	uxth	r3, r3
 8015b76:	2200      	movs	r2, #0
 8015b78:	4619      	mov	r1, r3
 8015b7a:	2000      	movs	r0, #0
 8015b7c:	f7fa fdd4 	bl	8010728 <pbuf_alloc>
 8015b80:	6338      	str	r0, [r7, #48]	; 0x30
 8015b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d103      	bne.n	8015b90 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015b88:	6978      	ldr	r0, [r7, #20]
 8015b8a:	f7fb f93f 	bl	8010e0c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015b8e:	e13c      	b.n	8015e0a <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015b90:	6979      	ldr	r1, [r7, #20]
 8015b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b94:	f7fb fa14 	bl	8010fc0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b9a:	f7fb f9d1 	bl	8010f40 <pbuf_clen>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015ba6:	4413      	add	r3, r2
 8015ba8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015bac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015bb0:	2b09      	cmp	r3, #9
 8015bb2:	d805      	bhi.n	8015bc0 <tcp_write+0x408>
 8015bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015bb8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015bbc:	4293      	cmp	r3, r2
 8015bbe:	d903      	bls.n	8015bc8 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bc2:	f7fb f923 	bl	8010e0c <pbuf_free>
      goto memerr;
 8015bc6:	e120      	b.n	8015e0a <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015bcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015bd0:	441a      	add	r2, r3
 8015bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	4613      	mov	r3, r2
 8015bda:	2200      	movs	r2, #0
 8015bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015bde:	68f8      	ldr	r0, [r7, #12]
 8015be0:	f7ff fc88 	bl	80154f4 <tcp_create_segment>
 8015be4:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f000 810d 	beq.w	8015e08 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d102      	bne.n	8015bfa <tcp_write+0x442>
      queue = seg;
 8015bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8015bf8:	e00c      	b.n	8015c14 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d106      	bne.n	8015c0e <tcp_write+0x456>
 8015c00:	4b53      	ldr	r3, [pc, #332]	; (8015d50 <tcp_write+0x598>)
 8015c02:	f240 2285 	movw	r2, #645	; 0x285
 8015c06:	4956      	ldr	r1, [pc, #344]	; (8015d60 <tcp_write+0x5a8>)
 8015c08:	4853      	ldr	r0, [pc, #332]	; (8015d58 <tcp_write+0x5a0>)
 8015c0a:	f002 f84b 	bl	8017ca4 <iprintf>
      prev_seg->next = seg;
 8015c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015c12:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c16:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015c18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c1c:	8b3b      	ldrh	r3, [r7, #24]
 8015c1e:	4413      	add	r3, r2
 8015c20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015c24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c28:	88fb      	ldrh	r3, [r7, #6]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	f4ff af38 	bcc.w	8015aa0 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015c30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d02c      	beq.n	8015c90 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c3c:	e01e      	b.n	8015c7c <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 8015c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c40:	891a      	ldrh	r2, [r3, #8]
 8015c42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c44:	4413      	add	r3, r2
 8015c46:	b29a      	uxth	r2, r3
 8015c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c4a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d110      	bne.n	8015c76 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c5a:	8952      	ldrh	r2, [r2, #10]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015c60:	68b9      	ldr	r1, [r7, #8]
 8015c62:	4618      	mov	r0, r3
 8015c64:	f002 f80b 	bl	8017c7e <memcpy>
        p->len += oversize_used;
 8015c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c6a:	895a      	ldrh	r2, [r3, #10]
 8015c6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c6e:	4413      	add	r3, r2
 8015c70:	b29a      	uxth	r2, r3
 8015c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c74:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d1dd      	bne.n	8015c3e <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 8015c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c84:	891a      	ldrh	r2, [r3, #8]
 8015c86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c88:	4413      	add	r3, r2
 8015c8a:	b29a      	uxth	r2, r3
 8015c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c8e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015c90:	8a7a      	ldrh	r2, [r7, #18]
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d018      	beq.n	8015cd0 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d106      	bne.n	8015cb2 <tcp_write+0x4fa>
 8015ca4:	4b2a      	ldr	r3, [pc, #168]	; (8015d50 <tcp_write+0x598>)
 8015ca6:	f240 22bb 	movw	r2, #699	; 0x2bb
 8015caa:	492e      	ldr	r1, [pc, #184]	; (8015d64 <tcp_write+0x5ac>)
 8015cac:	482a      	ldr	r0, [pc, #168]	; (8015d58 <tcp_write+0x5a0>)
 8015cae:	f001 fff9 	bl	8017ca4 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7fb f981 	bl	8010fc0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cc0:	891a      	ldrh	r2, [r3, #8]
 8015cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015cc4:	891b      	ldrh	r3, [r3, #8]
 8015cc6:	4413      	add	r3, r2
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ccc:	811a      	strh	r2, [r3, #8]
 8015cce:	e037      	b.n	8015d40 <tcp_write+0x588>
  } else if (extendlen > 0) {
 8015cd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d034      	beq.n	8015d40 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d003      	beq.n	8015ce4 <tcp_write+0x52c>
 8015cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cde:	685b      	ldr	r3, [r3, #4]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d106      	bne.n	8015cf2 <tcp_write+0x53a>
 8015ce4:	4b1a      	ldr	r3, [pc, #104]	; (8015d50 <tcp_write+0x598>)
 8015ce6:	f240 22c1 	movw	r2, #705	; 0x2c1
 8015cea:	491f      	ldr	r1, [pc, #124]	; (8015d68 <tcp_write+0x5b0>)
 8015cec:	481a      	ldr	r0, [pc, #104]	; (8015d58 <tcp_write+0x5a0>)
 8015cee:	f001 ffd9 	bl	8017ca4 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cf8:	e009      	b.n	8015d0e <tcp_write+0x556>
      p->tot_len += extendlen;
 8015cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfc:	891a      	ldrh	r2, [r3, #8]
 8015cfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d00:	4413      	add	r3, r2
 8015d02:	b29a      	uxth	r2, r3
 8015d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d06:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d1f1      	bne.n	8015cfa <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	891a      	ldrh	r2, [r3, #8]
 8015d1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d1c:	4413      	add	r3, r2
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d22:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d26:	895a      	ldrh	r2, [r3, #10]
 8015d28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d2a:	4413      	add	r3, r2
 8015d2c:	b29a      	uxth	r2, r3
 8015d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d30:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d34:	891a      	ldrh	r2, [r3, #8]
 8015d36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d38:	4413      	add	r3, r2
 8015d3a:	b29a      	uxth	r2, r3
 8015d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d3e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d112      	bne.n	8015d6c <tcp_write+0x5b4>
    pcb->unsent = queue;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d4a:	669a      	str	r2, [r3, #104]	; 0x68
 8015d4c:	e011      	b.n	8015d72 <tcp_write+0x5ba>
 8015d4e:	bf00      	nop
 8015d50:	0801b86c 	.word	0x0801b86c
 8015d54:	0801ba7c 	.word	0x0801ba7c
 8015d58:	0801b8d0 	.word	0x0801b8d0
 8015d5c:	0801babc 	.word	0x0801babc
 8015d60:	0801bacc 	.word	0x0801bacc
 8015d64:	0801bae0 	.word	0x0801bae0
 8015d68:	0801bb18 	.word	0x0801bb18
  } else {
    last_unsent->next = queue;
 8015d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d70:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015d76:	88fb      	ldrh	r3, [r7, #6]
 8015d78:	441a      	add	r2, r3
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d84:	88fb      	ldrh	r3, [r7, #6]
 8015d86:	1ad3      	subs	r3, r2, r3
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015d96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d00e      	beq.n	8015dc2 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d10a      	bne.n	8015dc2 <tcp_write+0x60a>
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d106      	bne.n	8015dc2 <tcp_write+0x60a>
 8015db4:	4b2b      	ldr	r3, [pc, #172]	; (8015e64 <tcp_write+0x6ac>)
 8015db6:	f240 22ed 	movw	r2, #749	; 0x2ed
 8015dba:	492b      	ldr	r1, [pc, #172]	; (8015e68 <tcp_write+0x6b0>)
 8015dbc:	482b      	ldr	r0, [pc, #172]	; (8015e6c <tcp_write+0x6b4>)
 8015dbe:	f001 ff71 	bl	8017ca4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8015dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d015      	beq.n	8015df4 <tcp_write+0x63c>
 8015dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dca:	68db      	ldr	r3, [r3, #12]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d011      	beq.n	8015df4 <tcp_write+0x63c>
 8015dd0:	797b      	ldrb	r3, [r7, #5]
 8015dd2:	f003 0302 	and.w	r3, r3, #2
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d10c      	bne.n	8015df4 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ddc:	68dc      	ldr	r4, [r3, #12]
 8015dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	899b      	ldrh	r3, [r3, #12]
 8015de4:	b29d      	uxth	r5, r3
 8015de6:	2008      	movs	r0, #8
 8015de8:	f7f4 ff5a 	bl	800aca0 <lwip_htons>
 8015dec:	4603      	mov	r3, r0
 8015dee:	432b      	orrs	r3, r5
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8015df4:	2300      	movs	r3, #0
 8015df6:	e031      	b.n	8015e5c <tcp_write+0x6a4>
          goto memerr;
 8015df8:	bf00      	nop
 8015dfa:	e006      	b.n	8015e0a <tcp_write+0x652>
            goto memerr;
 8015dfc:	bf00      	nop
 8015dfe:	e004      	b.n	8015e0a <tcp_write+0x652>
        goto memerr;
 8015e00:	bf00      	nop
 8015e02:	e002      	b.n	8015e0a <tcp_write+0x652>
        goto memerr;
 8015e04:	bf00      	nop
 8015e06:	e000      	b.n	8015e0a <tcp_write+0x652>
      goto memerr;
 8015e08:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	7e9b      	ldrb	r3, [r3, #26]
 8015e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015e12:	b2da      	uxtb	r2, r3
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d002      	beq.n	8015e24 <tcp_write+0x66c>
    pbuf_free(concat_p);
 8015e1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015e20:	f7fa fff4 	bl	8010e0c <pbuf_free>
  }
  if (queue != NULL) {
 8015e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d002      	beq.n	8015e30 <tcp_write+0x678>
    tcp_segs_free(queue);
 8015e2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015e2c:	f7fc fc4b 	bl	80126c6 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d00e      	beq.n	8015e58 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d10a      	bne.n	8015e58 <tcp_write+0x6a0>
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d106      	bne.n	8015e58 <tcp_write+0x6a0>
 8015e4a:	4b06      	ldr	r3, [pc, #24]	; (8015e64 <tcp_write+0x6ac>)
 8015e4c:	f240 3202 	movw	r2, #770	; 0x302
 8015e50:	4905      	ldr	r1, [pc, #20]	; (8015e68 <tcp_write+0x6b0>)
 8015e52:	4806      	ldr	r0, [pc, #24]	; (8015e6c <tcp_write+0x6b4>)
 8015e54:	f001 ff26 	bl	8017ca4 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3758      	adds	r7, #88	; 0x58
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bdb0      	pop	{r4, r5, r7, pc}
 8015e64:	0801b86c 	.word	0x0801b86c
 8015e68:	0801bb50 	.word	0x0801bb50
 8015e6c:	0801b8d0 	.word	0x0801b8d0

08015e70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b08a      	sub	sp, #40	; 0x28
 8015e74:	af02      	add	r7, sp, #8
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	460b      	mov	r3, r1
 8015e7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015e80:	2300      	movs	r3, #0
 8015e82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015e84:	78fb      	ldrb	r3, [r7, #3]
 8015e86:	f003 0303 	and.w	r3, r3, #3
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <tcp_enqueue_flags+0x2c>
 8015e8e:	4b70      	ldr	r3, [pc, #448]	; (8016050 <tcp_enqueue_flags+0x1e0>)
 8015e90:	f240 321b 	movw	r2, #795	; 0x31b
 8015e94:	496f      	ldr	r1, [pc, #444]	; (8016054 <tcp_enqueue_flags+0x1e4>)
 8015e96:	4870      	ldr	r0, [pc, #448]	; (8016058 <tcp_enqueue_flags+0x1e8>)
 8015e98:	f001 ff04 	bl	8017ca4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015ea2:	2b08      	cmp	r3, #8
 8015ea4:	d806      	bhi.n	8015eb4 <tcp_enqueue_flags+0x44>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015eac:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d90e      	bls.n	8015ed2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8015eb4:	78fb      	ldrb	r3, [r7, #3]
 8015eb6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d109      	bne.n	8015ed2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	7e9b      	ldrb	r3, [r3, #26]
 8015ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ed0:	e0ba      	b.n	8016048 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 8015ed2:	78fb      	ldrb	r3, [r7, #3]
 8015ed4:	f003 0302 	and.w	r3, r3, #2
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d001      	beq.n	8015ee0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8015edc:	2301      	movs	r3, #1
 8015ede:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015ee0:	7ffb      	ldrb	r3, [r7, #31]
 8015ee2:	f003 0301 	and.w	r3, r3, #1
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d001      	beq.n	8015eee <tcp_enqueue_flags+0x7e>
 8015eea:	2304      	movs	r3, #4
 8015eec:	e000      	b.n	8015ef0 <tcp_enqueue_flags+0x80>
 8015eee:	2300      	movs	r3, #0
 8015ef0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015ef2:	7dfb      	ldrb	r3, [r7, #23]
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	4619      	mov	r1, r3
 8015efa:	2000      	movs	r0, #0
 8015efc:	f7fa fc14 	bl	8010728 <pbuf_alloc>
 8015f00:	6138      	str	r0, [r7, #16]
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d109      	bne.n	8015f1c <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	7e9b      	ldrb	r3, [r3, #26]
 8015f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015f10:	b2da      	uxtb	r2, r3
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f1a:	e095      	b.n	8016048 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015f1c:	693b      	ldr	r3, [r7, #16]
 8015f1e:	895a      	ldrh	r2, [r3, #10]
 8015f20:	7dfb      	ldrb	r3, [r7, #23]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d206      	bcs.n	8015f36 <tcp_enqueue_flags+0xc6>
 8015f28:	4b49      	ldr	r3, [pc, #292]	; (8016050 <tcp_enqueue_flags+0x1e0>)
 8015f2a:	f240 3241 	movw	r2, #833	; 0x341
 8015f2e:	494b      	ldr	r1, [pc, #300]	; (801605c <tcp_enqueue_flags+0x1ec>)
 8015f30:	4849      	ldr	r0, [pc, #292]	; (8016058 <tcp_enqueue_flags+0x1e8>)
 8015f32:	f001 feb7 	bl	8017ca4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015f3a:	78fa      	ldrb	r2, [r7, #3]
 8015f3c:	7ffb      	ldrb	r3, [r7, #31]
 8015f3e:	9300      	str	r3, [sp, #0]
 8015f40:	460b      	mov	r3, r1
 8015f42:	6939      	ldr	r1, [r7, #16]
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7ff fad5 	bl	80154f4 <tcp_create_segment>
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d109      	bne.n	8015f66 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	7e9b      	ldrb	r3, [r3, #26]
 8015f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015f5a:	b2da      	uxtb	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f64:	e070      	b.n	8016048 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	68db      	ldr	r3, [r3, #12]
 8015f6a:	f003 0303 	and.w	r3, r3, #3
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d006      	beq.n	8015f80 <tcp_enqueue_flags+0x110>
 8015f72:	4b37      	ldr	r3, [pc, #220]	; (8016050 <tcp_enqueue_flags+0x1e0>)
 8015f74:	f240 3249 	movw	r2, #841	; 0x349
 8015f78:	4939      	ldr	r1, [pc, #228]	; (8016060 <tcp_enqueue_flags+0x1f0>)
 8015f7a:	4837      	ldr	r0, [pc, #220]	; (8016058 <tcp_enqueue_flags+0x1e8>)
 8015f7c:	f001 fe92 	bl	8017ca4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	891b      	ldrh	r3, [r3, #8]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d006      	beq.n	8015f96 <tcp_enqueue_flags+0x126>
 8015f88:	4b31      	ldr	r3, [pc, #196]	; (8016050 <tcp_enqueue_flags+0x1e0>)
 8015f8a:	f240 324a 	movw	r2, #842	; 0x34a
 8015f8e:	4935      	ldr	r1, [pc, #212]	; (8016064 <tcp_enqueue_flags+0x1f4>)
 8015f90:	4831      	ldr	r0, [pc, #196]	; (8016058 <tcp_enqueue_flags+0x1e8>)
 8015f92:	f001 fe87 	bl	8017ca4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d103      	bne.n	8015fa6 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	68fa      	ldr	r2, [r7, #12]
 8015fa2:	669a      	str	r2, [r3, #104]	; 0x68
 8015fa4:	e00d      	b.n	8015fc2 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015faa:	61bb      	str	r3, [r7, #24]
 8015fac:	e002      	b.n	8015fb4 <tcp_enqueue_flags+0x144>
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	61bb      	str	r3, [r7, #24]
 8015fb4:	69bb      	ldr	r3, [r7, #24]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d1f8      	bne.n	8015fae <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 8015fbc:	69bb      	ldr	r3, [r7, #24]
 8015fbe:	68fa      	ldr	r2, [r7, #12]
 8015fc0:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015fca:	78fb      	ldrb	r3, [r7, #3]
 8015fcc:	f003 0302 	and.w	r3, r3, #2
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d104      	bne.n	8015fde <tcp_enqueue_flags+0x16e>
 8015fd4:	78fb      	ldrb	r3, [r7, #3]
 8015fd6:	f003 0301 	and.w	r3, r3, #1
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d004      	beq.n	8015fe8 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fe2:	1c5a      	adds	r2, r3, #1
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015fe8:	78fb      	ldrb	r3, [r7, #3]
 8015fea:	f003 0301 	and.w	r3, r3, #1
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d006      	beq.n	8016000 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	7e9b      	ldrb	r3, [r3, #26]
 8015ff6:	f043 0320 	orr.w	r3, r3, #32
 8015ffa:	b2da      	uxtb	r2, r3
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	685b      	ldr	r3, [r3, #4]
 8016004:	4618      	mov	r0, r3
 8016006:	f7fa ff9b 	bl	8010f40 <pbuf_clen>
 801600a:	4603      	mov	r3, r0
 801600c:	461a      	mov	r2, r3
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016014:	4413      	add	r3, r2
 8016016:	b29a      	uxth	r2, r3
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016024:	2b00      	cmp	r3, #0
 8016026:	d00e      	beq.n	8016046 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801602c:	2b00      	cmp	r3, #0
 801602e:	d10a      	bne.n	8016046 <tcp_enqueue_flags+0x1d6>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016034:	2b00      	cmp	r3, #0
 8016036:	d106      	bne.n	8016046 <tcp_enqueue_flags+0x1d6>
 8016038:	4b05      	ldr	r3, [pc, #20]	; (8016050 <tcp_enqueue_flags+0x1e0>)
 801603a:	f240 326d 	movw	r2, #877	; 0x36d
 801603e:	490a      	ldr	r1, [pc, #40]	; (8016068 <tcp_enqueue_flags+0x1f8>)
 8016040:	4805      	ldr	r0, [pc, #20]	; (8016058 <tcp_enqueue_flags+0x1e8>)
 8016042:	f001 fe2f 	bl	8017ca4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016046:	2300      	movs	r3, #0
}
 8016048:	4618      	mov	r0, r3
 801604a:	3720      	adds	r7, #32
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}
 8016050:	0801b86c 	.word	0x0801b86c
 8016054:	0801bb70 	.word	0x0801bb70
 8016058:	0801b8d0 	.word	0x0801b8d0
 801605c:	0801bbc8 	.word	0x0801bbc8
 8016060:	0801bc04 	.word	0x0801bc04
 8016064:	0801bc1c 	.word	0x0801bc1c
 8016068:	0801bc48 	.word	0x0801bc48

0801606c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801606c:	b590      	push	{r4, r7, lr}
 801606e:	b08b      	sub	sp, #44	; 0x2c
 8016070:	af04      	add	r7, sp, #16
 8016072:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8016074:	2300      	movs	r3, #0
 8016076:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016078:	7dbb      	ldrb	r3, [r7, #22]
 801607a:	b29c      	uxth	r4, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016080:	4618      	mov	r0, r3
 8016082:	f7f4 fe1b 	bl	800acbc <lwip_htonl>
 8016086:	4603      	mov	r3, r0
 8016088:	2200      	movs	r2, #0
 801608a:	4621      	mov	r1, r4
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f7ff f977 	bl	8015380 <tcp_output_alloc_header>
 8016092:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d109      	bne.n	80160ae <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	7e9b      	ldrb	r3, [r3, #26]
 801609e:	f043 0303 	orr.w	r3, r3, #3
 80160a2:	b2da      	uxtb	r2, r3
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80160a8:	f06f 0301 	mvn.w	r3, #1
 80160ac:	e036      	b.n	801611c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	3304      	adds	r3, #4
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7f8 fbbe 	bl	800e834 <ip4_route>
 80160b8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d102      	bne.n	80160c6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80160c0:	23fc      	movs	r3, #252	; 0xfc
 80160c2:	75fb      	strb	r3, [r7, #23]
 80160c4:	e012      	b.n	80160ec <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80160c6:	6879      	ldr	r1, [r7, #4]
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	1d18      	adds	r0, r3, #4
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	7a9c      	ldrb	r4, [r3, #10]
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	7a5b      	ldrb	r3, [r3, #9]
 80160d4:	68fa      	ldr	r2, [r7, #12]
 80160d6:	9202      	str	r2, [sp, #8]
 80160d8:	2206      	movs	r2, #6
 80160da:	9201      	str	r2, [sp, #4]
 80160dc:	9300      	str	r3, [sp, #0]
 80160de:	4623      	mov	r3, r4
 80160e0:	4602      	mov	r2, r0
 80160e2:	6938      	ldr	r0, [r7, #16]
 80160e4:	f7f8 fdba 	bl	800ec5c <ip4_output_if>
 80160e8:	4603      	mov	r3, r0
 80160ea:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80160ec:	6938      	ldr	r0, [r7, #16]
 80160ee:	f7fa fe8d 	bl	8010e0c <pbuf_free>

  if (err != ERR_OK) {
 80160f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d007      	beq.n	801610a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	7e9b      	ldrb	r3, [r3, #26]
 80160fe:	f043 0303 	orr.w	r3, r3, #3
 8016102:	b2da      	uxtb	r2, r3
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	769a      	strb	r2, [r3, #26]
 8016108:	e006      	b.n	8016118 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	7e9b      	ldrb	r3, [r3, #26]
 801610e:	f023 0303 	bic.w	r3, r3, #3
 8016112:	b2da      	uxtb	r2, r3
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8016118:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801611c:	4618      	mov	r0, r3
 801611e:	371c      	adds	r7, #28
 8016120:	46bd      	mov	sp, r7
 8016122:	bd90      	pop	{r4, r7, pc}

08016124 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016124:	b5b0      	push	{r4, r5, r7, lr}
 8016126:	b08a      	sub	sp, #40	; 0x28
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	7d1b      	ldrb	r3, [r3, #20]
 8016130:	2b01      	cmp	r3, #1
 8016132:	d106      	bne.n	8016142 <tcp_output+0x1e>
 8016134:	4b9b      	ldr	r3, [pc, #620]	; (80163a4 <tcp_output+0x280>)
 8016136:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801613a:	499b      	ldr	r1, [pc, #620]	; (80163a8 <tcp_output+0x284>)
 801613c:	489b      	ldr	r0, [pc, #620]	; (80163ac <tcp_output+0x288>)
 801613e:	f001 fdb1 	bl	8017ca4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016142:	4b9b      	ldr	r3, [pc, #620]	; (80163b0 <tcp_output+0x28c>)
 8016144:	681a      	ldr	r2, [r3, #0]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	429a      	cmp	r2, r3
 801614a:	d101      	bne.n	8016150 <tcp_output+0x2c>
    return ERR_OK;
 801614c:	2300      	movs	r3, #0
 801614e:	e1cd      	b.n	80164ec <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801615c:	429a      	cmp	r2, r3
 801615e:	d203      	bcs.n	8016168 <tcp_output+0x44>
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016166:	e002      	b.n	801616e <tcp_output+0x4a>
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801616e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016174:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	7e9b      	ldrb	r3, [r3, #26]
 801617a:	f003 0302 	and.w	r3, r3, #2
 801617e:	2b00      	cmp	r3, #0
 8016180:	d017      	beq.n	80161b2 <tcp_output+0x8e>
 8016182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016184:	2b00      	cmp	r3, #0
 8016186:	d00f      	beq.n	80161a8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8016188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	685b      	ldr	r3, [r3, #4]
 801618e:	4618      	mov	r0, r3
 8016190:	f7f4 fd94 	bl	800acbc <lwip_htonl>
 8016194:	4602      	mov	r2, r0
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801619e:	8912      	ldrh	r2, [r2, #8]
 80161a0:	441a      	add	r2, r3
     (seg == NULL ||
 80161a2:	69bb      	ldr	r3, [r7, #24]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d904      	bls.n	80161b2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f7ff ff5f 	bl	801606c <tcp_send_empty_ack>
 80161ae:	4603      	mov	r3, r0
 80161b0:	e19c      	b.n	80164ec <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161b6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80161b8:	6a3b      	ldr	r3, [r7, #32]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d007      	beq.n	80161ce <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80161be:	e002      	b.n	80161c6 <tcp_output+0xa2>
 80161c0:	6a3b      	ldr	r3, [r7, #32]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	623b      	str	r3, [r7, #32]
 80161c6:	6a3b      	ldr	r3, [r7, #32]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d1f8      	bne.n	80161c0 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	3304      	adds	r3, #4
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7f8 fb2e 	bl	800e834 <ip4_route>
 80161d8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d102      	bne.n	80161e6 <tcp_output+0xc2>
    return ERR_RTE;
 80161e0:	f06f 0303 	mvn.w	r3, #3
 80161e4:	e182      	b.n	80164ec <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d003      	beq.n	80161f4 <tcp_output+0xd0>
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d111      	bne.n	8016218 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80161f4:	697b      	ldr	r3, [r7, #20]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d002      	beq.n	8016200 <tcp_output+0xdc>
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	3304      	adds	r3, #4
 80161fe:	e000      	b.n	8016202 <tcp_output+0xde>
 8016200:	2300      	movs	r3, #0
 8016202:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016204:	693b      	ldr	r3, [r7, #16]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d102      	bne.n	8016210 <tcp_output+0xec>
      return ERR_RTE;
 801620a:	f06f 0303 	mvn.w	r3, #3
 801620e:	e16d      	b.n	80164ec <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8016218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801621a:	2b00      	cmp	r3, #0
 801621c:	f000 813e 	beq.w	801649c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8016220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	4618      	mov	r0, r3
 8016228:	f7f4 fd48 	bl	800acbc <lwip_htonl>
 801622c:	4602      	mov	r2, r0
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016236:	8912      	ldrh	r2, [r2, #8]
 8016238:	441a      	add	r2, r3
  if (seg != NULL &&
 801623a:	69bb      	ldr	r3, [r7, #24]
 801623c:	429a      	cmp	r2, r3
 801623e:	f240 812d 	bls.w	801649c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	2b00      	cmp	r3, #0
 8016246:	f000 8129 	beq.w	801649c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016250:	461a      	mov	r2, r3
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	429a      	cmp	r2, r3
 8016256:	f040 8121 	bne.w	801649c <tcp_output+0x378>
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801625e:	2b00      	cmp	r3, #0
 8016260:	f040 811c 	bne.w	801649c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801626a:	2b00      	cmp	r3, #0
 801626c:	f040 812b 	bne.w	80164c6 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2200      	movs	r2, #0
 8016274:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2201      	movs	r2, #1
 801627c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8016280:	e121      	b.n	80164c6 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016284:	68db      	ldr	r3, [r3, #12]
 8016286:	899b      	ldrh	r3, [r3, #12]
 8016288:	b29b      	uxth	r3, r3
 801628a:	4618      	mov	r0, r3
 801628c:	f7f4 fd08 	bl	800aca0 <lwip_htons>
 8016290:	4603      	mov	r3, r0
 8016292:	f003 0304 	and.w	r3, r3, #4
 8016296:	2b00      	cmp	r3, #0
 8016298:	d006      	beq.n	80162a8 <tcp_output+0x184>
 801629a:	4b42      	ldr	r3, [pc, #264]	; (80163a4 <tcp_output+0x280>)
 801629c:	f240 4246 	movw	r2, #1094	; 0x446
 80162a0:	4944      	ldr	r1, [pc, #272]	; (80163b4 <tcp_output+0x290>)
 80162a2:	4842      	ldr	r0, [pc, #264]	; (80163ac <tcp_output+0x288>)
 80162a4:	f001 fcfe 	bl	8017ca4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d01f      	beq.n	80162f0 <tcp_output+0x1cc>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	7e9b      	ldrb	r3, [r3, #26]
 80162b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d119      	bne.n	80162f0 <tcp_output+0x1cc>
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d00b      	beq.n	80162dc <tcp_output+0x1b8>
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d110      	bne.n	80162f0 <tcp_output+0x1cc>
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162d2:	891a      	ldrh	r2, [r3, #8]
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162d8:	429a      	cmp	r2, r3
 80162da:	d209      	bcs.n	80162f0 <tcp_output+0x1cc>
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d004      	beq.n	80162f0 <tcp_output+0x1cc>
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80162ec:	2b08      	cmp	r3, #8
 80162ee:	d901      	bls.n	80162f4 <tcp_output+0x1d0>
 80162f0:	2301      	movs	r3, #1
 80162f2:	e000      	b.n	80162f6 <tcp_output+0x1d2>
 80162f4:	2300      	movs	r3, #0
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d106      	bne.n	8016308 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	7e9b      	ldrb	r3, [r3, #26]
 80162fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016302:	2b00      	cmp	r3, #0
 8016304:	f000 80e1 	beq.w	80164ca <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	7d1b      	ldrb	r3, [r3, #20]
 801630c:	2b02      	cmp	r3, #2
 801630e:	d00c      	beq.n	801632a <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016312:	68dc      	ldr	r4, [r3, #12]
 8016314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016316:	68db      	ldr	r3, [r3, #12]
 8016318:	899b      	ldrh	r3, [r3, #12]
 801631a:	b29d      	uxth	r5, r3
 801631c:	2010      	movs	r0, #16
 801631e:	f7f4 fcbf 	bl	800aca0 <lwip_htons>
 8016322:	4603      	mov	r3, r0
 8016324:	432b      	orrs	r3, r5
 8016326:	b29b      	uxth	r3, r3
 8016328:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801632a:	697a      	ldr	r2, [r7, #20]
 801632c:	6879      	ldr	r1, [r7, #4]
 801632e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016330:	f000 f8e0 	bl	80164f4 <tcp_output_segment>
 8016334:	4603      	mov	r3, r0
 8016336:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d009      	beq.n	8016354 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	7e9b      	ldrb	r3, [r3, #26]
 8016344:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016348:	b2da      	uxtb	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	769a      	strb	r2, [r3, #26]
      return err;
 801634e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016352:	e0cb      	b.n	80164ec <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8016354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	7d1b      	ldrb	r3, [r3, #20]
 8016360:	2b02      	cmp	r3, #2
 8016362:	d006      	beq.n	8016372 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	7e9b      	ldrb	r3, [r3, #26]
 8016368:	f023 0303 	bic.w	r3, r3, #3
 801636c:	b2da      	uxtb	r2, r3
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016374:	68db      	ldr	r3, [r3, #12]
 8016376:	685b      	ldr	r3, [r3, #4]
 8016378:	4618      	mov	r0, r3
 801637a:	f7f4 fc9f 	bl	800acbc <lwip_htonl>
 801637e:	4604      	mov	r4, r0
 8016380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016382:	891b      	ldrh	r3, [r3, #8]
 8016384:	461d      	mov	r5, r3
 8016386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016388:	68db      	ldr	r3, [r3, #12]
 801638a:	899b      	ldrh	r3, [r3, #12]
 801638c:	b29b      	uxth	r3, r3
 801638e:	4618      	mov	r0, r3
 8016390:	f7f4 fc86 	bl	800aca0 <lwip_htons>
 8016394:	4603      	mov	r3, r0
 8016396:	f003 0303 	and.w	r3, r3, #3
 801639a:	2b00      	cmp	r3, #0
 801639c:	d00c      	beq.n	80163b8 <tcp_output+0x294>
 801639e:	2301      	movs	r3, #1
 80163a0:	e00b      	b.n	80163ba <tcp_output+0x296>
 80163a2:	bf00      	nop
 80163a4:	0801b86c 	.word	0x0801b86c
 80163a8:	0801bc70 	.word	0x0801bc70
 80163ac:	0801b8d0 	.word	0x0801b8d0
 80163b0:	20020be0 	.word	0x20020be0
 80163b4:	0801bc98 	.word	0x0801bc98
 80163b8:	2300      	movs	r3, #0
 80163ba:	442b      	add	r3, r5
 80163bc:	4423      	add	r3, r4
 80163be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	1ad3      	subs	r3, r2, r3
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	da02      	bge.n	80163d2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80163d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d4:	891b      	ldrh	r3, [r3, #8]
 80163d6:	461c      	mov	r4, r3
 80163d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163da:	68db      	ldr	r3, [r3, #12]
 80163dc:	899b      	ldrh	r3, [r3, #12]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7f4 fc5d 	bl	800aca0 <lwip_htons>
 80163e6:	4603      	mov	r3, r0
 80163e8:	f003 0303 	and.w	r3, r3, #3
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d001      	beq.n	80163f4 <tcp_output+0x2d0>
 80163f0:	2301      	movs	r3, #1
 80163f2:	e000      	b.n	80163f6 <tcp_output+0x2d2>
 80163f4:	2300      	movs	r3, #0
 80163f6:	4423      	add	r3, r4
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d049      	beq.n	8016490 <tcp_output+0x36c>
      seg->next = NULL;
 80163fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fe:	2200      	movs	r2, #0
 8016400:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016406:	2b00      	cmp	r3, #0
 8016408:	d105      	bne.n	8016416 <tcp_output+0x2f2>
        pcb->unacked = seg;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801640e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8016410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016412:	623b      	str	r3, [r7, #32]
 8016414:	e03f      	b.n	8016496 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016418:	68db      	ldr	r3, [r3, #12]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	4618      	mov	r0, r3
 801641e:	f7f4 fc4d 	bl	800acbc <lwip_htonl>
 8016422:	4604      	mov	r4, r0
 8016424:	6a3b      	ldr	r3, [r7, #32]
 8016426:	68db      	ldr	r3, [r3, #12]
 8016428:	685b      	ldr	r3, [r3, #4]
 801642a:	4618      	mov	r0, r3
 801642c:	f7f4 fc46 	bl	800acbc <lwip_htonl>
 8016430:	4603      	mov	r3, r0
 8016432:	1ae3      	subs	r3, r4, r3
 8016434:	2b00      	cmp	r3, #0
 8016436:	da24      	bge.n	8016482 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	336c      	adds	r3, #108	; 0x6c
 801643c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801643e:	e002      	b.n	8016446 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016446:	69fb      	ldr	r3, [r7, #28]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d011      	beq.n	8016472 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801644e:	69fb      	ldr	r3, [r7, #28]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	4618      	mov	r0, r3
 8016458:	f7f4 fc30 	bl	800acbc <lwip_htonl>
 801645c:	4604      	mov	r4, r0
 801645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	4618      	mov	r0, r3
 8016466:	f7f4 fc29 	bl	800acbc <lwip_htonl>
 801646a:	4603      	mov	r3, r0
 801646c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801646e:	2b00      	cmp	r3, #0
 8016470:	dbe6      	blt.n	8016440 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8016472:	69fb      	ldr	r3, [r7, #28]
 8016474:	681a      	ldr	r2, [r3, #0]
 8016476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016478:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801647a:	69fb      	ldr	r3, [r7, #28]
 801647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801647e:	601a      	str	r2, [r3, #0]
 8016480:	e009      	b.n	8016496 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016482:	6a3b      	ldr	r3, [r7, #32]
 8016484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016486:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016488:	6a3b      	ldr	r3, [r7, #32]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	623b      	str	r3, [r7, #32]
 801648e:	e002      	b.n	8016496 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016492:	f7fc f92c 	bl	80126ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801649a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d014      	beq.n	80164cc <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80164a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a4:	68db      	ldr	r3, [r3, #12]
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7f4 fc07 	bl	800acbc <lwip_htonl>
 80164ae:	4602      	mov	r2, r0
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164b4:	1ad3      	subs	r3, r2, r3
 80164b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164b8:	8912      	ldrh	r2, [r2, #8]
 80164ba:	441a      	add	r2, r3
  while (seg != NULL &&
 80164bc:	69bb      	ldr	r3, [r7, #24]
 80164be:	429a      	cmp	r2, r3
 80164c0:	f67f aedf 	bls.w	8016282 <tcp_output+0x15e>
 80164c4:	e002      	b.n	80164cc <tcp_output+0x3a8>
    goto output_done;
 80164c6:	bf00      	nop
 80164c8:	e000      	b.n	80164cc <tcp_output+0x3a8>
      break;
 80164ca:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d103      	bne.n	80164dc <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2200      	movs	r2, #0
 80164d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	7e9b      	ldrb	r3, [r3, #26]
 80164e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164e4:	b2da      	uxtb	r2, r3
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80164ea:	2300      	movs	r3, #0
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3728      	adds	r7, #40	; 0x28
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bdb0      	pop	{r4, r5, r7, pc}

080164f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80164f4:	b5b0      	push	{r4, r5, r7, lr}
 80164f6:	b08c      	sub	sp, #48	; 0x30
 80164f8:	af04      	add	r7, sp, #16
 80164fa:	60f8      	str	r0, [r7, #12]
 80164fc:	60b9      	str	r1, [r7, #8]
 80164fe:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	685b      	ldr	r3, [r3, #4]
 8016504:	89db      	ldrh	r3, [r3, #14]
 8016506:	2b01      	cmp	r3, #1
 8016508:	d001      	beq.n	801650e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801650a:	2300      	movs	r3, #0
 801650c:	e08b      	b.n	8016626 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	68dc      	ldr	r4, [r3, #12]
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016516:	4618      	mov	r0, r3
 8016518:	f7f4 fbd0 	bl	800acbc <lwip_htonl>
 801651c:	4603      	mov	r3, r0
 801651e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	68dc      	ldr	r4, [r3, #12]
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016528:	4618      	mov	r0, r3
 801652a:	f7f4 fbb9 	bl	800aca0 <lwip_htons>
 801652e:	4603      	mov	r3, r0
 8016530:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016536:	68ba      	ldr	r2, [r7, #8]
 8016538:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801653a:	441a      	add	r2, r3
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	3314      	adds	r3, #20
 8016546:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	7a9b      	ldrb	r3, [r3, #10]
 801654c:	f003 0301 	and.w	r3, r3, #1
 8016550:	2b00      	cmp	r3, #0
 8016552:	d014      	beq.n	801657e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	3304      	adds	r3, #4
 8016558:	4619      	mov	r1, r3
 801655a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801655e:	f7fc fc01 	bl	8012d64 <tcp_eff_send_mss_impl>
 8016562:	4603      	mov	r3, r0
 8016564:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016566:	8b7b      	ldrh	r3, [r7, #26]
 8016568:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801656c:	4618      	mov	r0, r3
 801656e:	f7f4 fba5 	bl	800acbc <lwip_htonl>
 8016572:	4602      	mov	r2, r0
 8016574:	69fb      	ldr	r3, [r7, #28]
 8016576:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016578:	69fb      	ldr	r3, [r7, #28]
 801657a:	3304      	adds	r3, #4
 801657c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801657e:	68bb      	ldr	r3, [r7, #8]
 8016580:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016584:	2b00      	cmp	r3, #0
 8016586:	da02      	bge.n	801658e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8016588:	68bb      	ldr	r3, [r7, #8]
 801658a:	2200      	movs	r2, #0
 801658c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801658e:	68bb      	ldr	r3, [r7, #8]
 8016590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016592:	2b00      	cmp	r3, #0
 8016594:	d10c      	bne.n	80165b0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8016596:	4b26      	ldr	r3, [pc, #152]	; (8016630 <tcp_output_segment+0x13c>)
 8016598:	681a      	ldr	r2, [r3, #0]
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7f4 fb89 	bl	800acbc <lwip_htonl>
 80165aa:	4602      	mov	r2, r0
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	461a      	mov	r2, r3
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	685b      	ldr	r3, [r3, #4]
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	68fa      	ldr	r2, [r7, #12]
 80165c6:	6852      	ldr	r2, [r2, #4]
 80165c8:	8951      	ldrh	r1, [r2, #10]
 80165ca:	8b3a      	ldrh	r2, [r7, #24]
 80165cc:	1a8a      	subs	r2, r1, r2
 80165ce:	b292      	uxth	r2, r2
 80165d0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	6852      	ldr	r2, [r2, #4]
 80165da:	8911      	ldrh	r1, [r2, #8]
 80165dc:	8b3a      	ldrh	r2, [r7, #24]
 80165de:	1a8a      	subs	r2, r1, r2
 80165e0:	b292      	uxth	r2, r2
 80165e2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	685b      	ldr	r3, [r3, #4]
 80165e8:	68fa      	ldr	r2, [r7, #12]
 80165ea:	68d2      	ldr	r2, [r2, #12]
 80165ec:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	68db      	ldr	r3, [r3, #12]
 80165f2:	2200      	movs	r2, #0
 80165f4:	741a      	strb	r2, [r3, #16]
 80165f6:	2200      	movs	r2, #0
 80165f8:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	6858      	ldr	r0, [r3, #4]
 80165fe:	68b9      	ldr	r1, [r7, #8]
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	1d1c      	adds	r4, r3, #4
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	7a9d      	ldrb	r5, [r3, #10]
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	7a5b      	ldrb	r3, [r3, #9]
 801660c:	687a      	ldr	r2, [r7, #4]
 801660e:	9202      	str	r2, [sp, #8]
 8016610:	2206      	movs	r2, #6
 8016612:	9201      	str	r2, [sp, #4]
 8016614:	9300      	str	r3, [sp, #0]
 8016616:	462b      	mov	r3, r5
 8016618:	4622      	mov	r2, r4
 801661a:	f7f8 fb1f 	bl	800ec5c <ip4_output_if>
 801661e:	4603      	mov	r3, r0
 8016620:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8016622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016626:	4618      	mov	r0, r3
 8016628:	3720      	adds	r7, #32
 801662a:	46bd      	mov	sp, r7
 801662c:	bdb0      	pop	{r4, r5, r7, pc}
 801662e:	bf00      	nop
 8016630:	20020bd0 	.word	0x20020bd0

08016634 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b08c      	sub	sp, #48	; 0x30
 8016638:	af04      	add	r7, sp, #16
 801663a:	60f8      	str	r0, [r7, #12]
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	607a      	str	r2, [r7, #4]
 8016640:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8016642:	2200      	movs	r2, #0
 8016644:	2114      	movs	r1, #20
 8016646:	2001      	movs	r0, #1
 8016648:	f7fa f86e 	bl	8010728 <pbuf_alloc>
 801664c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d05b      	beq.n	801670c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	895b      	ldrh	r3, [r3, #10]
 8016658:	2b13      	cmp	r3, #19
 801665a:	d806      	bhi.n	801666a <tcp_rst+0x36>
 801665c:	4b2d      	ldr	r3, [pc, #180]	; (8016714 <tcp_rst+0xe0>)
 801665e:	f240 524d 	movw	r2, #1357	; 0x54d
 8016662:	492d      	ldr	r1, [pc, #180]	; (8016718 <tcp_rst+0xe4>)
 8016664:	482d      	ldr	r0, [pc, #180]	; (801671c <tcp_rst+0xe8>)
 8016666:	f001 fb1d 	bl	8017ca4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8016670:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016672:	4618      	mov	r0, r3
 8016674:	f7f4 fb14 	bl	800aca0 <lwip_htons>
 8016678:	4603      	mov	r3, r0
 801667a:	461a      	mov	r2, r3
 801667c:	69bb      	ldr	r3, [r7, #24]
 801667e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8016680:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016682:	4618      	mov	r0, r3
 8016684:	f7f4 fb0c 	bl	800aca0 <lwip_htons>
 8016688:	4603      	mov	r3, r0
 801668a:	461a      	mov	r2, r3
 801668c:	69bb      	ldr	r3, [r7, #24]
 801668e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8016690:	68f8      	ldr	r0, [r7, #12]
 8016692:	f7f4 fb13 	bl	800acbc <lwip_htonl>
 8016696:	4602      	mov	r2, r0
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801669c:	68b8      	ldr	r0, [r7, #8]
 801669e:	f7f4 fb0d 	bl	800acbc <lwip_htonl>
 80166a2:	4602      	mov	r2, r0
 80166a4:	69bb      	ldr	r3, [r7, #24]
 80166a6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80166a8:	f245 0014 	movw	r0, #20500	; 0x5014
 80166ac:	f7f4 faf8 	bl	800aca0 <lwip_htons>
 80166b0:	4603      	mov	r3, r0
 80166b2:	461a      	mov	r2, r3
 80166b4:	69bb      	ldr	r3, [r7, #24]
 80166b6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	2200      	movs	r2, #0
 80166bc:	f042 0208 	orr.w	r2, r2, #8
 80166c0:	739a      	strb	r2, [r3, #14]
 80166c2:	2200      	movs	r2, #0
 80166c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80166c8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80166ca:	69bb      	ldr	r3, [r7, #24]
 80166cc:	2200      	movs	r2, #0
 80166ce:	741a      	strb	r2, [r3, #16]
 80166d0:	2200      	movs	r2, #0
 80166d2:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80166d4:	69bb      	ldr	r3, [r7, #24]
 80166d6:	2200      	movs	r2, #0
 80166d8:	749a      	strb	r2, [r3, #18]
 80166da:	2200      	movs	r2, #0
 80166dc:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80166de:	6838      	ldr	r0, [r7, #0]
 80166e0:	f7f8 f8a8 	bl	800e834 <ip4_route>
 80166e4:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d00b      	beq.n	8016704 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80166ec:	697b      	ldr	r3, [r7, #20]
 80166ee:	9302      	str	r3, [sp, #8]
 80166f0:	2306      	movs	r3, #6
 80166f2:	9301      	str	r3, [sp, #4]
 80166f4:	2300      	movs	r3, #0
 80166f6:	9300      	str	r3, [sp, #0]
 80166f8:	23ff      	movs	r3, #255	; 0xff
 80166fa:	683a      	ldr	r2, [r7, #0]
 80166fc:	6879      	ldr	r1, [r7, #4]
 80166fe:	69f8      	ldr	r0, [r7, #28]
 8016700:	f7f8 faac 	bl	800ec5c <ip4_output_if>
  }
  pbuf_free(p);
 8016704:	69f8      	ldr	r0, [r7, #28]
 8016706:	f7fa fb81 	bl	8010e0c <pbuf_free>
 801670a:	e000      	b.n	801670e <tcp_rst+0xda>
    return;
 801670c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801670e:	3720      	adds	r7, #32
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}
 8016714:	0801b86c 	.word	0x0801b86c
 8016718:	0801b8a0 	.word	0x0801b8a0
 801671c:	0801b8d0 	.word	0x0801b8d0

08016720 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801672c:	2b00      	cmp	r3, #0
 801672e:	d029      	beq.n	8016784 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016734:	60fb      	str	r3, [r7, #12]
 8016736:	e002      	b.n	801673e <tcp_rexmit_rto+0x1e>
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	60fb      	str	r3, [r7, #12]
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d1f8      	bne.n	8016738 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2200      	movs	r2, #0
 801675a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016762:	2bff      	cmp	r3, #255	; 0xff
 8016764:	d007      	beq.n	8016776 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801676c:	3301      	adds	r3, #1
 801676e:	b2da      	uxtb	r2, r3
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	2200      	movs	r2, #0
 801677a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f7ff fcd1 	bl	8016124 <tcp_output>
 8016782:	e000      	b.n	8016786 <tcp_rexmit_rto+0x66>
    return;
 8016784:	bf00      	nop
}
 8016786:	3710      	adds	r7, #16
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}

0801678c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801678c:	b590      	push	{r4, r7, lr}
 801678e:	b085      	sub	sp, #20
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016798:	2b00      	cmp	r3, #0
 801679a:	d043      	beq.n	8016824 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167a0:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80167a2:	68bb      	ldr	r3, [r7, #8]
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	3368      	adds	r3, #104	; 0x68
 80167ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80167b0:	e002      	b.n	80167b8 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d011      	beq.n	80167e4 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	68db      	ldr	r3, [r3, #12]
 80167c6:	685b      	ldr	r3, [r3, #4]
 80167c8:	4618      	mov	r0, r3
 80167ca:	f7f4 fa77 	bl	800acbc <lwip_htonl>
 80167ce:	4604      	mov	r4, r0
 80167d0:	68bb      	ldr	r3, [r7, #8]
 80167d2:	68db      	ldr	r3, [r3, #12]
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7f4 fa70 	bl	800acbc <lwip_htonl>
 80167dc:	4603      	mov	r3, r0
 80167de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	dbe6      	blt.n	80167b2 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	681a      	ldr	r2, [r3, #0]
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	68ba      	ldr	r2, [r7, #8]
 80167f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d103      	bne.n	8016802 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2200      	movs	r2, #0
 80167fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016808:	2bff      	cmp	r3, #255	; 0xff
 801680a:	d007      	beq.n	801681c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016812:	3301      	adds	r3, #1
 8016814:	b2da      	uxtb	r2, r3
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2200      	movs	r2, #0
 8016820:	635a      	str	r2, [r3, #52]	; 0x34
 8016822:	e000      	b.n	8016826 <tcp_rexmit+0x9a>
    return;
 8016824:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8016826:	3714      	adds	r7, #20
 8016828:	46bd      	mov	sp, r7
 801682a:	bd90      	pop	{r4, r7, pc}

0801682c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016838:	2b00      	cmp	r3, #0
 801683a:	d04a      	beq.n	80168d2 <tcp_rexmit_fast+0xa6>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	7e9b      	ldrb	r3, [r3, #26]
 8016840:	f003 0304 	and.w	r3, r3, #4
 8016844:	2b00      	cmp	r3, #0
 8016846:	d144      	bne.n	80168d2 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8016848:	6878      	ldr	r0, [r7, #4]
 801684a:	f7ff ff9f 	bl	801678c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801685a:	429a      	cmp	r2, r3
 801685c:	d207      	bcs.n	801686e <tcp_rexmit_fast+0x42>
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016864:	0fda      	lsrs	r2, r3, #31
 8016866:	4413      	add	r3, r2
 8016868:	105b      	asrs	r3, r3, #1
 801686a:	b29b      	uxth	r3, r3
 801686c:	e006      	b.n	801687c <tcp_rexmit_fast+0x50>
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016874:	0fda      	lsrs	r2, r3, #31
 8016876:	4413      	add	r3, r2
 8016878:	105b      	asrs	r3, r3, #1
 801687a:	b29b      	uxth	r3, r3
 801687c:	687a      	ldr	r2, [r7, #4]
 801687e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016888:	461a      	mov	r2, r3
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801688e:	005b      	lsls	r3, r3, #1
 8016890:	429a      	cmp	r2, r3
 8016892:	d206      	bcs.n	80168a2 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	b29a      	uxth	r2, r3
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168ac:	4619      	mov	r1, r3
 80168ae:	0049      	lsls	r1, r1, #1
 80168b0:	440b      	add	r3, r1
 80168b2:	b29b      	uxth	r3, r3
 80168b4:	4413      	add	r3, r2
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	7e9b      	ldrb	r3, [r3, #26]
 80168c2:	f043 0304 	orr.w	r3, r3, #4
 80168c6:	b2da      	uxtb	r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2200      	movs	r2, #0
 80168d0:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80168d2:	bf00      	nop
 80168d4:	3708      	adds	r7, #8
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}

080168da <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80168da:	b580      	push	{r7, lr}
 80168dc:	b08a      	sub	sp, #40	; 0x28
 80168de:	af04      	add	r7, sp, #16
 80168e0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80168e6:	3b01      	subs	r3, #1
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7f4 f9e7 	bl	800acbc <lwip_htonl>
 80168ee:	4603      	mov	r3, r0
 80168f0:	2200      	movs	r2, #0
 80168f2:	2100      	movs	r1, #0
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f7fe fd43 	bl	8015380 <tcp_output_alloc_header>
 80168fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d102      	bne.n	8016908 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016906:	e021      	b.n	801694c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	3304      	adds	r3, #4
 801690c:	4618      	mov	r0, r3
 801690e:	f7f7 ff91 	bl	800e834 <ip4_route>
 8016912:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d102      	bne.n	8016920 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801691a:	23fc      	movs	r3, #252	; 0xfc
 801691c:	75fb      	strb	r3, [r7, #23]
 801691e:	e010      	b.n	8016942 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8016920:	6879      	ldr	r1, [r7, #4]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	1d1a      	adds	r2, r3, #4
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	7a98      	ldrb	r0, [r3, #10]
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	9302      	str	r3, [sp, #8]
 801692e:	2306      	movs	r3, #6
 8016930:	9301      	str	r3, [sp, #4]
 8016932:	2300      	movs	r3, #0
 8016934:	9300      	str	r3, [sp, #0]
 8016936:	4603      	mov	r3, r0
 8016938:	6938      	ldr	r0, [r7, #16]
 801693a:	f7f8 f98f 	bl	800ec5c <ip4_output_if>
 801693e:	4603      	mov	r3, r0
 8016940:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8016942:	6938      	ldr	r0, [r7, #16]
 8016944:	f7fa fa62 	bl	8010e0c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016948:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801694c:	4618      	mov	r0, r3
 801694e:	3718      	adds	r7, #24
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016954:	b590      	push	{r4, r7, lr}
 8016956:	b08f      	sub	sp, #60	; 0x3c
 8016958:	af04      	add	r7, sp, #16
 801695a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016960:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8016962:	6a3b      	ldr	r3, [r7, #32]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d102      	bne.n	801696e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801696c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801696e:	6a3b      	ldr	r3, [r7, #32]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d101      	bne.n	8016978 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8016974:	2300      	movs	r3, #0
 8016976:	e085      	b.n	8016a84 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016978:	6a3b      	ldr	r3, [r7, #32]
 801697a:	68db      	ldr	r3, [r3, #12]
 801697c:	899b      	ldrh	r3, [r3, #12]
 801697e:	b29b      	uxth	r3, r3
 8016980:	4618      	mov	r0, r3
 8016982:	f7f4 f98d 	bl	800aca0 <lwip_htons>
 8016986:	4603      	mov	r3, r0
 8016988:	f003 0301 	and.w	r3, r3, #1
 801698c:	2b00      	cmp	r3, #0
 801698e:	d005      	beq.n	801699c <tcp_zero_window_probe+0x48>
 8016990:	6a3b      	ldr	r3, [r7, #32]
 8016992:	891b      	ldrh	r3, [r3, #8]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d101      	bne.n	801699c <tcp_zero_window_probe+0x48>
 8016998:	2301      	movs	r3, #1
 801699a:	e000      	b.n	801699e <tcp_zero_window_probe+0x4a>
 801699c:	2300      	movs	r3, #0
 801699e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80169a0:	7ffb      	ldrb	r3, [r7, #31]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	bf0c      	ite	eq
 80169a6:	2301      	moveq	r3, #1
 80169a8:	2300      	movne	r3, #0
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80169ae:	6a3b      	ldr	r3, [r7, #32]
 80169b0:	68db      	ldr	r3, [r3, #12]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	8bba      	ldrh	r2, [r7, #28]
 80169b6:	2100      	movs	r1, #0
 80169b8:	6878      	ldr	r0, [r7, #4]
 80169ba:	f7fe fce1 	bl	8015380 <tcp_output_alloc_header>
 80169be:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80169c0:	69bb      	ldr	r3, [r7, #24]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d102      	bne.n	80169cc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80169c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169ca:	e05b      	b.n	8016a84 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80169cc:	69bb      	ldr	r3, [r7, #24]
 80169ce:	685b      	ldr	r3, [r3, #4]
 80169d0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80169d2:	7ffb      	ldrb	r3, [r7, #31]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d00e      	beq.n	80169f6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	899b      	ldrh	r3, [r3, #12]
 80169dc:	b29b      	uxth	r3, r3
 80169de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80169e2:	b29c      	uxth	r4, r3
 80169e4:	2011      	movs	r0, #17
 80169e6:	f7f4 f95b 	bl	800aca0 <lwip_htons>
 80169ea:	4603      	mov	r3, r0
 80169ec:	4323      	orrs	r3, r4
 80169ee:	b29a      	uxth	r2, r3
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	819a      	strh	r2, [r3, #12]
 80169f4:	e010      	b.n	8016a18 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	3314      	adds	r3, #20
 80169fc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80169fe:	6a3b      	ldr	r3, [r7, #32]
 8016a00:	6858      	ldr	r0, [r3, #4]
 8016a02:	6a3b      	ldr	r3, [r7, #32]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	891a      	ldrh	r2, [r3, #8]
 8016a08:	6a3b      	ldr	r3, [r7, #32]
 8016a0a:	891b      	ldrh	r3, [r3, #8]
 8016a0c:	1ad3      	subs	r3, r2, r3
 8016a0e:	b29b      	uxth	r3, r3
 8016a10:	2201      	movs	r2, #1
 8016a12:	6939      	ldr	r1, [r7, #16]
 8016a14:	f7fa fc06 	bl	8011224 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016a18:	6a3b      	ldr	r3, [r7, #32]
 8016a1a:	68db      	ldr	r3, [r3, #12]
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7f4 f94c 	bl	800acbc <lwip_htonl>
 8016a24:	4603      	mov	r3, r0
 8016a26:	3301      	adds	r3, #1
 8016a28:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	1ad3      	subs	r3, r2, r3
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	da02      	bge.n	8016a3c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	68fa      	ldr	r2, [r7, #12]
 8016a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	3304      	adds	r3, #4
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7f7 fef7 	bl	800e834 <ip4_route>
 8016a46:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d103      	bne.n	8016a56 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8016a4e:	23fc      	movs	r3, #252	; 0xfc
 8016a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a54:	e011      	b.n	8016a7a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016a56:	6879      	ldr	r1, [r7, #4]
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	1d1a      	adds	r2, r3, #4
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	7a98      	ldrb	r0, [r3, #10]
 8016a60:	68bb      	ldr	r3, [r7, #8]
 8016a62:	9302      	str	r3, [sp, #8]
 8016a64:	2306      	movs	r3, #6
 8016a66:	9301      	str	r3, [sp, #4]
 8016a68:	2300      	movs	r3, #0
 8016a6a:	9300      	str	r3, [sp, #0]
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	69b8      	ldr	r0, [r7, #24]
 8016a70:	f7f8 f8f4 	bl	800ec5c <ip4_output_if>
 8016a74:	4603      	mov	r3, r0
 8016a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8016a7a:	69b8      	ldr	r0, [r7, #24]
 8016a7c:	f7fa f9c6 	bl	8010e0c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016a80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	372c      	adds	r7, #44	; 0x2c
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd90      	pop	{r4, r7, pc}

08016a8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b082      	sub	sp, #8
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016a94:	f7fa fd8a 	bl	80115ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016a98:	4b0a      	ldr	r3, [pc, #40]	; (8016ac4 <tcpip_tcp_timer+0x38>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d103      	bne.n	8016aa8 <tcpip_tcp_timer+0x1c>
 8016aa0:	4b09      	ldr	r3, [pc, #36]	; (8016ac8 <tcpip_tcp_timer+0x3c>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d005      	beq.n	8016ab4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	4908      	ldr	r1, [pc, #32]	; (8016acc <tcpip_tcp_timer+0x40>)
 8016aac:	20fa      	movs	r0, #250	; 0xfa
 8016aae:	f000 f86f 	bl	8016b90 <sys_timeout>
 8016ab2:	e002      	b.n	8016aba <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016ab4:	4b06      	ldr	r3, [pc, #24]	; (8016ad0 <tcpip_tcp_timer+0x44>)
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	601a      	str	r2, [r3, #0]
  }
}
 8016aba:	bf00      	nop
 8016abc:	3708      	adds	r7, #8
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	bd80      	pop	{r7, pc}
 8016ac2:	bf00      	nop
 8016ac4:	20020bcc 	.word	0x20020bcc
 8016ac8:	20020bdc 	.word	0x20020bdc
 8016acc:	08016a8d 	.word	0x08016a8d
 8016ad0:	20019fd8 	.word	0x20019fd8

08016ad4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016ad8:	4b0a      	ldr	r3, [pc, #40]	; (8016b04 <tcp_timer_needed+0x30>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d10f      	bne.n	8016b00 <tcp_timer_needed+0x2c>
 8016ae0:	4b09      	ldr	r3, [pc, #36]	; (8016b08 <tcp_timer_needed+0x34>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d103      	bne.n	8016af0 <tcp_timer_needed+0x1c>
 8016ae8:	4b08      	ldr	r3, [pc, #32]	; (8016b0c <tcp_timer_needed+0x38>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d007      	beq.n	8016b00 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016af0:	4b04      	ldr	r3, [pc, #16]	; (8016b04 <tcp_timer_needed+0x30>)
 8016af2:	2201      	movs	r2, #1
 8016af4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016af6:	2200      	movs	r2, #0
 8016af8:	4905      	ldr	r1, [pc, #20]	; (8016b10 <tcp_timer_needed+0x3c>)
 8016afa:	20fa      	movs	r0, #250	; 0xfa
 8016afc:	f000 f848 	bl	8016b90 <sys_timeout>
  }
}
 8016b00:	bf00      	nop
 8016b02:	bd80      	pop	{r7, pc}
 8016b04:	20019fd8 	.word	0x20019fd8
 8016b08:	20020bcc 	.word	0x20020bcc
 8016b0c:	20020bdc 	.word	0x20020bdc
 8016b10:	08016a8d 	.word	0x08016a8d

08016b14 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b084      	sub	sp, #16
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	687a      	ldr	r2, [r7, #4]
 8016b2c:	4903      	ldr	r1, [pc, #12]	; (8016b3c <cyclic_timer+0x28>)
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f000 f82e 	bl	8016b90 <sys_timeout>
}
 8016b34:	bf00      	nop
 8016b36:	3710      	adds	r7, #16
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}
 8016b3c:	08016b15 	.word	0x08016b15

08016b40 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b082      	sub	sp, #8
 8016b44:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016b46:	2301      	movs	r3, #1
 8016b48:	607b      	str	r3, [r7, #4]
 8016b4a:	e00e      	b.n	8016b6a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8016b4c:	4a0d      	ldr	r2, [pc, #52]	; (8016b84 <sys_timeouts_init+0x44>)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	00db      	lsls	r3, r3, #3
 8016b58:	4a0a      	ldr	r2, [pc, #40]	; (8016b84 <sys_timeouts_init+0x44>)
 8016b5a:	4413      	add	r3, r2
 8016b5c:	461a      	mov	r2, r3
 8016b5e:	490a      	ldr	r1, [pc, #40]	; (8016b88 <sys_timeouts_init+0x48>)
 8016b60:	f000 f816 	bl	8016b90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	3301      	adds	r3, #1
 8016b68:	607b      	str	r3, [r7, #4]
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2b06      	cmp	r3, #6
 8016b6e:	d9ed      	bls.n	8016b4c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8016b70:	f7ee fb5c 	bl	800522c <sys_now>
 8016b74:	4602      	mov	r2, r0
 8016b76:	4b05      	ldr	r3, [pc, #20]	; (8016b8c <sys_timeouts_init+0x4c>)
 8016b78:	601a      	str	r2, [r3, #0]
}
 8016b7a:	bf00      	nop
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}
 8016b82:	bf00      	nop
 8016b84:	0801bfb4 	.word	0x0801bfb4
 8016b88:	08016b15 	.word	0x08016b15
 8016b8c:	20019fd4 	.word	0x20019fd4

08016b90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b088      	sub	sp, #32
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016b9c:	200b      	movs	r0, #11
 8016b9e:	f7f9 fb67 	bl	8010270 <memp_malloc>
 8016ba2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d10a      	bne.n	8016bc0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	f040 8084 	bne.w	8016cba <sys_timeout+0x12a>
 8016bb2:	4b44      	ldr	r3, [pc, #272]	; (8016cc4 <sys_timeout+0x134>)
 8016bb4:	22d4      	movs	r2, #212	; 0xd4
 8016bb6:	4944      	ldr	r1, [pc, #272]	; (8016cc8 <sys_timeout+0x138>)
 8016bb8:	4844      	ldr	r0, [pc, #272]	; (8016ccc <sys_timeout+0x13c>)
 8016bba:	f001 f873 	bl	8017ca4 <iprintf>
    return;
 8016bbe:	e07c      	b.n	8016cba <sys_timeout+0x12a>
  }

  now = sys_now();
 8016bc0:	f7ee fb34 	bl	800522c <sys_now>
 8016bc4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8016bc6:	4b42      	ldr	r3, [pc, #264]	; (8016cd0 <sys_timeout+0x140>)
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d105      	bne.n	8016bda <sys_timeout+0x4a>
    diff = 0;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8016bd2:	4a40      	ldr	r2, [pc, #256]	; (8016cd4 <sys_timeout+0x144>)
 8016bd4:	693b      	ldr	r3, [r7, #16]
 8016bd6:	6013      	str	r3, [r2, #0]
 8016bd8:	e004      	b.n	8016be4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8016bda:	4b3e      	ldr	r3, [pc, #248]	; (8016cd4 <sys_timeout+0x144>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	693a      	ldr	r2, [r7, #16]
 8016be0:	1ad3      	subs	r3, r2, r3
 8016be2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	2200      	movs	r2, #0
 8016be8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016bea:	697b      	ldr	r3, [r7, #20]
 8016bec:	68ba      	ldr	r2, [r7, #8]
 8016bee:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8016bf6:	68fa      	ldr	r2, [r7, #12]
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	441a      	add	r2, r3
 8016bfc:	697b      	ldr	r3, [r7, #20]
 8016bfe:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016c00:	4b33      	ldr	r3, [pc, #204]	; (8016cd0 <sys_timeout+0x140>)
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d103      	bne.n	8016c10 <sys_timeout+0x80>
    next_timeout = timeout;
 8016c08:	4a31      	ldr	r2, [pc, #196]	; (8016cd0 <sys_timeout+0x140>)
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	6013      	str	r3, [r2, #0]
    return;
 8016c0e:	e055      	b.n	8016cbc <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8016c10:	4b2f      	ldr	r3, [pc, #188]	; (8016cd0 <sys_timeout+0x140>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	685a      	ldr	r2, [r3, #4]
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d90f      	bls.n	8016c3c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8016c1c:	4b2c      	ldr	r3, [pc, #176]	; (8016cd0 <sys_timeout+0x140>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	4a2b      	ldr	r2, [pc, #172]	; (8016cd0 <sys_timeout+0x140>)
 8016c22:	6812      	ldr	r2, [r2, #0]
 8016c24:	6851      	ldr	r1, [r2, #4]
 8016c26:	68fa      	ldr	r2, [r7, #12]
 8016c28:	1a8a      	subs	r2, r1, r2
 8016c2a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8016c2c:	4b28      	ldr	r3, [pc, #160]	; (8016cd0 <sys_timeout+0x140>)
 8016c2e:	681a      	ldr	r2, [r3, #0]
 8016c30:	697b      	ldr	r3, [r7, #20]
 8016c32:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016c34:	4a26      	ldr	r2, [pc, #152]	; (8016cd0 <sys_timeout+0x140>)
 8016c36:	697b      	ldr	r3, [r7, #20]
 8016c38:	6013      	str	r3, [r2, #0]
 8016c3a:	e03f      	b.n	8016cbc <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016c3c:	4b24      	ldr	r3, [pc, #144]	; (8016cd0 <sys_timeout+0x140>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	61fb      	str	r3, [r7, #28]
 8016c42:	e036      	b.n	8016cb2 <sys_timeout+0x122>
      timeout->time -= t->time;
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	685a      	ldr	r2, [r3, #4]
 8016c48:	69fb      	ldr	r3, [r7, #28]
 8016c4a:	685b      	ldr	r3, [r3, #4]
 8016c4c:	1ad2      	subs	r2, r2, r3
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d006      	beq.n	8016c68 <sys_timeout+0xd8>
 8016c5a:	69fb      	ldr	r3, [r7, #28]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	685a      	ldr	r2, [r3, #4]
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	685b      	ldr	r3, [r3, #4]
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d921      	bls.n	8016cac <sys_timeout+0x11c>
        if (t->next != NULL) {
 8016c68:	69fb      	ldr	r3, [r7, #28]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d009      	beq.n	8016c84 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8016c70:	69fb      	ldr	r3, [r7, #28]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	69fa      	ldr	r2, [r7, #28]
 8016c76:	6812      	ldr	r2, [r2, #0]
 8016c78:	6851      	ldr	r1, [r2, #4]
 8016c7a:	697a      	ldr	r2, [r7, #20]
 8016c7c:	6852      	ldr	r2, [r2, #4]
 8016c7e:	1a8a      	subs	r2, r1, r2
 8016c80:	605a      	str	r2, [r3, #4]
 8016c82:	e00b      	b.n	8016c9c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	685a      	ldr	r2, [r3, #4]
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d906      	bls.n	8016c9c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8016c8e:	4b10      	ldr	r3, [pc, #64]	; (8016cd0 <sys_timeout+0x140>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	685a      	ldr	r2, [r3, #4]
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	441a      	add	r2, r3
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8016c9c:	69fb      	ldr	r3, [r7, #28]
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	697b      	ldr	r3, [r7, #20]
 8016ca2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016ca4:	69fb      	ldr	r3, [r7, #28]
 8016ca6:	697a      	ldr	r2, [r7, #20]
 8016ca8:	601a      	str	r2, [r3, #0]
        break;
 8016caa:	e007      	b.n	8016cbc <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016cac:	69fb      	ldr	r3, [r7, #28]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	61fb      	str	r3, [r7, #28]
 8016cb2:	69fb      	ldr	r3, [r7, #28]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d1c5      	bne.n	8016c44 <sys_timeout+0xb4>
 8016cb8:	e000      	b.n	8016cbc <sys_timeout+0x12c>
    return;
 8016cba:	bf00      	nop
      }
    }
  }
}
 8016cbc:	3720      	adds	r7, #32
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}
 8016cc2:	bf00      	nop
 8016cc4:	0801bcb0 	.word	0x0801bcb0
 8016cc8:	0801bce4 	.word	0x0801bce4
 8016ccc:	0801bd24 	.word	0x0801bd24
 8016cd0:	20019fd0 	.word	0x20019fd0
 8016cd4:	20019fd4 	.word	0x20019fd4

08016cd8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b086      	sub	sp, #24
 8016cdc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8016cde:	4b24      	ldr	r3, [pc, #144]	; (8016d70 <sys_check_timeouts+0x98>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d03f      	beq.n	8016d66 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8016ce6:	f7ee faa1 	bl	800522c <sys_now>
 8016cea:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8016cec:	4b21      	ldr	r3, [pc, #132]	; (8016d74 <sys_check_timeouts+0x9c>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	68fa      	ldr	r2, [r7, #12]
 8016cf2:	1ad3      	subs	r3, r2, r3
 8016cf4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8016cfa:	4b1d      	ldr	r3, [pc, #116]	; (8016d70 <sys_check_timeouts+0x98>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8016d00:	68bb      	ldr	r3, [r7, #8]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d02c      	beq.n	8016d60 <sys_check_timeouts+0x88>
 8016d06:	68bb      	ldr	r3, [r7, #8]
 8016d08:	685a      	ldr	r2, [r3, #4]
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d827      	bhi.n	8016d60 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8016d10:	2301      	movs	r3, #1
 8016d12:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	685a      	ldr	r2, [r3, #4]
 8016d18:	4b16      	ldr	r3, [pc, #88]	; (8016d74 <sys_check_timeouts+0x9c>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	4a15      	ldr	r2, [pc, #84]	; (8016d74 <sys_check_timeouts+0x9c>)
 8016d20:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	697a      	ldr	r2, [r7, #20]
 8016d28:	1ad3      	subs	r3, r2, r3
 8016d2a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8016d2c:	68bb      	ldr	r3, [r7, #8]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	4a0f      	ldr	r2, [pc, #60]	; (8016d70 <sys_check_timeouts+0x98>)
 8016d32:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	689b      	ldr	r3, [r3, #8]
 8016d38:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8016d3a:	68bb      	ldr	r3, [r7, #8]
 8016d3c:	68db      	ldr	r3, [r3, #12]
 8016d3e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016d40:	68b9      	ldr	r1, [r7, #8]
 8016d42:	200b      	movs	r0, #11
 8016d44:	f7f9 fae6 	bl	8010314 <memp_free>
        if (handler != NULL) {
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d008      	beq.n	8016d60 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8016d4e:	480a      	ldr	r0, [pc, #40]	; (8016d78 <sys_check_timeouts+0xa0>)
 8016d50:	f000 fed8 	bl	8017b04 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6838      	ldr	r0, [r7, #0]
 8016d58:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8016d5a:	4807      	ldr	r0, [pc, #28]	; (8016d78 <sys_check_timeouts+0xa0>)
 8016d5c:	f000 fee1 	bl	8017b22 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8016d60:	7cfb      	ldrb	r3, [r7, #19]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d1c7      	bne.n	8016cf6 <sys_check_timeouts+0x1e>
  }
}
 8016d66:	bf00      	nop
 8016d68:	3718      	adds	r7, #24
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	bf00      	nop
 8016d70:	20019fd0 	.word	0x20019fd0
 8016d74:	20019fd4 	.word	0x20019fd4
 8016d78:	2001d268 	.word	0x2001d268

08016d7c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8016d82:	4b0f      	ldr	r3, [pc, #60]	; (8016dc0 <sys_timeouts_sleeptime+0x44>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d102      	bne.n	8016d90 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8016d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d8e:	e013      	b.n	8016db8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8016d90:	f7ee fa4c 	bl	800522c <sys_now>
 8016d94:	4602      	mov	r2, r0
 8016d96:	4b0b      	ldr	r3, [pc, #44]	; (8016dc4 <sys_timeouts_sleeptime+0x48>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	1ad3      	subs	r3, r2, r3
 8016d9c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8016d9e:	4b08      	ldr	r3, [pc, #32]	; (8016dc0 <sys_timeouts_sleeptime+0x44>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	685a      	ldr	r2, [r3, #4]
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d201      	bcs.n	8016dae <sys_timeouts_sleeptime+0x32>
    return 0;
 8016daa:	2300      	movs	r3, #0
 8016dac:	e004      	b.n	8016db8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8016dae:	4b04      	ldr	r3, [pc, #16]	; (8016dc0 <sys_timeouts_sleeptime+0x44>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	685a      	ldr	r2, [r3, #4]
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	1ad3      	subs	r3, r2, r3
  }
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3708      	adds	r7, #8
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}
 8016dc0:	20019fd0 	.word	0x20019fd0
 8016dc4:	20019fd4 	.word	0x20019fd4

08016dc8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b084      	sub	sp, #16
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
 8016dd0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8016dd2:	4b0f      	ldr	r3, [pc, #60]	; (8016e10 <sys_timeouts_mbox_fetch+0x48>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d105      	bne.n	8016de6 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016dda:	2200      	movs	r2, #0
 8016ddc:	6839      	ldr	r1, [r7, #0]
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f000 fd5b 	bl	801789a <sys_arch_mbox_fetch>
    return;
 8016de4:	e011      	b.n	8016e0a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016de6:	f7ff ffc9 	bl	8016d7c <sys_timeouts_sleeptime>
 8016dea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d008      	beq.n	8016e04 <sys_timeouts_mbox_fetch+0x3c>
 8016df2:	68fa      	ldr	r2, [r7, #12]
 8016df4:	6839      	ldr	r1, [r7, #0]
 8016df6:	6878      	ldr	r0, [r7, #4]
 8016df8:	f000 fd4f 	bl	801789a <sys_arch_mbox_fetch>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e02:	d102      	bne.n	8016e0a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016e04:	f7ff ff68 	bl	8016cd8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016e08:	e7e3      	b.n	8016dd2 <sys_timeouts_mbox_fetch+0xa>
  }
}
 8016e0a:	3710      	adds	r7, #16
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}
 8016e10:	20019fd0 	.word	0x20019fd0

08016e14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016e14:	b480      	push	{r7}
 8016e16:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016e18:	bf00      	nop
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e20:	4770      	bx	lr
	...

08016e24 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016e24:	b480      	push	{r7}
 8016e26:	b083      	sub	sp, #12
 8016e28:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016e2e:	4b17      	ldr	r3, [pc, #92]	; (8016e8c <udp_new_port+0x68>)
 8016e30:	881b      	ldrh	r3, [r3, #0]
 8016e32:	1c5a      	adds	r2, r3, #1
 8016e34:	b291      	uxth	r1, r2
 8016e36:	4a15      	ldr	r2, [pc, #84]	; (8016e8c <udp_new_port+0x68>)
 8016e38:	8011      	strh	r1, [r2, #0]
 8016e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e3e:	4293      	cmp	r3, r2
 8016e40:	d103      	bne.n	8016e4a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016e42:	4b12      	ldr	r3, [pc, #72]	; (8016e8c <udp_new_port+0x68>)
 8016e44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016e48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e4a:	4b11      	ldr	r3, [pc, #68]	; (8016e90 <udp_new_port+0x6c>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	603b      	str	r3, [r7, #0]
 8016e50:	e011      	b.n	8016e76 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	8a5a      	ldrh	r2, [r3, #18]
 8016e56:	4b0d      	ldr	r3, [pc, #52]	; (8016e8c <udp_new_port+0x68>)
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d108      	bne.n	8016e70 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016e5e:	88fb      	ldrh	r3, [r7, #6]
 8016e60:	3301      	adds	r3, #1
 8016e62:	80fb      	strh	r3, [r7, #6]
 8016e64:	88fb      	ldrh	r3, [r7, #6]
 8016e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016e6a:	d3e0      	bcc.n	8016e2e <udp_new_port+0xa>
        return 0;
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	e007      	b.n	8016e80 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	603b      	str	r3, [r7, #0]
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d1ea      	bne.n	8016e52 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016e7c:	4b03      	ldr	r3, [pc, #12]	; (8016e8c <udp_new_port+0x68>)
 8016e7e:	881b      	ldrh	r3, [r3, #0]
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	370c      	adds	r7, #12
 8016e84:	46bd      	mov	sp, r7
 8016e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8a:	4770      	bx	lr
 8016e8c:	2000001c 	.word	0x2000001c
 8016e90:	20020be4 	.word	0x20020be4

08016e94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b085      	sub	sp, #20
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	60f8      	str	r0, [r7, #12]
 8016e9c:	60b9      	str	r1, [r7, #8]
 8016e9e:	4613      	mov	r3, r2
 8016ea0:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016ea2:	79fb      	ldrb	r3, [r7, #7]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d018      	beq.n	8016eda <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d013      	beq.n	8016ed6 <udp_input_local_match+0x42>
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d00f      	beq.n	8016ed6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016eb6:	4b14      	ldr	r3, [pc, #80]	; (8016f08 <udp_input_local_match+0x74>)
 8016eb8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016ebe:	d00a      	beq.n	8016ed6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	4b10      	ldr	r3, [pc, #64]	; (8016f08 <udp_input_local_match+0x74>)
 8016ec6:	695b      	ldr	r3, [r3, #20]
 8016ec8:	405a      	eors	r2, r3
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	3308      	adds	r3, #8
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d110      	bne.n	8016ef8 <udp_input_local_match+0x64>
          return 1;
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	e00f      	b.n	8016efa <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d009      	beq.n	8016ef4 <udp_input_local_match+0x60>
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d005      	beq.n	8016ef4 <udp_input_local_match+0x60>
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	681a      	ldr	r2, [r3, #0]
 8016eec:	4b06      	ldr	r3, [pc, #24]	; (8016f08 <udp_input_local_match+0x74>)
 8016eee:	695b      	ldr	r3, [r3, #20]
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d101      	bne.n	8016ef8 <udp_input_local_match+0x64>
      return 1;
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	e000      	b.n	8016efa <udp_input_local_match+0x66>
    }
  }

  return 0;
 8016ef8:	2300      	movs	r3, #0
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	3714      	adds	r7, #20
 8016efe:	46bd      	mov	sp, r7
 8016f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f04:	4770      	bx	lr
 8016f06:	bf00      	nop
 8016f08:	2001d26c 	.word	0x2001d26c

08016f0c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016f0c:	b590      	push	{r4, r7, lr}
 8016f0e:	b08d      	sub	sp, #52	; 0x34
 8016f10:	af02      	add	r7, sp, #8
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016f16:	2300      	movs	r3, #0
 8016f18:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	895b      	ldrh	r3, [r3, #10]
 8016f1e:	2b07      	cmp	r3, #7
 8016f20:	d803      	bhi.n	8016f2a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016f22:	6878      	ldr	r0, [r7, #4]
 8016f24:	f7f9 ff72 	bl	8010e0c <pbuf_free>
    goto end;
 8016f28:	e0c9      	b.n	80170be <udp_input+0x1b2>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	685b      	ldr	r3, [r3, #4]
 8016f2e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016f30:	4b65      	ldr	r3, [pc, #404]	; (80170c8 <udp_input+0x1bc>)
 8016f32:	695a      	ldr	r2, [r3, #20]
 8016f34:	4b64      	ldr	r3, [pc, #400]	; (80170c8 <udp_input+0x1bc>)
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	4619      	mov	r1, r3
 8016f3a:	4610      	mov	r0, r2
 8016f3c:	f7f7 ffdf 	bl	800eefe <ip4_addr_isbroadcast_u32>
 8016f40:	4603      	mov	r3, r0
 8016f42:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	881b      	ldrh	r3, [r3, #0]
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7f3 fea8 	bl	800aca0 <lwip_htons>
 8016f50:	4603      	mov	r3, r0
 8016f52:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	885b      	ldrh	r3, [r3, #2]
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7f3 fea0 	bl	800aca0 <lwip_htons>
 8016f60:	4603      	mov	r3, r0
 8016f62:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8016f64:	6978      	ldr	r0, [r7, #20]
 8016f66:	f000 fb51 	bl	801760c <udp_debug_print>
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016f72:	2300      	movs	r3, #0
 8016f74:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f76:	4b55      	ldr	r3, [pc, #340]	; (80170cc <udp_input+0x1c0>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8016f7c:	e03b      	b.n	8016ff6 <udp_input+0xea>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f80:	8a5b      	ldrh	r3, [r3, #18]
 8016f82:	89fa      	ldrh	r2, [r7, #14]
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d131      	bne.n	8016fec <udp_input+0xe0>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016f88:	7cfb      	ldrb	r3, [r7, #19]
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	6839      	ldr	r1, [r7, #0]
 8016f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f90:	f7ff ff80 	bl	8016e94 <udp_input_local_match>
 8016f94:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d028      	beq.n	8016fec <udp_input+0xe0>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8016f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9c:	7c1b      	ldrb	r3, [r3, #16]
 8016f9e:	f003 0304 	and.w	r3, r3, #4
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d104      	bne.n	8016fb0 <udp_input+0xa4>
 8016fa6:	69fb      	ldr	r3, [r7, #28]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d101      	bne.n	8016fb0 <udp_input+0xa4>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8016fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fae:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb2:	8a9b      	ldrh	r3, [r3, #20]
 8016fb4:	8a3a      	ldrh	r2, [r7, #16]
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d118      	bne.n	8016fec <udp_input+0xe0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d005      	beq.n	8016fce <udp_input+0xc2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc4:	685a      	ldr	r2, [r3, #4]
 8016fc6:	4b40      	ldr	r3, [pc, #256]	; (80170c8 <udp_input+0x1bc>)
 8016fc8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d10e      	bne.n	8016fec <udp_input+0xe0>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016fce:	6a3b      	ldr	r3, [r7, #32]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d014      	beq.n	8016ffe <udp_input+0xf2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd6:	68da      	ldr	r2, [r3, #12]
 8016fd8:	6a3b      	ldr	r3, [r7, #32]
 8016fda:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016fdc:	4b3b      	ldr	r3, [pc, #236]	; (80170cc <udp_input+0x1c0>)
 8016fde:	681a      	ldr	r2, [r3, #0]
 8016fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016fe4:	4a39      	ldr	r2, [pc, #228]	; (80170cc <udp_input+0x1c0>)
 8016fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016fea:	e008      	b.n	8016ffe <udp_input+0xf2>
      }
    }

    prev = pcb;
 8016fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d1c0      	bne.n	8016f7e <udp_input+0x72>
 8016ffc:	e000      	b.n	8017000 <udp_input+0xf4>
        break;
 8016ffe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017002:	2b00      	cmp	r3, #0
 8017004:	d101      	bne.n	801700a <udp_input+0xfe>
    pcb = uncon_pcb;
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801700c:	2b00      	cmp	r3, #0
 801700e:	d002      	beq.n	8017016 <udp_input+0x10a>
    for_us = 1;
 8017010:	2301      	movs	r3, #1
 8017012:	76fb      	strb	r3, [r7, #27]
 8017014:	e00a      	b.n	801702c <udp_input+0x120>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	3304      	adds	r3, #4
 801701a:	681a      	ldr	r2, [r3, #0]
 801701c:	4b2a      	ldr	r3, [pc, #168]	; (80170c8 <udp_input+0x1bc>)
 801701e:	695b      	ldr	r3, [r3, #20]
 8017020:	429a      	cmp	r2, r3
 8017022:	bf0c      	ite	eq
 8017024:	2301      	moveq	r3, #1
 8017026:	2300      	movne	r3, #0
 8017028:	b2db      	uxtb	r3, r3
 801702a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801702c:	7efb      	ldrb	r3, [r7, #27]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d042      	beq.n	80170b8 <udp_input+0x1ac>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8017032:	f06f 0107 	mvn.w	r1, #7
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	f7f9 fec4 	bl	8010dc4 <pbuf_header>
 801703c:	4603      	mov	r3, r0
 801703e:	2b00      	cmp	r3, #0
 8017040:	d00a      	beq.n	8017058 <udp_input+0x14c>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8017042:	4b23      	ldr	r3, [pc, #140]	; (80170d0 <udp_input+0x1c4>)
 8017044:	f240 1255 	movw	r2, #341	; 0x155
 8017048:	4922      	ldr	r1, [pc, #136]	; (80170d4 <udp_input+0x1c8>)
 801704a:	4823      	ldr	r0, [pc, #140]	; (80170d8 <udp_input+0x1cc>)
 801704c:	f000 fe2a 	bl	8017ca4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f7f9 fedb 	bl	8010e0c <pbuf_free>
      goto end;
 8017056:	e032      	b.n	80170be <udp_input+0x1b2>
    }

    if (pcb != NULL) {
 8017058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705a:	2b00      	cmp	r3, #0
 801705c:	d012      	beq.n	8017084 <udp_input+0x178>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017060:	6a1b      	ldr	r3, [r3, #32]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d00a      	beq.n	801707c <udp_input+0x170>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017068:	6a1c      	ldr	r4, [r3, #32]
 801706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801706e:	8a3b      	ldrh	r3, [r7, #16]
 8017070:	9300      	str	r3, [sp, #0]
 8017072:	4b1a      	ldr	r3, [pc, #104]	; (80170dc <udp_input+0x1d0>)
 8017074:	687a      	ldr	r2, [r7, #4]
 8017076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017078:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801707a:	e021      	b.n	80170c0 <udp_input+0x1b4>
        pbuf_free(p);
 801707c:	6878      	ldr	r0, [r7, #4]
 801707e:	f7f9 fec5 	bl	8010e0c <pbuf_free>
        goto end;
 8017082:	e01c      	b.n	80170be <udp_input+0x1b2>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017084:	7cfb      	ldrb	r3, [r7, #19]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d112      	bne.n	80170b0 <udp_input+0x1a4>
 801708a:	4b0f      	ldr	r3, [pc, #60]	; (80170c8 <udp_input+0x1bc>)
 801708c:	695b      	ldr	r3, [r3, #20]
 801708e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017092:	2be0      	cmp	r3, #224	; 0xe0
 8017094:	d00c      	beq.n	80170b0 <udp_input+0x1a4>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017096:	4b0c      	ldr	r3, [pc, #48]	; (80170c8 <udp_input+0x1bc>)
 8017098:	899b      	ldrh	r3, [r3, #12]
 801709a:	3308      	adds	r3, #8
 801709c:	b29b      	uxth	r3, r3
 801709e:	b21b      	sxth	r3, r3
 80170a0:	4619      	mov	r1, r3
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f7f9 fea0 	bl	8010de8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80170a8:	2103      	movs	r1, #3
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f7f7 f892 	bl	800e1d4 <icmp_dest_unreach>
      pbuf_free(p);
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f7f9 feab 	bl	8010e0c <pbuf_free>
  return;
 80170b6:	e003      	b.n	80170c0 <udp_input+0x1b4>
    pbuf_free(p);
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f7f9 fea7 	bl	8010e0c <pbuf_free>
  return;
 80170be:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80170c0:	372c      	adds	r7, #44	; 0x2c
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd90      	pop	{r4, r7, pc}
 80170c6:	bf00      	nop
 80170c8:	2001d26c 	.word	0x2001d26c
 80170cc:	20020be4 	.word	0x20020be4
 80170d0:	0801bd4c 	.word	0x0801bd4c
 80170d4:	0801bd7c 	.word	0x0801bd7c
 80170d8:	0801bd90 	.word	0x0801bd90
 80170dc:	2001d27c 	.word	0x2001d27c

080170e0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b088      	sub	sp, #32
 80170e4:	af02      	add	r7, sp, #8
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
 80170ec:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d002      	beq.n	80170fe <udp_sendto+0x1e>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d102      	bne.n	8017104 <udp_sendto+0x24>
    return ERR_VAL;
 80170fe:	f06f 0305 	mvn.w	r3, #5
 8017102:	e026      	b.n	8017152 <udp_sendto+0x72>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801710c:	2be0      	cmp	r3, #224	; 0xe0
 801710e:	d10c      	bne.n	801712a <udp_sendto+0x4a>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	699b      	ldr	r3, [r3, #24]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d008      	beq.n	801712a <udp_sendto+0x4a>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	699a      	ldr	r2, [r3, #24]
 801711c:	4b0f      	ldr	r3, [pc, #60]	; (801715c <udp_sendto+0x7c>)
 801711e:	681b      	ldr	r3, [r3, #0]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
 8017120:	429a      	cmp	r2, r3
 8017122:	d002      	beq.n	801712a <udp_sendto+0x4a>
        dst_ip_route = &pcb->multicast_ip;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	3318      	adds	r3, #24
 8017128:	617b      	str	r3, [r7, #20]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801712a:	6978      	ldr	r0, [r7, #20]
 801712c:	f7f7 fb82 	bl	800e834 <ip4_route>
 8017130:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d102      	bne.n	801713e <udp_sendto+0x5e>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017138:	f06f 0303 	mvn.w	r3, #3
 801713c:	e009      	b.n	8017152 <udp_sendto+0x72>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801713e:	887a      	ldrh	r2, [r7, #2]
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	9300      	str	r3, [sp, #0]
 8017144:	4613      	mov	r3, r2
 8017146:	687a      	ldr	r2, [r7, #4]
 8017148:	68b9      	ldr	r1, [r7, #8]
 801714a:	68f8      	ldr	r0, [r7, #12]
 801714c:	f000 f808 	bl	8017160 <udp_sendto_if>
 8017150:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017152:	4618      	mov	r0, r3
 8017154:	3718      	adds	r7, #24
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	0801be98 	.word	0x0801be98

08017160 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b088      	sub	sp, #32
 8017164:	af02      	add	r7, sp, #8
 8017166:	60f8      	str	r0, [r7, #12]
 8017168:	60b9      	str	r1, [r7, #8]
 801716a:	607a      	str	r2, [r7, #4]
 801716c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d002      	beq.n	801717a <udp_sendto_if+0x1a>
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d102      	bne.n	8017180 <udp_sendto_if+0x20>
    return ERR_VAL;
 801717a:	f06f 0305 	mvn.w	r3, #5
 801717e:	e028      	b.n	80171d2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d009      	beq.n	801719a <udp_sendto_if+0x3a>
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d005      	beq.n	801719a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017196:	2be0      	cmp	r3, #224	; 0xe0
 8017198:	d103      	bne.n	80171a2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801719a:	6a3b      	ldr	r3, [r7, #32]
 801719c:	3304      	adds	r3, #4
 801719e:	617b      	str	r3, [r7, #20]
 80171a0:	e00b      	b.n	80171ba <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	681a      	ldr	r2, [r3, #0]
 80171a6:	6a3b      	ldr	r3, [r7, #32]
 80171a8:	3304      	adds	r3, #4
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d002      	beq.n	80171b6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 80171b0:	f06f 0303 	mvn.w	r3, #3
 80171b4:	e00d      	b.n	80171d2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80171ba:	887a      	ldrh	r2, [r7, #2]
 80171bc:	697b      	ldr	r3, [r7, #20]
 80171be:	9301      	str	r3, [sp, #4]
 80171c0:	6a3b      	ldr	r3, [r7, #32]
 80171c2:	9300      	str	r3, [sp, #0]
 80171c4:	4613      	mov	r3, r2
 80171c6:	687a      	ldr	r2, [r7, #4]
 80171c8:	68b9      	ldr	r1, [r7, #8]
 80171ca:	68f8      	ldr	r0, [r7, #12]
 80171cc:	f000 f806 	bl	80171dc <udp_sendto_if_src>
 80171d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80171d2:	4618      	mov	r0, r3
 80171d4:	3718      	adds	r7, #24
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}
	...

080171dc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b08c      	sub	sp, #48	; 0x30
 80171e0:	af04      	add	r7, sp, #16
 80171e2:	60f8      	str	r0, [r7, #12]
 80171e4:	60b9      	str	r1, [r7, #8]
 80171e6:	607a      	str	r2, [r7, #4]
 80171e8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d002      	beq.n	80171f6 <udp_sendto_if_src+0x1a>
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d102      	bne.n	80171fc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80171f6:	f06f 0305 	mvn.w	r3, #5
 80171fa:	e09a      	b.n	8017332 <udp_sendto_if_src+0x156>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	8a5b      	ldrh	r3, [r3, #18]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d10f      	bne.n	8017224 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017204:	68f9      	ldr	r1, [r7, #12]
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	8a5b      	ldrh	r3, [r3, #18]
 801720a:	461a      	mov	r2, r3
 801720c:	68f8      	ldr	r0, [r7, #12]
 801720e:	f000 f89b 	bl	8017348 <udp_bind>
 8017212:	4603      	mov	r3, r0
 8017214:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017216:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d002      	beq.n	8017224 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801721e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017222:	e086      	b.n	8017332 <udp_sendto_if_src+0x156>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8017224:	2108      	movs	r1, #8
 8017226:	68b8      	ldr	r0, [r7, #8]
 8017228:	f7f9 fdcc 	bl	8010dc4 <pbuf_header>
 801722c:	4603      	mov	r3, r0
 801722e:	2b00      	cmp	r3, #0
 8017230:	d014      	beq.n	801725c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017232:	2200      	movs	r2, #0
 8017234:	2108      	movs	r1, #8
 8017236:	2001      	movs	r0, #1
 8017238:	f7f9 fa76 	bl	8010728 <pbuf_alloc>
 801723c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d102      	bne.n	801724a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017248:	e073      	b.n	8017332 <udp_sendto_if_src+0x156>
    }
    if (p->tot_len != 0) {
 801724a:	68bb      	ldr	r3, [r7, #8]
 801724c:	891b      	ldrh	r3, [r3, #8]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d006      	beq.n	8017260 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017252:	68b9      	ldr	r1, [r7, #8]
 8017254:	69f8      	ldr	r0, [r7, #28]
 8017256:	f7f9 ff09 	bl	801106c <pbuf_chain>
 801725a:	e001      	b.n	8017260 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017260:	69fb      	ldr	r3, [r7, #28]
 8017262:	895b      	ldrh	r3, [r3, #10]
 8017264:	2b07      	cmp	r3, #7
 8017266:	d806      	bhi.n	8017276 <udp_sendto_if_src+0x9a>
 8017268:	4b34      	ldr	r3, [pc, #208]	; (801733c <udp_sendto_if_src+0x160>)
 801726a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801726e:	4934      	ldr	r1, [pc, #208]	; (8017340 <udp_sendto_if_src+0x164>)
 8017270:	4834      	ldr	r0, [pc, #208]	; (8017344 <udp_sendto_if_src+0x168>)
 8017272:	f000 fd17 	bl	8017ca4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017276:	69fb      	ldr	r3, [r7, #28]
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	8a5b      	ldrh	r3, [r3, #18]
 8017280:	4618      	mov	r0, r3
 8017282:	f7f3 fd0d 	bl	800aca0 <lwip_htons>
 8017286:	4603      	mov	r3, r0
 8017288:	461a      	mov	r2, r3
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801728e:	887b      	ldrh	r3, [r7, #2]
 8017290:	4618      	mov	r0, r3
 8017292:	f7f3 fd05 	bl	800aca0 <lwip_htons>
 8017296:	4603      	mov	r3, r0
 8017298:	461a      	mov	r2, r3
 801729a:	697b      	ldr	r3, [r7, #20]
 801729c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	2200      	movs	r2, #0
 80172a2:	719a      	strb	r2, [r3, #6]
 80172a4:	2200      	movs	r2, #0
 80172a6:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	7c1b      	ldrb	r3, [r3, #16]
 80172ac:	f003 0308 	and.w	r3, r3, #8
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d00c      	beq.n	80172ce <udp_sendto_if_src+0xf2>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80172bc:	2be0      	cmp	r3, #224	; 0xe0
 80172be:	d106      	bne.n	80172ce <udp_sendto_if_src+0xf2>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 80172c0:	69fb      	ldr	r3, [r7, #28]
 80172c2:	7b5b      	ldrb	r3, [r3, #13]
 80172c4:	f043 0304 	orr.w	r3, r3, #4
 80172c8:	b2da      	uxtb	r2, r3
 80172ca:	69fb      	ldr	r3, [r7, #28]
 80172cc:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80172ce:	69fb      	ldr	r3, [r7, #28]
 80172d0:	891b      	ldrh	r3, [r3, #8]
 80172d2:	4618      	mov	r0, r3
 80172d4:	f7f3 fce4 	bl	800aca0 <lwip_htons>
 80172d8:	4603      	mov	r3, r0
 80172da:	461a      	mov	r2, r3
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80172e0:	2311      	movs	r3, #17
 80172e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80172ec:	2be0      	cmp	r3, #224	; 0xe0
 80172ee:	d102      	bne.n	80172f6 <udp_sendto_if_src+0x11a>
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	7f1b      	ldrb	r3, [r3, #28]
 80172f4:	e001      	b.n	80172fa <udp_sendto_if_src+0x11e>
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	7a9b      	ldrb	r3, [r3, #10]
 80172fa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	7a5b      	ldrb	r3, [r3, #9]
 8017300:	7cb9      	ldrb	r1, [r7, #18]
 8017302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017304:	9202      	str	r2, [sp, #8]
 8017306:	7cfa      	ldrb	r2, [r7, #19]
 8017308:	9201      	str	r2, [sp, #4]
 801730a:	9300      	str	r3, [sp, #0]
 801730c:	460b      	mov	r3, r1
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017312:	69f8      	ldr	r0, [r7, #28]
 8017314:	f7f7 fced 	bl	800ecf2 <ip4_output_if_src>
 8017318:	4603      	mov	r3, r0
 801731a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801731c:	69fa      	ldr	r2, [r7, #28]
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	429a      	cmp	r2, r3
 8017322:	d004      	beq.n	801732e <udp_sendto_if_src+0x152>
    /* free the header pbuf */
    pbuf_free(q);
 8017324:	69f8      	ldr	r0, [r7, #28]
 8017326:	f7f9 fd71 	bl	8010e0c <pbuf_free>
    q = NULL;
 801732a:	2300      	movs	r3, #0
 801732c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801732e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017332:	4618      	mov	r0, r3
 8017334:	3720      	adds	r7, #32
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	0801bd4c 	.word	0x0801bd4c
 8017340:	0801bdb8 	.word	0x0801bdb8
 8017344:	0801bd90 	.word	0x0801bd90

08017348 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b086      	sub	sp, #24
 801734c:	af00      	add	r7, sp, #0
 801734e:	60f8      	str	r0, [r7, #12]
 8017350:	60b9      	str	r1, [r7, #8]
 8017352:	4613      	mov	r3, r2
 8017354:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d101      	bne.n	8017360 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801735c:	4b30      	ldr	r3, [pc, #192]	; (8017420 <udp_bind+0xd8>)
 801735e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d002      	beq.n	801736c <udp_bind+0x24>
 8017366:	68bb      	ldr	r3, [r7, #8]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d102      	bne.n	8017372 <udp_bind+0x2a>
    return ERR_VAL;
 801736c:	f06f 0305 	mvn.w	r3, #5
 8017370:	e052      	b.n	8017418 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017372:	2300      	movs	r3, #0
 8017374:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017376:	4b2b      	ldr	r3, [pc, #172]	; (8017424 <udp_bind+0xdc>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	617b      	str	r3, [r7, #20]
 801737c:	e009      	b.n	8017392 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801737e:	68fa      	ldr	r2, [r7, #12]
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	429a      	cmp	r2, r3
 8017384:	d102      	bne.n	801738c <udp_bind+0x44>
      rebind = 1;
 8017386:	2301      	movs	r3, #1
 8017388:	74fb      	strb	r3, [r7, #19]
      break;
 801738a:	e005      	b.n	8017398 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801738c:	697b      	ldr	r3, [r7, #20]
 801738e:	68db      	ldr	r3, [r3, #12]
 8017390:	617b      	str	r3, [r7, #20]
 8017392:	697b      	ldr	r3, [r7, #20]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d1f2      	bne.n	801737e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8017398:	88fb      	ldrh	r3, [r7, #6]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d109      	bne.n	80173b2 <udp_bind+0x6a>
    port = udp_new_port();
 801739e:	f7ff fd41 	bl	8016e24 <udp_new_port>
 80173a2:	4603      	mov	r3, r0
 80173a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80173a6:	88fb      	ldrh	r3, [r7, #6]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d11e      	bne.n	80173ea <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80173ac:	f06f 0307 	mvn.w	r3, #7
 80173b0:	e032      	b.n	8017418 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80173b2:	4b1c      	ldr	r3, [pc, #112]	; (8017424 <udp_bind+0xdc>)
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	617b      	str	r3, [r7, #20]
 80173b8:	e014      	b.n	80173e4 <udp_bind+0x9c>
      if (pcb != ipcb) {
 80173ba:	68fa      	ldr	r2, [r7, #12]
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	429a      	cmp	r2, r3
 80173c0:	d00d      	beq.n	80173de <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	8a5b      	ldrh	r3, [r3, #18]
 80173c6:	88fa      	ldrh	r2, [r7, #6]
 80173c8:	429a      	cmp	r2, r3
 80173ca:	d108      	bne.n	80173de <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80173cc:	697b      	ldr	r3, [r7, #20]
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d102      	bne.n	80173de <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80173d8:	f06f 0307 	mvn.w	r3, #7
 80173dc:	e01c      	b.n	8017418 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80173de:	697b      	ldr	r3, [r7, #20]
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	617b      	str	r3, [r7, #20]
 80173e4:	697b      	ldr	r3, [r7, #20]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d1e7      	bne.n	80173ba <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d002      	beq.n	80173f6 <udp_bind+0xae>
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	e000      	b.n	80173f8 <udp_bind+0xb0>
 80173f6:	2300      	movs	r3, #0
 80173f8:	68fa      	ldr	r2, [r7, #12]
 80173fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	88fa      	ldrh	r2, [r7, #6]
 8017400:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017402:	7cfb      	ldrb	r3, [r7, #19]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d106      	bne.n	8017416 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017408:	4b06      	ldr	r3, [pc, #24]	; (8017424 <udp_bind+0xdc>)
 801740a:	681a      	ldr	r2, [r3, #0]
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017410:	4a04      	ldr	r2, [pc, #16]	; (8017424 <udp_bind+0xdc>)
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017416:	2300      	movs	r3, #0
}
 8017418:	4618      	mov	r0, r3
 801741a:	3718      	adds	r7, #24
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}
 8017420:	0801be94 	.word	0x0801be94
 8017424:	20020be4 	.word	0x20020be4

08017428 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b086      	sub	sp, #24
 801742c:	af00      	add	r7, sp, #0
 801742e:	60f8      	str	r0, [r7, #12]
 8017430:	60b9      	str	r1, [r7, #8]
 8017432:	4613      	mov	r3, r2
 8017434:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d002      	beq.n	8017442 <udp_connect+0x1a>
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d102      	bne.n	8017448 <udp_connect+0x20>
    return ERR_VAL;
 8017442:	f06f 0305 	mvn.w	r3, #5
 8017446:	e03e      	b.n	80174c6 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	8a5b      	ldrh	r3, [r3, #18]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d10f      	bne.n	8017470 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017450:	68f9      	ldr	r1, [r7, #12]
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	8a5b      	ldrh	r3, [r3, #18]
 8017456:	461a      	mov	r2, r3
 8017458:	68f8      	ldr	r0, [r7, #12]
 801745a:	f7ff ff75 	bl	8017348 <udp_bind>
 801745e:	4603      	mov	r3, r0
 8017460:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017462:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d002      	beq.n	8017470 <udp_connect+0x48>
      return err;
 801746a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801746e:	e02a      	b.n	80174c6 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d002      	beq.n	801747c <udp_connect+0x54>
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	e000      	b.n	801747e <udp_connect+0x56>
 801747c:	2300      	movs	r3, #0
 801747e:	68fa      	ldr	r2, [r7, #12]
 8017480:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	88fa      	ldrh	r2, [r7, #6]
 8017486:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	7c1b      	ldrb	r3, [r3, #16]
 801748c:	f043 0304 	orr.w	r3, r3, #4
 8017490:	b2da      	uxtb	r2, r3
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017496:	4b0e      	ldr	r3, [pc, #56]	; (80174d0 <udp_connect+0xa8>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	617b      	str	r3, [r7, #20]
 801749c:	e008      	b.n	80174b0 <udp_connect+0x88>
    if (pcb == ipcb) {
 801749e:	68fa      	ldr	r2, [r7, #12]
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d101      	bne.n	80174aa <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80174a6:	2300      	movs	r3, #0
 80174a8:	e00d      	b.n	80174c6 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	68db      	ldr	r3, [r3, #12]
 80174ae:	617b      	str	r3, [r7, #20]
 80174b0:	697b      	ldr	r3, [r7, #20]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d1f3      	bne.n	801749e <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80174b6:	4b06      	ldr	r3, [pc, #24]	; (80174d0 <udp_connect+0xa8>)
 80174b8:	681a      	ldr	r2, [r3, #0]
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80174be:	4a04      	ldr	r2, [pc, #16]	; (80174d0 <udp_connect+0xa8>)
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80174c4:	2300      	movs	r3, #0
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3718      	adds	r7, #24
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	20020be4 	.word	0x20020be4

080174d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80174d4:	b480      	push	{r7}
 80174d6:	b085      	sub	sp, #20
 80174d8:	af00      	add	r7, sp, #0
 80174da:	60f8      	str	r0, [r7, #12]
 80174dc:	60b9      	str	r1, [r7, #8]
 80174de:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	68ba      	ldr	r2, [r7, #8]
 80174e4:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80174ec:	bf00      	nop
 80174ee:	3714      	adds	r7, #20
 80174f0:	46bd      	mov	sp, r7
 80174f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f6:	4770      	bx	lr

080174f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b084      	sub	sp, #16
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017500:	4b15      	ldr	r3, [pc, #84]	; (8017558 <udp_remove+0x60>)
 8017502:	681a      	ldr	r2, [r3, #0]
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	429a      	cmp	r2, r3
 8017508:	d105      	bne.n	8017516 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801750a:	4b13      	ldr	r3, [pc, #76]	; (8017558 <udp_remove+0x60>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	4a11      	ldr	r2, [pc, #68]	; (8017558 <udp_remove+0x60>)
 8017512:	6013      	str	r3, [r2, #0]
 8017514:	e017      	b.n	8017546 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017516:	4b10      	ldr	r3, [pc, #64]	; (8017558 <udp_remove+0x60>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	60fb      	str	r3, [r7, #12]
 801751c:	e010      	b.n	8017540 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	68db      	ldr	r3, [r3, #12]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d009      	beq.n	801753a <udp_remove+0x42>
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	68da      	ldr	r2, [r3, #12]
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	429a      	cmp	r2, r3
 801752e:	d104      	bne.n	801753a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	68da      	ldr	r2, [r3, #12]
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	60da      	str	r2, [r3, #12]
        break;
 8017538:	e005      	b.n	8017546 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	68db      	ldr	r3, [r3, #12]
 801753e:	60fb      	str	r3, [r7, #12]
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d1eb      	bne.n	801751e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017546:	6879      	ldr	r1, [r7, #4]
 8017548:	2000      	movs	r0, #0
 801754a:	f7f8 fee3 	bl	8010314 <memp_free>
}
 801754e:	bf00      	nop
 8017550:	3710      	adds	r7, #16
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	20020be4 	.word	0x20020be4

0801755c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017562:	2000      	movs	r0, #0
 8017564:	f7f8 fe84 	bl	8010270 <memp_malloc>
 8017568:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d00a      	beq.n	8017586 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017570:	2228      	movs	r2, #40	; 0x28
 8017572:	2100      	movs	r1, #0
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f000 fb8d 	bl	8017c94 <memset>
    pcb->ttl = UDP_TTL;
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	22ff      	movs	r2, #255	; 0xff
 801757e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	22ff      	movs	r2, #255	; 0xff
 8017584:	771a      	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017586:	687b      	ldr	r3, [r7, #4]
}
 8017588:	4618      	mov	r0, r3
 801758a:	3708      	adds	r7, #8
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
 8017596:	4603      	mov	r3, r0
 8017598:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 801759a:	f7ff ffdf 	bl	801755c <udp_new>
 801759e:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80175a0:	68fb      	ldr	r3, [r7, #12]
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3710      	adds	r7, #16
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
	...

080175ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80175ac:	b480      	push	{r7}
 80175ae:	b085      	sub	sp, #20
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d01e      	beq.n	80175fa <udp_netif_ip_addr_changed+0x4e>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d01a      	beq.n	80175fa <udp_netif_ip_addr_changed+0x4e>
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d017      	beq.n	80175fa <udp_netif_ip_addr_changed+0x4e>
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d013      	beq.n	80175fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80175d2:	4b0d      	ldr	r3, [pc, #52]	; (8017608 <udp_netif_ip_addr_changed+0x5c>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	60fb      	str	r3, [r7, #12]
 80175d8:	e00c      	b.n	80175f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d103      	bne.n	80175ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	681a      	ldr	r2, [r3, #0]
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	68db      	ldr	r3, [r3, #12]
 80175f2:	60fb      	str	r3, [r7, #12]
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d1ef      	bne.n	80175da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80175fa:	bf00      	nop
 80175fc:	3714      	adds	r7, #20
 80175fe:	46bd      	mov	sp, r7
 8017600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017604:	4770      	bx	lr
 8017606:	bf00      	nop
 8017608:	20020be4 	.word	0x20020be4

0801760c <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801760c:	b480      	push	{r7}
 801760e:	b083      	sub	sp, #12
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
}
 8017614:	bf00      	nop
 8017616:	370c      	adds	r7, #12
 8017618:	46bd      	mov	sp, r7
 801761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801761e:	4770      	bx	lr

08017620 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b086      	sub	sp, #24
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
 8017628:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801762a:	230e      	movs	r3, #14
 801762c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	895b      	ldrh	r3, [r3, #10]
 8017632:	2b0e      	cmp	r3, #14
 8017634:	d977      	bls.n	8017726 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	7b1a      	ldrb	r2, [r3, #12]
 8017640:	7b5b      	ldrb	r3, [r3, #13]
 8017642:	021b      	lsls	r3, r3, #8
 8017644:	4313      	orrs	r3, r2
 8017646:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	f003 0301 	and.w	r3, r3, #1
 8017650:	2b00      	cmp	r3, #0
 8017652:	d023      	beq.n	801769c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017654:	693b      	ldr	r3, [r7, #16]
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	2b01      	cmp	r3, #1
 801765a:	d10f      	bne.n	801767c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	785b      	ldrb	r3, [r3, #1]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d11b      	bne.n	801769c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017664:	693b      	ldr	r3, [r7, #16]
 8017666:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017668:	2b5e      	cmp	r3, #94	; 0x5e
 801766a:	d117      	bne.n	801769c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	7b5b      	ldrb	r3, [r3, #13]
 8017670:	f043 0310 	orr.w	r3, r3, #16
 8017674:	b2da      	uxtb	r2, r3
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	735a      	strb	r2, [r3, #13]
 801767a:	e00f      	b.n	801769c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	2206      	movs	r2, #6
 8017680:	492f      	ldr	r1, [pc, #188]	; (8017740 <ethernet_input+0x120>)
 8017682:	4618      	mov	r0, r3
 8017684:	f000 faec 	bl	8017c60 <memcmp>
 8017688:	4603      	mov	r3, r0
 801768a:	2b00      	cmp	r3, #0
 801768c:	d106      	bne.n	801769c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	7b5b      	ldrb	r3, [r3, #13]
 8017692:	f043 0308 	orr.w	r3, r3, #8
 8017696:	b2da      	uxtb	r2, r3
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801769c:	89fb      	ldrh	r3, [r7, #14]
 801769e:	2b08      	cmp	r3, #8
 80176a0:	d003      	beq.n	80176aa <ethernet_input+0x8a>
 80176a2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80176a6:	d01e      	beq.n	80176e6 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80176a8:	e042      	b.n	8017730 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80176b0:	f003 0308 	and.w	r3, r3, #8
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d038      	beq.n	801772a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	895b      	ldrh	r3, [r3, #10]
 80176bc:	461a      	mov	r2, r3
 80176be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80176c2:	429a      	cmp	r2, r3
 80176c4:	db34      	blt.n	8017730 <ethernet_input+0x110>
 80176c6:	8afb      	ldrh	r3, [r7, #22]
 80176c8:	425b      	negs	r3, r3
 80176ca:	b29b      	uxth	r3, r3
 80176cc:	b21b      	sxth	r3, r3
 80176ce:	4619      	mov	r1, r3
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f7f9 fb77 	bl	8010dc4 <pbuf_header>
 80176d6:	4603      	mov	r3, r0
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d129      	bne.n	8017730 <ethernet_input+0x110>
        ip4_input(p, netif);
 80176dc:	6839      	ldr	r1, [r7, #0]
 80176de:	6878      	ldr	r0, [r7, #4]
 80176e0:	f7f7 f91e 	bl	800e920 <ip4_input>
      break;
 80176e4:	e01d      	b.n	8017722 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80176ec:	f003 0308 	and.w	r3, r3, #8
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d01c      	beq.n	801772e <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	895b      	ldrh	r3, [r3, #10]
 80176f8:	461a      	mov	r2, r3
 80176fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80176fe:	429a      	cmp	r2, r3
 8017700:	db16      	blt.n	8017730 <ethernet_input+0x110>
 8017702:	8afb      	ldrh	r3, [r7, #22]
 8017704:	425b      	negs	r3, r3
 8017706:	b29b      	uxth	r3, r3
 8017708:	b21b      	sxth	r3, r3
 801770a:	4619      	mov	r1, r3
 801770c:	6878      	ldr	r0, [r7, #4]
 801770e:	f7f9 fb59 	bl	8010dc4 <pbuf_header>
 8017712:	4603      	mov	r3, r0
 8017714:	2b00      	cmp	r3, #0
 8017716:	d10b      	bne.n	8017730 <ethernet_input+0x110>
        etharp_input(p, netif);
 8017718:	6839      	ldr	r1, [r7, #0]
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f7f6 f834 	bl	800d788 <etharp_input>
      break;
 8017720:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017722:	2300      	movs	r3, #0
 8017724:	e008      	b.n	8017738 <ethernet_input+0x118>
    goto free_and_return;
 8017726:	bf00      	nop
 8017728:	e002      	b.n	8017730 <ethernet_input+0x110>
        goto free_and_return;
 801772a:	bf00      	nop
 801772c:	e000      	b.n	8017730 <ethernet_input+0x110>
        goto free_and_return;
 801772e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f7f9 fb6b 	bl	8010e0c <pbuf_free>
  return ERR_OK;
 8017736:	2300      	movs	r3, #0
}
 8017738:	4618      	mov	r0, r3
 801773a:	3718      	adds	r7, #24
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}
 8017740:	0801bfec 	.word	0x0801bfec

08017744 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b086      	sub	sp, #24
 8017748:	af00      	add	r7, sp, #0
 801774a:	60f8      	str	r0, [r7, #12]
 801774c:	60b9      	str	r1, [r7, #8]
 801774e:	607a      	str	r2, [r7, #4]
 8017750:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017752:	8c3b      	ldrh	r3, [r7, #32]
 8017754:	4618      	mov	r0, r3
 8017756:	f7f3 faa3 	bl	800aca0 <lwip_htons>
 801775a:	4603      	mov	r3, r0
 801775c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801775e:	210e      	movs	r1, #14
 8017760:	68b8      	ldr	r0, [r7, #8]
 8017762:	f7f9 fb2f 	bl	8010dc4 <pbuf_header>
 8017766:	4603      	mov	r3, r0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d125      	bne.n	80177b8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801776c:	68bb      	ldr	r3, [r7, #8]
 801776e:	685b      	ldr	r3, [r3, #4]
 8017770:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	8afa      	ldrh	r2, [r7, #22]
 8017776:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	2206      	movs	r2, #6
 801777c:	6839      	ldr	r1, [r7, #0]
 801777e:	4618      	mov	r0, r3
 8017780:	f000 fa7d 	bl	8017c7e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8017784:	693b      	ldr	r3, [r7, #16]
 8017786:	3306      	adds	r3, #6
 8017788:	2206      	movs	r2, #6
 801778a:	6879      	ldr	r1, [r7, #4]
 801778c:	4618      	mov	r0, r3
 801778e:	f000 fa76 	bl	8017c7e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017798:	2b06      	cmp	r3, #6
 801779a:	d006      	beq.n	80177aa <ethernet_output+0x66>
 801779c:	4b0a      	ldr	r3, [pc, #40]	; (80177c8 <ethernet_output+0x84>)
 801779e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80177a2:	490a      	ldr	r1, [pc, #40]	; (80177cc <ethernet_output+0x88>)
 80177a4:	480a      	ldr	r0, [pc, #40]	; (80177d0 <ethernet_output+0x8c>)
 80177a6:	f000 fa7d 	bl	8017ca4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	699b      	ldr	r3, [r3, #24]
 80177ae:	68b9      	ldr	r1, [r7, #8]
 80177b0:	68f8      	ldr	r0, [r7, #12]
 80177b2:	4798      	blx	r3
 80177b4:	4603      	mov	r3, r0
 80177b6:	e002      	b.n	80177be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80177b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80177ba:	f06f 0301 	mvn.w	r3, #1
}
 80177be:	4618      	mov	r0, r3
 80177c0:	3718      	adds	r7, #24
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}
 80177c6:	bf00      	nop
 80177c8:	0801bde8 	.word	0x0801bde8
 80177cc:	0801be20 	.word	0x0801be20
 80177d0:	0801be54 	.word	0x0801be54

080177d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b086      	sub	sp, #24
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	60bb      	str	r3, [r7, #8]
 80177e2:	2304      	movs	r3, #4
 80177e4:	60fb      	str	r3, [r7, #12]
 80177e6:	2300      	movs	r3, #0
 80177e8:	613b      	str	r3, [r7, #16]
 80177ea:	2300      	movs	r3, #0
 80177ec:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80177ee:	f107 0308 	add.w	r3, r7, #8
 80177f2:	2100      	movs	r1, #0
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7ed ff28 	bl	800564a <osMessageCreate>
 80177fa:	4602      	mov	r2, r0
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d102      	bne.n	801780e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801780c:	e000      	b.n	8017810 <sys_mbox_new+0x3c>

  return ERR_OK;
 801780e:	2300      	movs	r3, #0
}
 8017810:	4618      	mov	r0, r3
 8017812:	3718      	adds	r7, #24
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}

08017818 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	4618      	mov	r0, r3
 8017826:	f7ed ffed 	bl	8005804 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	4618      	mov	r0, r3
 8017830:	f7ed fffe 	bl	8005830 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017834:	bf00      	nop
 8017836:	3708      	adds	r7, #8
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b082      	sub	sp, #8
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8017846:	bf00      	nop
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	6839      	ldr	r1, [r7, #0]
 801784e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017852:	4618      	mov	r0, r3
 8017854:	f7ed ff22 	bl	800569c <osMessagePut>
 8017858:	4603      	mov	r3, r0
 801785a:	2b00      	cmp	r3, #0
 801785c:	d1f4      	bne.n	8017848 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801785e:	bf00      	nop
 8017860:	3708      	adds	r7, #8
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017866:	b580      	push	{r7, lr}
 8017868:	b084      	sub	sp, #16
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
 801786e:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	6839      	ldr	r1, [r7, #0]
 8017876:	2200      	movs	r2, #0
 8017878:	4618      	mov	r0, r3
 801787a:	f7ed ff0f 	bl	800569c <osMessagePut>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	d102      	bne.n	801788a <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017884:	2300      	movs	r3, #0
 8017886:	73fb      	strb	r3, [r7, #15]
 8017888:	e001      	b.n	801788e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801788a:	23ff      	movs	r3, #255	; 0xff
 801788c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017892:	4618      	mov	r0, r3
 8017894:	3710      	adds	r7, #16
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}

0801789a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801789a:	b580      	push	{r7, lr}
 801789c:	b08c      	sub	sp, #48	; 0x30
 801789e:	af00      	add	r7, sp, #0
 80178a0:	61f8      	str	r0, [r7, #28]
 80178a2:	61b9      	str	r1, [r7, #24]
 80178a4:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80178a6:	f7ed fcf9 	bl	800529c <osKernelSysTick>
 80178aa:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d017      	beq.n	80178e2 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80178b2:	69fb      	ldr	r3, [r7, #28]
 80178b4:	6819      	ldr	r1, [r3, #0]
 80178b6:	f107 0320 	add.w	r3, r7, #32
 80178ba:	697a      	ldr	r2, [r7, #20]
 80178bc:	4618      	mov	r0, r3
 80178be:	f7ed ff2d 	bl	800571c <osMessageGet>

    if(event.status == osEventMessage)
 80178c2:	6a3b      	ldr	r3, [r7, #32]
 80178c4:	2b10      	cmp	r3, #16
 80178c6:	d109      	bne.n	80178dc <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80178c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ca:	461a      	mov	r2, r3
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80178d0:	f7ed fce4 	bl	800529c <osKernelSysTick>
 80178d4:	4602      	mov	r2, r0
 80178d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d8:	1ad3      	subs	r3, r2, r3
 80178da:	e019      	b.n	8017910 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80178dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80178e0:	e016      	b.n	8017910 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80178e2:	69fb      	ldr	r3, [r7, #28]
 80178e4:	6819      	ldr	r1, [r3, #0]
 80178e6:	463b      	mov	r3, r7
 80178e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178ec:	4618      	mov	r0, r3
 80178ee:	f7ed ff15 	bl	800571c <osMessageGet>
 80178f2:	f107 0320 	add.w	r3, r7, #32
 80178f6:	463a      	mov	r2, r7
 80178f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80178fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80178fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017900:	461a      	mov	r2, r3
 8017902:	69bb      	ldr	r3, [r7, #24]
 8017904:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017906:	f7ed fcc9 	bl	800529c <osKernelSysTick>
 801790a:	4602      	mov	r2, r0
 801790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801790e:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017910:	4618      	mov	r0, r3
 8017912:	3730      	adds	r7, #48	; 0x30
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}

08017918 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b086      	sub	sp, #24
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	6819      	ldr	r1, [r3, #0]
 8017926:	f107 030c 	add.w	r3, r7, #12
 801792a:	2200      	movs	r2, #0
 801792c:	4618      	mov	r0, r3
 801792e:	f7ed fef5 	bl	800571c <osMessageGet>

  if(event.status == osEventMessage)
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	2b10      	cmp	r3, #16
 8017936:	d105      	bne.n	8017944 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017938:	693b      	ldr	r3, [r7, #16]
 801793a:	461a      	mov	r2, r3
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017940:	2300      	movs	r3, #0
 8017942:	e001      	b.n	8017948 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8017948:	4618      	mov	r0, r3
 801794a:	3718      	adds	r7, #24
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}

08017950 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017950:	b480      	push	{r7}
 8017952:	b083      	sub	sp, #12
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d101      	bne.n	8017964 <sys_mbox_valid+0x14>
    return 0;
 8017960:	2300      	movs	r3, #0
 8017962:	e000      	b.n	8017966 <sys_mbox_valid+0x16>
  else
    return 1;
 8017964:	2301      	movs	r3, #1
}
 8017966:	4618      	mov	r0, r3
 8017968:	370c      	adds	r7, #12
 801796a:	46bd      	mov	sp, r7
 801796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017970:	4770      	bx	lr

08017972 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017972:	b480      	push	{r7}
 8017974:	b083      	sub	sp, #12
 8017976:	af00      	add	r7, sp, #0
 8017978:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	2200      	movs	r2, #0
 801797e:	601a      	str	r2, [r3, #0]
}
 8017980:	bf00      	nop
 8017982:	370c      	adds	r7, #12
 8017984:	46bd      	mov	sp, r7
 8017986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801798a:	4770      	bx	lr

0801798c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b084      	sub	sp, #16
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
 8017994:	460b      	mov	r3, r1
 8017996:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017998:	2300      	movs	r3, #0
 801799a:	60bb      	str	r3, [r7, #8]
 801799c:	2300      	movs	r3, #0
 801799e:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80179a0:	f107 0308 	add.w	r3, r7, #8
 80179a4:	2101      	movs	r1, #1
 80179a6:	4618      	mov	r0, r3
 80179a8:	f7ed fd84 	bl	80054b4 <osSemaphoreCreate>
 80179ac:	4602      	mov	r2, r0
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d102      	bne.n	80179c0 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80179ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179be:	e009      	b.n	80179d4 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80179c0:	78fb      	ldrb	r3, [r7, #3]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d105      	bne.n	80179d2 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	2100      	movs	r1, #0
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7ed fda5 	bl	800551c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80179d2:	2300      	movs	r3, #0
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3710      	adds	r7, #16
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}

080179dc <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80179e6:	f7ed fc59 	bl	800529c <osKernelSysTick>
 80179ea:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d011      	beq.n	8017a16 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	6839      	ldr	r1, [r7, #0]
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7ed fd8f 	bl	800551c <osSemaphoreWait>
 80179fe:	4603      	mov	r3, r0
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d105      	bne.n	8017a10 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017a04:	f7ed fc4a 	bl	800529c <osKernelSysTick>
 8017a08:	4602      	mov	r2, r0
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	1ad3      	subs	r3, r2, r3
 8017a0e:	e012      	b.n	8017a36 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a14:	e00f      	b.n	8017a36 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017a16:	bf00      	nop
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017a20:	4618      	mov	r0, r3
 8017a22:	f7ed fd7b 	bl	800551c <osSemaphoreWait>
 8017a26:	4603      	mov	r3, r0
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d1f5      	bne.n	8017a18 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017a2c:	f7ed fc36 	bl	800529c <osKernelSysTick>
 8017a30:	4602      	mov	r2, r0
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	3710      	adds	r7, #16
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bd80      	pop	{r7, pc}

08017a3e <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017a3e:	b580      	push	{r7, lr}
 8017a40:	b082      	sub	sp, #8
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7ed fdb4 	bl	80055b8 <osSemaphoreRelease>
}
 8017a50:	bf00      	nop
 8017a52:	3708      	adds	r7, #8
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}

08017a58 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b082      	sub	sp, #8
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	4618      	mov	r0, r3
 8017a66:	f7ed fddd 	bl	8005624 <osSemaphoreDelete>
}
 8017a6a:	bf00      	nop
 8017a6c:	3708      	adds	r7, #8
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}

08017a72 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017a72:	b480      	push	{r7}
 8017a74:	b083      	sub	sp, #12
 8017a76:	af00      	add	r7, sp, #0
 8017a78:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d101      	bne.n	8017a86 <sys_sem_valid+0x14>
    return 0;
 8017a82:	2300      	movs	r3, #0
 8017a84:	e000      	b.n	8017a88 <sys_sem_valid+0x16>
  else
    return 1;
 8017a86:	2301      	movs	r3, #1
}
 8017a88:	4618      	mov	r0, r3
 8017a8a:	370c      	adds	r7, #12
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a92:	4770      	bx	lr

08017a94 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017a94:	b480      	push	{r7}
 8017a96:	b083      	sub	sp, #12
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	601a      	str	r2, [r3, #0]
}
 8017aa2:	bf00      	nop
 8017aa4:	370c      	adds	r7, #12
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aac:	4770      	bx	lr
	...

08017ab0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017ab4:	4803      	ldr	r0, [pc, #12]	; (8017ac4 <sys_init+0x14>)
 8017ab6:	f7ed fc61 	bl	800537c <osMutexCreate>
 8017aba:	4602      	mov	r2, r0
 8017abc:	4b02      	ldr	r3, [pc, #8]	; (8017ac8 <sys_init+0x18>)
 8017abe:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017ac0:	bf00      	nop
 8017ac2:	bd80      	pop	{r7, pc}
 8017ac4:	0801bffc 	.word	0x0801bffc
 8017ac8:	20020bec 	.word	0x20020bec

08017acc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b084      	sub	sp, #16
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	60bb      	str	r3, [r7, #8]
 8017ad8:	2300      	movs	r3, #0
 8017ada:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017adc:	f107 0308 	add.w	r3, r7, #8
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7ed fc4b 	bl	800537c <osMutexCreate>
 8017ae6:	4602      	mov	r2, r0
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d102      	bne.n	8017afa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017af8:	e000      	b.n	8017afc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017afa:	2300      	movs	r3, #0
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3710      	adds	r7, #16
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7ed fc49 	bl	80053ac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017b1a:	bf00      	nop
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}

08017b22 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017b22:	b580      	push	{r7, lr}
 8017b24:	b082      	sub	sp, #8
 8017b26:	af00      	add	r7, sp, #0
 8017b28:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7ed fc8a 	bl	8005448 <osMutexRelease>
}
 8017b34:	bf00      	nop
 8017b36:	3708      	adds	r7, #8
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}

08017b3c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b08c      	sub	sp, #48	; 0x30
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	60f8      	str	r0, [r7, #12]
 8017b44:	60b9      	str	r1, [r7, #8]
 8017b46:	607a      	str	r2, [r7, #4]
 8017b48:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017b4a:	f107 0314 	add.w	r3, r7, #20
 8017b4e:	2200      	movs	r2, #0
 8017b50:	601a      	str	r2, [r3, #0]
 8017b52:	605a      	str	r2, [r3, #4]
 8017b54:	609a      	str	r2, [r3, #8]
 8017b56:	60da      	str	r2, [r3, #12]
 8017b58:	611a      	str	r2, [r3, #16]
 8017b5a:	615a      	str	r2, [r3, #20]
 8017b5c:	619a      	str	r2, [r3, #24]
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	617b      	str	r3, [r7, #20]
 8017b62:	68bb      	ldr	r3, [r7, #8]
 8017b64:	61bb      	str	r3, [r7, #24]
 8017b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b68:	b21b      	sxth	r3, r3
 8017b6a:	83bb      	strh	r3, [r7, #28]
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017b70:	f107 0314 	add.w	r3, r7, #20
 8017b74:	6879      	ldr	r1, [r7, #4]
 8017b76:	4618      	mov	r0, r3
 8017b78:	f7ed fba0 	bl	80052bc <osThreadCreate>
 8017b7c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3730      	adds	r7, #48	; 0x30
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}
	...

08017b88 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017b8c:	4b04      	ldr	r3, [pc, #16]	; (8017ba0 <sys_arch_protect+0x18>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7ed fc09 	bl	80053ac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017b9a:	2301      	movs	r3, #1
}
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	20020bec 	.word	0x20020bec

08017ba4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b082      	sub	sp, #8
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017bac:	4b04      	ldr	r3, [pc, #16]	; (8017bc0 <sys_arch_unprotect+0x1c>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7ed fc49 	bl	8005448 <osMutexRelease>
}
 8017bb6:	bf00      	nop
 8017bb8:	3708      	adds	r7, #8
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	20020bec 	.word	0x20020bec

08017bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8017bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017bfc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8017bc8:	480d      	ldr	r0, [pc, #52]	; (8017c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8017bca:	490e      	ldr	r1, [pc, #56]	; (8017c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8017bcc:	4a0e      	ldr	r2, [pc, #56]	; (8017c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8017bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8017bd0:	e002      	b.n	8017bd8 <LoopCopyDataInit>

08017bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017bd6:	3304      	adds	r3, #4

08017bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017bdc:	d3f9      	bcc.n	8017bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017bde:	4a0b      	ldr	r2, [pc, #44]	; (8017c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8017be0:	4c0b      	ldr	r4, [pc, #44]	; (8017c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8017be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017be4:	e001      	b.n	8017bea <LoopFillZerobss>

08017be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017be8:	3204      	adds	r2, #4

08017bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017bec:	d3fb      	bcc.n	8017be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8017bee:	f7e9 f95b 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017bf2:	f000 f811 	bl	8017c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017bf6:	f7e8 fd39 	bl	800066c <main>
  bx  lr    
 8017bfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8017bfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8017c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017c04:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8017c08:	0801c0ac 	.word	0x0801c0ac
  ldr r2, =_sbss
 8017c0c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8017c10:	20020bf0 	.word	0x20020bf0

08017c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017c14:	e7fe      	b.n	8017c14 <ADC_IRQHandler>
	...

08017c18 <__libc_init_array>:
 8017c18:	b570      	push	{r4, r5, r6, lr}
 8017c1a:	4e0d      	ldr	r6, [pc, #52]	; (8017c50 <__libc_init_array+0x38>)
 8017c1c:	4c0d      	ldr	r4, [pc, #52]	; (8017c54 <__libc_init_array+0x3c>)
 8017c1e:	1ba4      	subs	r4, r4, r6
 8017c20:	10a4      	asrs	r4, r4, #2
 8017c22:	2500      	movs	r5, #0
 8017c24:	42a5      	cmp	r5, r4
 8017c26:	d109      	bne.n	8017c3c <__libc_init_array+0x24>
 8017c28:	4e0b      	ldr	r6, [pc, #44]	; (8017c58 <__libc_init_array+0x40>)
 8017c2a:	4c0c      	ldr	r4, [pc, #48]	; (8017c5c <__libc_init_array+0x44>)
 8017c2c:	f000 ffd8 	bl	8018be0 <_init>
 8017c30:	1ba4      	subs	r4, r4, r6
 8017c32:	10a4      	asrs	r4, r4, #2
 8017c34:	2500      	movs	r5, #0
 8017c36:	42a5      	cmp	r5, r4
 8017c38:	d105      	bne.n	8017c46 <__libc_init_array+0x2e>
 8017c3a:	bd70      	pop	{r4, r5, r6, pc}
 8017c3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017c40:	4798      	blx	r3
 8017c42:	3501      	adds	r5, #1
 8017c44:	e7ee      	b.n	8017c24 <__libc_init_array+0xc>
 8017c46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017c4a:	4798      	blx	r3
 8017c4c:	3501      	adds	r5, #1
 8017c4e:	e7f2      	b.n	8017c36 <__libc_init_array+0x1e>
 8017c50:	0801c0a4 	.word	0x0801c0a4
 8017c54:	0801c0a4 	.word	0x0801c0a4
 8017c58:	0801c0a4 	.word	0x0801c0a4
 8017c5c:	0801c0a8 	.word	0x0801c0a8

08017c60 <memcmp>:
 8017c60:	b510      	push	{r4, lr}
 8017c62:	3901      	subs	r1, #1
 8017c64:	4402      	add	r2, r0
 8017c66:	4290      	cmp	r0, r2
 8017c68:	d101      	bne.n	8017c6e <memcmp+0xe>
 8017c6a:	2000      	movs	r0, #0
 8017c6c:	bd10      	pop	{r4, pc}
 8017c6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017c72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017c76:	42a3      	cmp	r3, r4
 8017c78:	d0f5      	beq.n	8017c66 <memcmp+0x6>
 8017c7a:	1b18      	subs	r0, r3, r4
 8017c7c:	bd10      	pop	{r4, pc}

08017c7e <memcpy>:
 8017c7e:	b510      	push	{r4, lr}
 8017c80:	1e43      	subs	r3, r0, #1
 8017c82:	440a      	add	r2, r1
 8017c84:	4291      	cmp	r1, r2
 8017c86:	d100      	bne.n	8017c8a <memcpy+0xc>
 8017c88:	bd10      	pop	{r4, pc}
 8017c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c92:	e7f7      	b.n	8017c84 <memcpy+0x6>

08017c94 <memset>:
 8017c94:	4402      	add	r2, r0
 8017c96:	4603      	mov	r3, r0
 8017c98:	4293      	cmp	r3, r2
 8017c9a:	d100      	bne.n	8017c9e <memset+0xa>
 8017c9c:	4770      	bx	lr
 8017c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8017ca2:	e7f9      	b.n	8017c98 <memset+0x4>

08017ca4 <iprintf>:
 8017ca4:	b40f      	push	{r0, r1, r2, r3}
 8017ca6:	4b0a      	ldr	r3, [pc, #40]	; (8017cd0 <iprintf+0x2c>)
 8017ca8:	b513      	push	{r0, r1, r4, lr}
 8017caa:	681c      	ldr	r4, [r3, #0]
 8017cac:	b124      	cbz	r4, 8017cb8 <iprintf+0x14>
 8017cae:	69a3      	ldr	r3, [r4, #24]
 8017cb0:	b913      	cbnz	r3, 8017cb8 <iprintf+0x14>
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	f000 fa5e 	bl	8018174 <__sinit>
 8017cb8:	ab05      	add	r3, sp, #20
 8017cba:	9a04      	ldr	r2, [sp, #16]
 8017cbc:	68a1      	ldr	r1, [r4, #8]
 8017cbe:	9301      	str	r3, [sp, #4]
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f000 fc23 	bl	801850c <_vfiprintf_r>
 8017cc6:	b002      	add	sp, #8
 8017cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ccc:	b004      	add	sp, #16
 8017cce:	4770      	bx	lr
 8017cd0:	20000020 	.word	0x20000020

08017cd4 <_puts_r>:
 8017cd4:	b570      	push	{r4, r5, r6, lr}
 8017cd6:	460e      	mov	r6, r1
 8017cd8:	4605      	mov	r5, r0
 8017cda:	b118      	cbz	r0, 8017ce4 <_puts_r+0x10>
 8017cdc:	6983      	ldr	r3, [r0, #24]
 8017cde:	b90b      	cbnz	r3, 8017ce4 <_puts_r+0x10>
 8017ce0:	f000 fa48 	bl	8018174 <__sinit>
 8017ce4:	69ab      	ldr	r3, [r5, #24]
 8017ce6:	68ac      	ldr	r4, [r5, #8]
 8017ce8:	b913      	cbnz	r3, 8017cf0 <_puts_r+0x1c>
 8017cea:	4628      	mov	r0, r5
 8017cec:	f000 fa42 	bl	8018174 <__sinit>
 8017cf0:	4b23      	ldr	r3, [pc, #140]	; (8017d80 <_puts_r+0xac>)
 8017cf2:	429c      	cmp	r4, r3
 8017cf4:	d117      	bne.n	8017d26 <_puts_r+0x52>
 8017cf6:	686c      	ldr	r4, [r5, #4]
 8017cf8:	89a3      	ldrh	r3, [r4, #12]
 8017cfa:	071b      	lsls	r3, r3, #28
 8017cfc:	d51d      	bpl.n	8017d3a <_puts_r+0x66>
 8017cfe:	6923      	ldr	r3, [r4, #16]
 8017d00:	b1db      	cbz	r3, 8017d3a <_puts_r+0x66>
 8017d02:	3e01      	subs	r6, #1
 8017d04:	68a3      	ldr	r3, [r4, #8]
 8017d06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017d0a:	3b01      	subs	r3, #1
 8017d0c:	60a3      	str	r3, [r4, #8]
 8017d0e:	b9e9      	cbnz	r1, 8017d4c <_puts_r+0x78>
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	da2e      	bge.n	8017d72 <_puts_r+0x9e>
 8017d14:	4622      	mov	r2, r4
 8017d16:	210a      	movs	r1, #10
 8017d18:	4628      	mov	r0, r5
 8017d1a:	f000 f879 	bl	8017e10 <__swbuf_r>
 8017d1e:	3001      	adds	r0, #1
 8017d20:	d011      	beq.n	8017d46 <_puts_r+0x72>
 8017d22:	200a      	movs	r0, #10
 8017d24:	bd70      	pop	{r4, r5, r6, pc}
 8017d26:	4b17      	ldr	r3, [pc, #92]	; (8017d84 <_puts_r+0xb0>)
 8017d28:	429c      	cmp	r4, r3
 8017d2a:	d101      	bne.n	8017d30 <_puts_r+0x5c>
 8017d2c:	68ac      	ldr	r4, [r5, #8]
 8017d2e:	e7e3      	b.n	8017cf8 <_puts_r+0x24>
 8017d30:	4b15      	ldr	r3, [pc, #84]	; (8017d88 <_puts_r+0xb4>)
 8017d32:	429c      	cmp	r4, r3
 8017d34:	bf08      	it	eq
 8017d36:	68ec      	ldreq	r4, [r5, #12]
 8017d38:	e7de      	b.n	8017cf8 <_puts_r+0x24>
 8017d3a:	4621      	mov	r1, r4
 8017d3c:	4628      	mov	r0, r5
 8017d3e:	f000 f8b9 	bl	8017eb4 <__swsetup_r>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d0dd      	beq.n	8017d02 <_puts_r+0x2e>
 8017d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d4a:	bd70      	pop	{r4, r5, r6, pc}
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	da04      	bge.n	8017d5a <_puts_r+0x86>
 8017d50:	69a2      	ldr	r2, [r4, #24]
 8017d52:	4293      	cmp	r3, r2
 8017d54:	db06      	blt.n	8017d64 <_puts_r+0x90>
 8017d56:	290a      	cmp	r1, #10
 8017d58:	d004      	beq.n	8017d64 <_puts_r+0x90>
 8017d5a:	6823      	ldr	r3, [r4, #0]
 8017d5c:	1c5a      	adds	r2, r3, #1
 8017d5e:	6022      	str	r2, [r4, #0]
 8017d60:	7019      	strb	r1, [r3, #0]
 8017d62:	e7cf      	b.n	8017d04 <_puts_r+0x30>
 8017d64:	4622      	mov	r2, r4
 8017d66:	4628      	mov	r0, r5
 8017d68:	f000 f852 	bl	8017e10 <__swbuf_r>
 8017d6c:	3001      	adds	r0, #1
 8017d6e:	d1c9      	bne.n	8017d04 <_puts_r+0x30>
 8017d70:	e7e9      	b.n	8017d46 <_puts_r+0x72>
 8017d72:	6823      	ldr	r3, [r4, #0]
 8017d74:	200a      	movs	r0, #10
 8017d76:	1c5a      	adds	r2, r3, #1
 8017d78:	6022      	str	r2, [r4, #0]
 8017d7a:	7018      	strb	r0, [r3, #0]
 8017d7c:	bd70      	pop	{r4, r5, r6, pc}
 8017d7e:	bf00      	nop
 8017d80:	0801c024 	.word	0x0801c024
 8017d84:	0801c044 	.word	0x0801c044
 8017d88:	0801c004 	.word	0x0801c004

08017d8c <puts>:
 8017d8c:	4b02      	ldr	r3, [pc, #8]	; (8017d98 <puts+0xc>)
 8017d8e:	4601      	mov	r1, r0
 8017d90:	6818      	ldr	r0, [r3, #0]
 8017d92:	f7ff bf9f 	b.w	8017cd4 <_puts_r>
 8017d96:	bf00      	nop
 8017d98:	20000020 	.word	0x20000020

08017d9c <rand>:
 8017d9c:	4b19      	ldr	r3, [pc, #100]	; (8017e04 <rand+0x68>)
 8017d9e:	b510      	push	{r4, lr}
 8017da0:	681c      	ldr	r4, [r3, #0]
 8017da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017da4:	b9d3      	cbnz	r3, 8017ddc <rand+0x40>
 8017da6:	2018      	movs	r0, #24
 8017da8:	f000 fad2 	bl	8018350 <malloc>
 8017dac:	f243 330e 	movw	r3, #13070	; 0x330e
 8017db0:	63a0      	str	r0, [r4, #56]	; 0x38
 8017db2:	8003      	strh	r3, [r0, #0]
 8017db4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8017db8:	8043      	strh	r3, [r0, #2]
 8017dba:	f241 2334 	movw	r3, #4660	; 0x1234
 8017dbe:	8083      	strh	r3, [r0, #4]
 8017dc0:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8017dc4:	80c3      	strh	r3, [r0, #6]
 8017dc6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8017dca:	8103      	strh	r3, [r0, #8]
 8017dcc:	2305      	movs	r3, #5
 8017dce:	8143      	strh	r3, [r0, #10]
 8017dd0:	230b      	movs	r3, #11
 8017dd2:	8183      	strh	r3, [r0, #12]
 8017dd4:	2201      	movs	r2, #1
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017ddc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017dde:	480a      	ldr	r0, [pc, #40]	; (8017e08 <rand+0x6c>)
 8017de0:	690a      	ldr	r2, [r1, #16]
 8017de2:	694b      	ldr	r3, [r1, #20]
 8017de4:	4c09      	ldr	r4, [pc, #36]	; (8017e0c <rand+0x70>)
 8017de6:	4350      	muls	r0, r2
 8017de8:	fb04 0003 	mla	r0, r4, r3, r0
 8017dec:	fba2 2304 	umull	r2, r3, r2, r4
 8017df0:	3201      	adds	r2, #1
 8017df2:	4403      	add	r3, r0
 8017df4:	f143 0300 	adc.w	r3, r3, #0
 8017df8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8017dfc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8017e00:	bd10      	pop	{r4, pc}
 8017e02:	bf00      	nop
 8017e04:	20000020 	.word	0x20000020
 8017e08:	5851f42d 	.word	0x5851f42d
 8017e0c:	4c957f2d 	.word	0x4c957f2d

08017e10 <__swbuf_r>:
 8017e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e12:	460e      	mov	r6, r1
 8017e14:	4614      	mov	r4, r2
 8017e16:	4605      	mov	r5, r0
 8017e18:	b118      	cbz	r0, 8017e22 <__swbuf_r+0x12>
 8017e1a:	6983      	ldr	r3, [r0, #24]
 8017e1c:	b90b      	cbnz	r3, 8017e22 <__swbuf_r+0x12>
 8017e1e:	f000 f9a9 	bl	8018174 <__sinit>
 8017e22:	4b21      	ldr	r3, [pc, #132]	; (8017ea8 <__swbuf_r+0x98>)
 8017e24:	429c      	cmp	r4, r3
 8017e26:	d12a      	bne.n	8017e7e <__swbuf_r+0x6e>
 8017e28:	686c      	ldr	r4, [r5, #4]
 8017e2a:	69a3      	ldr	r3, [r4, #24]
 8017e2c:	60a3      	str	r3, [r4, #8]
 8017e2e:	89a3      	ldrh	r3, [r4, #12]
 8017e30:	071a      	lsls	r2, r3, #28
 8017e32:	d52e      	bpl.n	8017e92 <__swbuf_r+0x82>
 8017e34:	6923      	ldr	r3, [r4, #16]
 8017e36:	b363      	cbz	r3, 8017e92 <__swbuf_r+0x82>
 8017e38:	6923      	ldr	r3, [r4, #16]
 8017e3a:	6820      	ldr	r0, [r4, #0]
 8017e3c:	1ac0      	subs	r0, r0, r3
 8017e3e:	6963      	ldr	r3, [r4, #20]
 8017e40:	b2f6      	uxtb	r6, r6
 8017e42:	4298      	cmp	r0, r3
 8017e44:	4637      	mov	r7, r6
 8017e46:	db04      	blt.n	8017e52 <__swbuf_r+0x42>
 8017e48:	4621      	mov	r1, r4
 8017e4a:	4628      	mov	r0, r5
 8017e4c:	f000 f928 	bl	80180a0 <_fflush_r>
 8017e50:	bb28      	cbnz	r0, 8017e9e <__swbuf_r+0x8e>
 8017e52:	68a3      	ldr	r3, [r4, #8]
 8017e54:	3b01      	subs	r3, #1
 8017e56:	60a3      	str	r3, [r4, #8]
 8017e58:	6823      	ldr	r3, [r4, #0]
 8017e5a:	1c5a      	adds	r2, r3, #1
 8017e5c:	6022      	str	r2, [r4, #0]
 8017e5e:	701e      	strb	r6, [r3, #0]
 8017e60:	6963      	ldr	r3, [r4, #20]
 8017e62:	3001      	adds	r0, #1
 8017e64:	4298      	cmp	r0, r3
 8017e66:	d004      	beq.n	8017e72 <__swbuf_r+0x62>
 8017e68:	89a3      	ldrh	r3, [r4, #12]
 8017e6a:	07db      	lsls	r3, r3, #31
 8017e6c:	d519      	bpl.n	8017ea2 <__swbuf_r+0x92>
 8017e6e:	2e0a      	cmp	r6, #10
 8017e70:	d117      	bne.n	8017ea2 <__swbuf_r+0x92>
 8017e72:	4621      	mov	r1, r4
 8017e74:	4628      	mov	r0, r5
 8017e76:	f000 f913 	bl	80180a0 <_fflush_r>
 8017e7a:	b190      	cbz	r0, 8017ea2 <__swbuf_r+0x92>
 8017e7c:	e00f      	b.n	8017e9e <__swbuf_r+0x8e>
 8017e7e:	4b0b      	ldr	r3, [pc, #44]	; (8017eac <__swbuf_r+0x9c>)
 8017e80:	429c      	cmp	r4, r3
 8017e82:	d101      	bne.n	8017e88 <__swbuf_r+0x78>
 8017e84:	68ac      	ldr	r4, [r5, #8]
 8017e86:	e7d0      	b.n	8017e2a <__swbuf_r+0x1a>
 8017e88:	4b09      	ldr	r3, [pc, #36]	; (8017eb0 <__swbuf_r+0xa0>)
 8017e8a:	429c      	cmp	r4, r3
 8017e8c:	bf08      	it	eq
 8017e8e:	68ec      	ldreq	r4, [r5, #12]
 8017e90:	e7cb      	b.n	8017e2a <__swbuf_r+0x1a>
 8017e92:	4621      	mov	r1, r4
 8017e94:	4628      	mov	r0, r5
 8017e96:	f000 f80d 	bl	8017eb4 <__swsetup_r>
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	d0cc      	beq.n	8017e38 <__swbuf_r+0x28>
 8017e9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017ea2:	4638      	mov	r0, r7
 8017ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ea6:	bf00      	nop
 8017ea8:	0801c024 	.word	0x0801c024
 8017eac:	0801c044 	.word	0x0801c044
 8017eb0:	0801c004 	.word	0x0801c004

08017eb4 <__swsetup_r>:
 8017eb4:	4b32      	ldr	r3, [pc, #200]	; (8017f80 <__swsetup_r+0xcc>)
 8017eb6:	b570      	push	{r4, r5, r6, lr}
 8017eb8:	681d      	ldr	r5, [r3, #0]
 8017eba:	4606      	mov	r6, r0
 8017ebc:	460c      	mov	r4, r1
 8017ebe:	b125      	cbz	r5, 8017eca <__swsetup_r+0x16>
 8017ec0:	69ab      	ldr	r3, [r5, #24]
 8017ec2:	b913      	cbnz	r3, 8017eca <__swsetup_r+0x16>
 8017ec4:	4628      	mov	r0, r5
 8017ec6:	f000 f955 	bl	8018174 <__sinit>
 8017eca:	4b2e      	ldr	r3, [pc, #184]	; (8017f84 <__swsetup_r+0xd0>)
 8017ecc:	429c      	cmp	r4, r3
 8017ece:	d10f      	bne.n	8017ef0 <__swsetup_r+0x3c>
 8017ed0:	686c      	ldr	r4, [r5, #4]
 8017ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ed6:	b29a      	uxth	r2, r3
 8017ed8:	0715      	lsls	r5, r2, #28
 8017eda:	d42c      	bmi.n	8017f36 <__swsetup_r+0x82>
 8017edc:	06d0      	lsls	r0, r2, #27
 8017ede:	d411      	bmi.n	8017f04 <__swsetup_r+0x50>
 8017ee0:	2209      	movs	r2, #9
 8017ee2:	6032      	str	r2, [r6, #0]
 8017ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ee8:	81a3      	strh	r3, [r4, #12]
 8017eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017eee:	bd70      	pop	{r4, r5, r6, pc}
 8017ef0:	4b25      	ldr	r3, [pc, #148]	; (8017f88 <__swsetup_r+0xd4>)
 8017ef2:	429c      	cmp	r4, r3
 8017ef4:	d101      	bne.n	8017efa <__swsetup_r+0x46>
 8017ef6:	68ac      	ldr	r4, [r5, #8]
 8017ef8:	e7eb      	b.n	8017ed2 <__swsetup_r+0x1e>
 8017efa:	4b24      	ldr	r3, [pc, #144]	; (8017f8c <__swsetup_r+0xd8>)
 8017efc:	429c      	cmp	r4, r3
 8017efe:	bf08      	it	eq
 8017f00:	68ec      	ldreq	r4, [r5, #12]
 8017f02:	e7e6      	b.n	8017ed2 <__swsetup_r+0x1e>
 8017f04:	0751      	lsls	r1, r2, #29
 8017f06:	d512      	bpl.n	8017f2e <__swsetup_r+0x7a>
 8017f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f0a:	b141      	cbz	r1, 8017f1e <__swsetup_r+0x6a>
 8017f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f10:	4299      	cmp	r1, r3
 8017f12:	d002      	beq.n	8017f1a <__swsetup_r+0x66>
 8017f14:	4630      	mov	r0, r6
 8017f16:	f000 fa23 	bl	8018360 <_free_r>
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8017f1e:	89a3      	ldrh	r3, [r4, #12]
 8017f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017f24:	81a3      	strh	r3, [r4, #12]
 8017f26:	2300      	movs	r3, #0
 8017f28:	6063      	str	r3, [r4, #4]
 8017f2a:	6923      	ldr	r3, [r4, #16]
 8017f2c:	6023      	str	r3, [r4, #0]
 8017f2e:	89a3      	ldrh	r3, [r4, #12]
 8017f30:	f043 0308 	orr.w	r3, r3, #8
 8017f34:	81a3      	strh	r3, [r4, #12]
 8017f36:	6923      	ldr	r3, [r4, #16]
 8017f38:	b94b      	cbnz	r3, 8017f4e <__swsetup_r+0x9a>
 8017f3a:	89a3      	ldrh	r3, [r4, #12]
 8017f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f44:	d003      	beq.n	8017f4e <__swsetup_r+0x9a>
 8017f46:	4621      	mov	r1, r4
 8017f48:	4630      	mov	r0, r6
 8017f4a:	f000 f9c1 	bl	80182d0 <__smakebuf_r>
 8017f4e:	89a2      	ldrh	r2, [r4, #12]
 8017f50:	f012 0301 	ands.w	r3, r2, #1
 8017f54:	d00c      	beq.n	8017f70 <__swsetup_r+0xbc>
 8017f56:	2300      	movs	r3, #0
 8017f58:	60a3      	str	r3, [r4, #8]
 8017f5a:	6963      	ldr	r3, [r4, #20]
 8017f5c:	425b      	negs	r3, r3
 8017f5e:	61a3      	str	r3, [r4, #24]
 8017f60:	6923      	ldr	r3, [r4, #16]
 8017f62:	b953      	cbnz	r3, 8017f7a <__swsetup_r+0xc6>
 8017f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017f6c:	d1ba      	bne.n	8017ee4 <__swsetup_r+0x30>
 8017f6e:	bd70      	pop	{r4, r5, r6, pc}
 8017f70:	0792      	lsls	r2, r2, #30
 8017f72:	bf58      	it	pl
 8017f74:	6963      	ldrpl	r3, [r4, #20]
 8017f76:	60a3      	str	r3, [r4, #8]
 8017f78:	e7f2      	b.n	8017f60 <__swsetup_r+0xac>
 8017f7a:	2000      	movs	r0, #0
 8017f7c:	e7f7      	b.n	8017f6e <__swsetup_r+0xba>
 8017f7e:	bf00      	nop
 8017f80:	20000020 	.word	0x20000020
 8017f84:	0801c024 	.word	0x0801c024
 8017f88:	0801c044 	.word	0x0801c044
 8017f8c:	0801c004 	.word	0x0801c004

08017f90 <__sflush_r>:
 8017f90:	898a      	ldrh	r2, [r1, #12]
 8017f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f96:	4605      	mov	r5, r0
 8017f98:	0710      	lsls	r0, r2, #28
 8017f9a:	460c      	mov	r4, r1
 8017f9c:	d45a      	bmi.n	8018054 <__sflush_r+0xc4>
 8017f9e:	684b      	ldr	r3, [r1, #4]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	dc05      	bgt.n	8017fb0 <__sflush_r+0x20>
 8017fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	dc02      	bgt.n	8017fb0 <__sflush_r+0x20>
 8017faa:	2000      	movs	r0, #0
 8017fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fb2:	2e00      	cmp	r6, #0
 8017fb4:	d0f9      	beq.n	8017faa <__sflush_r+0x1a>
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017fbc:	682f      	ldr	r7, [r5, #0]
 8017fbe:	602b      	str	r3, [r5, #0]
 8017fc0:	d033      	beq.n	801802a <__sflush_r+0x9a>
 8017fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017fc4:	89a3      	ldrh	r3, [r4, #12]
 8017fc6:	075a      	lsls	r2, r3, #29
 8017fc8:	d505      	bpl.n	8017fd6 <__sflush_r+0x46>
 8017fca:	6863      	ldr	r3, [r4, #4]
 8017fcc:	1ac0      	subs	r0, r0, r3
 8017fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017fd0:	b10b      	cbz	r3, 8017fd6 <__sflush_r+0x46>
 8017fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017fd4:	1ac0      	subs	r0, r0, r3
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	4602      	mov	r2, r0
 8017fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fdc:	6a21      	ldr	r1, [r4, #32]
 8017fde:	4628      	mov	r0, r5
 8017fe0:	47b0      	blx	r6
 8017fe2:	1c43      	adds	r3, r0, #1
 8017fe4:	89a3      	ldrh	r3, [r4, #12]
 8017fe6:	d106      	bne.n	8017ff6 <__sflush_r+0x66>
 8017fe8:	6829      	ldr	r1, [r5, #0]
 8017fea:	291d      	cmp	r1, #29
 8017fec:	d84b      	bhi.n	8018086 <__sflush_r+0xf6>
 8017fee:	4a2b      	ldr	r2, [pc, #172]	; (801809c <__sflush_r+0x10c>)
 8017ff0:	40ca      	lsrs	r2, r1
 8017ff2:	07d6      	lsls	r6, r2, #31
 8017ff4:	d547      	bpl.n	8018086 <__sflush_r+0xf6>
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	6062      	str	r2, [r4, #4]
 8017ffa:	04d9      	lsls	r1, r3, #19
 8017ffc:	6922      	ldr	r2, [r4, #16]
 8017ffe:	6022      	str	r2, [r4, #0]
 8018000:	d504      	bpl.n	801800c <__sflush_r+0x7c>
 8018002:	1c42      	adds	r2, r0, #1
 8018004:	d101      	bne.n	801800a <__sflush_r+0x7a>
 8018006:	682b      	ldr	r3, [r5, #0]
 8018008:	b903      	cbnz	r3, 801800c <__sflush_r+0x7c>
 801800a:	6560      	str	r0, [r4, #84]	; 0x54
 801800c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801800e:	602f      	str	r7, [r5, #0]
 8018010:	2900      	cmp	r1, #0
 8018012:	d0ca      	beq.n	8017faa <__sflush_r+0x1a>
 8018014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018018:	4299      	cmp	r1, r3
 801801a:	d002      	beq.n	8018022 <__sflush_r+0x92>
 801801c:	4628      	mov	r0, r5
 801801e:	f000 f99f 	bl	8018360 <_free_r>
 8018022:	2000      	movs	r0, #0
 8018024:	6360      	str	r0, [r4, #52]	; 0x34
 8018026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801802a:	6a21      	ldr	r1, [r4, #32]
 801802c:	2301      	movs	r3, #1
 801802e:	4628      	mov	r0, r5
 8018030:	47b0      	blx	r6
 8018032:	1c41      	adds	r1, r0, #1
 8018034:	d1c6      	bne.n	8017fc4 <__sflush_r+0x34>
 8018036:	682b      	ldr	r3, [r5, #0]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d0c3      	beq.n	8017fc4 <__sflush_r+0x34>
 801803c:	2b1d      	cmp	r3, #29
 801803e:	d001      	beq.n	8018044 <__sflush_r+0xb4>
 8018040:	2b16      	cmp	r3, #22
 8018042:	d101      	bne.n	8018048 <__sflush_r+0xb8>
 8018044:	602f      	str	r7, [r5, #0]
 8018046:	e7b0      	b.n	8017faa <__sflush_r+0x1a>
 8018048:	89a3      	ldrh	r3, [r4, #12]
 801804a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801804e:	81a3      	strh	r3, [r4, #12]
 8018050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018054:	690f      	ldr	r7, [r1, #16]
 8018056:	2f00      	cmp	r7, #0
 8018058:	d0a7      	beq.n	8017faa <__sflush_r+0x1a>
 801805a:	0793      	lsls	r3, r2, #30
 801805c:	680e      	ldr	r6, [r1, #0]
 801805e:	bf08      	it	eq
 8018060:	694b      	ldreq	r3, [r1, #20]
 8018062:	600f      	str	r7, [r1, #0]
 8018064:	bf18      	it	ne
 8018066:	2300      	movne	r3, #0
 8018068:	eba6 0807 	sub.w	r8, r6, r7
 801806c:	608b      	str	r3, [r1, #8]
 801806e:	f1b8 0f00 	cmp.w	r8, #0
 8018072:	dd9a      	ble.n	8017faa <__sflush_r+0x1a>
 8018074:	4643      	mov	r3, r8
 8018076:	463a      	mov	r2, r7
 8018078:	6a21      	ldr	r1, [r4, #32]
 801807a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801807c:	4628      	mov	r0, r5
 801807e:	47b0      	blx	r6
 8018080:	2800      	cmp	r0, #0
 8018082:	dc07      	bgt.n	8018094 <__sflush_r+0x104>
 8018084:	89a3      	ldrh	r3, [r4, #12]
 8018086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801808a:	81a3      	strh	r3, [r4, #12]
 801808c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018094:	4407      	add	r7, r0
 8018096:	eba8 0800 	sub.w	r8, r8, r0
 801809a:	e7e8      	b.n	801806e <__sflush_r+0xde>
 801809c:	20400001 	.word	0x20400001

080180a0 <_fflush_r>:
 80180a0:	b538      	push	{r3, r4, r5, lr}
 80180a2:	690b      	ldr	r3, [r1, #16]
 80180a4:	4605      	mov	r5, r0
 80180a6:	460c      	mov	r4, r1
 80180a8:	b1db      	cbz	r3, 80180e2 <_fflush_r+0x42>
 80180aa:	b118      	cbz	r0, 80180b4 <_fflush_r+0x14>
 80180ac:	6983      	ldr	r3, [r0, #24]
 80180ae:	b90b      	cbnz	r3, 80180b4 <_fflush_r+0x14>
 80180b0:	f000 f860 	bl	8018174 <__sinit>
 80180b4:	4b0c      	ldr	r3, [pc, #48]	; (80180e8 <_fflush_r+0x48>)
 80180b6:	429c      	cmp	r4, r3
 80180b8:	d109      	bne.n	80180ce <_fflush_r+0x2e>
 80180ba:	686c      	ldr	r4, [r5, #4]
 80180bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180c0:	b17b      	cbz	r3, 80180e2 <_fflush_r+0x42>
 80180c2:	4621      	mov	r1, r4
 80180c4:	4628      	mov	r0, r5
 80180c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180ca:	f7ff bf61 	b.w	8017f90 <__sflush_r>
 80180ce:	4b07      	ldr	r3, [pc, #28]	; (80180ec <_fflush_r+0x4c>)
 80180d0:	429c      	cmp	r4, r3
 80180d2:	d101      	bne.n	80180d8 <_fflush_r+0x38>
 80180d4:	68ac      	ldr	r4, [r5, #8]
 80180d6:	e7f1      	b.n	80180bc <_fflush_r+0x1c>
 80180d8:	4b05      	ldr	r3, [pc, #20]	; (80180f0 <_fflush_r+0x50>)
 80180da:	429c      	cmp	r4, r3
 80180dc:	bf08      	it	eq
 80180de:	68ec      	ldreq	r4, [r5, #12]
 80180e0:	e7ec      	b.n	80180bc <_fflush_r+0x1c>
 80180e2:	2000      	movs	r0, #0
 80180e4:	bd38      	pop	{r3, r4, r5, pc}
 80180e6:	bf00      	nop
 80180e8:	0801c024 	.word	0x0801c024
 80180ec:	0801c044 	.word	0x0801c044
 80180f0:	0801c004 	.word	0x0801c004

080180f4 <_cleanup_r>:
 80180f4:	4901      	ldr	r1, [pc, #4]	; (80180fc <_cleanup_r+0x8>)
 80180f6:	f000 b8a9 	b.w	801824c <_fwalk_reent>
 80180fa:	bf00      	nop
 80180fc:	080180a1 	.word	0x080180a1

08018100 <std.isra.0>:
 8018100:	2300      	movs	r3, #0
 8018102:	b510      	push	{r4, lr}
 8018104:	4604      	mov	r4, r0
 8018106:	6003      	str	r3, [r0, #0]
 8018108:	6043      	str	r3, [r0, #4]
 801810a:	6083      	str	r3, [r0, #8]
 801810c:	8181      	strh	r1, [r0, #12]
 801810e:	6643      	str	r3, [r0, #100]	; 0x64
 8018110:	81c2      	strh	r2, [r0, #14]
 8018112:	6103      	str	r3, [r0, #16]
 8018114:	6143      	str	r3, [r0, #20]
 8018116:	6183      	str	r3, [r0, #24]
 8018118:	4619      	mov	r1, r3
 801811a:	2208      	movs	r2, #8
 801811c:	305c      	adds	r0, #92	; 0x5c
 801811e:	f7ff fdb9 	bl	8017c94 <memset>
 8018122:	4b05      	ldr	r3, [pc, #20]	; (8018138 <std.isra.0+0x38>)
 8018124:	6263      	str	r3, [r4, #36]	; 0x24
 8018126:	4b05      	ldr	r3, [pc, #20]	; (801813c <std.isra.0+0x3c>)
 8018128:	62a3      	str	r3, [r4, #40]	; 0x28
 801812a:	4b05      	ldr	r3, [pc, #20]	; (8018140 <std.isra.0+0x40>)
 801812c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801812e:	4b05      	ldr	r3, [pc, #20]	; (8018144 <std.isra.0+0x44>)
 8018130:	6224      	str	r4, [r4, #32]
 8018132:	6323      	str	r3, [r4, #48]	; 0x30
 8018134:	bd10      	pop	{r4, pc}
 8018136:	bf00      	nop
 8018138:	08018a85 	.word	0x08018a85
 801813c:	08018aa7 	.word	0x08018aa7
 8018140:	08018adf 	.word	0x08018adf
 8018144:	08018b03 	.word	0x08018b03

08018148 <__sfmoreglue>:
 8018148:	b570      	push	{r4, r5, r6, lr}
 801814a:	1e4a      	subs	r2, r1, #1
 801814c:	2568      	movs	r5, #104	; 0x68
 801814e:	4355      	muls	r5, r2
 8018150:	460e      	mov	r6, r1
 8018152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018156:	f000 f951 	bl	80183fc <_malloc_r>
 801815a:	4604      	mov	r4, r0
 801815c:	b140      	cbz	r0, 8018170 <__sfmoreglue+0x28>
 801815e:	2100      	movs	r1, #0
 8018160:	e880 0042 	stmia.w	r0, {r1, r6}
 8018164:	300c      	adds	r0, #12
 8018166:	60a0      	str	r0, [r4, #8]
 8018168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801816c:	f7ff fd92 	bl	8017c94 <memset>
 8018170:	4620      	mov	r0, r4
 8018172:	bd70      	pop	{r4, r5, r6, pc}

08018174 <__sinit>:
 8018174:	6983      	ldr	r3, [r0, #24]
 8018176:	b510      	push	{r4, lr}
 8018178:	4604      	mov	r4, r0
 801817a:	bb33      	cbnz	r3, 80181ca <__sinit+0x56>
 801817c:	6483      	str	r3, [r0, #72]	; 0x48
 801817e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8018180:	6503      	str	r3, [r0, #80]	; 0x50
 8018182:	4b12      	ldr	r3, [pc, #72]	; (80181cc <__sinit+0x58>)
 8018184:	4a12      	ldr	r2, [pc, #72]	; (80181d0 <__sinit+0x5c>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	6282      	str	r2, [r0, #40]	; 0x28
 801818a:	4298      	cmp	r0, r3
 801818c:	bf04      	itt	eq
 801818e:	2301      	moveq	r3, #1
 8018190:	6183      	streq	r3, [r0, #24]
 8018192:	f000 f81f 	bl	80181d4 <__sfp>
 8018196:	6060      	str	r0, [r4, #4]
 8018198:	4620      	mov	r0, r4
 801819a:	f000 f81b 	bl	80181d4 <__sfp>
 801819e:	60a0      	str	r0, [r4, #8]
 80181a0:	4620      	mov	r0, r4
 80181a2:	f000 f817 	bl	80181d4 <__sfp>
 80181a6:	2200      	movs	r2, #0
 80181a8:	60e0      	str	r0, [r4, #12]
 80181aa:	2104      	movs	r1, #4
 80181ac:	6860      	ldr	r0, [r4, #4]
 80181ae:	f7ff ffa7 	bl	8018100 <std.isra.0>
 80181b2:	2201      	movs	r2, #1
 80181b4:	2109      	movs	r1, #9
 80181b6:	68a0      	ldr	r0, [r4, #8]
 80181b8:	f7ff ffa2 	bl	8018100 <std.isra.0>
 80181bc:	2202      	movs	r2, #2
 80181be:	2112      	movs	r1, #18
 80181c0:	68e0      	ldr	r0, [r4, #12]
 80181c2:	f7ff ff9d 	bl	8018100 <std.isra.0>
 80181c6:	2301      	movs	r3, #1
 80181c8:	61a3      	str	r3, [r4, #24]
 80181ca:	bd10      	pop	{r4, pc}
 80181cc:	0801c064 	.word	0x0801c064
 80181d0:	080180f5 	.word	0x080180f5

080181d4 <__sfp>:
 80181d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181d6:	4b1c      	ldr	r3, [pc, #112]	; (8018248 <__sfp+0x74>)
 80181d8:	681e      	ldr	r6, [r3, #0]
 80181da:	69b3      	ldr	r3, [r6, #24]
 80181dc:	4607      	mov	r7, r0
 80181de:	b913      	cbnz	r3, 80181e6 <__sfp+0x12>
 80181e0:	4630      	mov	r0, r6
 80181e2:	f7ff ffc7 	bl	8018174 <__sinit>
 80181e6:	3648      	adds	r6, #72	; 0x48
 80181e8:	68b4      	ldr	r4, [r6, #8]
 80181ea:	6873      	ldr	r3, [r6, #4]
 80181ec:	3b01      	subs	r3, #1
 80181ee:	d503      	bpl.n	80181f8 <__sfp+0x24>
 80181f0:	6833      	ldr	r3, [r6, #0]
 80181f2:	b133      	cbz	r3, 8018202 <__sfp+0x2e>
 80181f4:	6836      	ldr	r6, [r6, #0]
 80181f6:	e7f7      	b.n	80181e8 <__sfp+0x14>
 80181f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80181fc:	b16d      	cbz	r5, 801821a <__sfp+0x46>
 80181fe:	3468      	adds	r4, #104	; 0x68
 8018200:	e7f4      	b.n	80181ec <__sfp+0x18>
 8018202:	2104      	movs	r1, #4
 8018204:	4638      	mov	r0, r7
 8018206:	f7ff ff9f 	bl	8018148 <__sfmoreglue>
 801820a:	6030      	str	r0, [r6, #0]
 801820c:	2800      	cmp	r0, #0
 801820e:	d1f1      	bne.n	80181f4 <__sfp+0x20>
 8018210:	230c      	movs	r3, #12
 8018212:	603b      	str	r3, [r7, #0]
 8018214:	4604      	mov	r4, r0
 8018216:	4620      	mov	r0, r4
 8018218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801821a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801821e:	81e3      	strh	r3, [r4, #14]
 8018220:	2301      	movs	r3, #1
 8018222:	81a3      	strh	r3, [r4, #12]
 8018224:	6665      	str	r5, [r4, #100]	; 0x64
 8018226:	6025      	str	r5, [r4, #0]
 8018228:	60a5      	str	r5, [r4, #8]
 801822a:	6065      	str	r5, [r4, #4]
 801822c:	6125      	str	r5, [r4, #16]
 801822e:	6165      	str	r5, [r4, #20]
 8018230:	61a5      	str	r5, [r4, #24]
 8018232:	2208      	movs	r2, #8
 8018234:	4629      	mov	r1, r5
 8018236:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801823a:	f7ff fd2b 	bl	8017c94 <memset>
 801823e:	6365      	str	r5, [r4, #52]	; 0x34
 8018240:	63a5      	str	r5, [r4, #56]	; 0x38
 8018242:	64a5      	str	r5, [r4, #72]	; 0x48
 8018244:	64e5      	str	r5, [r4, #76]	; 0x4c
 8018246:	e7e6      	b.n	8018216 <__sfp+0x42>
 8018248:	0801c064 	.word	0x0801c064

0801824c <_fwalk_reent>:
 801824c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018250:	4680      	mov	r8, r0
 8018252:	4689      	mov	r9, r1
 8018254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018258:	2600      	movs	r6, #0
 801825a:	b914      	cbnz	r4, 8018262 <_fwalk_reent+0x16>
 801825c:	4630      	mov	r0, r6
 801825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018262:	68a5      	ldr	r5, [r4, #8]
 8018264:	6867      	ldr	r7, [r4, #4]
 8018266:	3f01      	subs	r7, #1
 8018268:	d501      	bpl.n	801826e <_fwalk_reent+0x22>
 801826a:	6824      	ldr	r4, [r4, #0]
 801826c:	e7f5      	b.n	801825a <_fwalk_reent+0xe>
 801826e:	89ab      	ldrh	r3, [r5, #12]
 8018270:	2b01      	cmp	r3, #1
 8018272:	d907      	bls.n	8018284 <_fwalk_reent+0x38>
 8018274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018278:	3301      	adds	r3, #1
 801827a:	d003      	beq.n	8018284 <_fwalk_reent+0x38>
 801827c:	4629      	mov	r1, r5
 801827e:	4640      	mov	r0, r8
 8018280:	47c8      	blx	r9
 8018282:	4306      	orrs	r6, r0
 8018284:	3568      	adds	r5, #104	; 0x68
 8018286:	e7ee      	b.n	8018266 <_fwalk_reent+0x1a>

08018288 <__swhatbuf_r>:
 8018288:	b570      	push	{r4, r5, r6, lr}
 801828a:	460e      	mov	r6, r1
 801828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018290:	2900      	cmp	r1, #0
 8018292:	b090      	sub	sp, #64	; 0x40
 8018294:	4614      	mov	r4, r2
 8018296:	461d      	mov	r5, r3
 8018298:	da07      	bge.n	80182aa <__swhatbuf_r+0x22>
 801829a:	2300      	movs	r3, #0
 801829c:	602b      	str	r3, [r5, #0]
 801829e:	89b3      	ldrh	r3, [r6, #12]
 80182a0:	061a      	lsls	r2, r3, #24
 80182a2:	d410      	bmi.n	80182c6 <__swhatbuf_r+0x3e>
 80182a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80182a8:	e00e      	b.n	80182c8 <__swhatbuf_r+0x40>
 80182aa:	aa01      	add	r2, sp, #4
 80182ac:	f000 fc50 	bl	8018b50 <_fstat_r>
 80182b0:	2800      	cmp	r0, #0
 80182b2:	dbf2      	blt.n	801829a <__swhatbuf_r+0x12>
 80182b4:	9a02      	ldr	r2, [sp, #8]
 80182b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80182ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80182be:	425a      	negs	r2, r3
 80182c0:	415a      	adcs	r2, r3
 80182c2:	602a      	str	r2, [r5, #0]
 80182c4:	e7ee      	b.n	80182a4 <__swhatbuf_r+0x1c>
 80182c6:	2340      	movs	r3, #64	; 0x40
 80182c8:	2000      	movs	r0, #0
 80182ca:	6023      	str	r3, [r4, #0]
 80182cc:	b010      	add	sp, #64	; 0x40
 80182ce:	bd70      	pop	{r4, r5, r6, pc}

080182d0 <__smakebuf_r>:
 80182d0:	898b      	ldrh	r3, [r1, #12]
 80182d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80182d4:	079d      	lsls	r5, r3, #30
 80182d6:	4606      	mov	r6, r0
 80182d8:	460c      	mov	r4, r1
 80182da:	d507      	bpl.n	80182ec <__smakebuf_r+0x1c>
 80182dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80182e0:	6023      	str	r3, [r4, #0]
 80182e2:	6123      	str	r3, [r4, #16]
 80182e4:	2301      	movs	r3, #1
 80182e6:	6163      	str	r3, [r4, #20]
 80182e8:	b002      	add	sp, #8
 80182ea:	bd70      	pop	{r4, r5, r6, pc}
 80182ec:	ab01      	add	r3, sp, #4
 80182ee:	466a      	mov	r2, sp
 80182f0:	f7ff ffca 	bl	8018288 <__swhatbuf_r>
 80182f4:	9900      	ldr	r1, [sp, #0]
 80182f6:	4605      	mov	r5, r0
 80182f8:	4630      	mov	r0, r6
 80182fa:	f000 f87f 	bl	80183fc <_malloc_r>
 80182fe:	b948      	cbnz	r0, 8018314 <__smakebuf_r+0x44>
 8018300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018304:	059a      	lsls	r2, r3, #22
 8018306:	d4ef      	bmi.n	80182e8 <__smakebuf_r+0x18>
 8018308:	f023 0303 	bic.w	r3, r3, #3
 801830c:	f043 0302 	orr.w	r3, r3, #2
 8018310:	81a3      	strh	r3, [r4, #12]
 8018312:	e7e3      	b.n	80182dc <__smakebuf_r+0xc>
 8018314:	4b0d      	ldr	r3, [pc, #52]	; (801834c <__smakebuf_r+0x7c>)
 8018316:	62b3      	str	r3, [r6, #40]	; 0x28
 8018318:	89a3      	ldrh	r3, [r4, #12]
 801831a:	6020      	str	r0, [r4, #0]
 801831c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018320:	81a3      	strh	r3, [r4, #12]
 8018322:	9b00      	ldr	r3, [sp, #0]
 8018324:	6163      	str	r3, [r4, #20]
 8018326:	9b01      	ldr	r3, [sp, #4]
 8018328:	6120      	str	r0, [r4, #16]
 801832a:	b15b      	cbz	r3, 8018344 <__smakebuf_r+0x74>
 801832c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018330:	4630      	mov	r0, r6
 8018332:	f000 fc1f 	bl	8018b74 <_isatty_r>
 8018336:	b128      	cbz	r0, 8018344 <__smakebuf_r+0x74>
 8018338:	89a3      	ldrh	r3, [r4, #12]
 801833a:	f023 0303 	bic.w	r3, r3, #3
 801833e:	f043 0301 	orr.w	r3, r3, #1
 8018342:	81a3      	strh	r3, [r4, #12]
 8018344:	89a3      	ldrh	r3, [r4, #12]
 8018346:	431d      	orrs	r5, r3
 8018348:	81a5      	strh	r5, [r4, #12]
 801834a:	e7cd      	b.n	80182e8 <__smakebuf_r+0x18>
 801834c:	080180f5 	.word	0x080180f5

08018350 <malloc>:
 8018350:	4b02      	ldr	r3, [pc, #8]	; (801835c <malloc+0xc>)
 8018352:	4601      	mov	r1, r0
 8018354:	6818      	ldr	r0, [r3, #0]
 8018356:	f000 b851 	b.w	80183fc <_malloc_r>
 801835a:	bf00      	nop
 801835c:	20000020 	.word	0x20000020

08018360 <_free_r>:
 8018360:	b538      	push	{r3, r4, r5, lr}
 8018362:	4605      	mov	r5, r0
 8018364:	2900      	cmp	r1, #0
 8018366:	d045      	beq.n	80183f4 <_free_r+0x94>
 8018368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801836c:	1f0c      	subs	r4, r1, #4
 801836e:	2b00      	cmp	r3, #0
 8018370:	bfb8      	it	lt
 8018372:	18e4      	addlt	r4, r4, r3
 8018374:	f000 fc20 	bl	8018bb8 <__malloc_lock>
 8018378:	4a1f      	ldr	r2, [pc, #124]	; (80183f8 <_free_r+0x98>)
 801837a:	6813      	ldr	r3, [r2, #0]
 801837c:	4610      	mov	r0, r2
 801837e:	b933      	cbnz	r3, 801838e <_free_r+0x2e>
 8018380:	6063      	str	r3, [r4, #4]
 8018382:	6014      	str	r4, [r2, #0]
 8018384:	4628      	mov	r0, r5
 8018386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801838a:	f000 bc16 	b.w	8018bba <__malloc_unlock>
 801838e:	42a3      	cmp	r3, r4
 8018390:	d90c      	bls.n	80183ac <_free_r+0x4c>
 8018392:	6821      	ldr	r1, [r4, #0]
 8018394:	1862      	adds	r2, r4, r1
 8018396:	4293      	cmp	r3, r2
 8018398:	bf04      	itt	eq
 801839a:	681a      	ldreq	r2, [r3, #0]
 801839c:	685b      	ldreq	r3, [r3, #4]
 801839e:	6063      	str	r3, [r4, #4]
 80183a0:	bf04      	itt	eq
 80183a2:	1852      	addeq	r2, r2, r1
 80183a4:	6022      	streq	r2, [r4, #0]
 80183a6:	6004      	str	r4, [r0, #0]
 80183a8:	e7ec      	b.n	8018384 <_free_r+0x24>
 80183aa:	4613      	mov	r3, r2
 80183ac:	685a      	ldr	r2, [r3, #4]
 80183ae:	b10a      	cbz	r2, 80183b4 <_free_r+0x54>
 80183b0:	42a2      	cmp	r2, r4
 80183b2:	d9fa      	bls.n	80183aa <_free_r+0x4a>
 80183b4:	6819      	ldr	r1, [r3, #0]
 80183b6:	1858      	adds	r0, r3, r1
 80183b8:	42a0      	cmp	r0, r4
 80183ba:	d10b      	bne.n	80183d4 <_free_r+0x74>
 80183bc:	6820      	ldr	r0, [r4, #0]
 80183be:	4401      	add	r1, r0
 80183c0:	1858      	adds	r0, r3, r1
 80183c2:	4282      	cmp	r2, r0
 80183c4:	6019      	str	r1, [r3, #0]
 80183c6:	d1dd      	bne.n	8018384 <_free_r+0x24>
 80183c8:	6810      	ldr	r0, [r2, #0]
 80183ca:	6852      	ldr	r2, [r2, #4]
 80183cc:	605a      	str	r2, [r3, #4]
 80183ce:	4401      	add	r1, r0
 80183d0:	6019      	str	r1, [r3, #0]
 80183d2:	e7d7      	b.n	8018384 <_free_r+0x24>
 80183d4:	d902      	bls.n	80183dc <_free_r+0x7c>
 80183d6:	230c      	movs	r3, #12
 80183d8:	602b      	str	r3, [r5, #0]
 80183da:	e7d3      	b.n	8018384 <_free_r+0x24>
 80183dc:	6820      	ldr	r0, [r4, #0]
 80183de:	1821      	adds	r1, r4, r0
 80183e0:	428a      	cmp	r2, r1
 80183e2:	bf04      	itt	eq
 80183e4:	6811      	ldreq	r1, [r2, #0]
 80183e6:	6852      	ldreq	r2, [r2, #4]
 80183e8:	6062      	str	r2, [r4, #4]
 80183ea:	bf04      	itt	eq
 80183ec:	1809      	addeq	r1, r1, r0
 80183ee:	6021      	streq	r1, [r4, #0]
 80183f0:	605c      	str	r4, [r3, #4]
 80183f2:	e7c7      	b.n	8018384 <_free_r+0x24>
 80183f4:	bd38      	pop	{r3, r4, r5, pc}
 80183f6:	bf00      	nop
 80183f8:	20019fdc 	.word	0x20019fdc

080183fc <_malloc_r>:
 80183fc:	b570      	push	{r4, r5, r6, lr}
 80183fe:	1ccd      	adds	r5, r1, #3
 8018400:	f025 0503 	bic.w	r5, r5, #3
 8018404:	3508      	adds	r5, #8
 8018406:	2d0c      	cmp	r5, #12
 8018408:	bf38      	it	cc
 801840a:	250c      	movcc	r5, #12
 801840c:	2d00      	cmp	r5, #0
 801840e:	4606      	mov	r6, r0
 8018410:	db01      	blt.n	8018416 <_malloc_r+0x1a>
 8018412:	42a9      	cmp	r1, r5
 8018414:	d903      	bls.n	801841e <_malloc_r+0x22>
 8018416:	230c      	movs	r3, #12
 8018418:	6033      	str	r3, [r6, #0]
 801841a:	2000      	movs	r0, #0
 801841c:	bd70      	pop	{r4, r5, r6, pc}
 801841e:	f000 fbcb 	bl	8018bb8 <__malloc_lock>
 8018422:	4a23      	ldr	r2, [pc, #140]	; (80184b0 <_malloc_r+0xb4>)
 8018424:	6814      	ldr	r4, [r2, #0]
 8018426:	4621      	mov	r1, r4
 8018428:	b991      	cbnz	r1, 8018450 <_malloc_r+0x54>
 801842a:	4c22      	ldr	r4, [pc, #136]	; (80184b4 <_malloc_r+0xb8>)
 801842c:	6823      	ldr	r3, [r4, #0]
 801842e:	b91b      	cbnz	r3, 8018438 <_malloc_r+0x3c>
 8018430:	4630      	mov	r0, r6
 8018432:	f000 fb17 	bl	8018a64 <_sbrk_r>
 8018436:	6020      	str	r0, [r4, #0]
 8018438:	4629      	mov	r1, r5
 801843a:	4630      	mov	r0, r6
 801843c:	f000 fb12 	bl	8018a64 <_sbrk_r>
 8018440:	1c43      	adds	r3, r0, #1
 8018442:	d126      	bne.n	8018492 <_malloc_r+0x96>
 8018444:	230c      	movs	r3, #12
 8018446:	6033      	str	r3, [r6, #0]
 8018448:	4630      	mov	r0, r6
 801844a:	f000 fbb6 	bl	8018bba <__malloc_unlock>
 801844e:	e7e4      	b.n	801841a <_malloc_r+0x1e>
 8018450:	680b      	ldr	r3, [r1, #0]
 8018452:	1b5b      	subs	r3, r3, r5
 8018454:	d41a      	bmi.n	801848c <_malloc_r+0x90>
 8018456:	2b0b      	cmp	r3, #11
 8018458:	d90f      	bls.n	801847a <_malloc_r+0x7e>
 801845a:	600b      	str	r3, [r1, #0]
 801845c:	50cd      	str	r5, [r1, r3]
 801845e:	18cc      	adds	r4, r1, r3
 8018460:	4630      	mov	r0, r6
 8018462:	f000 fbaa 	bl	8018bba <__malloc_unlock>
 8018466:	f104 000b 	add.w	r0, r4, #11
 801846a:	1d23      	adds	r3, r4, #4
 801846c:	f020 0007 	bic.w	r0, r0, #7
 8018470:	1ac3      	subs	r3, r0, r3
 8018472:	d01b      	beq.n	80184ac <_malloc_r+0xb0>
 8018474:	425a      	negs	r2, r3
 8018476:	50e2      	str	r2, [r4, r3]
 8018478:	bd70      	pop	{r4, r5, r6, pc}
 801847a:	428c      	cmp	r4, r1
 801847c:	bf0d      	iteet	eq
 801847e:	6863      	ldreq	r3, [r4, #4]
 8018480:	684b      	ldrne	r3, [r1, #4]
 8018482:	6063      	strne	r3, [r4, #4]
 8018484:	6013      	streq	r3, [r2, #0]
 8018486:	bf18      	it	ne
 8018488:	460c      	movne	r4, r1
 801848a:	e7e9      	b.n	8018460 <_malloc_r+0x64>
 801848c:	460c      	mov	r4, r1
 801848e:	6849      	ldr	r1, [r1, #4]
 8018490:	e7ca      	b.n	8018428 <_malloc_r+0x2c>
 8018492:	1cc4      	adds	r4, r0, #3
 8018494:	f024 0403 	bic.w	r4, r4, #3
 8018498:	42a0      	cmp	r0, r4
 801849a:	d005      	beq.n	80184a8 <_malloc_r+0xac>
 801849c:	1a21      	subs	r1, r4, r0
 801849e:	4630      	mov	r0, r6
 80184a0:	f000 fae0 	bl	8018a64 <_sbrk_r>
 80184a4:	3001      	adds	r0, #1
 80184a6:	d0cd      	beq.n	8018444 <_malloc_r+0x48>
 80184a8:	6025      	str	r5, [r4, #0]
 80184aa:	e7d9      	b.n	8018460 <_malloc_r+0x64>
 80184ac:	bd70      	pop	{r4, r5, r6, pc}
 80184ae:	bf00      	nop
 80184b0:	20019fdc 	.word	0x20019fdc
 80184b4:	20019fe0 	.word	0x20019fe0

080184b8 <__sfputc_r>:
 80184b8:	6893      	ldr	r3, [r2, #8]
 80184ba:	3b01      	subs	r3, #1
 80184bc:	2b00      	cmp	r3, #0
 80184be:	b410      	push	{r4}
 80184c0:	6093      	str	r3, [r2, #8]
 80184c2:	da09      	bge.n	80184d8 <__sfputc_r+0x20>
 80184c4:	6994      	ldr	r4, [r2, #24]
 80184c6:	42a3      	cmp	r3, r4
 80184c8:	db02      	blt.n	80184d0 <__sfputc_r+0x18>
 80184ca:	b2cb      	uxtb	r3, r1
 80184cc:	2b0a      	cmp	r3, #10
 80184ce:	d103      	bne.n	80184d8 <__sfputc_r+0x20>
 80184d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184d4:	f7ff bc9c 	b.w	8017e10 <__swbuf_r>
 80184d8:	6813      	ldr	r3, [r2, #0]
 80184da:	1c58      	adds	r0, r3, #1
 80184dc:	6010      	str	r0, [r2, #0]
 80184de:	7019      	strb	r1, [r3, #0]
 80184e0:	b2c8      	uxtb	r0, r1
 80184e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184e6:	4770      	bx	lr

080184e8 <__sfputs_r>:
 80184e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ea:	4606      	mov	r6, r0
 80184ec:	460f      	mov	r7, r1
 80184ee:	4614      	mov	r4, r2
 80184f0:	18d5      	adds	r5, r2, r3
 80184f2:	42ac      	cmp	r4, r5
 80184f4:	d101      	bne.n	80184fa <__sfputs_r+0x12>
 80184f6:	2000      	movs	r0, #0
 80184f8:	e007      	b.n	801850a <__sfputs_r+0x22>
 80184fa:	463a      	mov	r2, r7
 80184fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018500:	4630      	mov	r0, r6
 8018502:	f7ff ffd9 	bl	80184b8 <__sfputc_r>
 8018506:	1c43      	adds	r3, r0, #1
 8018508:	d1f3      	bne.n	80184f2 <__sfputs_r+0xa>
 801850a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801850c <_vfiprintf_r>:
 801850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018510:	b09d      	sub	sp, #116	; 0x74
 8018512:	460c      	mov	r4, r1
 8018514:	4617      	mov	r7, r2
 8018516:	9303      	str	r3, [sp, #12]
 8018518:	4606      	mov	r6, r0
 801851a:	b118      	cbz	r0, 8018524 <_vfiprintf_r+0x18>
 801851c:	6983      	ldr	r3, [r0, #24]
 801851e:	b90b      	cbnz	r3, 8018524 <_vfiprintf_r+0x18>
 8018520:	f7ff fe28 	bl	8018174 <__sinit>
 8018524:	4b7c      	ldr	r3, [pc, #496]	; (8018718 <_vfiprintf_r+0x20c>)
 8018526:	429c      	cmp	r4, r3
 8018528:	d157      	bne.n	80185da <_vfiprintf_r+0xce>
 801852a:	6874      	ldr	r4, [r6, #4]
 801852c:	89a3      	ldrh	r3, [r4, #12]
 801852e:	0718      	lsls	r0, r3, #28
 8018530:	d55d      	bpl.n	80185ee <_vfiprintf_r+0xe2>
 8018532:	6923      	ldr	r3, [r4, #16]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d05a      	beq.n	80185ee <_vfiprintf_r+0xe2>
 8018538:	2300      	movs	r3, #0
 801853a:	9309      	str	r3, [sp, #36]	; 0x24
 801853c:	2320      	movs	r3, #32
 801853e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018542:	2330      	movs	r3, #48	; 0x30
 8018544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018548:	f04f 0b01 	mov.w	fp, #1
 801854c:	46b8      	mov	r8, r7
 801854e:	4645      	mov	r5, r8
 8018550:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018554:	2b00      	cmp	r3, #0
 8018556:	d155      	bne.n	8018604 <_vfiprintf_r+0xf8>
 8018558:	ebb8 0a07 	subs.w	sl, r8, r7
 801855c:	d00b      	beq.n	8018576 <_vfiprintf_r+0x6a>
 801855e:	4653      	mov	r3, sl
 8018560:	463a      	mov	r2, r7
 8018562:	4621      	mov	r1, r4
 8018564:	4630      	mov	r0, r6
 8018566:	f7ff ffbf 	bl	80184e8 <__sfputs_r>
 801856a:	3001      	adds	r0, #1
 801856c:	f000 80c4 	beq.w	80186f8 <_vfiprintf_r+0x1ec>
 8018570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018572:	4453      	add	r3, sl
 8018574:	9309      	str	r3, [sp, #36]	; 0x24
 8018576:	f898 3000 	ldrb.w	r3, [r8]
 801857a:	2b00      	cmp	r3, #0
 801857c:	f000 80bc 	beq.w	80186f8 <_vfiprintf_r+0x1ec>
 8018580:	2300      	movs	r3, #0
 8018582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018586:	9304      	str	r3, [sp, #16]
 8018588:	9307      	str	r3, [sp, #28]
 801858a:	9205      	str	r2, [sp, #20]
 801858c:	9306      	str	r3, [sp, #24]
 801858e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018592:	931a      	str	r3, [sp, #104]	; 0x68
 8018594:	2205      	movs	r2, #5
 8018596:	7829      	ldrb	r1, [r5, #0]
 8018598:	4860      	ldr	r0, [pc, #384]	; (801871c <_vfiprintf_r+0x210>)
 801859a:	f7e7 fe31 	bl	8000200 <memchr>
 801859e:	f105 0801 	add.w	r8, r5, #1
 80185a2:	9b04      	ldr	r3, [sp, #16]
 80185a4:	2800      	cmp	r0, #0
 80185a6:	d131      	bne.n	801860c <_vfiprintf_r+0x100>
 80185a8:	06d9      	lsls	r1, r3, #27
 80185aa:	bf44      	itt	mi
 80185ac:	2220      	movmi	r2, #32
 80185ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80185b2:	071a      	lsls	r2, r3, #28
 80185b4:	bf44      	itt	mi
 80185b6:	222b      	movmi	r2, #43	; 0x2b
 80185b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80185bc:	782a      	ldrb	r2, [r5, #0]
 80185be:	2a2a      	cmp	r2, #42	; 0x2a
 80185c0:	d02c      	beq.n	801861c <_vfiprintf_r+0x110>
 80185c2:	9a07      	ldr	r2, [sp, #28]
 80185c4:	2100      	movs	r1, #0
 80185c6:	200a      	movs	r0, #10
 80185c8:	46a8      	mov	r8, r5
 80185ca:	3501      	adds	r5, #1
 80185cc:	f898 3000 	ldrb.w	r3, [r8]
 80185d0:	3b30      	subs	r3, #48	; 0x30
 80185d2:	2b09      	cmp	r3, #9
 80185d4:	d96d      	bls.n	80186b2 <_vfiprintf_r+0x1a6>
 80185d6:	b371      	cbz	r1, 8018636 <_vfiprintf_r+0x12a>
 80185d8:	e026      	b.n	8018628 <_vfiprintf_r+0x11c>
 80185da:	4b51      	ldr	r3, [pc, #324]	; (8018720 <_vfiprintf_r+0x214>)
 80185dc:	429c      	cmp	r4, r3
 80185de:	d101      	bne.n	80185e4 <_vfiprintf_r+0xd8>
 80185e0:	68b4      	ldr	r4, [r6, #8]
 80185e2:	e7a3      	b.n	801852c <_vfiprintf_r+0x20>
 80185e4:	4b4f      	ldr	r3, [pc, #316]	; (8018724 <_vfiprintf_r+0x218>)
 80185e6:	429c      	cmp	r4, r3
 80185e8:	bf08      	it	eq
 80185ea:	68f4      	ldreq	r4, [r6, #12]
 80185ec:	e79e      	b.n	801852c <_vfiprintf_r+0x20>
 80185ee:	4621      	mov	r1, r4
 80185f0:	4630      	mov	r0, r6
 80185f2:	f7ff fc5f 	bl	8017eb4 <__swsetup_r>
 80185f6:	2800      	cmp	r0, #0
 80185f8:	d09e      	beq.n	8018538 <_vfiprintf_r+0x2c>
 80185fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80185fe:	b01d      	add	sp, #116	; 0x74
 8018600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018604:	2b25      	cmp	r3, #37	; 0x25
 8018606:	d0a7      	beq.n	8018558 <_vfiprintf_r+0x4c>
 8018608:	46a8      	mov	r8, r5
 801860a:	e7a0      	b.n	801854e <_vfiprintf_r+0x42>
 801860c:	4a43      	ldr	r2, [pc, #268]	; (801871c <_vfiprintf_r+0x210>)
 801860e:	1a80      	subs	r0, r0, r2
 8018610:	fa0b f000 	lsl.w	r0, fp, r0
 8018614:	4318      	orrs	r0, r3
 8018616:	9004      	str	r0, [sp, #16]
 8018618:	4645      	mov	r5, r8
 801861a:	e7bb      	b.n	8018594 <_vfiprintf_r+0x88>
 801861c:	9a03      	ldr	r2, [sp, #12]
 801861e:	1d11      	adds	r1, r2, #4
 8018620:	6812      	ldr	r2, [r2, #0]
 8018622:	9103      	str	r1, [sp, #12]
 8018624:	2a00      	cmp	r2, #0
 8018626:	db01      	blt.n	801862c <_vfiprintf_r+0x120>
 8018628:	9207      	str	r2, [sp, #28]
 801862a:	e004      	b.n	8018636 <_vfiprintf_r+0x12a>
 801862c:	4252      	negs	r2, r2
 801862e:	f043 0302 	orr.w	r3, r3, #2
 8018632:	9207      	str	r2, [sp, #28]
 8018634:	9304      	str	r3, [sp, #16]
 8018636:	f898 3000 	ldrb.w	r3, [r8]
 801863a:	2b2e      	cmp	r3, #46	; 0x2e
 801863c:	d110      	bne.n	8018660 <_vfiprintf_r+0x154>
 801863e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018642:	2b2a      	cmp	r3, #42	; 0x2a
 8018644:	f108 0101 	add.w	r1, r8, #1
 8018648:	d137      	bne.n	80186ba <_vfiprintf_r+0x1ae>
 801864a:	9b03      	ldr	r3, [sp, #12]
 801864c:	1d1a      	adds	r2, r3, #4
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	9203      	str	r2, [sp, #12]
 8018652:	2b00      	cmp	r3, #0
 8018654:	bfb8      	it	lt
 8018656:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801865a:	f108 0802 	add.w	r8, r8, #2
 801865e:	9305      	str	r3, [sp, #20]
 8018660:	4d31      	ldr	r5, [pc, #196]	; (8018728 <_vfiprintf_r+0x21c>)
 8018662:	f898 1000 	ldrb.w	r1, [r8]
 8018666:	2203      	movs	r2, #3
 8018668:	4628      	mov	r0, r5
 801866a:	f7e7 fdc9 	bl	8000200 <memchr>
 801866e:	b140      	cbz	r0, 8018682 <_vfiprintf_r+0x176>
 8018670:	2340      	movs	r3, #64	; 0x40
 8018672:	1b40      	subs	r0, r0, r5
 8018674:	fa03 f000 	lsl.w	r0, r3, r0
 8018678:	9b04      	ldr	r3, [sp, #16]
 801867a:	4303      	orrs	r3, r0
 801867c:	9304      	str	r3, [sp, #16]
 801867e:	f108 0801 	add.w	r8, r8, #1
 8018682:	f898 1000 	ldrb.w	r1, [r8]
 8018686:	4829      	ldr	r0, [pc, #164]	; (801872c <_vfiprintf_r+0x220>)
 8018688:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801868c:	2206      	movs	r2, #6
 801868e:	f108 0701 	add.w	r7, r8, #1
 8018692:	f7e7 fdb5 	bl	8000200 <memchr>
 8018696:	2800      	cmp	r0, #0
 8018698:	d034      	beq.n	8018704 <_vfiprintf_r+0x1f8>
 801869a:	4b25      	ldr	r3, [pc, #148]	; (8018730 <_vfiprintf_r+0x224>)
 801869c:	bb03      	cbnz	r3, 80186e0 <_vfiprintf_r+0x1d4>
 801869e:	9b03      	ldr	r3, [sp, #12]
 80186a0:	3307      	adds	r3, #7
 80186a2:	f023 0307 	bic.w	r3, r3, #7
 80186a6:	3308      	adds	r3, #8
 80186a8:	9303      	str	r3, [sp, #12]
 80186aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186ac:	444b      	add	r3, r9
 80186ae:	9309      	str	r3, [sp, #36]	; 0x24
 80186b0:	e74c      	b.n	801854c <_vfiprintf_r+0x40>
 80186b2:	fb00 3202 	mla	r2, r0, r2, r3
 80186b6:	2101      	movs	r1, #1
 80186b8:	e786      	b.n	80185c8 <_vfiprintf_r+0xbc>
 80186ba:	2300      	movs	r3, #0
 80186bc:	9305      	str	r3, [sp, #20]
 80186be:	4618      	mov	r0, r3
 80186c0:	250a      	movs	r5, #10
 80186c2:	4688      	mov	r8, r1
 80186c4:	3101      	adds	r1, #1
 80186c6:	f898 2000 	ldrb.w	r2, [r8]
 80186ca:	3a30      	subs	r2, #48	; 0x30
 80186cc:	2a09      	cmp	r2, #9
 80186ce:	d903      	bls.n	80186d8 <_vfiprintf_r+0x1cc>
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d0c5      	beq.n	8018660 <_vfiprintf_r+0x154>
 80186d4:	9005      	str	r0, [sp, #20]
 80186d6:	e7c3      	b.n	8018660 <_vfiprintf_r+0x154>
 80186d8:	fb05 2000 	mla	r0, r5, r0, r2
 80186dc:	2301      	movs	r3, #1
 80186de:	e7f0      	b.n	80186c2 <_vfiprintf_r+0x1b6>
 80186e0:	ab03      	add	r3, sp, #12
 80186e2:	9300      	str	r3, [sp, #0]
 80186e4:	4622      	mov	r2, r4
 80186e6:	4b13      	ldr	r3, [pc, #76]	; (8018734 <_vfiprintf_r+0x228>)
 80186e8:	a904      	add	r1, sp, #16
 80186ea:	4630      	mov	r0, r6
 80186ec:	f3af 8000 	nop.w
 80186f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80186f4:	4681      	mov	r9, r0
 80186f6:	d1d8      	bne.n	80186aa <_vfiprintf_r+0x19e>
 80186f8:	89a3      	ldrh	r3, [r4, #12]
 80186fa:	065b      	lsls	r3, r3, #25
 80186fc:	f53f af7d 	bmi.w	80185fa <_vfiprintf_r+0xee>
 8018700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018702:	e77c      	b.n	80185fe <_vfiprintf_r+0xf2>
 8018704:	ab03      	add	r3, sp, #12
 8018706:	9300      	str	r3, [sp, #0]
 8018708:	4622      	mov	r2, r4
 801870a:	4b0a      	ldr	r3, [pc, #40]	; (8018734 <_vfiprintf_r+0x228>)
 801870c:	a904      	add	r1, sp, #16
 801870e:	4630      	mov	r0, r6
 8018710:	f000 f888 	bl	8018824 <_printf_i>
 8018714:	e7ec      	b.n	80186f0 <_vfiprintf_r+0x1e4>
 8018716:	bf00      	nop
 8018718:	0801c024 	.word	0x0801c024
 801871c:	0801c068 	.word	0x0801c068
 8018720:	0801c044 	.word	0x0801c044
 8018724:	0801c004 	.word	0x0801c004
 8018728:	0801c06e 	.word	0x0801c06e
 801872c:	0801c072 	.word	0x0801c072
 8018730:	00000000 	.word	0x00000000
 8018734:	080184e9 	.word	0x080184e9

08018738 <_printf_common>:
 8018738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801873c:	4691      	mov	r9, r2
 801873e:	461f      	mov	r7, r3
 8018740:	688a      	ldr	r2, [r1, #8]
 8018742:	690b      	ldr	r3, [r1, #16]
 8018744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018748:	4293      	cmp	r3, r2
 801874a:	bfb8      	it	lt
 801874c:	4613      	movlt	r3, r2
 801874e:	f8c9 3000 	str.w	r3, [r9]
 8018752:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018756:	4606      	mov	r6, r0
 8018758:	460c      	mov	r4, r1
 801875a:	b112      	cbz	r2, 8018762 <_printf_common+0x2a>
 801875c:	3301      	adds	r3, #1
 801875e:	f8c9 3000 	str.w	r3, [r9]
 8018762:	6823      	ldr	r3, [r4, #0]
 8018764:	0699      	lsls	r1, r3, #26
 8018766:	bf42      	ittt	mi
 8018768:	f8d9 3000 	ldrmi.w	r3, [r9]
 801876c:	3302      	addmi	r3, #2
 801876e:	f8c9 3000 	strmi.w	r3, [r9]
 8018772:	6825      	ldr	r5, [r4, #0]
 8018774:	f015 0506 	ands.w	r5, r5, #6
 8018778:	d107      	bne.n	801878a <_printf_common+0x52>
 801877a:	f104 0a19 	add.w	sl, r4, #25
 801877e:	68e3      	ldr	r3, [r4, #12]
 8018780:	f8d9 2000 	ldr.w	r2, [r9]
 8018784:	1a9b      	subs	r3, r3, r2
 8018786:	429d      	cmp	r5, r3
 8018788:	db29      	blt.n	80187de <_printf_common+0xa6>
 801878a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801878e:	6822      	ldr	r2, [r4, #0]
 8018790:	3300      	adds	r3, #0
 8018792:	bf18      	it	ne
 8018794:	2301      	movne	r3, #1
 8018796:	0692      	lsls	r2, r2, #26
 8018798:	d42e      	bmi.n	80187f8 <_printf_common+0xc0>
 801879a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801879e:	4639      	mov	r1, r7
 80187a0:	4630      	mov	r0, r6
 80187a2:	47c0      	blx	r8
 80187a4:	3001      	adds	r0, #1
 80187a6:	d021      	beq.n	80187ec <_printf_common+0xb4>
 80187a8:	6823      	ldr	r3, [r4, #0]
 80187aa:	68e5      	ldr	r5, [r4, #12]
 80187ac:	f8d9 2000 	ldr.w	r2, [r9]
 80187b0:	f003 0306 	and.w	r3, r3, #6
 80187b4:	2b04      	cmp	r3, #4
 80187b6:	bf08      	it	eq
 80187b8:	1aad      	subeq	r5, r5, r2
 80187ba:	68a3      	ldr	r3, [r4, #8]
 80187bc:	6922      	ldr	r2, [r4, #16]
 80187be:	bf0c      	ite	eq
 80187c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80187c4:	2500      	movne	r5, #0
 80187c6:	4293      	cmp	r3, r2
 80187c8:	bfc4      	itt	gt
 80187ca:	1a9b      	subgt	r3, r3, r2
 80187cc:	18ed      	addgt	r5, r5, r3
 80187ce:	f04f 0900 	mov.w	r9, #0
 80187d2:	341a      	adds	r4, #26
 80187d4:	454d      	cmp	r5, r9
 80187d6:	d11b      	bne.n	8018810 <_printf_common+0xd8>
 80187d8:	2000      	movs	r0, #0
 80187da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187de:	2301      	movs	r3, #1
 80187e0:	4652      	mov	r2, sl
 80187e2:	4639      	mov	r1, r7
 80187e4:	4630      	mov	r0, r6
 80187e6:	47c0      	blx	r8
 80187e8:	3001      	adds	r0, #1
 80187ea:	d103      	bne.n	80187f4 <_printf_common+0xbc>
 80187ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80187f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187f4:	3501      	adds	r5, #1
 80187f6:	e7c2      	b.n	801877e <_printf_common+0x46>
 80187f8:	18e1      	adds	r1, r4, r3
 80187fa:	1c5a      	adds	r2, r3, #1
 80187fc:	2030      	movs	r0, #48	; 0x30
 80187fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018802:	4422      	add	r2, r4
 8018804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801880c:	3302      	adds	r3, #2
 801880e:	e7c4      	b.n	801879a <_printf_common+0x62>
 8018810:	2301      	movs	r3, #1
 8018812:	4622      	mov	r2, r4
 8018814:	4639      	mov	r1, r7
 8018816:	4630      	mov	r0, r6
 8018818:	47c0      	blx	r8
 801881a:	3001      	adds	r0, #1
 801881c:	d0e6      	beq.n	80187ec <_printf_common+0xb4>
 801881e:	f109 0901 	add.w	r9, r9, #1
 8018822:	e7d7      	b.n	80187d4 <_printf_common+0x9c>

08018824 <_printf_i>:
 8018824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018828:	4617      	mov	r7, r2
 801882a:	7e0a      	ldrb	r2, [r1, #24]
 801882c:	b085      	sub	sp, #20
 801882e:	2a6e      	cmp	r2, #110	; 0x6e
 8018830:	4698      	mov	r8, r3
 8018832:	4606      	mov	r6, r0
 8018834:	460c      	mov	r4, r1
 8018836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018838:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801883c:	f000 80bc 	beq.w	80189b8 <_printf_i+0x194>
 8018840:	d81a      	bhi.n	8018878 <_printf_i+0x54>
 8018842:	2a63      	cmp	r2, #99	; 0x63
 8018844:	d02e      	beq.n	80188a4 <_printf_i+0x80>
 8018846:	d80a      	bhi.n	801885e <_printf_i+0x3a>
 8018848:	2a00      	cmp	r2, #0
 801884a:	f000 80c8 	beq.w	80189de <_printf_i+0x1ba>
 801884e:	2a58      	cmp	r2, #88	; 0x58
 8018850:	f000 808a 	beq.w	8018968 <_printf_i+0x144>
 8018854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018858:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 801885c:	e02a      	b.n	80188b4 <_printf_i+0x90>
 801885e:	2a64      	cmp	r2, #100	; 0x64
 8018860:	d001      	beq.n	8018866 <_printf_i+0x42>
 8018862:	2a69      	cmp	r2, #105	; 0x69
 8018864:	d1f6      	bne.n	8018854 <_printf_i+0x30>
 8018866:	6821      	ldr	r1, [r4, #0]
 8018868:	681a      	ldr	r2, [r3, #0]
 801886a:	f011 0f80 	tst.w	r1, #128	; 0x80
 801886e:	d023      	beq.n	80188b8 <_printf_i+0x94>
 8018870:	1d11      	adds	r1, r2, #4
 8018872:	6019      	str	r1, [r3, #0]
 8018874:	6813      	ldr	r3, [r2, #0]
 8018876:	e027      	b.n	80188c8 <_printf_i+0xa4>
 8018878:	2a73      	cmp	r2, #115	; 0x73
 801887a:	f000 80b4 	beq.w	80189e6 <_printf_i+0x1c2>
 801887e:	d808      	bhi.n	8018892 <_printf_i+0x6e>
 8018880:	2a6f      	cmp	r2, #111	; 0x6f
 8018882:	d02a      	beq.n	80188da <_printf_i+0xb6>
 8018884:	2a70      	cmp	r2, #112	; 0x70
 8018886:	d1e5      	bne.n	8018854 <_printf_i+0x30>
 8018888:	680a      	ldr	r2, [r1, #0]
 801888a:	f042 0220 	orr.w	r2, r2, #32
 801888e:	600a      	str	r2, [r1, #0]
 8018890:	e003      	b.n	801889a <_printf_i+0x76>
 8018892:	2a75      	cmp	r2, #117	; 0x75
 8018894:	d021      	beq.n	80188da <_printf_i+0xb6>
 8018896:	2a78      	cmp	r2, #120	; 0x78
 8018898:	d1dc      	bne.n	8018854 <_printf_i+0x30>
 801889a:	2278      	movs	r2, #120	; 0x78
 801889c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80188a0:	496e      	ldr	r1, [pc, #440]	; (8018a5c <_printf_i+0x238>)
 80188a2:	e064      	b.n	801896e <_printf_i+0x14a>
 80188a4:	681a      	ldr	r2, [r3, #0]
 80188a6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80188aa:	1d11      	adds	r1, r2, #4
 80188ac:	6019      	str	r1, [r3, #0]
 80188ae:	6813      	ldr	r3, [r2, #0]
 80188b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80188b4:	2301      	movs	r3, #1
 80188b6:	e0a3      	b.n	8018a00 <_printf_i+0x1dc>
 80188b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80188bc:	f102 0104 	add.w	r1, r2, #4
 80188c0:	6019      	str	r1, [r3, #0]
 80188c2:	d0d7      	beq.n	8018874 <_printf_i+0x50>
 80188c4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	da03      	bge.n	80188d4 <_printf_i+0xb0>
 80188cc:	222d      	movs	r2, #45	; 0x2d
 80188ce:	425b      	negs	r3, r3
 80188d0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80188d4:	4962      	ldr	r1, [pc, #392]	; (8018a60 <_printf_i+0x23c>)
 80188d6:	220a      	movs	r2, #10
 80188d8:	e017      	b.n	801890a <_printf_i+0xe6>
 80188da:	6820      	ldr	r0, [r4, #0]
 80188dc:	6819      	ldr	r1, [r3, #0]
 80188de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80188e2:	d003      	beq.n	80188ec <_printf_i+0xc8>
 80188e4:	1d08      	adds	r0, r1, #4
 80188e6:	6018      	str	r0, [r3, #0]
 80188e8:	680b      	ldr	r3, [r1, #0]
 80188ea:	e006      	b.n	80188fa <_printf_i+0xd6>
 80188ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80188f0:	f101 0004 	add.w	r0, r1, #4
 80188f4:	6018      	str	r0, [r3, #0]
 80188f6:	d0f7      	beq.n	80188e8 <_printf_i+0xc4>
 80188f8:	880b      	ldrh	r3, [r1, #0]
 80188fa:	4959      	ldr	r1, [pc, #356]	; (8018a60 <_printf_i+0x23c>)
 80188fc:	2a6f      	cmp	r2, #111	; 0x6f
 80188fe:	bf14      	ite	ne
 8018900:	220a      	movne	r2, #10
 8018902:	2208      	moveq	r2, #8
 8018904:	2000      	movs	r0, #0
 8018906:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801890a:	6865      	ldr	r5, [r4, #4]
 801890c:	60a5      	str	r5, [r4, #8]
 801890e:	2d00      	cmp	r5, #0
 8018910:	f2c0 809c 	blt.w	8018a4c <_printf_i+0x228>
 8018914:	6820      	ldr	r0, [r4, #0]
 8018916:	f020 0004 	bic.w	r0, r0, #4
 801891a:	6020      	str	r0, [r4, #0]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d13f      	bne.n	80189a0 <_printf_i+0x17c>
 8018920:	2d00      	cmp	r5, #0
 8018922:	f040 8095 	bne.w	8018a50 <_printf_i+0x22c>
 8018926:	4675      	mov	r5, lr
 8018928:	2a08      	cmp	r2, #8
 801892a:	d10b      	bne.n	8018944 <_printf_i+0x120>
 801892c:	6823      	ldr	r3, [r4, #0]
 801892e:	07da      	lsls	r2, r3, #31
 8018930:	d508      	bpl.n	8018944 <_printf_i+0x120>
 8018932:	6923      	ldr	r3, [r4, #16]
 8018934:	6862      	ldr	r2, [r4, #4]
 8018936:	429a      	cmp	r2, r3
 8018938:	bfde      	ittt	le
 801893a:	2330      	movle	r3, #48	; 0x30
 801893c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018940:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018944:	ebae 0305 	sub.w	r3, lr, r5
 8018948:	6123      	str	r3, [r4, #16]
 801894a:	f8cd 8000 	str.w	r8, [sp]
 801894e:	463b      	mov	r3, r7
 8018950:	aa03      	add	r2, sp, #12
 8018952:	4621      	mov	r1, r4
 8018954:	4630      	mov	r0, r6
 8018956:	f7ff feef 	bl	8018738 <_printf_common>
 801895a:	3001      	adds	r0, #1
 801895c:	d155      	bne.n	8018a0a <_printf_i+0x1e6>
 801895e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018962:	b005      	add	sp, #20
 8018964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018968:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801896c:	493c      	ldr	r1, [pc, #240]	; (8018a60 <_printf_i+0x23c>)
 801896e:	6822      	ldr	r2, [r4, #0]
 8018970:	6818      	ldr	r0, [r3, #0]
 8018972:	f012 0f80 	tst.w	r2, #128	; 0x80
 8018976:	f100 0504 	add.w	r5, r0, #4
 801897a:	601d      	str	r5, [r3, #0]
 801897c:	d001      	beq.n	8018982 <_printf_i+0x15e>
 801897e:	6803      	ldr	r3, [r0, #0]
 8018980:	e002      	b.n	8018988 <_printf_i+0x164>
 8018982:	0655      	lsls	r5, r2, #25
 8018984:	d5fb      	bpl.n	801897e <_printf_i+0x15a>
 8018986:	8803      	ldrh	r3, [r0, #0]
 8018988:	07d0      	lsls	r0, r2, #31
 801898a:	bf44      	itt	mi
 801898c:	f042 0220 	orrmi.w	r2, r2, #32
 8018990:	6022      	strmi	r2, [r4, #0]
 8018992:	b91b      	cbnz	r3, 801899c <_printf_i+0x178>
 8018994:	6822      	ldr	r2, [r4, #0]
 8018996:	f022 0220 	bic.w	r2, r2, #32
 801899a:	6022      	str	r2, [r4, #0]
 801899c:	2210      	movs	r2, #16
 801899e:	e7b1      	b.n	8018904 <_printf_i+0xe0>
 80189a0:	4675      	mov	r5, lr
 80189a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80189a6:	fb02 3310 	mls	r3, r2, r0, r3
 80189aa:	5ccb      	ldrb	r3, [r1, r3]
 80189ac:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80189b0:	4603      	mov	r3, r0
 80189b2:	2800      	cmp	r0, #0
 80189b4:	d1f5      	bne.n	80189a2 <_printf_i+0x17e>
 80189b6:	e7b7      	b.n	8018928 <_printf_i+0x104>
 80189b8:	6808      	ldr	r0, [r1, #0]
 80189ba:	681a      	ldr	r2, [r3, #0]
 80189bc:	6949      	ldr	r1, [r1, #20]
 80189be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80189c2:	d004      	beq.n	80189ce <_printf_i+0x1aa>
 80189c4:	1d10      	adds	r0, r2, #4
 80189c6:	6018      	str	r0, [r3, #0]
 80189c8:	6813      	ldr	r3, [r2, #0]
 80189ca:	6019      	str	r1, [r3, #0]
 80189cc:	e007      	b.n	80189de <_printf_i+0x1ba>
 80189ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80189d2:	f102 0004 	add.w	r0, r2, #4
 80189d6:	6018      	str	r0, [r3, #0]
 80189d8:	6813      	ldr	r3, [r2, #0]
 80189da:	d0f6      	beq.n	80189ca <_printf_i+0x1a6>
 80189dc:	8019      	strh	r1, [r3, #0]
 80189de:	2300      	movs	r3, #0
 80189e0:	6123      	str	r3, [r4, #16]
 80189e2:	4675      	mov	r5, lr
 80189e4:	e7b1      	b.n	801894a <_printf_i+0x126>
 80189e6:	681a      	ldr	r2, [r3, #0]
 80189e8:	1d11      	adds	r1, r2, #4
 80189ea:	6019      	str	r1, [r3, #0]
 80189ec:	6815      	ldr	r5, [r2, #0]
 80189ee:	6862      	ldr	r2, [r4, #4]
 80189f0:	2100      	movs	r1, #0
 80189f2:	4628      	mov	r0, r5
 80189f4:	f7e7 fc04 	bl	8000200 <memchr>
 80189f8:	b108      	cbz	r0, 80189fe <_printf_i+0x1da>
 80189fa:	1b40      	subs	r0, r0, r5
 80189fc:	6060      	str	r0, [r4, #4]
 80189fe:	6863      	ldr	r3, [r4, #4]
 8018a00:	6123      	str	r3, [r4, #16]
 8018a02:	2300      	movs	r3, #0
 8018a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a08:	e79f      	b.n	801894a <_printf_i+0x126>
 8018a0a:	6923      	ldr	r3, [r4, #16]
 8018a0c:	462a      	mov	r2, r5
 8018a0e:	4639      	mov	r1, r7
 8018a10:	4630      	mov	r0, r6
 8018a12:	47c0      	blx	r8
 8018a14:	3001      	adds	r0, #1
 8018a16:	d0a2      	beq.n	801895e <_printf_i+0x13a>
 8018a18:	6823      	ldr	r3, [r4, #0]
 8018a1a:	079b      	lsls	r3, r3, #30
 8018a1c:	d507      	bpl.n	8018a2e <_printf_i+0x20a>
 8018a1e:	2500      	movs	r5, #0
 8018a20:	f104 0919 	add.w	r9, r4, #25
 8018a24:	68e3      	ldr	r3, [r4, #12]
 8018a26:	9a03      	ldr	r2, [sp, #12]
 8018a28:	1a9b      	subs	r3, r3, r2
 8018a2a:	429d      	cmp	r5, r3
 8018a2c:	db05      	blt.n	8018a3a <_printf_i+0x216>
 8018a2e:	68e0      	ldr	r0, [r4, #12]
 8018a30:	9b03      	ldr	r3, [sp, #12]
 8018a32:	4298      	cmp	r0, r3
 8018a34:	bfb8      	it	lt
 8018a36:	4618      	movlt	r0, r3
 8018a38:	e793      	b.n	8018962 <_printf_i+0x13e>
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	464a      	mov	r2, r9
 8018a3e:	4639      	mov	r1, r7
 8018a40:	4630      	mov	r0, r6
 8018a42:	47c0      	blx	r8
 8018a44:	3001      	adds	r0, #1
 8018a46:	d08a      	beq.n	801895e <_printf_i+0x13a>
 8018a48:	3501      	adds	r5, #1
 8018a4a:	e7eb      	b.n	8018a24 <_printf_i+0x200>
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d1a7      	bne.n	80189a0 <_printf_i+0x17c>
 8018a50:	780b      	ldrb	r3, [r1, #0]
 8018a52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018a56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018a5a:	e765      	b.n	8018928 <_printf_i+0x104>
 8018a5c:	0801c08a 	.word	0x0801c08a
 8018a60:	0801c079 	.word	0x0801c079

08018a64 <_sbrk_r>:
 8018a64:	b538      	push	{r3, r4, r5, lr}
 8018a66:	4c06      	ldr	r4, [pc, #24]	; (8018a80 <_sbrk_r+0x1c>)
 8018a68:	2300      	movs	r3, #0
 8018a6a:	4605      	mov	r5, r0
 8018a6c:	4608      	mov	r0, r1
 8018a6e:	6023      	str	r3, [r4, #0]
 8018a70:	f7e8 f9b8 	bl	8000de4 <_sbrk>
 8018a74:	1c43      	adds	r3, r0, #1
 8018a76:	d102      	bne.n	8018a7e <_sbrk_r+0x1a>
 8018a78:	6823      	ldr	r3, [r4, #0]
 8018a7a:	b103      	cbz	r3, 8018a7e <_sbrk_r+0x1a>
 8018a7c:	602b      	str	r3, [r5, #0]
 8018a7e:	bd38      	pop	{r3, r4, r5, pc}
 8018a80:	20020be8 	.word	0x20020be8

08018a84 <__sread>:
 8018a84:	b510      	push	{r4, lr}
 8018a86:	460c      	mov	r4, r1
 8018a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a8c:	f000 f896 	bl	8018bbc <_read_r>
 8018a90:	2800      	cmp	r0, #0
 8018a92:	bfab      	itete	ge
 8018a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018a96:	89a3      	ldrhlt	r3, [r4, #12]
 8018a98:	181b      	addge	r3, r3, r0
 8018a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018a9e:	bfac      	ite	ge
 8018aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8018aa2:	81a3      	strhlt	r3, [r4, #12]
 8018aa4:	bd10      	pop	{r4, pc}

08018aa6 <__swrite>:
 8018aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018aaa:	461f      	mov	r7, r3
 8018aac:	898b      	ldrh	r3, [r1, #12]
 8018aae:	05db      	lsls	r3, r3, #23
 8018ab0:	4605      	mov	r5, r0
 8018ab2:	460c      	mov	r4, r1
 8018ab4:	4616      	mov	r6, r2
 8018ab6:	d505      	bpl.n	8018ac4 <__swrite+0x1e>
 8018ab8:	2302      	movs	r3, #2
 8018aba:	2200      	movs	r2, #0
 8018abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ac0:	f000 f868 	bl	8018b94 <_lseek_r>
 8018ac4:	89a3      	ldrh	r3, [r4, #12]
 8018ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018ace:	81a3      	strh	r3, [r4, #12]
 8018ad0:	4632      	mov	r2, r6
 8018ad2:	463b      	mov	r3, r7
 8018ad4:	4628      	mov	r0, r5
 8018ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ada:	f000 b817 	b.w	8018b0c <_write_r>

08018ade <__sseek>:
 8018ade:	b510      	push	{r4, lr}
 8018ae0:	460c      	mov	r4, r1
 8018ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ae6:	f000 f855 	bl	8018b94 <_lseek_r>
 8018aea:	1c43      	adds	r3, r0, #1
 8018aec:	89a3      	ldrh	r3, [r4, #12]
 8018aee:	bf15      	itete	ne
 8018af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8018af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018afa:	81a3      	strheq	r3, [r4, #12]
 8018afc:	bf18      	it	ne
 8018afe:	81a3      	strhne	r3, [r4, #12]
 8018b00:	bd10      	pop	{r4, pc}

08018b02 <__sclose>:
 8018b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b06:	f000 b813 	b.w	8018b30 <_close_r>
	...

08018b0c <_write_r>:
 8018b0c:	b538      	push	{r3, r4, r5, lr}
 8018b0e:	4c07      	ldr	r4, [pc, #28]	; (8018b2c <_write_r+0x20>)
 8018b10:	4605      	mov	r5, r0
 8018b12:	4608      	mov	r0, r1
 8018b14:	4611      	mov	r1, r2
 8018b16:	2200      	movs	r2, #0
 8018b18:	6022      	str	r2, [r4, #0]
 8018b1a:	461a      	mov	r2, r3
 8018b1c:	f7e8 f945 	bl	8000daa <_write>
 8018b20:	1c43      	adds	r3, r0, #1
 8018b22:	d102      	bne.n	8018b2a <_write_r+0x1e>
 8018b24:	6823      	ldr	r3, [r4, #0]
 8018b26:	b103      	cbz	r3, 8018b2a <_write_r+0x1e>
 8018b28:	602b      	str	r3, [r5, #0]
 8018b2a:	bd38      	pop	{r3, r4, r5, pc}
 8018b2c:	20020be8 	.word	0x20020be8

08018b30 <_close_r>:
 8018b30:	b538      	push	{r3, r4, r5, lr}
 8018b32:	4c06      	ldr	r4, [pc, #24]	; (8018b4c <_close_r+0x1c>)
 8018b34:	2300      	movs	r3, #0
 8018b36:	4605      	mov	r5, r0
 8018b38:	4608      	mov	r0, r1
 8018b3a:	6023      	str	r3, [r4, #0]
 8018b3c:	f7e8 f980 	bl	8000e40 <_close>
 8018b40:	1c43      	adds	r3, r0, #1
 8018b42:	d102      	bne.n	8018b4a <_close_r+0x1a>
 8018b44:	6823      	ldr	r3, [r4, #0]
 8018b46:	b103      	cbz	r3, 8018b4a <_close_r+0x1a>
 8018b48:	602b      	str	r3, [r5, #0]
 8018b4a:	bd38      	pop	{r3, r4, r5, pc}
 8018b4c:	20020be8 	.word	0x20020be8

08018b50 <_fstat_r>:
 8018b50:	b538      	push	{r3, r4, r5, lr}
 8018b52:	4c07      	ldr	r4, [pc, #28]	; (8018b70 <_fstat_r+0x20>)
 8018b54:	2300      	movs	r3, #0
 8018b56:	4605      	mov	r5, r0
 8018b58:	4608      	mov	r0, r1
 8018b5a:	4611      	mov	r1, r2
 8018b5c:	6023      	str	r3, [r4, #0]
 8018b5e:	f7e8 f97b 	bl	8000e58 <_fstat>
 8018b62:	1c43      	adds	r3, r0, #1
 8018b64:	d102      	bne.n	8018b6c <_fstat_r+0x1c>
 8018b66:	6823      	ldr	r3, [r4, #0]
 8018b68:	b103      	cbz	r3, 8018b6c <_fstat_r+0x1c>
 8018b6a:	602b      	str	r3, [r5, #0]
 8018b6c:	bd38      	pop	{r3, r4, r5, pc}
 8018b6e:	bf00      	nop
 8018b70:	20020be8 	.word	0x20020be8

08018b74 <_isatty_r>:
 8018b74:	b538      	push	{r3, r4, r5, lr}
 8018b76:	4c06      	ldr	r4, [pc, #24]	; (8018b90 <_isatty_r+0x1c>)
 8018b78:	2300      	movs	r3, #0
 8018b7a:	4605      	mov	r5, r0
 8018b7c:	4608      	mov	r0, r1
 8018b7e:	6023      	str	r3, [r4, #0]
 8018b80:	f7e8 f97a 	bl	8000e78 <_isatty>
 8018b84:	1c43      	adds	r3, r0, #1
 8018b86:	d102      	bne.n	8018b8e <_isatty_r+0x1a>
 8018b88:	6823      	ldr	r3, [r4, #0]
 8018b8a:	b103      	cbz	r3, 8018b8e <_isatty_r+0x1a>
 8018b8c:	602b      	str	r3, [r5, #0]
 8018b8e:	bd38      	pop	{r3, r4, r5, pc}
 8018b90:	20020be8 	.word	0x20020be8

08018b94 <_lseek_r>:
 8018b94:	b538      	push	{r3, r4, r5, lr}
 8018b96:	4c07      	ldr	r4, [pc, #28]	; (8018bb4 <_lseek_r+0x20>)
 8018b98:	4605      	mov	r5, r0
 8018b9a:	4608      	mov	r0, r1
 8018b9c:	4611      	mov	r1, r2
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	6022      	str	r2, [r4, #0]
 8018ba2:	461a      	mov	r2, r3
 8018ba4:	f7e8 f973 	bl	8000e8e <_lseek>
 8018ba8:	1c43      	adds	r3, r0, #1
 8018baa:	d102      	bne.n	8018bb2 <_lseek_r+0x1e>
 8018bac:	6823      	ldr	r3, [r4, #0]
 8018bae:	b103      	cbz	r3, 8018bb2 <_lseek_r+0x1e>
 8018bb0:	602b      	str	r3, [r5, #0]
 8018bb2:	bd38      	pop	{r3, r4, r5, pc}
 8018bb4:	20020be8 	.word	0x20020be8

08018bb8 <__malloc_lock>:
 8018bb8:	4770      	bx	lr

08018bba <__malloc_unlock>:
 8018bba:	4770      	bx	lr

08018bbc <_read_r>:
 8018bbc:	b538      	push	{r3, r4, r5, lr}
 8018bbe:	4c07      	ldr	r4, [pc, #28]	; (8018bdc <_read_r+0x20>)
 8018bc0:	4605      	mov	r5, r0
 8018bc2:	4608      	mov	r0, r1
 8018bc4:	4611      	mov	r1, r2
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	6022      	str	r2, [r4, #0]
 8018bca:	461a      	mov	r2, r3
 8018bcc:	f7e8 f8d0 	bl	8000d70 <_read>
 8018bd0:	1c43      	adds	r3, r0, #1
 8018bd2:	d102      	bne.n	8018bda <_read_r+0x1e>
 8018bd4:	6823      	ldr	r3, [r4, #0]
 8018bd6:	b103      	cbz	r3, 8018bda <_read_r+0x1e>
 8018bd8:	602b      	str	r3, [r5, #0]
 8018bda:	bd38      	pop	{r3, r4, r5, pc}
 8018bdc:	20020be8 	.word	0x20020be8

08018be0 <_init>:
 8018be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018be2:	bf00      	nop
 8018be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018be6:	bc08      	pop	{r3}
 8018be8:	469e      	mov	lr, r3
 8018bea:	4770      	bx	lr

08018bec <_fini>:
 8018bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bee:	bf00      	nop
 8018bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bf2:	bc08      	pop	{r3}
 8018bf4:	469e      	mov	lr, r3
 8018bf6:	4770      	bx	lr
